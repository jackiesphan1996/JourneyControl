// Licence file C:\Users\hoang.phan\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace JourneyControl.Infrastructure.Persistence.Entities.WMSDB
{
    #region POCO classes

    // Accounting_BillingCheck
    public class AccountingBillingCheck
    {
        public string StoreDescription { get; set; } // StoreDescription (length: 250)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int BillingId { get; set; } // BillingID
        public DateTime BillingFromDate { get; set; } // BillingFromDate
        public DateTime BillingToDate { get; set; } // BillingToDate
        public bool Confirmed { get; set; } // Confirmed
        public DateTime? ReportDate { get; set; } // ReportDate
        public int? BeginC { get; set; } // BeginC
        public int? InC { get; set; } // InC
        public int? OutC { get; set; } // OutC
        public int? CloseC { get; set; } // CloseC
        public float? BeginW { get; set; } // BeginW
        public float? InW { get; set; } // InW
        public float? OutW { get; set; } // OutW
        public float? CloseW { get; set; } // CloseW
        public int? BeginP { get; set; } // BeginP
        public int? InP { get; set; } // InP
        public int? OutP { get; set; } // OutP
        public int? CloseP { get; set; } // CloseP
        public DateTime BillingDate { get; set; } // BillingDate
        public string BillingDetailBreakdownRemark { get; set; } // BillingDetailBreakdownRemark (length: 1000)
        public int? StoreId { get; set; } // StoreID
    }

    // Accounting_BillingContractDetails
    public class AccountingBillingContractDetail
    {
        public string ContractNbr { get; set; } // contractNbr (length: 30)
        public DateTime? ContractDate { get; set; } // contractDate
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime? ToDate { get; set; } // ToDate
        public string CustId { get; set; } // CustID (length: 15)
        public string Name { get; set; } // Name (length: 30)
        public string ServiceId { get; set; } // ServiceID (length: 20)
        public int CustomerWms { get; set; } // Customer_WMS
        public string ServiceName { get; set; } // ServiceName (length: 60)
        public string Status { get; set; } // Status (length: 1)
    }

    // Accounting_BillingLast30days
    public class AccountingBillingLast30Days
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 50)
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity
        public DateTime BillingToDate { get; set; } // BillingToDate
        public int BillingId { get; set; } // BillingID
        public DateTime BillingFromDate { get; set; } // BillingFromDate
    }

    // Accounting_CheckEmployeePayroll
    public class AccountingCheckEmployeePayroll
    {
        public int EmployeeId { get; set; } // EmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public DateTime PayrollDate { get; set; } // PayrollDate
        public string TimeWork { get; set; } // TimeWork (length: 100)
        public byte? Noodles { get; set; } // Noodles
        public string PayrollRemark { get; set; } // PayrollRemark (length: 255)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public DateTime? OrderDate { get; set; } // OrderDate
        public float? ProductionQuantity { get; set; } // ProductionQuantity
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public int? Percentage { get; set; } // Percentage
        public string Remark { get; set; } // Remark (length: 50)
        public int? Ctns { get; set; } // Ctns
        public decimal? Weight { get; set; } // Weight
        public int? Pallets { get; set; } // Pallets
        public float Ots { get; set; } // OTS
        public float Otn { get; set; } // OTN
        public float Oth { get; set; } // OTH
        public bool Sick { get; set; } // Sick
        public bool Leave { get; set; } // Leave
        public bool Haft { get; set; } // Haft
        public bool Off { get; set; } // Off
        public bool SunHol { get; set; } // SunHol
        public string GuardRemark { get; set; } // GuardRemark (length: 50)
        public byte? Milk { get; set; } // Milk
        public bool LunchCompensate { get; set; } // LunchCompensate
        public string BenefitUser { get; set; } // BenefitUser (length: 50)
        public bool? NightShift { get; set; } // NightShift
        public bool? HolidayDay { get; set; } // HolidayDay
    }

    // Accounting_Contracts
    public class AccountingContract
    {
        public string ContractNbr { get; set; } // ContractNbr (length: 30)
        public string CustId { get; set; } // CustID (length: 15)
        public string CustomerName { get; set; } // CustomerName (length: 4000)
        public string ServiceId { get; set; } // ServiceID (length: 20)
        public string ServiceName { get; set; } // serviceName (length: 4000)
        public string ServiceNameVn { get; set; } // serviceNameVN (length: 4000)
        public string Uom { get; set; } // UOM (length: 4000)
        public double FrQty { get; set; } // FrQty
        public double? ToQty { get; set; } // ToQty
        public double? Price { get; set; } // Price
        public string CuryId { get; set; } // CuryID (length: 10)
        public DateTime FromDate { get; set; } // FromDate
        public DateTime ToDate { get; set; } // ToDate
        public string LupdUser { get; set; } // Lupd_User (length: 10)
        public DateTime? LUpdDateTime { get; set; } // LUpd_DateTime
        public string Status { get; set; } // Status (length: 1)
        public DateTime? ReviewDate { get; set; } // ReviewDate
    }

    // Accounting_CustomerList
    public class AccountingCustomerList
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int CustomerMainId { get; set; } // CustomerMainID
        public string CustomerMainNumber { get; set; } // CustomerMainNumber (length: 50)
        public string CustomerMainName { get; set; } // CustomerMainName (length: 80)
        public int? StoreId { get; set; } // StoreID
    }

    // Accounting_CustomerOverTimeCheck
    public class AccountingCustomerOverTimeCheck
    {
        public string OrderType { get; set; } // OrderType (length: 2)
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 50)
        public DateTime? OrderDate { get; set; } // OrderDate
        public int? TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
        public double? TotalUnits { get; set; } // TotalUnits
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string InternalRemark { get; set; } // InternalRemark (length: 300)
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime ToDate { get; set; } // ToDate
        public string DayOfWeek { get; set; } // DayOfWeek (length: 9)
        public string TimeType { get; set; } // TimeType (length: 8)
        public string ContractDetailRemark { get; set; } // ContractDetailRemark (length: 50)
        public string StoreDescription { get; set; } // StoreDescription (length: 250)
    }

    // Accounting_Employees
    public class AccountingEmployee
    {
        public int EmployeeId { get; set; } // EmployeeID
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public DateTime? DateOfBirth { get; set; } // DateOfBirth
        public short? Status { get; set; } // Status
        public string Education { get; set; } // Education (length: 20)
        public string Position { get; set; } // Position (length: 50)
        public DateTime? DateOfEntry { get; set; } // DateOfEntry
        public string Address { get; set; } // Address (length: 250)
        public string Phone { get; set; } // Phone (length: 50)
        public string Mobile { get; set; } // Mobile (length: 50)
        public string IdCardNumber { get; set; } // IDCardNumber (length: 50)
        public string Email { get; set; } // Email (length: 50)
        public string Photograph { get; set; } // Photograph (length: 50)
        public bool Active { get; set; } // Active
        public bool ContractPermanent { get; set; } // ContractPermanent
        public int ManagementLevel { get; set; } // ManagementLevel
        public DateTime? ContractDate { get; set; } // ContractDate
        public int PositionId { get; set; } // PositionID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string BikeNumber { get; set; } // BikeNumber (length: 50)
        public bool BikeUse { get; set; } // BikeUse
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string InOutCardNumber { get; set; } // InOutCardNumber (length: 5)
        public byte? ShiftId { get; set; } // ShiftID
        public byte? Grade { get; set; } // Grade
        public byte? Department { get; set; } // Department
        public string AddressNow { get; set; } // AddressNow (length: 250)
        public bool PerformanceStatus { get; set; } // PerformanceStatus
        public DateTime? IdCardIssueDate { get; set; } // IDCardIssueDate
        public int? StoreId { get; set; } // StoreID
        public bool Sex { get; set; } // Sex
        public byte[] Ts { get; set; } // TS
        public string IdCardIssuePlace { get; set; } // IDCardIssuePlace (length: 50)
        public bool MonthlyAdvanceRequired { get; set; } // MonthlyAdvanceRequired
        public int? MonthlyAdvanceAmount { get; set; } // MonthlyAdvanceAmount
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public string PersonnalTaxCode { get; set; } // PersonnalTaxCode (length: 25)
        public string BankAccountNumber { get; set; } // BankAccountNumber (length: 25)
        public DateTime? ContractDateFirst { get; set; } // ContractDateFirst
        public string Remark { get; set; } // Remark (length: 100)
        public string LunchPlace { get; set; } // LunchPlace (length: 2)
        public int? ReportTo { get; set; } // ReportTo
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? LeaveDate { get; set; } // LeaveDate
        public bool? IsLeave { get; set; } // IsLeave
    }

    // Accounting_EmployeeWorkingCheckers
    public class AccountingEmployeeWorkingChecker
    {
        public DateTime? OrderDate { get; set; } // OrderDate
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public string Remark { get; set; } // Remark (length: 50)
        public double? TotalPallets { get; set; } // TotalPallets
        public int EmployeeId { get; set; } // EmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string Position { get; set; } // Position (length: 50)
        public double? TotalWeight { get; set; } // TotalWeight
        public int? QtyOfSizes { get; set; } // QtyOfSizes
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public decimal? OriginalWeight { get; set; } // OriginalWeight
        public int? Ctns { get; set; } // Ctns
    }

    // Accounting_EmployeeWorkingMonthly
    public class AccountingEmployeeWorkingMonthly
    {
        public int EmployeeId { get; set; } // EmployeeID
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public DateTime WorkDate { get; set; } // WorkDate
        public int WorkDefinitionId { get; set; } // WorkDefinitionID
        public string WorkDefinitionNumber { get; set; } // WorkDefinitionNumber (length: 10)
        public string JobName { get; set; } // JobName (length: 200)
        public float? Quantity { get; set; } // Quantity
    }

    // Accounting_GoodsReceived
    public class AccountingGoodsReceived
    {
        public int PurchasingOrderId { get; set; } // PurchasingOrderID
        public string PurchasingOrderNumber { get; set; } // PurchasingOrderNumber (length: 16)
        public int ReceivedPartId { get; set; } // ReceivedPartID
        public string ReceivedPartNumber { get; set; } // ReceivedPartNumber (length: 16)
        public DateTime DeliveryDate { get; set; } // DeliveryDate
        public string PurchasingRemark { get; set; } // PurchasingRemark (length: 200)
        public string PropertyId { get; set; } // PropertyID (length: 9)
        public int? DeliveryQuantity { get; set; } // DeliveryQuantity
        public float? UnitPriceVnd { get; set; } // UnitPriceVND
        public string ItemRemark { get; set; } // ItemRemark (length: 300)
        public bool OrderConfirmed { get; set; } // OrderConfirmed
    }

    // Accounting_OrderDetails
    public class AccountingOrderDetail
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? OrderDate { get; set; } // OrderDate
        public int? Ctns { get; set; } // Ctns
        public decimal? Weight { get; set; } // Weight
        public int? Pallets { get; set; } // Pallets
    }

    // Accounting_PalletInventory
    public class AccountingPalletInventory
    {
        public string RoomId { get; set; } // RoomID (length: 1)
        public short Aisle { get; set; } // Aisle
        public short Bay { get; set; } // Bay
        public int? QtyLocations { get; set; } // QtyLocations
        public short? MaxHigh { get; set; } // MaxHigh
        public short Used { get; set; } // Used
    }

    // Accounting_PayrollMonthlyDetailFull
    public class AccountingPayrollMonthlyDetailFull
    {
        public int PayRollMonthlyId { get; set; } // PayRollMonthlyID
        public int? PayRollMonthId { get; set; } // PayRollMonthID
        public int EmployeeId { get; set; } // EmployeeID
        public bool? ContractPermanent { get; set; } // ContractPermanent
        public float? WorkingDays { get; set; } // WorkingDays
        public float? WorkingDayNightShift { get; set; } // WorkingDayNightShift
        public float? Ots { get; set; } // OTS
        public float? Otn { get; set; } // OTN
        public float? Oth { get; set; } // OTH
        public float? Sick { get; set; } // Sick
        public float? Leave { get; set; } // Leave
        public float? Haft { get; set; } // Haft
        public float? Off { get; set; } // Off
        public string User { get; set; } // User (length: 50)
        public string Abc { get; set; } // ABC (length: 2)
        public float Performance { get; set; } // Performance
        public float PerformanceAverage { get; set; } // PerformanceAverage
        public float? PerformancePercent { get; set; } // PerformancePercent
        public bool PerformanceStatus { get; set; } // PerformanceStatus
        public int? PositionId { get; set; } // PositionID
        public string Position { get; set; } // Position (length: 50)
        public byte? DepartmentId { get; set; } // DepartmentID
        public byte? ShiftId { get; set; } // ShiftID
        public string PayRollMonthlyRemark { get; set; } // PayRollMonthlyRemark (length: 50)
        public bool? Advance { get; set; } // Advance
        public bool? Active { get; set; } // Active
        public string SupervisorRemark { get; set; } // SupervisorRemark (length: 250)
        public string SupervisorUser { get; set; } // SupervisorUser (length: 40)
        public bool? PersonnelCheck { get; set; } // PersonnelCheck
        public string PersonnelRemark { get; set; } // PersonnelRemark (length: 250)
        public DateTime? PersonnelCheckTime { get; set; } // PersonnelCheckTime
        public bool? SafetyCheck { get; set; } // SafetyCheck
        public string SafetyRemark { get; set; } // SafetyRemark (length: 250)
        public DateTime? SafetyCheckTime { get; set; } // SafetyCheckTime
        public bool? ManagerCheck { get; set; } // ManagerCheck
        public string ManagerRemark { get; set; } // ManagerRemark (length: 250)
        public string ManagerCheckUser { get; set; } // ManagerCheckUser (length: 40)
        public string AbCtemp { get; set; } // ABCtemp (length: 5)
        public byte[] Ts { get; set; } // TS
        public string EvaluationSafety { get; set; } // EvaluationSafety (length: 2)
        public string EvaluationPerformance { get; set; } // EvaluationPerformance (length: 2)
        public string EvaluationTime { get; set; } // EvaluationTime (length: 2)
        public string EvaluationAttitude { get; set; } // EvaluationAttitude (length: 2)
        public float? WorkingDayHoliday { get; set; } // WorkingDayHoliday
        public float? Oth43 { get; set; } // OTH+
        public bool IsProductivity { get; set; } // isProductivity
        public string Productivity { get; set; } // Productivity (length: 15)
        public bool IsBirthday { get; set; } // IsBirthday
        public float? Otnn { get; set; } // OTNN
        public float? Otsn { get; set; } // OTSN
        public float? Othn { get; set; } // OTHN
        public float? Otnn43 { get; set; } // OTNN+
        public string Abc1 { get; set; } // ABC1 (length: 2)
        public string EvaluationCreative { get; set; } // EvaluationCreative (length: 2)
        public int? StoreId { get; set; } // StoreID
        public string PersonnelUser { get; set; } // PersonnelUser (length: 100)
    }

    // Accounting_PettyCash
    public class AccountingPettyCash
    {
        public int PettyCashId { get; set; } // PettyCashID
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? ActionDate { get; set; } // ActionDate
        public string Remark { get; set; } // Remark (length: 250)
        public bool ClearStatus { get; set; } // ClearStatus
        public int ClearBy { get; set; } // ClearBy
        public DateTime AdvanceDate { get; set; } // AdvanceDate
        public int AdvanceAmount { get; set; } // AdvanceAmount
        public string AdvanceRemark { get; set; } // AdvanceRemark (length: 250)
        public string Currency { get; set; } // Currency (length: 50)
        public int? Quantity { get; set; } // Quantity
        public int? ExpenseAmount { get; set; } // ExpenseAmount
        public string FirstName { get; set; } // FirstName (length: 50)
        public string StoreNumber { get; set; } // StoreNumber (length: 2)
    }

    // Accounting_PurchasingOrders
    public class AccountingPurchasingOrder
    {
        public int PurchasingOrderId { get; set; } // PurchasingOrderID
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime PuchasingDate { get; set; } // PuchasingDate
        public string SupplierName { get; set; } // SupplierName (length: 250)
        public DateTime? DeliveryDate { get; set; } // DeliveryDate
        public bool OrderConfirmed { get; set; } // OrderConfirmed
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)
        public string PurchasingRemark { get; set; } // PurchasingRemark (length: 150)
        public string OrderBy { get; set; } // OrderBy (length: 50)
        public string Currency { get; set; } // Currency (length: 3)
        public int OrderEmployeeId { get; set; } // OrderEmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public decimal Quantity { get; set; } // Quantity
        public decimal? MoneyTotal { get; set; } // MoneyTotal
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public DateTime? ContractDate { get; set; } // ContractDate
        public DateTime? ContractExpiredDate { get; set; } // ContractExpiredDate
        public decimal? UnitPriceVnd { get; set; } // UnitPriceVND
        public string ItemRemark { get; set; } // ItemRemark (length: 250)
        public string PropertyId { get; set; } // PropertyID (length: 9)
        public string SupplierCode { get; set; } // SupplierCode (length: 9)
        public string SupplierTaxCode { get; set; } // SupplierTaxCode (length: 25)
        public decimal DeliveryQuantity { get; set; } // DeliveryQuantity
        public byte Status { get; set; } // Status
        public string StoreNumber { get; set; } // StoreNumber (length: 2)
    }

    // Accounting_Revenues
    public class AccountingRevenue
    {
        public string InvoiceNo { get; set; } // InvoiceNo (length: 30)
        public DateTime? InvoiceDate { get; set; } // InvoiceDate
        public DateTime? InvoiceFromDate { get; set; } // InvoiceFromDate
        public DateTime? InvoiceToDate { get; set; } // InvoiceToDate
        public string BillingNo { get; set; } // BillingNo (length: 10)
        public int? CustomerId { get; set; } // CustomerID
        public string ServiceNumber { get; set; } // ServiceNumber (length: 20)
        public string ServiceName { get; set; } // ServiceName (length: 4000)
        public string Uom { get; set; } // UOM (length: 4000)
        public double? ServiceQuantity { get; set; } // ServiceQuantity
        public double? CuryPrice { get; set; } // CuryPrice
        public string CuryId { get; set; } // curyID (length: 10)
        public string Category { get; set; } // Category (length: 30)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string CustomerNameTotal { get; set; } // CustomerNameTotal (length: 138)
        public double? ExtendedAmount { get; set; } // ExtendedAmount
        public string ServiceType { get; set; } // ServiceType (length: 50)
    }

    // Accounting_Revenues_AllCustomers
    public class AccountingRevenuesAllCustomer
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public double? TotalRevenue { get; set; } // TotalRevenue
        public int CustomerId { get; set; } // CustomerID
    }

    // Accounting_RevenuesLastMonth
    public class AccountingRevenuesLastMonth
    {
        public string InvoiceNo { get; set; } // InvoiceNo (length: 30)
        public DateTime? InvoiceDate { get; set; } // InvoiceDate
        public DateTime? InvoiceFromDate { get; set; } // InvoiceFromDate
        public DateTime? InvoiceToDate { get; set; } // InvoiceToDate
        public string BillingNo { get; set; } // BillingNo (length: 10)
        public string CustomerId { get; set; } // CustomerID (length: 15)
        public string ServiceNumber { get; set; } // ServiceNumber (length: 20)
        public string ServiceName { get; set; } // ServiceName (length: 4000)
        public string Uom { get; set; } // UOM (length: 4000)
        public double? ServiceQuantity { get; set; } // ServiceQuantity
        public double? CuryPrice { get; set; } // CuryPrice
        public string CuryId { get; set; } // curyID (length: 10)
        public string Category { get; set; } // Category (length: 30)
        public string CustomerName { get; set; } // CustomerName (length: 80)
    }

    // Accounting_Revenues_ServicePrice_AllCustomers
    public class AccountingRevenuesServicePriceAllCustomer
    {
        public int CusId { get; set; } // CusID
        public int? CustomerId { get; set; } // CustomerID
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string InvoiceNo { get; set; } // InvoiceNo (length: 30)
        public DateTime? InvoiceDate { get; set; } // InvoiceDate
        public DateTime? InvoiceFromDate { get; set; } // InvoiceFromDate
        public DateTime? InvoiceToDate { get; set; } // InvoiceToDate
        public string BillingNo { get; set; } // BillingNo (length: 10)
        public string ServiceNumber { get; set; } // ServiceNumber (length: 20)
        public string ServiceName { get; set; } // ServiceName (length: 4000)
        public string Uom { get; set; } // UOM (length: 4000)
        public double? ServiceQuantity { get; set; } // ServiceQuantity
        public double? CuryPrice { get; set; } // CuryPrice
        public string CuryId { get; set; } // curyID (length: 10)
        public string Category { get; set; } // Category (length: 30)
    }

    // Accounting_Revenues_Top10
    public class AccountingRevenuesTop10
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public double? TotalRevenue { get; set; } // TotalRevenue
        public int CustomerId { get; set; } // CustomerID
    }

    // Accounting_Revenues_Top10_Weight
    public class AccountingRevenuesTop10Weight
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public double? TotalRevenue { get; set; } // TotalRevenue
        public int CustomerId { get; set; } // CustomerID
        public double? TotalWpp { get; set; } // TotalWPP
        public double? TotalWeight { get; set; } // TotalWeight
    }

    // Admin_Difference_AD_Current
    public class AdminDifferenceAdCurrent
    {
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public string Label { get; set; } // Label (length: 15)
        public string ProductNumber { get; set; } // ProductNumber (length: 50)
        public string ProductName { get; set; } // ProductName (length: 50)
        public byte? Status { get; set; } // Status
        public int PalletId { get; set; } // PalletID
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
    }

    // AirTemperature
    public class AirTemperature
    {
        public int AirTempRecordId { get; set; } // AirTempRecordID
        public string RoomName { get; set; } // RoomName (length: 2)
        public DateTime? RecordTime { get; set; } // RecordTime
        public float? AirTemperature_ { get; set; } // AirTemperature
        public float? SetPoint { get; set; } // SetPoint
        public float? TemperatureSetPointTo { get; set; } // TemperatureSetPointTo
        public string UserName { get; set; } // UserName (length: 100)
        public float? Humidity { get; set; } // Humidity
        public float? HumiditySetPointFrom { get; set; } // HumiditySetPointFrom
        public float? HumiditySetPointTo { get; set; } // HumiditySetPointTo
        public string Remark { get; set; } // Remark (length: 200)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? StoreId { get; set; } // StoreID
    }

    // Aisles
    public class Aisle
    {
        public Guid AisleRoomId { get; set; } // AisleRoomID (Primary key)
        public Guid? RoomId { get; set; } // RoomID
        public byte Aisle_ { get; set; } // Aisle
        public short NumberOfBays { get; set; } // NumberOfBays
        public short NumberOfDeeps { get; set; } // NumberOfDeeps
        public short NumberOfHighs { get; set; } // NumberOfHighs
        public int? StoreId { get; set; } // StoreID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string AisleRemark { get; set; } // AisleRemark (length: 250)

        public Aisle()
        {
            AisleRoomId = Guid.NewGuid();
            RoomId = Guid.NewGuid();
            NumberOfBays = 0;
            NumberOfDeeps = 0;
            NumberOfHighs = 0;
            CreatedTime = DateTime.Now;
        }
    }

    // Analysis_StockOnHandWeekly
    public class AnalysisStockOnHandWeekly
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public DateTime ToDate { get; set; } // ToDate
        public double? TotalWeight { get; set; } // TotalWeight
        public int? OccupiedPallets { get; set; } // OccupiedPallets
    }

    // AR_Customer
    public class ArCustomer
    {
        public string CustId { get; set; } // CustId (length: 15)
        public string CustName { get; set; } // CustName (length: 200)
        public string AccrRevAcct { get; set; } // AccrRevAcct (length: 10)
        public string AccrRevSub { get; set; } // AccrRevSub (length: 24)
        public string Addr1 { get; set; } // Addr1 (length: 300)
        public string Addr2 { get; set; } // Addr2 (length: 50)
        public string ArAcct { get; set; } // ArAcct (length: 10)
        public string ArSub { get; set; } // ArSub (length: 24)
        public string Attn { get; set; } // Attn (length: 200)
        public string BillAddr1 { get; set; } // BillAddr1 (length: 300)
        public string BillAddr2 { get; set; } // BillAddr2 (length: 50)
        public string BillAttn { get; set; } // BillAttn (length: 200)
        public string BillCity { get; set; } // BillCity (length: 30)
        public string BillCountry { get; set; } // BillCountry (length: 3)
        public string BillFax { get; set; } // BillFax (length: 30)
        public string BillName { get; set; } // BillName (length: 200)
        public string BillPhone { get; set; } // BillPhone (length: 30)
        public string BillSalut { get; set; } // BillSalut (length: 50)
        public string BillState { get; set; } // BillState (length: 10)
        public string BillZip { get; set; } // BillZip (length: 10)
        public string City { get; set; } // City (length: 30)
        public string ClassId { get; set; } // ClassId (length: 6)
        public string Country { get; set; } // Country (length: 3)
        public string CogsAcct { get; set; } // COGSAcct (length: 10)
        public string CogsSub { get; set; } // COGSSub (length: 24)
        public string MiscAcct { get; set; } // MiscAcct (length: 10)
        public string MiscSub { get; set; } // MiscSub (length: 24)
        public double CrLmt { get; set; } // CrLmt
        public string CrRule { get; set; } // CrRule (length: 1)
        public string CuryId { get; set; } // CuryId (length: 4)
        public string CuryPrcLvlRtTp { get; set; } // CuryPrcLvlRtTp (length: 6)
        public string CuryRateType { get; set; } // CuryRateType (length: 6)
        public short CustFillPriority { get; set; } // CustFillPriority
        public string DfltShipToId { get; set; } // DfltShipToId (length: 10)
        public string DiscAcct { get; set; } // DiscAcct (length: 10)
        public string DiscSub { get; set; } // DiscSub (length: 24)
        public string EMailAddr { get; set; } // EMailAddr (length: 100)
        public short Exported { get; set; } // Exported
        public string Fax { get; set; } // Fax (length: 30)
        public string FrtAcct { get; set; } // FrtAcct (length: 10)
        public string FrtSub { get; set; } // FrtSub (length: 24)
        public short GracePer { get; set; } // GracePer
        public string LineDiscAcct { get; set; } // LineDiscAcct (length: 10)
        public string LineDiscSub { get; set; } // LineDiscSub (length: 24)
        public string NodeId { get; set; } // NodeID (length: 10)
        public short NodeLevel { get; set; } // NodeLevel
        public int ParentRecordId { get; set; } // ParentRecordID
        public string PerNbr { get; set; } // PerNbr (length: 6)
        public string Phone { get; set; } // Phone (length: 30)
        public string PrePayAcct { get; set; } // PrePayAcct (length: 10)
        public string PrePaySub { get; set; } // PrePaySub (length: 24)
        public string PriceClassId { get; set; } // PriceClassID (length: 10)
        public string Salut { get; set; } // Salut (length: 30)
        public short ShipCmplt { get; set; } // ShipCmplt
        public string SiteId { get; set; } // SiteId (length: 10)
        public string SlsAcct { get; set; } // SlsAcct (length: 10)
        public string SlsperId { get; set; } // SlsperId (length: 10)
        public string SlsSub { get; set; } // SlsSub (length: 24)
        public string State { get; set; } // State (length: 10)
        public string Status { get; set; } // Status (length: 1)
        public string StmtCycleId { get; set; } // StmtCycleId (length: 2)
        public string TaxDflt { get; set; } // TaxDflt (length: 1)
        public string TaxId00 { get; set; } // TaxID00 (length: 10)
        public string TaxId01 { get; set; } // TaxID01 (length: 10)
        public string TaxId02 { get; set; } // TaxID02 (length: 10)
        public string TaxId03 { get; set; } // TaxID03 (length: 10)
        public string TaxLocId { get; set; } // TaxLocId (length: 15)
        public string TaxRegNbr { get; set; } // TaxRegNbr (length: 15)
        public string Terms { get; set; } // Terms (length: 10)
        public string Territory { get; set; } // Territory (length: 10)
        public double TradeDisc { get; set; } // TradeDisc
        public string Zip { get; set; } // Zip (length: 10)
        public string SupId { get; set; } // SupID (length: 10)
        public string ProExpAcct { get; set; } // ProExpAcct (length: 10)
        public string ProExpSub { get; set; } // ProExpSub (length: 24)
        public string ProIncomeAcct { get; set; } // ProIncomeAcct (length: 10)
        public string ProIncomeSub { get; set; } // ProIncomeSub (length: 24)
        public string DeliveryId { get; set; } // DeliveryID (length: 10)
        public DateTime LUpdDateTime { get; set; } // LUpd_DateTime
        public string LUpdProg { get; set; } // LUpd_Prog (length: 8)
        public string LUpdUser { get; set; } // LUpd_User (length: 10)
        public DateTime CrtdDateTime { get; set; } // Crtd_DateTime
        public string CrtdProg { get; set; } // Crtd_Prog (length: 8)
        public string CrtdUser { get; set; } // Crtd_User (length: 10)
        public byte[] Tstamp { get; set; } // tstamp (length: 8)
        public string ShopType { get; set; } // ShopType (length: 10)
        public string Location { get; set; } // Location (length: 10)
        public string Channel { get; set; } // Channel (length: 10)
        public string Area { get; set; } // Area (length: 10)
        public string Territory2 { get; set; } // Territory2 (length: 5)
        public string District { get; set; } // District (length: 100)
        public string CoverageType { get; set; } // CoverageType (length: 3)
        public string CustomerGroup { get; set; } // CustomerGroup (length: 5)
        public string DfltWhseLoc { get; set; } // DfltWhseLoc (length: 30)
        public string Hamlet { get; set; } // Hamlet (length: 200)
        public string Street { get; set; } // Street (length: 200)
        public string HouseNbr { get; set; } // HouseNbr (length: 200)
        public string BillHamlet { get; set; } // BillHamlet (length: 200)
        public string BillStreet { get; set; } // BillStreet (length: 200)
        public string BillHouseNbr { get; set; } // BillHouseNbr (length: 200)
        public string BillDistrict { get; set; } // BillDistrict (length: 200)
        public string DfltBillToId { get; set; } // DfltBillToId (length: 15)
    }

    // Assignments
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class Assignment
    {
        /// <summary>
        /// -1
        /// </summary>
        public int AssignmentId { get; set; } // AssignmentID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? AssigmentDate { get; set; } // AssigmentDate

        /// <summary>
        /// -1
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public int? AssignedTo { get; set; } // AssignedTo

        /// <summary>
        /// 0
        /// </summary>
        public int? OtherJobDefinitionId { get; set; } // OtherJobDefinitionID

        /// <summary>
        /// 2688
        /// </summary>
        public string AssignmentDescription { get; set; } // AssignmentDescription (length: 2000)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? DueDate { get; set; } // DueDate

        /// <summary>
        /// -1
        /// </summary>
        public bool Confirmed { get; set; } // Confirmed

        /// <summary>
        /// -1
        /// </summary>
        public string EmployeeFeedback { get; set; } // EmployeeFeedback (length: 2000)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? CompleteDate { get; set; } // CompleteDate

        /// <summary>
        /// -1
        /// </summary>
        public bool AssigmentReject { get; set; } // AssigmentReject

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? ConfirmTime { get; set; } // ConfirmTime

        /// <summary>
        /// -1
        /// </summary>
        public string ConfirmBy { get; set; } // ConfirmBy (length: 255)
        public int? TaskProgress { get; set; } // TaskProgress
        public bool Completed { get; set; } // Completed
        public int? AssignedTo2 { get; set; } // AssignedTo2
        public int? AssignedTo3 { get; set; } // AssignedTo3
        public bool AssignmentRead { get; set; } // AssignmentRead
        public DateTime? AssignmentReadTime { get; set; } // AssignmentReadTime
        public byte[] Ts { get; set; } // TS
        public byte? ConfidentialLevel { get; set; } // ConfidentialLevel
        public string OrderNumber { get; set; } // OrderNumber (length: 15)
        public string AssignmentNumber { get; set; } // AssignmentNumber (length: 15)

        public Assignment()
        {
            Confirmed = false;
            AssigmentReject = false;
            TaskProgress = 0;
            ConfidentialLevel = 0;
        }
    }

    // AssignmentDetails
    public class AssignmentDetail
    {
        public int NoNameJobId { get; set; } // NoNameJobID (Primary key)
        public string NoNameHobNumber { get; set; } // NoNameHobNumber (length: 50)
        public int EmployeeId { get; set; } // EmployeeID
        public DateTime NoNameJobDate { get; set; } // NoNameJobDate
        public string NoNameJobRemark { get; set; } // NoNameJobRemark (length: 250)
        public float NoNameJobDuration { get; set; } // NoNameJobDuration
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UserName { get; set; } // UserName (length: 50)
    }

    // AssignmentEmployees
    public class AssignmentEmployee
    {
        public int AssignmentEmployeeId { get; set; } // AssignmentEmployeeID (Primary key)
        public int? Qhseid { get; set; } // QHSEID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public Guid EmployeeId { get; set; } // EmployeeID
        public string AssignToUser { get; set; } // AssignToUser (length: 30)

        public AssignmentEmployee()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // ATM_SHIPMENT_STOP
    public class AtmShipmentStop
    {
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime CreateDate { get; set; } // CreateDate
        public DateTime RecordDate { get; set; } // RecordDate
        public Guid RowPointer { get; set; } // RowPointer (Primary key via unique index IX_ATM_SHIPMENT_STOP_RowPointer)
        public byte NoteExistsFlag { get; set; } // NoteExistsFlag
        public byte InWorkflow { get; set; } // InWorkflow
        public string ShipmentGid { get; set; } // SHIPMENT_GID (length: 101)
        public int? StopNum { get; set; } // STOP_NUM
        public DateTime? PlannedArrival { get; set; } // PLANNED_ARRIVAL
        public DateTime? PlannedDeparture { get; set; } // PLANNED_DEPARTURE
        public string StopType { get; set; } // STOP_TYPE (length: 50)
        public string LocationGid { get; set; } // LOCATION_GID (length: 101)
        public string LocationName { get; set; } // LOCATION_NAME (length: 101)
        public string AddressLine { get; set; } // ADDRESS_LINE (length: 1000)
        public string AtmShipmentGid { get; set; } // ATM_SHIPMENT_GID (length: 101)
        public string AtmShipmentId { get; set; } // ATM_SHIPMENT_ID (length: 101)
        public string Cdcd { get; set; } // CDCD (length: 10)
        public string GiaoLau { get; set; } // GIAO_LAU (length: 10)
        public string CamGio { get; set; } // CAM_GIO (length: 10)
        public string CamTai { get; set; } // CAM_TAI (length: 10)
        public string KiemDem { get; set; } // KIEM_DEM (length: 10)
        public string DiemKho { get; set; } // DIEM_KHO (length: 10)
        public string OrderreleaseId { get; set; } // Orderrelease_id (length: 101)
        public string OrderreleaseGid { get; set; } // Orderrelease_gid (length: 101)

        public AtmShipmentStop()
        {
            CreatedBy = "suser_sname()";
            UpdatedBy = "suser_sname()";
            CreateDate = DateTime.Now;
            RecordDate = DateTime.Now;
            RowPointer = Guid.NewGuid();
            NoteExistsFlag = 0;
            InWorkflow = 0;
        }
    }

    // Attachments
    public class Attachment
    {
        public Guid AttachmentId { get; set; } // AttachmentID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public string AttachmentDescription { get; set; } // AttachmentDescription (length: 150)
        public string AttachmentFile { get; set; } // AttachmentFile (length: 200)
        public DateTime AttachmentDate { get; set; } // AttachmentDate
        public string AttachmentUser { get; set; } // AttachmentUser (length: 20)
        public byte[] Ts { get; set; } // TS
        public bool IsDeleted { get; set; } // IsDeleted
        public int? AttachmentFileSize { get; set; } // AttachmentFileSize
        public int? ConfidentialLevel { get; set; } // ConfidentialLevel
        public string OriginalFileName { get; set; } // OriginalFileName (length: 100)

        /// <summary>
        /// 0-No(Không in); 1-RO(In trong RO); 2-DO(In trong DO)
        /// </summary>
        public byte? PrintStatus { get; set; } // PrintStatus
        public byte[] FileData { get; set; } // FileData (length: 7900)

        public Attachment()
        {
            AttachmentId = Guid.NewGuid();
            IsDeleted = false;
            ConfidentialLevel = 1;
            PrintStatus = 0;
        }
    }

    // Authorizations
    public class Authorization
    {
        /// <summary>
        /// 0
        /// </summary>
        public int LevelOfAuthorization { get; set; } // LevelOfAuthorization (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string Description { get; set; } // Description (length: 50)
    }

    // BarcodeScanDetailID
    public class BarcodeScanDetailId
    {
        public string ScannedBy { get; set; } // ScannedBy (length: 50)
    }

    // BarcodeScanDetailID2
    public class BarcodeScanDetailId2
    {
        public string ScannedBy { get; set; } // ScannedBy (length: 50)
    }

    // BarcodeScan_OrderDetails
    public class BarcodeScanOrderDetail
    {
        public Guid BarcodeScanDetailId { get; set; } // BarcodeScanDetailID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public string OrderType { get; set; } // OrderType (length: 3)
        public string BarcodeDataScanned { get; set; } // BarcodeDataScanned (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ScannedBy { get; set; } // ScannedBy (length: 50)
        public string Result { get; set; } // Result (length: 5)
        public byte[] Ts { get; set; } // TS
        public string Remark { get; set; } // Remark (length: 100)
        public bool? IsRecordNew { get; set; } // IsRecordNew
        public bool? ManualChecked { get; set; } // ManualChecked
        public string UpdatedBy { get; set; } // UpdatedBy (length: 300)

        /// <summary>
        /// 1-Nhập; 2-Xuất HS;3-Giao HS, 4-TX Hạ WMS, 5-Xuất WMS; 6-NHẬN HS; 7-Xuat carton CW, 8-TX lên giàn WMS; 9-GSK Scan;10-Nhập carton CW
        /// </summary>
        public byte? ScannedType { get; set; } // ScannedType
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public Guid? DataId { get; set; } // Data_ID

        public BarcodeScanOrderDetail()
        {
            BarcodeScanDetailId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            IsRecordNew = true;
            ManualChecked = false;
        }
    }

    // BarcodeScan_Prefix
    public class BarcodeScanPrefix
    {
        public string PrefixBarcodeId { get; set; } // Prefix_BarcodeID (Primary key) (length: 2)
        public string PrefixBarcodeDescription { get; set; } // Prefix_Barcode_Description (length: 50)
    }

    // Bays
    public class Bay
    {
        public Guid BayId { get; set; } // BayID (Primary key)
        public byte Aisle { get; set; } // Aisle
        public int Bay_ { get; set; } // Bay
        public string BayDescription { get; set; } // BayDescription (length: 500)
        public int? NextBayId { get; set; } // NextBayID

        public Bay()
        {
            BayId = Guid.NewGuid();
        }
    }

    // The table 'BBGN' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BBGN
    public class Bbgn
    {
        public string CustomerFullName { get; set; } // CustomerFullName (length: 255)
        public string Address { get; set; } // Address (length: 255)
        public string Location { get; set; } // Location (length: 255)
        public string DispatchingOrderDate { get; set; } // DispatchingOrderDate (length: 255)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 255)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 255)
        public string ShipTo { get; set; } // ShipTo (length: 255)
        public string PalletNumber { get; set; } // PalletNumber (length: 255)
        public string CustomerClientAddress { get; set; } // CustomerClientAddress (length: 255)
        public string TransporterName { get; set; } // TransporterName (length: 255)
        public string PoNumber { get; set; } // PONumber (length: 255)
        public string TimePrint { get; set; } // TimePrint (length: 255)
        public string TruckNumber { get; set; } // TruckNumber (length: 255)
        public string VietnamName { get; set; } // VietnamName (length: 255)
        public string Mobile { get; set; } // Mobile (length: 255)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 255)
        public string TripNumber { get; set; } // TripNumber (length: 255)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string SalesProductCode2 { get; set; } // SalesProductCode2 (length: 255)
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 255)
        public string PoKgs { get; set; } // POKgs (length: 255)
        public string TotalPackages { get; set; } // TotalPackages (length: 255)
        public string TotalWeight { get; set; } // TotalWeight (length: 255)
        public string CountCarton { get; set; } // CountCarton (length: 255)
        public string GrossWeight { get; set; } // GrossWeight (length: 255)
        public string WeightSo { get; set; } // WeightSO (length: 255)
        public string DeliveryId { get; set; } // DeliveryID (length: 255)
        public string CustId { get; set; } // CustId (length: 255)
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 255)
    }

    // Billings
    /// <summary>
    /// 2
    /// Billings.BillingID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class Billing
    {
        public Guid BillingId { get; set; } // BillingID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime BillingDate { get; set; } // BillingDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime BillingFromDate { get; set; } // BillingFromDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime BillingToDate { get; set; } // BillingToDate

        /// <summary>
        /// -1
        /// </summary>
        public bool Confirmed { get; set; } // Confirmed

        /// <summary>
        /// 2835
        /// </summary>
        public string BillingRemark { get; set; } // BillingRemark (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public bool Selected { get; set; } // Selected

        /// <summary>
        /// -1
        /// </summary>
        public bool Invoiced { get; set; } // Invoiced

        /// <summary>
        /// -1
        /// </summary>
        public string InvoiceRemark { get; set; } // InvoiceRemark (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? InvoiceDate { get; set; } // InvoiceDate

        /// <summary>
        /// -1
        /// </summary>
        public string InvoiceInputBy { get; set; } // InvoiceInputBy (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? InvoiceInputDate { get; set; } // InvoiceInputDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? BillingCreatedTime { get; set; } // BillingCreatedTime

        /// <summary>
        /// -1
        /// </summary>
        public string BillingCreatedBy { get; set; } // BillingCreatedBy (length: 20)
        public string BillingNumber { get; set; } // BillingNumber (length: 12)
        public bool IsDeleted { get; set; } // IsDeleted
        public Guid CustomerId { get; set; } // CustomerID
        public int? BillingLocalId { get; set; } // BillingLocalID

        public Billing()
        {
            BillingId = Guid.NewGuid();
            IsDeleted = false;
        }
    }

    // BillingByOvertimeDetails
    public class BillingByOvertimeDetail
    {
        public int BillingByOverTimeId { get; set; } // BillingByOverTimeID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public DateTime? OrderDate { get; set; } // OrderDate
        public int? CustomerId { get; set; } // CustomerID
        public int? EmployeeId { get; set; } // EmployeeID
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut
        public int? TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
        public string VehicleNumber { get; set; } // VehicleNumber (length: 50)
        public float? Percentage { get; set; } // Percentage
        public int? OtherServiceId { get; set; } // OtherServiceID
    }

    // BillingDaily
    public class BillingDaily
    {
        public Guid BillingDailyId { get; set; } // BillingDailyID (Primary key)
        public string BillingDailyNumber { get; set; } // BillingDailyNumber (length: 12)
        public int? BillingDailyLocalId { get; set; } // BillingDailyLocalID
        public DateTime BillingDailyDate { get; set; } // BillingDailyDate
        public Guid CustomerId { get; set; } // CustomerID
        public string BillingDailyRemark { get; set; } // BillingDailyRemark (length: 250)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public bool Confirmed { get; set; } // Confirmed
        public string OrderType { get; set; } // OrderType (length: 30)

        public BillingDaily()
        {
            BillingDailyId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Confirmed = false;
        }
    }

    // BillingDailyDetails
    public class BillingDailyDetail
    {
        public Guid BillingDailyDetailId { get; set; } // BillingDailyDetailID (Primary key)
        public Guid BillingDailyId { get; set; } // BillingDailyID
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice
        public string BillingDailyDetailRemark { get; set; } // BillingDailyDetailRemark (length: 300)
        public byte[] Ts { get; set; } // TS
        public decimal? Cartons { get; set; } // Cartons
        public decimal? Pallets { get; set; } // Pallets
        public decimal? Weights { get; set; } // Weights
        public byte? Vat { get; set; } // VAT
        public decimal? AdjustmentQuantity { get; set; } // AdjustmentQuantity

        public BillingDailyDetail()
        {
            BillingDailyDetailId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // BillingDetails
    /// <summary>
    /// 2
    /// ((BillingDetails.BillingID=6846))
    /// BillingDetails.BillingID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class BillingDetail
    {
        public Guid BillingDetailId { get; set; } // BillingDetailID (Primary key)
        public Guid BillingId { get; set; } // BillingID
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID

        /// <summary>
        /// 109
        /// </summary>
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity

        /// <summary>
        /// -1
        /// </summary>
        public int? InvoiceId { get; set; } // InvoiceID

        /// <summary>
        /// 0
        /// </summary>
        public bool? ManualUpdate { get; set; } // ManualUpdate
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice
        public byte Vat { get; set; } // VAT

        public BillingDetail()
        {
            BillingDetailId = Guid.NewGuid();
            ManualUpdate = false;
            CreatedTime = DateTime.Now;
            Vat = 0;
        }
    }

    // BillingDetailAdjectments
    public class BillingDetailAdjectment
    {
        public DateTime Date { get; set; } // Date
        public string So { get; set; } // SO (Primary key) (length: 255)
        public string Item { get; set; } // Item (Primary key) (length: 255)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 255)
        public int Qty { get; set; } // Qty
        public decimal Weights { get; set; } // Weights
        public decimal WeightsTotal { get; set; } // WeightsTotal
        public decimal ActW { get; set; } // ActW
        public int ActQty { get; set; } // ActQty
        public int StatusConfirm { get; set; } // StatusConfirm
        public int ReasonCode { get; set; } // ReasonCode
        public string Reason { get; set; } // Reason (length: 255)
        public string Tranporter { get; set; } // Tranporter (length: 255)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 255)
        public string Status { get; set; } // Status (length: 255)
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 30)
        public string Do { get; set; } // DO (length: 30)
        public Guid CustomerClientId { get; set; } // CustomerClientID
        public int QtyConfirm { get; set; } // QtyConfirm
        public decimal WeightConfirm { get; set; } // WeightConfirm
        public string UpdateBy { get; set; } // UpdateBy (length: 30)
        public DateTime? UpdateTime { get; set; } // UpdateTime
        public string ConfirmBy { get; set; } // ConfirmBy (length: 30)
        public DateTime? ConfirmTime { get; set; } // ConfirmTime

        public BillingDetailAdjectment()
        {
            ActW = 0m;
            ActQty = 0;
            StatusConfirm = 0;
            ReasonCode = 0;
            QtyConfirm = 0;
            WeightConfirm = 0.0m;
            UpdateTime = DateTime.Now;
        }
    }

    // BillingDetailBreakDown
    public class BillingDetailBreakDown
    {
        public Guid BillingDetailBreakdownId { get; set; } // BillingDetailBreakdownID
        public Guid BillingId { get; set; } // BillingID
        public DateTime? ReportDate { get; set; } // ReportDate
        public int? BeginC { get; set; } // BeginC
        public int? InC { get; set; } // InC
        public int? OutC { get; set; } // OutC
        public int? CloseC { get; set; } // CloseC
        public decimal? BeginW { get; set; } // BeginW
        public decimal? InW { get; set; } // InW
        public decimal? OutW { get; set; } // OutW
        public decimal? CloseW { get; set; } // CloseW
        public int? BeginP { get; set; } // BeginP
        public int? InP { get; set; } // InP
        public int? OutP { get; set; } // OutP
        public int? CloseP { get; set; } // CloseP
        public string BillingDetailBreakdownRemark { get; set; } // BillingDetailBreakdownRemark (length: 1000)
        public decimal? InCNofee { get; set; } // InCNofee
        public decimal? InWNofee { get; set; } // InWNofee
        public decimal? OutCNofee { get; set; } // OutCNofee
        public decimal? OutWNofee { get; set; } // OutWNofee
        public decimal? StorageWNofee { get; set; } // StorageWNofee
        public double? StorageCNofee { get; set; } // StorageCNofee
        public double? StoragePNofee { get; set; } // StoragePNofee
    }

    // BillingSummary
    /// <summary>
    /// 0
    /// </summary>
    public class BillingSummary
    {
        /// <summary>
        /// 0
        /// </summary>
        public int BillingSummaryId { get; set; } // BillingSummaryID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime FromDate { get; set; } // FromDate

        /// <summary>
        /// 0
        /// </summary>
        public DateTime ToDate { get; set; } // ToDate

        /// <summary>
        /// 0
        /// </summary>
        public string Period { get; set; } // Period (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public bool Confirmed { get; set; } // Confirmed

        /// <summary>
        /// 0
        /// </summary>
        public int? TotalCustomerCount { get; set; } // TotalCustomerCount

        /// <summary>
        /// 0
        /// </summary>
        public int? NonBilledCustomerCount { get; set; } // NonBilledCustomerCount

        /// <summary>
        /// 0
        /// </summary>
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ConfirmTime { get; set; } // ConfirmTime
        public int StoreId { get; set; } // StoreID

        // Reverse navigation

        /// <summary>
        /// Child BillingSummaryDetails where [BillingSummaryDetails].[BillingSummaryID] point to this entity (FK_BillingSummaryDetails_BillingSummary)
        /// </summary>
        public virtual ICollection<BillingSummaryDetail> BillingSummaryDetails { get; set; } // BillingSummaryDetails.FK_BillingSummaryDetails_BillingSummary

        public BillingSummary()
        {
            Confirmed = false;
            BillingSummaryDetails = new List<BillingSummaryDetail>();
        }
    }

    // BillingSummaryDetails
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class BillingSummaryDetail
    {
        /// <summary>
        /// 0
        /// </summary>
        public int BillingSummaryDetailId { get; set; } // BillingSummaryDetailID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// 1944
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public string BillingRemark { get; set; } // BillingRemark (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public int BillingSummaryId { get; set; } // BillingSummaryID

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? FromDate { get; set; } // FromDate

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ToDate { get; set; } // ToDate

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerCategory { get; set; } // CustomerCategory (length: 50)
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? LastBillingId { get; set; } // LastBillingID

        // Foreign keys

        /// <summary>
        /// Parent BillingSummary pointed by [BillingSummaryDetails].([BillingSummaryId]) (FK_BillingSummaryDetails_BillingSummary)
        /// </summary>
        public virtual BillingSummary BillingSummary { get; set; } // FK_BillingSummaryDetails_BillingSummary
    }

    // BillOfMaterials
    public class BillOfMaterial
    {
        public Guid BillOfMaterialId { get; set; } // BillOfMaterialID (Primary key)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public Guid CustomerId { get; set; } // CustomerID
        public Guid FinishProductId { get; set; } // Finish_ProductID
        public decimal? FinishQuantity { get; set; } // Finish_Quantity
        public byte[] Ts { get; set; } // ts
        public string BomDescription { get; set; } // BOMDescription (length: 500)
        public string BomType { get; set; } // BOMType (length: 50)
        public decimal? ProductionStdCost { get; set; } // Production_Std_Cost
        public decimal? PlannedAverageProductionSize { get; set; } // Planned_Average_Production_Size
        public string ProjectName { get; set; } // ProjectName (length: 100)
        public long? BillOfMaterialLocalId { get; set; } // BillOfMaterialLocalID
        public string BillOfMaterialNumber { get; set; } // BillOfMaterialNumber (length: 20)

        public BillOfMaterial()
        {
            BillOfMaterialId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            FinishQuantity = 0m;
        }
    }

    // BillOfMaterialDetails
    public class BillOfMaterialDetail
    {
        public Guid BillOfMaterialDetailId { get; set; } // BillOfMaterialDetailID (Primary key)
        public Guid BillOfMaterialId { get; set; } // BillOfMaterialID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public string Description { get; set; } // Description (length: 500)
        public Guid MaterialProductId { get; set; } // Material_ProductID
        public decimal? MaterialQuantity { get; set; } // Material_Quantity
        public byte[] Ts { get; set; } // ts

        public BillOfMaterialDetail()
        {
            BillOfMaterialDetailId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            MaterialQuantity = 0m;
        }
    }

    // BlastFreezers
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class BlastFreezer
    {
        /// <summary>
        /// -1
        /// </summary>
        public int BlastFreezerId { get; set; } // BlastFreezerID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string BlastFreezerRecordNumber { get; set; } // BlastFreezerRecordNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime DateIn { get; set; } // DateIn

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 50)

        /// <summary>
        /// 109
        /// </summary>
        public int BlastFreezerRoomId { get; set; } // BlastFreezerRoomID

        /// <summary>
        /// 2115
        /// </summary>
        public DateTime? BlastFreezerCreateTime { get; set; } // BlastFreezerCreateTime

        /// <summary>
        /// 1935
        /// </summary>
        public DateTime? StartLoadingTime { get; set; } // StartLoadingTime

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? EndLoadingTime { get; set; } // EndLoadingTime

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? BlastFreezerUloadingTime { get; set; } // BlastFreezerUloadingTime

        /// <summary>
        /// -1
        /// </summary>
        public string BlastFreezerLoadingBy { get; set; } // BlastFreezerLoadingBy (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string ProductDetailsRemark { get; set; } // ProductDetailsRemark (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public double? TempIn { get; set; } // TempIn

        /// <summary>
        /// -1
        /// </summary>
        public double? TempOut { get; set; } // TempOut

        /// <summary>
        /// -1
        /// </summary>
        public short? ProductQty { get; set; } // ProductQty

        /// <summary>
        /// -1
        /// </summary>
        public string UserName { get; set; } // UserName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public bool BlastFreezerConfirm { get; set; } // BlastFreezerConfirm

        /// <summary>
        /// 2820
        /// </summary>
        public DateTime? StartRunTime { get; set; } // StartRunTime

        /// <summary>
        /// 2325
        /// </summary>
        public DateTime? EndRunTime { get; set; } // EndRunTime

        /// <summary>
        /// 2970
        /// </summary>
        public string StartRunUser { get; set; } // StartRunUser (length: 50)

        /// <summary>
        /// 4650
        /// </summary>
        public string EndRunUser { get; set; } // EndRunUser (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string BlastFreezerRunningRemark { get; set; } // BlastFreezerRunningRemark (length: 50)
        public int CustomerId { get; set; } // CustomerID

        // Reverse navigation

        /// <summary>
        /// Child BlastFreezerDetails where [BlastFreezerDetails].[BlastFreezerID] point to this entity (FK_BlastFreezerDetails_BlastFreezers)
        /// </summary>
        public virtual ICollection<BlastFreezerDetail> BlastFreezerDetails { get; set; } // BlastFreezerDetails.FK_BlastFreezerDetails_BlastFreezers

        public BlastFreezer()
        {
            BlastFreezerRoomId = 1;
            BlastFreezerConfirm = false;
            CustomerId = 1;
            BlastFreezerDetails = new List<BlastFreezerDetail>();
        }
    }

    // BlastFreezerDetails
    /// <summary>
    /// 0
    /// </summary>
    public class BlastFreezerDetail
    {
        public int BlastFreezerDetailsId { get; set; } // BlastFreezerDetailsID (Primary key)
        public int BlastFreezerId { get; set; } // BlastFreezerID
        public DateTime RecordTime { get; set; } // RecordTime
        public short SampleNumber { get; set; } // SampleNumber
        public double SampleTemp { get; set; } // SampleTemp
        public string Remark { get; set; } // Remark (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent BlastFreezer pointed by [BlastFreezerDetails].([BlastFreezerId]) (FK_BlastFreezerDetails_BlastFreezers)
        /// </summary>
        public virtual BlastFreezer BlastFreezer { get; set; } // FK_BlastFreezerDetails_BlastFreezers

        public BlastFreezerDetail()
        {
            SampleNumber = 1;
            SampleTemp = -18;
        }
    }

    // BusinessTrips
    /// <summary>
    /// 2
    /// ((BusinessTrips.EmployeeID=259))
    /// BusinessTrips.BusinessTripID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class BusinessTrip
    {
        /// <summary>
        /// 0
        /// </summary>
        public int BusinessTripId { get; set; } // BusinessTripID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string BusinessTripNumber { get; set; } // BusinessTripNumber (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public int EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public string EmployeeName { get; set; } // EmployeeName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? Endtime { get; set; } // Endtime

        /// <summary>
        /// 0
        /// </summary>
        public bool BikeUse { get; set; } // BikeUse

        /// <summary>
        /// 0
        /// </summary>
        public int? BikeMilage { get; set; } // BikeMilage

        /// <summary>
        /// 0
        /// </summary>
        public bool BikeParking { get; set; } // BikeParking

        /// <summary>
        /// 0
        /// </summary>
        public float? ParkingPrice { get; set; } // ParkingPrice

        /// <summary>
        /// 0
        /// </summary>
        public string WhereTo { get; set; } // WhereTo (length: 200)

        /// <summary>
        /// 0
        /// </summary>
        public string Purpose { get; set; } // Purpose (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public bool LunchRequired { get; set; } // LunchRequired

        /// <summary>
        /// 0
        /// </summary>
        public string AuthorisedNameBy { get; set; } // AuthorisedNameBy (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? AuthorisedTime { get; set; } // AuthorisedTime

        /// <summary>
        /// 0
        /// </summary>
        public bool TripConfirmed { get; set; } // TripConfirmed

        /// <summary>
        /// 0
        /// </summary>
        public bool GuardConfirmed { get; set; } // GuardConfirmed

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? GuardTime { get; set; } // GuardTime

        /// <summary>
        /// 0
        /// </summary>
        public string AuthorisedCreated { get; set; } // AuthorisedCreated (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public string BusinessTripCategory { get; set; } // BusinessTripCategory (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public byte PhoneUsed { get; set; } // PhoneUsed

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // ts

        public BusinessTrip()
        {
            BikeUse = false;
            BikeMilage = 0;
            BikeParking = false;
            ParkingPrice = 0f;
            LunchRequired = false;
            TripConfirmed = false;
            GuardConfirmed = false;
            BusinessTripCategory = "Normal";
            PhoneUsed = 0;
        }
    }

    // BusinessTripPrices
    /// <summary>
    /// 2
    /// BusinessTripPrices.BusinessTripPriceDate
    /// True
    /// 0
    /// 0
    /// </summary>
    public class BusinessTripPrice
    {
        /// <summary>
        /// 0
        /// </summary>
        public int BusinessTripPriceId { get; set; } // BusinessTripPriceID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime BusinessTripPriceDate { get; set; } // BusinessTripPriceDate

        /// <summary>
        /// 0
        /// </summary>
        public float PetrolPrice { get; set; } // PetrolPrice

        /// <summary>
        /// 0
        /// </summary>
        public float? LunchPrice { get; set; } // LunchPrice

        /// <summary>
        /// 0
        /// </summary>
        public float ParkPrice { get; set; } // ParkPrice

        /// <summary>
        /// 0
        /// </summary>
        public string RequiredDescription { get; set; } // RequiredDescription (length: 800)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? Locked { get; set; } // Locked

        public BusinessTripPrice()
        {
            CreatedTime = DateTime.Now;
            Locked = false;
        }
    }

    // CalendarDates
    public class CalendarDate
    {
        public int CalendarDateId { get; set; } // CalendarDateID (Primary key)
        public DateTime? CalendarDate_ { get; set; } // CalendarDate
        public byte? Week { get; set; } // Week
    }

    // CarBookings
    public class CarBooking
    {
        public int CarBookingId { get; set; } // CarBookingID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? StartTime { get; set; } // StartTime
        public string Departure { get; set; } // Departure (length: 100)
        public string Destination { get; set; } // Destination (length: 100)
        public string Reason { get; set; } // Reason (length: 100)
        public string Remark { get; set; } // Remark (length: 100)
        public bool? Confirmed { get; set; } // Confirmed
        public byte[] Ts { get; set; } // ts
        public bool? OtherProvince { get; set; } // OtherProvince

        public CarBooking()
        {
            CreatedTime = DateTime.Now;
            Confirmed = false;
            OtherProvince = false;
        }
    }

    // Categories
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class Category
    {
        /// <summary>
        /// -1
        /// </summary>
        public int CategoryId { get; set; } // CategoryID (Primary key)

        /// <summary>
        /// 4152
        /// </summary>
        public string CategoryDescription { get; set; } // CategoryDescription (length: 50)
    }

    // CheckInOut
    public class CheckInOut
    {
        public int CheckInOutId { get; set; } // CheckInOutID (Primary key)
        public string UserFullCode { get; set; } // UserFullCode (length: 50)
        public int? UserEnrollNumber { get; set; } // UserEnrollNumber
        public DateTime? TimeDate { get; set; } // TimeDate
        public DateTime? TimeStr { get; set; } // TimeStr
        public string TimeType { get; set; } // TimeType (length: 5)
        public string TimeSource { get; set; } // TimeSource (length: 2)
        public int? MachineNo { get; set; } // MachineNo
        public string CardNo { get; set; } // CardNo (length: 30)
        public DateTime? TimeInOut { get; set; } // TimeInOut
        public byte[] Ts { get; set; } // ts
        public int? EmployeeId { get; set; } // EmployeeID
        public string MachineNameNo { get; set; } // MachineNameNo (length: 50)

        public CheckInOut()
        {
            UserEnrollNumber = 0;
            TimeType = "I";
            MachineNo = 0;
            CardNo = "00000000000";
        }
    }

    // The table 'CheckStockOtherSytem' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CheckStockOtherSytem
    public class CheckStockOtherSytem
    {
        public string EdiOrderNumber { get; set; } // EDI_OrderNumber (length: 30)
        public DateTime? OrderDate { get; set; } // OrderDate
        public string ProductNumber { get; set; } // ProductNumber (length: 50)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string CustomerRef { get; set; } // CustomerRef (length: 255)
        public int? QuantitySystemOther { get; set; } // QuantitySystemOther
        public string PalletStatusSystemOther { get; set; } // PalletStatusSystemOther (length: 255)
        public decimal? WeightsSystemOther { get; set; } // WeightsSystemOther
        public int? Quantity { get; set; } // Quantity
        public decimal? Weight { get; set; } // Weight
        public string PalletStatus { get; set; } // PalletStatus (length: 255)
        public bool? IsHold { get; set; } // IsHold
        public Guid? CheckStockId { get; set; } // CheckStockID
        public string CheckedBy { get; set; } // CheckedBy (length: 50)
        public DateTime? CheckedTime { get; set; } // CheckedTime
        public string ResultCheck { get; set; } // ResultCheck

        public CheckStockOtherSytem()
        {
            CheckStockId = Guid.NewGuid();
        }
    }

    // Classified_Categories
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class ClassifiedCategory
    {
        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // ID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string Name { get; set; } // Name (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string Description { get; set; } // Description (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string ImageUrl { get; set; } // ImageURL (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public int? CategoryId { get; set; } // CategoryID
    }

    // ClosedPeriods
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class ClosedPeriod
    {
        /// <summary>
        /// -1
        /// </summary>
        public int PeriodId { get; set; } // PeriodID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? FromDate { get; set; } // FromDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? ToDate { get; set; } // ToDate

        /// <summary>
        /// 2550
        /// </summary>
        public DateTime? CloseDate { get; set; } // CloseDate
    }

    // Combos
    public class Combo
    {
        public Guid ComboId { get; set; } // ComboID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public string Description { get; set; } // Description (length: 255)
        public bool Discontinute { get; set; } // Discontinute
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime

        public Combo()
        {
            ComboId = Guid.NewGuid();
            Discontinute = false;
            CreatedTime = DateTime.Now;
        }
    }

    // ComboDetails
    public class ComboDetail
    {
        public Guid ComboId { get; set; } // ComboID
        public Guid ProductId { get; set; } // ProductID
        public string Packages { get; set; } // Packages (length: 15)
        public int ProductQty { get; set; } // ProductQty
        public decimal ProductWeight { get; set; } // ProductWeight
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public bool Discontinute { get; set; } // Discontinute
        public Guid ComboDetailId { get; set; } // ComboDetailID (Primary key)

        public ComboDetail()
        {
            ProductWeight = 0.0m;
            CreatedTime = DateTime.Now;
            Discontinute = false;
            ComboDetailId = Guid.NewGuid();
        }
    }

    // Comments
    public class Comment
    {
        public int CommentId { get; set; } // CommentID (Primary key)
        public int Qhseid { get; set; } // QHSEID
        public DateTime CommentTime { get; set; } // CommentTime
        public string CommentBy { get; set; } // CommentBy (length: 30)
        public string Comment_ { get; set; } // Comment (length: 250)
        public byte[] Ts { get; set; } // ts
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string OrderNumber { get; set; } // OrderNumber (length: 50)

        public Comment()
        {
            CommentTime = DateTime.Now;
            UpdatedTime = DateTime.Now;
        }
    }

    // CommentRead
    public class CommentRead
    {
        public int CommentReadId { get; set; } // CommentReadID (Primary key)
        public string UserName { get; set; } // UserName (length: 30)
        public DateTime? CommentReadTime { get; set; } // CommentReadTime
        public int? CommentId { get; set; } // CommentID
    }

    // CommonColums
    public class CommonColum
    {
        public Guid CommonColumId { get; set; } // CommonColumID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public byte[] UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 30)
        public DateTime? RemovedTime { get; set; } // RemovedTime

        public CommonColum()
        {
            CommonColumId = Guid.NewGuid();
        }
    }

    // ContainerChecking
    public class ContainerChecking
    {
        public Guid ContainerCheckingId { get; set; } // ContainerCheckingID (Primary key)
        public Guid ContInOutId { get; set; } // ContInOutID
        public string TemperatureShow { get; set; } // TemperatureShow (length: 30)
        public string TemperatureSetup { get; set; } // TemperatureSetup (length: 30)
        public bool? Running { get; set; } // Running
        public bool? Thawing { get; set; } // Thawing
        public bool? Stop { get; set; } // Stop
        public bool? Error { get; set; } // Error
        public bool? ProductEmpty { get; set; } // ProductEmpty
        public bool? Seal { get; set; } // Seal
        public bool? Lock { get; set; } // Lock
        public string Remark { get; set; } // Remark (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? AttachmentFile { get; set; } // AttachmentFile
        public string LocationChecking { get; set; } // LocationChecking (length: 150)
        public string DockNumber { get; set; } // DockNumber (length: 5)
        public bool? NoOperation { get; set; } // NoOperation
        public string ContainerCheckingNumber { get; set; } // ContainerCheckingNumber (length: 20)
        public bool? Electricity { get; set; } // Electricity
        public string VehicleType { get; set; } // VehicleType (length: 2)
        public int? ContainerCheckingLocalId { get; set; } // ContainerCheckingLocalID

        public ContainerChecking()
        {
            ContainerCheckingId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Electricity = false;
        }
    }

    // Contracts
    /// <summary>
    /// 2
    /// Contracts.ContractDate
    /// True
    /// 0
    /// 0
    /// </summary>
    public class Contract
    {
        public Guid ContractId { get; set; } // ContractID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public Guid? ContractMainId { get; set; } // ContractMainID

        /// <summary>
        /// -1
        /// </summary>
        public string ContractNumber { get; set; } // ContractNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? ContractDate { get; set; } // ContractDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? StartDate { get; set; } // StartDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? EndDate { get; set; } // EndDate

        /// <summary>
        /// -1
        /// </summary>
        public string ContractRemark { get; set; } // ContractRemark (length: 1800)

        /// <summary>
        /// 0
        /// </summary>
        public int? ContractType { get; set; } // ContractType

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public string UpdateBy { get; set; } // UpdateBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? UpdateTime { get; set; } // UpdateTime

        /// <summary>
        /// 0
        /// </summary>
        public string ContractAccountingNumber { get; set; } // ContractAccountingNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public byte? BillingCycle { get; set; } // BillingCycle
        public DateTime? ReviewDate { get; set; } // ReviewDate
        public string InsuranceUnit { get; set; } // InsuranceUnit (length: 50)
        public decimal? InsuranceUnitValue { get; set; } // InsuranceUnitValue
        public decimal? ProductMaxValue { get; set; } // ProductMaxValue
        public byte? ContractProgressStatus { get; set; } // ContractProgressStatus
        public DateTime? ReturnedDate { get; set; } // ReturnedDate
        public string AppendixNumber { get; set; } // AppendixNumber (length: 50)
        public DateTime? AppendixDate { get; set; } // AppendixDate
        public bool AccountingSystemUpdated { get; set; } // AccountingSystemUpdated
        public DateTime? AccountingSystemUpdatedTime { get; set; } // AccountingSystemUpdatedTime
        public string CustomerSignGender { get; set; } // CustomerSignGender (length: 50)
        public string CustomerSignRepresentative { get; set; } // CustomerSignRepresentative (length: 150)
        public string CustomerSignPositionEnglish { get; set; } // CustomerSignPositionEnglish (length: 150)
        public string CustomerSignPositionVietnam { get; set; } // CustomerSignPositionVietnam (length: 150)
        public string CustomerSignEmail { get; set; } // CustomerSignEmail (length: 150)
        public int? PaymentTerms { get; set; } // PaymentTerms
        public Guid? QuotationId0 { get; set; } // QuotationID0
        public byte? Status { get; set; } // Status
        public string ContractEmail { get; set; } // ContractEmail (length: 3000)
        public int? QuotationId { get; set; } // QuotationID
        public bool? IsAttachment { get; set; } // IsAttachment

        /// <summary>
        /// 1: Monthly; 2: Other
        /// </summary>
        public byte? BillingEndDate { get; set; } // BillingEndDate
        public string SystemUpdatedBy { get; set; } // SystemUpdatedBy (length: 25)
        public DateTime? SystemUpdatedTime { get; set; } // SystemUpdatedTime

        // Reverse navigation

        /// <summary>
        /// Child ContractDetails where [ContractDetails].[ContractID] point to this entity (FK_ContractDetails_Contracts)
        /// </summary>
        public virtual ICollection<ContractDetail> ContractDetails { get; set; } // ContractDetails.FK_ContractDetails_Contracts

        public Contract()
        {
            ContractId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            BillingCycle = 1;
            ContractProgressStatus = 0;
            AccountingSystemUpdated = false;
            Status = 0;
            IsAttachment = false;
            ContractDetails = new List<ContractDetail>();
        }
    }

    // ContractAdjustments
    public class ContractAdjustment
    {
        public int ContractAdjustmentId { get; set; } // ContractAdjustmentID (Primary key)
        public DateTime ContractAdjustmentDate { get; set; } // ContractAdjustmentDate
        public string Adjustedby { get; set; } // Adjustedby (length: 50)
        public DateTime AdjustedTime { get; set; } // AdjustedTime
        public string AdjustmentDescriptions { get; set; } // AdjustmentDescriptions (length: 500)
        public string AdjustmentField { get; set; } // AdjustmentField (length: 200)
    }

    // ContractDetails
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class ContractDetail
    {
        public Guid ContractDetailId { get; set; } // ContractDetailID (Primary key)
        public Guid ContractId { get; set; } // ContractID
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID

        /// <summary>
        /// 109
        /// </summary>
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice

        /// <summary>
        /// -1
        /// </summary>
        public string ContractDetailRemark { get; set; } // ContractDetailRemark (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string CurrencyUnit { get; set; } // CurrencyUnit (length: 3)

        /// <summary>
        /// 0
        /// </summary>
        public double? CheckingQuantity { get; set; } // CheckingQuantity

        /// <summary>
        /// 0
        /// </summary>
        public double? CheckingQuantity2 { get; set; } // CheckingQuantity2
        public string UpdatedBy { get; set; } // UpdatedBy (length: 20)
        public DateTime? UpdateTime { get; set; } // UpdateTime
        public string ScopeOfWork { get; set; } // ScopeOfWork
        public string ScopeOfWorkVietnam { get; set; } // ScopeOfWorkVietnam
        public byte Vat { get; set; } // VAT
        public DateTime? StartWorkingTime { get; set; } // StartWorkingTime
        public DateTime? EndWorkingTime { get; set; } // EndWorkingTime

        // Foreign keys

        /// <summary>
        /// Parent Contract pointed by [ContractDetails].([ContractId]) (FK_ContractDetails_Contracts)
        /// </summary>
        public virtual Contract Contract { get; set; } // FK_ContractDetails_Contracts

        /// <summary>
        /// Parent ServicesDefinition pointed by [ContractDetails].([ServicesDefinitionId]) (FK_ContractDetails_ServicesDefinition)
        /// </summary>
        public virtual ServicesDefinition ServicesDefinition { get; set; } // FK_ContractDetails_ServicesDefinition

        public ContractDetail()
        {
            ContractDetailId = Guid.NewGuid();
            ServicesDefinitionId = Guid.NewGuid();
            CurrencyUnit = "USD";
            CheckingQuantity = 0;
            Vat = 0;
        }
    }

    // ContractEmployeeServices
    public class ContractEmployeeService
    {
        public int ContractEmployeeServiceId { get; set; } // ContractEmployeeServiceID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? SupervisorPercentage { get; set; } // SupervisorPercentage
        public Guid CustomerId { get; set; } // CustomerID
        public Guid WorkDefinitionId { get; set; } // WorkDefinitionID
        public Guid? ContractDetailId { get; set; } // ContractDetailID

        public ContractEmployeeService()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // ContractLocations
    public class ContractLocation
    {
        public int ContractLocationId { get; set; } // ContractLocationID (Primary key)
        public Guid? LocationId { get; set; } // LocationID
        public Guid ContractId { get; set; } // ContractID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public ContractLocation()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // ContractStatus
    public class ContractStatu
    {
        public int ContractStatusId { get; set; } // ContractStatusID (Primary key)
        public string ConstractStatusDescriptions { get; set; } // ConstractStatusDescriptions (length: 250)
    }

    // CoreValueDefinitions
    public class CoreValueDefinition
    {
        public int CoreValueId { get; set; } // CoreValueID (Primary key)
        public string CoreValueName { get; set; } // CoreValueName (length: 100)
    }

    // CoreValueEmployeeEvaluations
    public class CoreValueEmployeeEvaluation
    {
        public int CoreValueEmployeeEvaluationId { get; set; } // CoreValueEmployeeEvaluationID (Primary key)
        public string Evaluator { get; set; } // Evaluator (length: 30)
        public DateTime? PeriodDate { get; set; } // PeriodDate
        public Guid EmployeeId { get; set; } // EmployeeID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public int? Confirmed { get; set; } // Confirmed
        public byte[] Ts { get; set; } // TS

        public CoreValueEmployeeEvaluation()
        {
            PeriodDate = DateTime.Now;
            CreatedTime = DateTime.Now;
            Confirmed = 0;
        }
    }

    // CoreValueEmployeeEvaluationDetails
    public class CoreValueEmployeeEvaluationDetail
    {
        public int CoreValueEmployeeEvaluationDetailId { get; set; } // CoreValueEmployeeEvaluationDetailID (Primary key)
        public int CoreValueEmployeeEvaluationId { get; set; } // CoreValueEmployeeEvaluationID
        public int CoreValueId { get; set; } // CoreValueID
        public float Score { get; set; } // Score
        public string Comment { get; set; } // Comment (length: 500)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string Comment1 { get; set; } // Comment1 (length: 500)

        public CoreValueEmployeeEvaluationDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CoreValuesDishonestBehaviors
    public class CoreValuesDishonestBehavior
    {
        public int CoreValuesDishonestBehaviorId { get; set; } // CoreValuesDishonestBehaviorID (Primary key)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string Description { get; set; } // Description (length: 500)
        public string EmployeeName { get; set; } // EmployeeName (length: 50)
        public string Mobile { get; set; } // Mobile (length: 50)
        public byte[] Ts { get; set; } // ts

        public CoreValuesDishonestBehavior()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CoreValueVotes
    public class CoreValueVote
    {
        public int CoreValueVoteId { get; set; } // CoreValueVoteID (Primary key)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// Tên người được đề cử nhận thưởng
        /// </summary>
        public string EmployeeName { get; set; } // EmployeeName (length: 50)

        /// <summary>
        /// Tên người được đề cử nhận thưởng
        /// </summary>
        public string EmployeeDepartment { get; set; } // EmployeeDepartment (length: 50)
        public int? CoreValueId { get; set; } // CoreValueID
        public string ActionDescription { get; set; } // ActionDescription (length: 2000)

        /// <summary>
        /// Tên người đề cử
        /// </summary>
        public string NominatorName { get; set; } // NominatorName (length: 50)

        /// <summary>
        /// Tên người được đề cử nhận thưởng
        /// </summary>
        public string NominatorDepartment { get; set; } // NominatorDepartment (length: 50)

        public CoreValueVote()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CRM_Meetings
    public class CrmMeeting
    {
        public int MeetingId { get; set; } // MeetingID (Primary key)
        public string SubjectName { get; set; } // SubjectName (length: 150)
        public string Location { get; set; } // Location (length: 100)
        public string Description { get; set; } // Description (length: 700)
        public int? CustomerId { get; set; } // CustomerID
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string Status { get; set; } // Status (length: 25)
        public bool? AllDayEvent { get; set; } // AllDayEvent
        public bool Deleted { get; set; } // Deleted

        /// <summary>
        /// Appointment; Call, Meeting
        /// </summary>
        public string Category { get; set; } // Category (length: 30)
        public string Label { get; set; } // Label (length: 30)
        public int? MeetingLocalId { get; set; } // MeetingLocalID

        public CrmMeeting()
        {
            CreatedTime = DateTime.Now;
            Deleted = false;
        }
    }

    // CRM_Meetings_Users
    public class CrmMeetingsUser
    {
        public int MeetingUserId { get; set; } // MeetingUserID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int MeetingId { get; set; } // MeetingID
        public string UserId { get; set; } // UserID (length: 25)
        public bool Deleted { get; set; } // Deleted
        public bool? Required { get; set; } // Required
        public bool? ReminderDismissed { get; set; } // ReminderDismissed
        public int? MeetingLocalId { get; set; } // MeetingLocalID
        public byte? AcceptStatus { get; set; } // AcceptStatus

        public CrmMeetingsUser()
        {
            CreatedTime = DateTime.Now;
            Deleted = false;
            Required = true;
            ReminderDismissed = false;
            AcceptStatus = 0;
        }
    }

    // CRM_Opportunities
    public class CrmOpportunity
    {
        public Guid OpportunityId { get; set; } // OpportunityID (Primary key)
        public string OpportunityNumber { get; set; } // OpportunityNumber (length: 16)
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime (Primary key)
        public string OpportunityName { get; set; } // OpportunityName (length: 150)
        public bool Deleted { get; set; } // Deleted (Primary key)
        public string Description { get; set; } // Description (length: 700)
        public decimal? Probability { get; set; } // Probability
        public string AssignedToUser { get; set; } // AssignedToUser (length: 25)
        public string OpportunityType { get; set; } // OpportunityType (length: 255)
        public string SalesStage { get; set; } // SalesStage (length: 25)
        public int? ForecastingPallets { get; set; } // ForecastingPallets
        public int? ForecastingCartons { get; set; } // ForecastingCartons
        public int? ForecastingUnits { get; set; } // ForecastingUnits
        public decimal? ForecastingWeights { get; set; } // ForecastingWeights
        public DateTime? ClosedDate { get; set; } // ClosedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 25)
        public string DeletedBy { get; set; } // DeletedBy (length: 25)
        public int? CustomerId { get; set; } // CustomerID
        public bool? Confirmed { get; set; } // Confirmed
        public string Emails { get; set; } // Emails (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Phone { get; set; } // Phone (length: 50)
        public string Mobile { get; set; } // Mobile (length: 11)
        public string Contacts { get; set; } // Contacts (length: 150)
        public string Website { get; set; } // Website (length: 70)
        public int? CustomerCategory { get; set; } // CustomerCategory
        public string CustomerType { get; set; } // CustomerType (length: 50)

        public CrmOpportunity()
        {
            OpportunityId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Deleted = false;
            Confirmed = false;
        }
    }

    // CRM_OpportunityDetails
    public class CrmOpportunityDetail
    {
        public int OpportunitieDetailId { get; set; } // OpportunitieDetailID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public DateTime PlanningDate { get; set; } // PlanningDate
        public int? Pallets { get; set; } // Pallets
        public decimal? Weights { get; set; } // Weights
        public int? Cartons { get; set; } // Cartons
        public int? Units { get; set; } // Units
        public string Remark { get; set; } // Remark (length: 200)
        public Guid OpportunityId { get; set; } // OpportunityID
        public byte[] Ts { get; set; } // ts
        public string CategoryDetails { get; set; } // CategoryDetails (length: 50)

        public CrmOpportunityDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CRM_OpportunityServices
    public class CrmOpportunityService
    {
        public Guid OpportunityServiceId { get; set; } // OpportunityServiceID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid OpportunityId { get; set; } // OpportunityID
        public int ServiceId { get; set; } // ServiceID
        public decimal? ServicePrice { get; set; } // ServicePrice
        public string Remark { get; set; } // Remark (length: 50)
        public byte[] Ts { get; set; } // ts

        public CrmOpportunityService()
        {
            OpportunityServiceId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // Customers
    /// <summary>
    /// 2
    /// Customers.CustomerID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class Customer
    {
        public Guid CustomerId { get; set; } // CustomerID (Primary key)
        public int? CustomerLocalId { get; set; } // CustomerLocalID

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// 3696
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string CustomerFullName { get; set; } // CustomerFullName (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public string Initial { get; set; } // Initial (length: 3)
        public Guid? CustomerMainId { get; set; } // CustomerMainID

        /// <summary>
        /// 2850
        /// </summary>
        public string Address { get; set; } // Address (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerType { get; set; } // CustomerType (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string PrimaryContact { get; set; } // PrimaryContact (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public string Phone1 { get; set; } // Phone1 (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Phone2 { get; set; } // Phone2 (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Mobile { get; set; } // Mobile (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public string Fax { get; set; } // Fax (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Email { get; set; } // Email (length: 3000)

        /// <summary>
        /// -1
        /// </summary>
        public string OtherContacts { get; set; } // OtherContacts (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public string MarketingInfor { get; set; } // MarketingInfor (length: 4000)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerInvoiceName { get; set; } // CustomerInvoiceName (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerInvoiceAddress { get; set; } // CustomerInvoiceAddress (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerInvoiceTaxCode { get; set; } // CustomerInvoiceTaxCode (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public bool CustomerDiscontinued { get; set; } // CustomerDiscontinued

        /// <summary>
        /// -1
        /// </summary>
        public byte CustomerCategory { get; set; } // CustomerCategory

        /// <summary>
        /// -1
        /// </summary>
        public byte? CustomerGroup { get; set; } // CustomerGroup

        /// <summary>
        /// -1
        /// </summary>
        public bool? SendNote { get; set; } // SendNote

        /// <summary>
        /// -1
        /// </summary>
        public int? CustomerSubId { get; set; } // CustomerSubID

        /// <summary>
        /// 0
        /// </summary>
        public bool? Hold { get; set; } // Hold

        /// <summary>
        /// 0
        /// </summary>
        public string HoldMessage { get; set; } // HoldMessage (length: 500)
        public int? HoldLimitWeight { get; set; } // HoldLimitWeight

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // ts

        /// <summary>
        /// 0
        /// </summary>
        public bool? HomeLocationChange { get; set; } // HomeLocationChange

        /// <summary>
        /// 0
        /// </summary>
        public bool? DispatchingByClient { get; set; } // DispatchingByClient

        /// <summary>
        /// XÓA
        /// </summary>
        public string CustomerPalletType { get; set; } // CustomerPalletType (length: 4)

        /// <summary>
        /// -1
        /// </summary>
        public string Website { get; set; } // Website (length: 100)

        /// <summary>
        /// -1
        /// </summary>
        public string EmailBilling { get; set; } // EmailBilling (length: 500)

        /// <summary>
        /// -1
        /// </summary>
        public byte? CustomerDispatchType { get; set; } // CustomerDispatchType
        public bool? IsAllowEdi { get; set; } // IsAllowEDI
        public string CustomerTaxGroup { get; set; } // CustomerTaxGroup (length: 100)
        public bool? BarcodeScanRequire { get; set; } // BarcodeScanRequire
        public bool? PrintLabelRemainRequire { get; set; } // PrintLabelRemainRequire
        public short? DefaultProcessTime { get; set; } // DefaultProcessTime
        public int StoreId { get; set; } // StoreID
        public byte? CustomerPotentialCategoryId { get; set; } // CustomerPotentialCategoryID
        public bool? IsAllowOnlineReport { get; set; } // IsAllowOnlineReport
        public Guid HomeLocation1 { get; set; } // HomeLocation1
        public Guid HomeLocation2 { get; set; } // HomeLocation2

        /// <summary>
        /// HQ CustomerID
        /// </summary>
        public string CustId { get; set; } // CustId (length: 250)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte? CustomerStatus { get; set; } // CustomerStatus
        public string OpportunityType { get; set; } // OpportunityType (length: 255)
        public decimal? OpportunityProbability { get; set; } // OpportunityProbability
        public string OpportunityAssignedToUser { get; set; } // OpportunityAssignedToUser (length: 100)
        public string CustomerNumberAccounting { get; set; } // CustomerNumberAccounting (length: 50)
        public bool? IsCustomerTest { get; set; } // IsCustomerTest
        public Guid? CustomerAssignedTo { get; set; } // CustomerAssignedTo
        public int? CustomerAssignedTo0 { get; set; } // CustomerAssignedTo0
        public int? IsCheckOutRequire { get; set; } // IsCheckOutRequire
        public float? TemperatureFrom { get; set; } // TemperatureFrom
        public float? TemperatureTo { get; set; } // TemperatureTo
        public float? HumidityFrom { get; set; } // HumidityFrom
        public float? HumidityTo { get; set; } // HumidityTo
        public string CustomerNumberErp { get; set; } // CustomerNumberERP (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child DispatchingOrders where [DispatchingOrders].[CustomerID] point to this entity (FK_DispatchingOrders_Customers)
        /// </summary>
        public virtual ICollection<DispatchingOrder> DispatchingOrders { get; set; } // DispatchingOrders.FK_DispatchingOrders_Customers

        /// <summary>
        /// Child ReceivingOrders where [ReceivingOrders].[CustomerID] point to this entity (FK_ReceivingOrders_Customers)
        /// </summary>
        public virtual ICollection<ReceivingOrder> ReceivingOrders { get; set; } // ReceivingOrders.FK_ReceivingOrders_Customers

        /// <summary>
        /// Child SalesOrders where [SalesOrders].[CustomerID] point to this entity (FK_SaleOrder_Customer)
        /// </summary>
        public virtual ICollection<SalesOrder> SalesOrders { get; set; } // SalesOrders.FK_SaleOrder_Customer

        /// <summary>
        /// Child XDocPickingLists where [XDoc_PickingList].[CustomerID] point to this entity (FK_CustomerID)
        /// </summary>
        public virtual ICollection<XDocPickingList> XDocPickingLists { get; set; } // XDoc_PickingList.FK_CustomerID

        public Customer()
        {
            CustomerId = Guid.NewGuid();
            CustomerType = "ByPalletID";
            CustomerDiscontinued = false;
            CustomerCategory = 1;
            Hold = false;
            HomeLocationChange = true;
            DispatchingByClient = false;
            CustomerDispatchType = 1;
            IsAllowEdi = true;
            BarcodeScanRequire = true;
            DefaultProcessTime = 0;
            StoreId = 1;
            CustomerPotentialCategoryId = 1;
            IsAllowOnlineReport = false;
            CreatedTime = DateTime.Now;
            IsCustomerTest = false;
            IsCheckOutRequire = 1;
            DispatchingOrders = new List<DispatchingOrder>();
            ReceivingOrders = new List<ReceivingOrder>();
            SalesOrders = new List<SalesOrder>();
            XDocPickingLists = new List<XDocPickingList>();
        }
    }

    // CustomerAccounting
    public class CustomerAccounting
    {
        public string AccountingCustomerCode { get; set; } // AccountingCustomerCode (Primary key) (length: 10)
        public int CustomerId { get; set; } // CustomerID
    }

    // CustomerAssignedTo
    public class CustomerAssignedTo
    {
        public int CustomerAssignedToId { get; set; } // CustomerAssignedToID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public Guid CustomerAssignedTo_ { get; set; } // CustomerAssignedTo
        public string AssignedBy { get; set; } // AssignedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public CustomerAssignedTo()
        {
            CustomerId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerBookings
    public class CustomerBooking
    {
        public Guid CustomerBookingId { get; set; } // CustomerBookingID (Primary key)
        public string CustomerBookingNumber { get; set; } // CustomerBookingNumber (length: 16)
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string RequestDescription { get; set; } // RequestDescription (length: 500)
        public string ResponsedDescription { get; set; } // ResponsedDescription (length: 500)
        public string ResponsedBy { get; set; } // ResponsedBy (length: 25)
        public DateTime? ResponsedTime { get; set; } // ResponsedTime
        public DateTime? BookingDate { get; set; } // BookingDate

        /// <summary>
        /// 0-Waiting; 1-Deny; 2-Accept
        /// </summary>
        public string Status { get; set; } // Status (length: 15)
        public int? TotalPallets { get; set; } // TotalPallets
        public int? TotalPackages { get; set; } // TotalPackages
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeights { get; set; } // TotalWeights
        public string VehicleType { get; set; } // VehicleType (length: 30)
        public bool? IsDeleted { get; set; } // IsDeleted
        public DateTime? WhConfirmedTime { get; set; } // WHConfirmedTime
        public string OrderType { get; set; } // OrderType (length: 30)
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 30)
        public int? TimeSlotId { get; set; } // TimeSlotID
        public byte? WarehouseId { get; set; } // WarehouseID
        public byte[] Ts { get; set; } // ts
        public Guid CustomerId { get; set; } // CustomerID
        public DateTime? StartTime { get; set; } // StartTime

        public CustomerBooking()
        {
            CustomerBookingId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            TotalPallets = 0;
            TotalUnits = 0;
            TotalWeights = 0m;
            IsDeleted = false;
        }
    }

    // CustomerBookingDetails
    public class CustomerBookingDetail
    {
        public Guid CustomerBookingDetailId { get; set; } // CustomerBookingDetailID (Primary key)
        public Guid CustomerBookingId { get; set; } // CustomerBookingID
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public Guid? ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int? Pallets { get; set; } // Pallets
        public int? Cartons { get; set; } // Cartons
        public decimal? Weights { get; set; } // Weights
        public int? Units { get; set; } // Units
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string Remark { get; set; } // Remark (length: 50)
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public long? PalletNumber { get; set; } // PalletNumber
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 20)

        /// <summary>
        /// 0: Plan; 1: waiting; 2: confirmed; 3: confirmed priority dispatch; 4: quarantined
        /// </summary>
        public byte Status { get; set; } // Status
        public byte[] Ts { get; set; } // TS

        public CustomerBookingDetail()
        {
            CustomerBookingDetailId = Guid.NewGuid();
            CustomerBookingId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            ProductId = Guid.NewGuid();
            Status = 0;
        }
    }

    // CustomerBookingTimeSlots
    public class CustomerBookingTimeSlot
    {
        public int TimeSlotId { get; set; } // TimeSlotID (Primary key)
        public string TimeSlot { get; set; } // TimeSlot (length: 50)
        public TimeSpan? SlotStartTime { get; set; } // SlotStartTime
        public TimeSpan? SlotEndTime { get; set; } // SlotEndTime
    }

    // CustomerCategories
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class CustomerCategory
    {
        /// <summary>
        /// -1
        /// </summary>
        public byte CustomerCategoryId { get; set; } // CustomerCategoryID (Primary key)

        /// <summary>
        /// 2676
        /// </summary>
        public string CustomerCategoryDescription { get; set; } // CustomerCategoryDescription (length: 50)

        /// <summary>
        /// 3000
        /// </summary>
        public byte? DefaultProductCategory { get; set; } // DefaultProductCategory
        public string StorageRoom { get; set; } // StorageRoom (length: 200)
        public string TemperatureRange { get; set; } // TemperatureRange (length: 200)
        public string HumidityRange { get; set; } // HumidityRange (length: 200)
        public string OtherRequirement { get; set; } // OtherRequirement (length: 250)
    }

    // CustomerClients
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class CustomerClient
    {
        /// <summary>
        /// 0
        /// </summary>
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 255)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerClientName { get; set; } // CustomerClientName (length: 255)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerClientDescriptions { get; set; } // CustomerClientDescriptions (length: 1000)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerClientAddress { get; set; } // CustomerClientAddress (length: 500)
        public string CustomerClientDeliveryAddress { get; set; } // CustomerClientDeliveryAddress (length: 500)
        public string BillToLocation { get; set; } // BILL_TO_LOCATION (length: 100)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 500)
        public string ShipToAddress { get; set; } // SHIP_TO_ADDRESS (length: 500)
        public string AddressProvince { get; set; } // AddressProvince (length: 255)
        public string AddressDistrict { get; set; } // AddressDistrict (length: 255)
        public string AddressWard { get; set; } // AddressWard (length: 255)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerClientContacts { get; set; } // CustomerClientContacts (length: 255)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerClientPhone { get; set; } // CustomerClientPhone (length: 255)
        public Guid? CustomerClientMainId { get; set; } // CustomerClientMainID
        public Guid CustomerClientId { get; set; } // CustomerClientID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerClientEmail { get; set; } // CustomerClientEmail (length: 255)
        public string CustomerClientTaxName { get; set; } // CustomerClientTaxName (length: 255)
        public string CustomerClientTaxCode { get; set; } // CustomerClientTaxCode (length: 255)
        public int? CustomerClientCodeFbv { get; set; } // CustomerClientCodeFBV
        public string CustomerClientMain { get; set; } // CustomerClientMain (length: 255)
        public float? DiscountAmountPercentage { get; set; } // DiscountAmountPercentage
        public short? CustomerClientCreditTerm { get; set; } // CustomerClientCreditTerm
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public string CustomerClientBuyer { get; set; } // CustomerClientBuyer (length: 150)
        public byte[] Ts { get; set; } // TS
        public float? Shelflife { get; set; } // Shelflife
        public string AddressMapCoordinates { get; set; } // AddressMapCoordinates (length: 200)
        public string DefaultRoute { get; set; } // DefaultRoute (length: 70)
        public float? DeadlineNumber { get; set; } // DeadlineNumber
        public string SaleChannel { get; set; } // SaleChannel (length: 10)
        public string CustomerClass { get; set; } // CustomerClass (length: 30)
        public bool? CustomeClientActive { get; set; } // CustomeClientActive
        public int? StoreNumber { get; set; } // StoreNumber
        public Guid? CustomerDeliveryRouteId { get; set; } // CustomerDeliveryRouteID
        public bool? Priority { get; set; } // Priority
        public bool? PriorityLot { get; set; } // PriorityLot
        public string ShipTime { get; set; } // ShipTime (length: 30)
        public bool? PriorityLotOld { get; set; } // PriorityLotOld
        public string LocationGid { get; set; } // LOCATION_GID (length: 101)

        /// <summary>
        /// Số thứ tự Pallet chia hàng
        /// </summary>
        public int? PalletNumber { get; set; } // PalletNumber
        public bool? CheckWeightOrder { get; set; } // CheckWeightOrder
        public string OtmShipTo { get; set; } // OTM_ShipTo (length: 100)
        public string Region { get; set; } // Region (length: 255)
        public decimal? Lat { get; set; } // Lat
        public decimal? Long { get; set; } // Long
        public int? RouteIndex { get; set; } // RouteIndex
        public bool? PriorityFull { get; set; } // PriorityFull

        // Reverse navigation

        /// <summary>
        /// Child SalesOrders where [SalesOrders].[StoreID] point to this entity (FK_SaleOrder_CustomerClients)
        /// </summary>
        public virtual ICollection<SalesOrder> SalesOrders { get; set; } // SalesOrders.FK_SaleOrder_CustomerClients

        /// <summary>
        /// Child TempIndexRouteDeliveries where [TempIndexRouteDelivery].[CustomerClientID] point to this entity (FK_TempIndexRouteCustomerClietns)
        /// </summary>
        public virtual ICollection<TempIndexRouteDelivery> TempIndexRouteDeliveries { get; set; } // TempIndexRouteDelivery.FK_TempIndexRouteCustomerClietns

        /// <summary>
        /// Child XDocPickingLists where [XDoc_PickingList].[CustomerClientID] point to this entity (FK_CustomerClientID)
        /// </summary>
        public virtual ICollection<XDocPickingList> XDocPickingLists { get; set; } // XDoc_PickingList.FK_CustomerClientID

        public CustomerClient()
        {
            ShipToLocation = "";
            CustomerClientId = Guid.NewGuid();
            DiscountAmountPercentage = 0f;
            CreatedTime = DateTime.Now;
            DefaultRoute = "(((0)-(0))-(0))-(0))-(0.";
            CustomeClientActive = true;
            StoreNumber = 0;
            Priority = false;
            PriorityLot = false;
            PriorityLotOld = false;
            PalletNumber = 0;
            CheckWeightOrder = false;
            OtmShipTo = "";
            SalesOrders = new List<SalesOrder>();
            TempIndexRouteDeliveries = new List<TempIndexRouteDelivery>();
            XDocPickingLists = new List<XDocPickingList>();
        }
    }

    // CustomerClientAddressDistricts
    public class CustomerClientAddressDistrict
    {
        public string CustomerClientAddressDistrictId { get; set; } // CustomerClientAddressDistrictID (Primary key) (length: 100)
        public string DistrictName { get; set; } // DistrictName (length: 100)
        public int CustomerClientAddressProvinceId { get; set; } // CustomerClientAddressProvinceID
    }

    // CustomerClientAddressProvinces
    public class CustomerClientAddressProvince
    {
        public string CustomerClientAddressProvinceId { get; set; } // CustomerClientAddressProvinceID (Primary key) (length: 100)
        public string ProvinceName { get; set; } // ProvinceName (length: 150)
    }

    // CustomerClientProductsImport
    public class CustomerClientProductsImport
    {
        public int CustomerClientProductsImportId { get; set; } // CustomerClientProductsImportID (Primary key)
        public string CustomerNumber { get; set; } // CUSTOMER_NUMBER (length: 50)
        public string CustomerName { get; set; } // CUSTOMER_NAME (length: 300)
        public string CustomerItemNumber { get; set; } // CUSTOMER_ITEM_NUMBER (length: 30)
        public string CustomerItemDesc { get; set; } // CUSTOMER_ITEM_DESC (length: 300)
        public string ItemNumber { get; set; } // ITEM_NUMBER (length: 30)
        public string ItemDescription { get; set; } // ITEM_DESCRIPTION (length: 300)
        public string CustomerStatus { get; set; } // CUSTOMER_STATUS (length: 30)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
    }

    // CustomerClientsImport
    public class CustomerClientsImport
    {
        public int CustomerClientsImportId { get; set; } // CustomerClientsImportID (Primary key)
        public string CustomerNumber { get; set; } // CUSTOMER_NUMBER (length: 30)
        public string CustomerName { get; set; } // CUSTOMER_NAME (length: 255)
        public string AliasName { get; set; } // ALIAS_NAME (length: 255)
        public string SaleChannel { get; set; } // SALE_CHANNEL (length: 255)
        public string CustomerClass { get; set; } // CUSTOMER_CLASS (length: 255)
        public string CustomerStatus { get; set; } // CUSTOMER_STATUS (length: 255)
        public string Address { get; set; } // ADDRESS (length: 255)
        public string Province { get; set; } // PROVINCE (length: 255)
        public string ProvinceDesc { get; set; } // PROVINCE_DESC (length: 255)
        public string Address3 { get; set; } // ADDRESS3 (length: 255)
        public string DistrictDesc { get; set; } // DISTRICT_DESC (Primary key) (length: 255)
        public string Address4 { get; set; } // ADDRESS4 (length: 255)
        public string WardDesc { get; set; } // WARD_DESC (length: 255)
        public string CustomerSiteStatus { get; set; } // CUSTOMER_SITE_STATUS (length: 255)
        public string SiteUseCode { get; set; } // SITE_USE_CODE (length: 255)
        public string Location { get; set; } // LOCATION (length: 255)
        public string BillToLocation { get; set; } // BILL_TO_LOCATION (length: 255)
        public string ContactName { get; set; } // CONTACT_NAME (length: 255)
        public string EmailAddress { get; set; } // EMAIL_ADDRESS (length: 255)
        public string PhoneNumberAlt { get; set; } // PHONE_NUMBER_ALT (length: 20)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 255)
        public string ShipToAddress { get; set; } // SHIP_TO_ADDRESS (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public int? StoreNumber { get; set; } // STORE_NUMBER
    }

    // CustomerContacts
    /// <summary>
    /// 0
    /// </summary>
    public class CustomerContact
    {
        public Guid CustomerContactId { get; set; } // CustomerContactID (Primary key)
        public Guid CustomerMainId { get; set; } // CustomerMainID

        /// <summary>
        /// 0
        /// </summary>
        public string Name { get; set; } // Name (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string Position { get; set; } // Position (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string Phone { get; set; } // Phone (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string Mobile { get; set; } // Mobile (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string Address { get; set; } // Address (length: 1000)

        /// <summary>
        /// 0
        /// </summary>
        public string Email { get; set; } // Email (length: 1000)

        /// <summary>
        /// 0
        /// </summary>
        public string Fax { get; set; } // Fax (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string ContactRemark { get; set; } // ContactRemark (length: 1000)

        /// <summary>
        /// 0
        /// </summary>
        public string JobDescription { get; set; } // JobDescription (length: 1000)
        public bool Active { get; set; } // Active
        public DateTime? BirthDate { get; set; } // BirthDate
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 500)

        public CustomerContact()
        {
            CustomerContactId = Guid.NewGuid();
            Active = true;
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerContractAmendments
    public class CustomerContractAmendment
    {
        public int CustomerContractAmendmentId { get; set; } // CustomerContractAmendmentID (Primary key)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string BeforeAmendment { get; set; } // BeforeAmendment (length: 500)
        public string AfterAmendment { get; set; } // AfterAmendment (length: 500)
        public int CustomerContractId { get; set; } // CustomerContractID
        public string AmendmentReason { get; set; } // AmendmentReason (length: 1000)
    }

    // CustomerDeliveryRoutes
    public class CustomerDeliveryRoute
    {
        public Guid CustomerDeliveryRouteId { get; set; } // CustomerDeliveryRouteID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public string RouteCode { get; set; } // RouteCode (length: 10)
        public string RouteDescriptions { get; set; } // RouteDescriptions (length: 250)
        public int? RouteDistrictFirst { get; set; } // RouteDistrictFirst
        public int? RouteDistrictLast { get; set; } // RouteDistrictLast
        public int? RouteProvinceFirst { get; set; } // RouteProvinceFirst
        public int? RouteProvinceLast { get; set; } // RouteProvinceLast
        public int? TruckId { get; set; } // TruckID
        public string VehicleNo { get; set; } // VehicleNo (length: 30)
        public string DriverName { get; set; } // DriverName (length: 255)
        public int? TransporterId { get; set; } // TransporterID

        public CustomerDeliveryRoute()
        {
            CustomerDeliveryRouteId = Guid.NewGuid();
        }
    }

    // CustomerDispatchMethod
    public class CustomerDispatchMethod
    {
        public byte CustomerDispatchMethodId { get; set; } // CustomerDispatchMethodID (Primary key)
        public string CustomerDispatchMethod_ { get; set; } // CustomerDispatchMethod (length: 100)
        public string Remark { get; set; } // Remark (length: 100)
    }

    // CustomerEvents
    public class CustomerEvent
    {
        public Guid CustomerEventId { get; set; } // CustomerEventID (Primary key)
        public string CustomerEventNumber { get; set; } // CustomerEventNumber (length: 12)
        public DateTime EventDate { get; set; } // EventDate
        public string EventDescription { get; set; } // EventDescription (length: 1000)
        public bool? ReminderRequired { get; set; } // ReminderRequired
        public DateTime? ReminderTime { get; set; } // ReminderTime
        public string ReminderText { get; set; } // ReminderText (length: 250)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 1000)
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 20)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public string DocumentFolder { get; set; } // DocumentFolder (length: 200)
        public byte[] Ts { get; set; } // TS
        public bool? Confirmed { get; set; } // Confirmed
        public byte? ConfidentialLevel { get; set; } // ConfidentialLevel
        public byte? EventCategory { get; set; } // EventCategory
        public Guid CustomerMainId { get; set; } // CustomerMainID

        public CustomerEvent()
        {
            CustomerEventId = Guid.NewGuid();
            ReminderRequired = false;
            Confirmed = false;
            ConfidentialLevel = 0;
            EventCategory = 1;
        }
    }

    // CustomerEventCategories
    public class CustomerEventCategory
    {
        public int CustomerEventCategoryId { get; set; } // CustomerEventCategoryID (Primary key)
        public string CategoryDescriptions { get; set; } // CategoryDescriptions (length: 150)
    }

    // CustomerGroups
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class CustomerGroup
    {
        /// <summary>
        /// 0
        /// </summary>
        public byte CustomerGroupId { get; set; } // CustomerGroupID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerGroupDescription { get; set; } // CustomerGroupDescription (length: 50)
    }

    // CustomerHoldHistories
    /// <summary>
    /// 2
    /// True
    /// 0
    /// 0
    /// </summary>
    public class CustomerHoldHistory
    {
        /// <summary>
        /// -1
        /// </summary>
        public int CustomerHoldHistoryId { get; set; } // CustomerHoldHistoryID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public bool? Hold { get; set; } // Hold

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? HoldTime { get; set; } // HoldTime

        /// <summary>
        /// 0
        /// </summary>
        public string HoldBy { get; set; } // HoldBy (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public string HoldDescription { get; set; } // HoldDescription (length: 200)
        public Guid? CustomerMainId { get; set; } // CustomerMainID
    }

    // customerIDTest
    public class CustomerIdTest
    {
        public Guid CustomerId { get; set; } // CustomerID (Primary key)
    }

    // CustomerInquiries
    /// <summary>
    /// System.Byte[]
    /// </summary>
    public class CustomerInquiry
    {
        public int CustomerInquiryId { get; set; } // CustomerInquiryID (Primary key)
        public string CustomerInquiryNumber { get; set; } // CustomerInquiryNumber (length: 255)
        public DateTime? CustomerInquiryDate { get; set; } // CustomerInquiryDate
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CustomerInquiryRemark { get; set; } // CustomerInquiryRemark
        public short? CustomerInquiryStatus { get; set; } // CustomerInquiryStatus
        public int? CustomerCategoryId { get; set; } // CustomerCategoryID
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? CustomerMainId { get; set; } // CustomerMainID
        public int? StoreId { get; set; } // StoreID
    }

    // CustomerInquiryDetails
    /// <summary>
    /// 0
    /// </summary>
    public class CustomerInquiryDetail
    {
        public int CustomerInquiryDetailId { get; set; } // CustomerInquiryDetailID (Primary key)
        public int? CustomerInquiryId { get; set; } // CustomerInquiryID
        public int? CustomerInquiryProductDefinitionId { get; set; } // CustomerInquiryProductDefinitionID
        public int? CustomerInquiryQuantity { get; set; } // CustomerInquiryQuantity
        public string CustomerInquiryDetailRemark { get; set; } // CustomerInquiryDetailRemark (length: 1000)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? CustomerId { get; set; } // CustomerID
        public string TemperatureRange { get; set; } // TemperatureRange (length: 255)
        public string HumidityRange { get; set; } // HumidityRange (length: 255)
        public string StorageRoom { get; set; } // StorageRoom (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child CustomerInquiryServices where [CustomerInquiryServices].[CustomerInquiryDetailID] point to this entity (FK_CustomerInquiryServices_CustomerInquiryDetails)
        /// </summary>
        public virtual ICollection<CustomerInquiryService> CustomerInquiryServices { get; set; } // CustomerInquiryServices.FK_CustomerInquiryServices_CustomerInquiryDetails

        // Foreign keys

        /// <summary>
        /// Parent CustomerInquiryProductDefinition pointed by [CustomerInquiryDetails].([CustomerInquiryProductDefinitionId]) (FK_CustomerInquiryDetails_CustomerInquiryProductDefinitions)
        /// </summary>
        public virtual CustomerInquiryProductDefinition CustomerInquiryProductDefinition { get; set; } // FK_CustomerInquiryDetails_CustomerInquiryProductDefinitions

        public CustomerInquiryDetail()
        {
            CustomerInquiryServices = new List<CustomerInquiryService>();
        }
    }

    // CustomerInquiryProductDefinitions
    /// <summary>
    /// 0
    /// </summary>
    public class CustomerInquiryProductDefinition
    {
        public int CustomerInquiryProductDefinitionId { get; set; } // CustomerInquiryProductDefinitionID (Primary key)
        public string ProductDescriptions { get; set; } // ProductDescriptions (length: 255)
        public string ProductDescriptionVn { get; set; } // ProductDescriptionVN (length: 255)
        public string StorageRoom { get; set; } // StorageRoom (length: 255)
        public string StorageRoomVn { get; set; } // StorageRoomVN (length: 255)
        public string TemperatureRange { get; set; } // TemperatureRange (length: 255)
        public string HumidityRange { get; set; } // HumidityRange (length: 255)
        public string OtherRequirement { get; set; } // OtherRequirement (length: 255)
        public string OtherRequirementVn { get; set; } // OtherRequirementVN (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child CustomerInquiryDetails where [CustomerInquiryDetails].[CustomerInquiryProductDefinitionID] point to this entity (FK_CustomerInquiryDetails_CustomerInquiryProductDefinitions)
        /// </summary>
        public virtual ICollection<CustomerInquiryDetail> CustomerInquiryDetails { get; set; } // CustomerInquiryDetails.FK_CustomerInquiryDetails_CustomerInquiryProductDefinitions

        public CustomerInquiryProductDefinition()
        {
            CustomerInquiryDetails = new List<CustomerInquiryDetail>();
        }
    }

    // CustomerInquiryServices
    public class CustomerInquiryService
    {
        public int CustomerInquiryServiceId { get; set; } // CustomerInquiryServiceID (Primary key)
        public int CustomerInquiryDetailId { get; set; } // CustomerInquiryDetailID
        public string ServiceQuantity { get; set; } // ServiceQuantity (length: 100)
        public string CustomerInquiryServiceRemark { get; set; } // CustomerInquiryServiceRemark
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ServiceScopeOfWork { get; set; } // ServiceScopeOfWork
        public string ServiceScopeOfWorkVietnam { get; set; } // ServiceScopeOfWorkVietnam

        /// <summary>
        /// CustomerInquiryServiceDefinitionID
        /// </summary>
        public Guid? ServiceId { get; set; } // ServiceID

        // Foreign keys

        /// <summary>
        /// Parent CustomerInquiryDetail pointed by [CustomerInquiryServices].([CustomerInquiryDetailId]) (FK_CustomerInquiryServices_CustomerInquiryDetails)
        /// </summary>
        public virtual CustomerInquiryDetail CustomerInquiryDetail { get; set; } // FK_CustomerInquiryServices_CustomerInquiryDetails
    }

    // CustomerListBillings
    public class CustomerListBilling
    {
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime? ToDate { get; set; } // ToDate
    }

    // CustomerPotentialCategories
    public class CustomerPotentialCategory
    {
        public byte CustomerPotentialCategoryId { get; set; } // CustomerPotentialCategoryID (Primary key)
        public string CustomerPotentialCategoryDescription { get; set; } // CustomerPotentialCategoryDescription (length: 250)
    }

    // CustomerProductGroups
    /// <summary>
    /// 0
    /// </summary>
    public class CustomerProductGroup
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ProductGroupId { get; set; } // ProductGroupID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductGroupDescription { get; set; } // ProductGroupDescription (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool IsDefault { get; set; } // ISDefault
        public Guid? CustomerId { get; set; } // CustomerID

        // Reverse navigation

        /// <summary>
        /// Child ReleaseDetails where [ReleaseDetails].[CustomerProductGroupID] point to this entity (FK_ReleaseDetails_CustomerProductGroups)
        /// </summary>
        public virtual ICollection<ReleaseDetail> ReleaseDetails { get; set; } // ReleaseDetails.FK_ReleaseDetails_CustomerProductGroups

        public CustomerProductGroup()
        {
            ReleaseDetails = new List<ReleaseDetail>();
        }
    }

    // CustomerProductMapping
    public class CustomerProductMapping
    {
        public string Customer { get; set; } // Customer (Primary key) (length: 255)
        public string ProductNumber { get; set; } // ProductNumber (Primary key) (length: 255)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string CustomerProductName { get; set; } // CustomerProductName (length: 255)
        public string CustomerBarcode { get; set; } // CustomerBarcode (length: 255)
        public string CustomerProductNumber { get; set; } // CustomerProductNumber (length: 255)
    }

    // CustomerProductsImport
    public class CustomerProductsImport
    {
        public int CustomerProductsImportId { get; set; } // CustomerProductsImportID (Primary key)
        public string ItemNumber { get; set; } // ITEM_NUMBER (length: 30)
        public string ItemType { get; set; } // ITEM_TYPE (length: 30)
        public string ItemDesc { get; set; } // ITEM_DESC (length: 250)
        public string PrimaryUom { get; set; } // PRIMARY_UOM (length: 30)
        public string SecondaryOum { get; set; } // SECONDARY_OUM (length: 30)
        public string DefaultLotStatus { get; set; } // DEFAULT_LOT_STATUS (length: 30)
        public string ShelfLifeDays { get; set; } // SHELF_LIFE_DAYS (length: 30)
        public string PackSizeDesc { get; set; } // PACK_SIZE_DESC (length: 250)
        public string StandardSkuDesc { get; set; } // STANDARD_SKU_DESC (length: 250)
        public string ItemStatus { get; set; } // ITEM_STATUS (length: 30)
        public string SizeGram { get; set; } // SIZE_GRAM (length: 30)
        public string PackageKg { get; set; } // PACKAGE_KG (length: 30)
        public string CategoryDesc { get; set; } // CATEGORY_DESC (length: 250)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
    }

    // CustomerProperties
    /// <summary>
    /// 0
    /// </summary>
    public class CustomerProperty
    {
        /// <summary>
        /// 0
        /// </summary>
        public bool Basket { get; set; } // Basket

        /// <summary>
        /// 0
        /// </summary>
        public bool Pallet { get; set; } // Pallet

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 200)
        public Guid CustomerId { get; set; } // CustomerID (Primary key)

        public CustomerProperty()
        {
            Basket = true;
            Pallet = true;
            CustomerId = Guid.NewGuid();
        }
    }

    // CustomerQuotations
    /// <summary>
    /// 0
    /// </summary>
    public class CustomerQuotation
    {
        public int QuotationId { get; set; } // QuotationID (Primary key)
        public string QuotationNumber { get; set; } // QuotationNumber (length: 255)
        public DateTime? QuotationDate { get; set; } // QuotationDate
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string QuotationRemark { get; set; } // QuotationRemark
        public string ReviewedBy { get; set; } // ReviewedBy (length: 255)
        public DateTime? ReviewTime { get; set; } // ReviewTime
        public string ApprovedBy { get; set; } // ApprovedBy (length: 255)
        public DateTime? ApprovedTime { get; set; } // ApprovedTime
        public string ReviewRemark { get; set; } // ReviewRemark
        public int? StoreId { get; set; } // StoreID
        public int? CustomerInquiryId { get; set; } // CustomerInquiryID
        public int? QuotationStatus { get; set; } // QuotationStatus
        public string CustomerResponse { get; set; } // CustomerResponse (length: 255)
        public string BdQuotationNumber { get; set; } // BDQuotationNumber (length: 255)
        public string ValidPeriod { get; set; } // ValidPeriod (length: 250)
        public string CustomerRepresentative { get; set; } // CustomerRepresentative (length: 150)
        public string CustomerRepresentativePosition { get; set; } // CustomerRepresentativePosition (length: 150)
        public string VatDescriptionVietnam { get; set; } // VATDescriptionVietnam (length: 200)
        public string VatDescription { get; set; } // VATDescription (length: 200)
        public Guid? CustomerMainId { get; set; } // CustomerMainID
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? PreviousContractId { get; set; } // PreviousContractID

        // Reverse navigation

        /// <summary>
        /// Child CustomerQuotationDetails where [CustomerQuotationDetails].[QuotationID] point to this entity (FK_CustomerQuotationDetails_CustomerQuotations)
        /// </summary>
        public virtual ICollection<CustomerQuotationDetail> CustomerQuotationDetails { get; set; } // CustomerQuotationDetails.FK_CustomerQuotationDetails_CustomerQuotations

        // Foreign keys

        /// <summary>
        /// Parent CustomerQuotationStatu pointed by [CustomerQuotations].([QuotationStatus]) (FK_CustomerQuotations_CustomerQuotationStatus)
        /// </summary>
        public virtual CustomerQuotationStatu CustomerQuotationStatu { get; set; } // FK_CustomerQuotations_CustomerQuotationStatus

        public CustomerQuotation()
        {
            QuotationStatus = 0;
            CustomerQuotationDetails = new List<CustomerQuotationDetail>();
        }
    }

    // CustomerQuotationDetails
    /// <summary>
    /// 0
    /// </summary>
    public class CustomerQuotationDetail
    {
        public int QuotationDetailId { get; set; } // QuotationDetailID (Primary key)
        public int QuotationId { get; set; } // QuotationID
        public int? CustomerInquiryServiceId { get; set; } // CustomerInquiryServiceID
        public string UnitMeasurement { get; set; } // UnitMeasurement (length: 255)
        public string ServiceDescription { get; set; } // ServiceDescription (length: 1000)
        public string QuotationDetailRemark { get; set; } // QuotationDetailRemark (length: 1000)
        public decimal? UnitRate { get; set; } // UnitRate
        public string CustomerComments { get; set; } // CustomerComments (length: 500)
        public string ServiceScopeOfWork { get; set; } // ServiceScopeOfWork
        public string ServiceScopeOfWorkVietnam { get; set; } // ServiceScopeOfWorkVietnam
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? EstimatedMonthlyVolume { get; set; } // EstimatedMonthlyVolume
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID

        // Foreign keys

        /// <summary>
        /// Parent CustomerQuotation pointed by [CustomerQuotationDetails].([QuotationId]) (FK_CustomerQuotationDetails_CustomerQuotations)
        /// </summary>
        public virtual CustomerQuotation CustomerQuotation { get; set; } // FK_CustomerQuotationDetails_CustomerQuotations

        public CustomerQuotationDetail()
        {
            ServicesDefinitionId = Guid.NewGuid();
        }
    }

    // CustomerQuotationStatus
    public class CustomerQuotationStatu
    {
        public int QuotationStatusId { get; set; } // QuotationStatusID (Primary key)
        public string QuotationStatusDescriptions { get; set; } // QuotationStatusDescriptions (length: 250)

        // Reverse navigation

        /// <summary>
        /// Child CustomerQuotations where [CustomerQuotations].[QuotationStatus] point to this entity (FK_CustomerQuotations_CustomerQuotationStatus)
        /// </summary>
        public virtual ICollection<CustomerQuotation> CustomerQuotations { get; set; } // CustomerQuotations.FK_CustomerQuotations_CustomerQuotationStatus

        public CustomerQuotationStatu()
        {
            CustomerQuotations = new List<CustomerQuotation>();
        }
    }

    // CustomerRequirements
    public class CustomerRequirement
    {
        /// <summary>
        /// 1: Receiving, 2: dispatching; 3 Storage; 4: Administration
        /// </summary>
        public Guid CustomerRequirementId { get; set; } // CustomerRequirementID (Primary key)
        public string RequirementDetails { get; set; } // RequirementDetails (length: 3000)
        public string UpdateBy { get; set; } // UpdateBy (length: 20)
        public DateTime UpdateTime { get; set; } // UpdateTime
        public bool? RequirementConfirmed { get; set; } // RequirementConfirmed
        public byte[] Ts { get; set; } // ts
        public string ApprovedBy { get; set; } // ApprovedBy (length: 20)
        public byte RequirementCategory { get; set; } // RequirementCategory
        public Guid CustomerMainId { get; set; } // CustomerMainID
        public string CustomerRequirementNumber { get; set; } // CustomerRequirementNumber (length: 250)

        public CustomerRequirement()
        {
            CustomerRequirementId = Guid.NewGuid();
            RequirementConfirmed = false;
            RequirementCategory = 1;
        }
    }

    // CustomerRequirementProfiles
    public class CustomerRequirementProfile
    {
        public Guid CustomerRequirementProfileId { get; set; } // CustomerRequirementProfileID (Primary key)

        /// <summary>
        /// 1: Receiving, 2: dispatching; 3 Storage; 4: Administration
        /// </summary>
        public Guid CustomerRequirementId { get; set; } // CustomerRequirementID
        public DateTime? ProfileDate { get; set; } // ProfileDate
        public string UserName { get; set; } // UserName (length: 20)

        public CustomerRequirementProfile()
        {
            CustomerRequirementProfileId = Guid.NewGuid();
            CustomerRequirementId = Guid.NewGuid();
            ProfileDate = DateTime.Now;
        }
    }

    // CustomerSalesContracts
    public class CustomerSalesContract
    {
        public Guid CustomerSalesContractId { get; set; } // CustomerSalesContractID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public Guid CustomerClientId { get; set; } // CustomerClientID
        public string CustomerSalesContractNumber { get; set; } // CustomerSalesContractNumber (length: 20)
        public DateTime? SalesContractDate { get; set; } // SalesContractDate
        public DateTime? SalesContractFromDate { get; set; } // SalesContractFromDate
        public DateTime? SalesContractToDate { get; set; } // SalesContractToDate
        public string SalesContractRemark { get; set; } // SalesContractRemark (length: 500)
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 10)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public byte[] Ts { get; set; } // ts
        public float? DiscountPercentage { get; set; } // DiscountPercentage
        public bool? CustomerSalesContractConfirmed { get; set; } // CustomerSalesContractConfirmed
        public bool? Stamp { get; set; } // Stamp
        public int? CustomerSalesContractLocalId { get; set; } // CustomerSalesContractLocalID

        public CustomerSalesContract()
        {
            CustomerSalesContractId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            DiscountPercentage = 0f;
            CustomerSalesContractConfirmed = false;
            Stamp = false;
        }
    }

    // CustomerSalesContractDetails
    public class CustomerSalesContractDetail
    {
        public Guid CustomerSalesContractDetailId { get; set; } // CustomerSalesContractDetailID (Primary key)
        public Guid CustomerSalesContractId { get; set; } // CustomerSalesContractID
        public Guid ProductId { get; set; } // ProductID
        public string SalesProductCode { get; set; } // SalesProductCode (length: 30)
        public string SalesProductCode2 { get; set; } // SalesProductCode2 (length: 30)
        public string SalesProductName { get; set; } // SalesProductName (length: 150)
        public float SalesPrice { get; set; } // SalesPrice
        public string SalesUnit { get; set; } // SalesUnit (length: 20)
        public int? SalesUnitPerPackage { get; set; } // SalesUnitPerPackage
        public string CurrencyId { get; set; } // CurrencyID (length: 10)
        public string CustomerSalesContractDetailRemark { get; set; } // CustomerSalesContractDetailRemark (length: 500)
        public byte[] Ts { get; set; } // ts
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public CustomerSalesContractDetail()
        {
            CustomerSalesContractDetailId = Guid.NewGuid();
            CurrencyId = "VND";
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerSalesContractHistory
    public class CustomerSalesContractHistory
    {
        public int ChangeContractId { get; set; } // ChangeContractID (Primary key)
        public int? SalesProductCode { get; set; } // SalesProductCode
        public int? CustomerSalesContractId { get; set; } // CustomerSalesContractID
        public double? SalesPriceOld { get; set; } // SalesPriceOld
        public double? SalesPriceNew { get; set; } // SalesPriceNew
        public DateTime? ChangeContractDate { get; set; } // ChangeContractDate
        public string Remark { get; set; } // Remark (length: 500)
        public string ChangeContractBy { get; set; } // ChangeContractBy (length: 50)
    }

    // CustomerSalesInvoices
    public class CustomerSalesInvoice
    {
        public int CustomerSalesInvoiceId { get; set; } // CustomerSalesInvoiceID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public DateTime CustomerSalesInvoiceDate { get; set; } // CustomerSalesInvoiceDate
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 10)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public string CustomerSalesInvoiceRemark { get; set; } // CustomerSalesInvoiceRemark (length: 500)
        public float? TotalAmount { get; set; } // TotalAmount
        public float? DiscountAmount { get; set; } // DiscountAmount
        public string CurrencyId { get; set; } // CurrencyID (length: 10)
        public int? CustomerClientId { get; set; } // CustomerClientID
        public string CustomerClientRepresentative { get; set; } // CustomerClientRepresentative (length: 100)
        public string CustomerSalesOrderNumber { get; set; } // CustomerSalesOrderNumber (length: 50)
        public DateTime? CustomerSalesOrderDate { get; set; } // CustomerSalesOrderDate
        public string InvoiceOfficialNumber { get; set; } // InvoiceOfficialNumber (length: 20)
        public string InvoiceOfficialSerieName { get; set; } // InvoiceOfficialSerieName (length: 10)
        public int CustomerSalesContractId { get; set; } // CustomerSalesContractID
        public bool? CustomerSalesInvoiceConfirmed { get; set; } // CustomerSalesInvoiceConfirmed
        public byte[] Ts { get; set; } // ts
        public string CustomerPurchasingOrderNumber { get; set; } // CustomerPurchasingOrderNumber (length: 50)
        public short? CustomerSalesOrderReturn { get; set; } // CustomerSalesOrderReturn
        public string OrderReference { get; set; } // OrderReference (length: 50)
        public string TruckNumber { get; set; } // TruckNumber (length: 50)
        public string DriverPhoneNumber { get; set; } // DriverPhoneNumber (length: 100)
        public int? PlanDate { get; set; } // PlanDate
        public int? TransporterId { get; set; } // TransporterID
        public string TransferName { get; set; } // TransferName (length: 50)
        public bool? Logger { get; set; } // Logger
        public byte? ApprovalStatus { get; set; } // ApprovalStatus
        public string ApprovalComment { get; set; } // ApprovalComment (length: 250)
        public string ApprovedBy { get; set; } // ApprovedBy (length: 50)
        public DateTime? ApprovalTime { get; set; } // ApprovalTime
        public double? DiscountAdditional { get; set; } // DiscountAdditional

        public CustomerSalesInvoice()
        {
            CreatedTime = DateTime.Now;
            DiscountAmount = 0f;
            InvoiceOfficialNumber = "x";
            InvoiceOfficialSerieName = "x";
            CustomerSalesInvoiceConfirmed = false;
            CustomerSalesOrderReturn = 1;
            DiscountAdditional = 0;
        }
    }

    // CustomerSalesInvoiceDetails
    public class CustomerSalesInvoiceDetail
    {
        public int CustomerSalesInvoiceDetailId { get; set; } // CustomerSalesInvoiceDetailID (Primary key)
        public int CustomerSalesInvoiceId { get; set; } // CustomerSalesInvoiceID
        public int ProductId { get; set; } // ProductID
        public string ProductCode { get; set; } // ProductCode (length: 30)
        public string ProductName { get; set; } // ProductName (length: 250)
        public float? OrderQuantity { get; set; } // OrderQuantity
        public int? OrderUnitQuanity { get; set; } // OrderUnitQuanity
        public int? DispatchedQuantity { get; set; } // DispatchedQuantity
        public string InvoiceUnit { get; set; } // InvoiceUnit (length: 20)
        public float InvoicePrice { get; set; } // InvoicePrice
        public float InvoiceQuantity { get; set; } // InvoiceQuantity
        public string CustomerSalesInvoiceDetailRemark { get; set; } // CustomerSalesInvoiceDetailRemark (length: 150)
        public DateTime UpdateTime { get; set; } // UpdateTime
        public string UpdateBy { get; set; } // UpdateBy (length: 10)
        public int? DispatchingProductId { get; set; } // DispatchingProductID
        public byte[] Ts { get; set; } // ts
        public byte? CustomerDispatchType { get; set; } // CustomerDispatchType
        public int? UnitPerPackage { get; set; } // UnitPerPackage
        public short? OddPieceQuanity { get; set; } // OddPieceQuanity
        public bool? Promotion { get; set; } // Promotion
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public float? ProductDiscountPercentage { get; set; } // ProductDiscountPercentage
        public int? OrderUnitQuanityCheck { get; set; } // OrderUnitQuanityCheck
        public int? CustomerSalesContractDetailId { get; set; } // CustomerSalesContractDetailID
        public bool? Unfreeze { get; set; } // Unfreeze
        public double? OrderQuantityBook { get; set; } // OrderQuantityBook

        public CustomerSalesInvoiceDetail()
        {
            InvoicePrice = 0f;
            InvoiceQuantity = 0f;
            UpdateTime = DateTime.Now;
            Promotion = false;
            CreatedTime = DateTime.Now;
            ProductDiscountPercentage = 0f;
            Unfreeze = false;
        }
    }

    // CustomerSalesInvoicePallets
    public class CustomerSalesInvoicePallet
    {
        public int CustomerSalesInvoicePalletId { get; set; } // CustomerSalesInvoicePalletID (Primary key)
        public int CustomerSalesInvoiceDetailId { get; set; } // CustomerSalesInvoiceDetailID
        public short PlanQuantity { get; set; } // PlanQuantity
        public string PalletRemark { get; set; } // PalletRemark (length: 800)
        public bool OnHold { get; set; } // OnHold
        public int? PalletId { get; set; } // PalletID
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public float? SelfLifePercentage { get; set; } // SelfLifePercentage
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public short? AfterDpQuantity { get; set; } // AfterDPQuantity
        public byte[] Ts { get; set; } // ts
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public int OrderUnitQuantity { get; set; } // OrderUnitQuantity
        public string Remark { get; set; } // Remark (length: 250)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 200)
        public int OrderUnitQuantityBook { get; set; } // OrderUnitQuantityBook

        public CustomerSalesInvoicePallet()
        {
            PlanQuantity = 0;
            OnHold = false;
            OrderUnitQuantity = 0;
            CreatedTime = DateTime.Now;
            OrderUnitQuantityBook = 0;
        }
    }

    // CustomerSalesOrders
    public class CustomerSalesOrder
    {
        public int CustomerSalesOrderId { get; set; } // CustomerSalesOrderID (Primary key)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string SaleOrderNumber { get; set; } // SaleOrderNumber (length: 50)
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 100)
        public DateTime? OrderDate { get; set; } // OrderDate
        public DateTime? DeliveryDate { get; set; } // DeliveryDate
        public string ProductNumber { get; set; } // ProductNumber (length: 50)
        public string ProductName { get; set; } // ProductName (length: 100)

        /// <summary>
        /// PackageType
        /// </summary>
        public string Uom1 { get; set; } // Uom1 (length: 50)
        public decimal? OrderQty1 { get; set; } // OrderQty1

        /// <summary>
        /// PackageType
        /// </summary>
        public string Uom2 { get; set; } // Uom2 (length: 50)
        public int? OrderQty2 { get; set; } // OrderQty2
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public CustomerSalesOrder()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerSalesOrdersImport
    public class CustomerSalesOrdersImport
    {
        public int Id { get; set; } // ID (Primary key)
        public string OuName { get; set; } // OU_NAME (length: 50)
        public string OrderNumber { get; set; } // ORDER_NUMBER (length: 50)
        public string Name { get; set; } // NAME (length: 100)
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 50)
        public string CustomerNumber { get; set; } // CUSTOMER_NUMBER (length: 50)
        public string CustomerName { get; set; } // CUSTOMER_NAME (length: 100)
        public string BillToLocation { get; set; } // BILL_TO_LOCATION (length: 100)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 100)
        public string BillToAddress { get; set; } // BILL_TO_ADDRESS (length: 300)
        public string ShipToAddress { get; set; } // SHIP_TO_ADDRESS (length: 300)
        public DateTime? OrderedDate { get; set; } // ORDERED_DATE
        public DateTime? DeliveryDate { get; set; } // Delivery_Date
        public DateTime? ScheduleShipDate { get; set; } // SCHEDULE_SHIP_DATE
        public string OrderedItem { get; set; } // ORDERED_ITEM (length: 20)
        public string ItemDescription { get; set; } // ITEM_DESCRIPTION (length: 100)

        /// <summary>
        /// PackageType
        /// </summary>
        public string Uom1 { get; set; } // UOM1 (length: 50)
        public decimal? OrderedQty1 { get; set; } // ORDERED_QTY1

        /// <summary>
        /// PackageType
        /// </summary>
        public string Uom2 { get; set; } // UOM2 (length: 50)
        public int? OrderedQty2 { get; set; } // ORDERED_QTY2
        public long? DetailId { get; set; } // DETAIL_ID
        public string Hold { get; set; } // HOLD (length: 2)
        public decimal? PoWeight { get; set; } // PO_WEIGHT
        public decimal? Tolerance { get; set; } // TOLERANCE
    }

    // CustomerSalesPromotions
    public class CustomerSalesPromotion
    {
        public int CustomerSalesPromotionId { get; set; } // CustomerSalesPromotionID (Primary key)
        public int CustomerSalesContractId { get; set; } // CustomerSalesContractID
        public DateTime CustomerSalesPromotionDate { get; set; } // CustomerSalesPromotionDate
        public DateTime CustomerSalesPromotionFromDate { get; set; } // CustomerSalesPromotionFromDate
        public DateTime CustomerSalesPromotionToDate { get; set; } // CustomerSalesPromotionToDate
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CustomerSalesPromotionRemark { get; set; } // CustomerSalesPromotionRemark (length: 500)
        public string CustomerSalesPromotionName { get; set; } // CustomerSalesPromotionName (length: 200)

        public CustomerSalesPromotion()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerSalesPromotionDetails
    public class CustomerSalesPromotionDetail
    {
        public int CustomerSalesPromotionDetailId { get; set; } // CustomerSalesPromotionDetailID (Primary key)
        public int CustomerSalesPromotionId { get; set; } // CustomerSalesPromotionID
        public int ProductId { get; set; } // ProductID
        public string SalesProductName { get; set; } // SalesProductName (length: 150)
        public string CustomerSalesPromotionDetailRemark { get; set; } // CustomerSalesPromotionDetailRemark (length: 400)
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public string ProductCode { get; set; } // ProductCode (length: 30)

        public CustomerSalesPromotionDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerSalesPromotionProducts
    public class CustomerSalesPromotionProduct
    {
        public int CustomerSalesPromotionProductId { get; set; } // CustomerSalesPromotionProductID (Primary key)
        public int CustomerSalesPromotionDetailId { get; set; } // CustomerSalesPromotionDetailID
        public int ProductId { get; set; } // ProductID
        public string CustomerSalesPromotionProductRemark { get; set; } // CustomerSalesPromotionProductRemark (length: 400)
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public float? ProductDiscountPercentage { get; set; } // ProductDiscountPercentage
        public short? BuyingUnitQuantity { get; set; } // BuyingUnitQuantity
        public short? PromotionUnitQuantity { get; set; } // PromotionUnitQuantity
        public string SalesProductName { get; set; } // SalesProductName (length: 150)
        public string ProductCode { get; set; } // ProductCode (length: 30)
        public int? CustomerSalesContractDetailId { get; set; } // CustomerSalesContractDetailID

        public CustomerSalesPromotionProduct()
        {
            CreatedTime = DateTime.Now;
            ProductDiscountPercentage = 0f;
        }
    }

    // CustomerSalesTargets
    public class CustomerSalesTarget
    {
        public int CustomerSalesTargetId { get; set; } // CustomerSalesTargetID (Primary key)
        public int CustomerSalesContractId { get; set; } // CustomerSalesContractID
        public DateTime CustomerSalesTargetDate { get; set; } // CustomerSalesTargetDate
        public DateTime CustomerSalesTargetFromDate { get; set; } // CustomerSalesTargetFromDate
        public DateTime CustomerSalesTargetToDate { get; set; } // CustomerSalesTargetToDate
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CustomerSalesTargetRemark { get; set; } // CustomerSalesTargetRemark (length: 500)
        public string CustomerSalesTargetName { get; set; } // CustomerSalesTargetName (length: 200)

        public CustomerSalesTarget()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerSalesTargetDetails
    public class CustomerSalesTargetDetail
    {
        public int CustomerSalesTargetDetailId { get; set; } // CustomerSalesTargetDetailID (Primary key)
        public int CustomerSalesTargetId { get; set; } // CustomerSalesTargetID
        public int ProductId { get; set; } // ProductID
        public string SalesProductName { get; set; } // SalesProductName (length: 150)
        public string ProductCode { get; set; } // ProductCode (length: 30)
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CustomerSalesTargetDetailRemark { get; set; } // CustomerSalesTargetDetailRemark (length: 400)
        public byte[] Ts { get; set; } // ts

        public CustomerSalesTargetDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerServices
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class CustomerService
    {
        /// <summary>
        /// -1
        /// </summary>
        public int CustomerId { get; set; } // CustomerID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public bool Sw { get; set; } // SW

        /// <summary>
        /// -1
        /// </summary>
        public bool Sc { get; set; } // SC

        /// <summary>
        /// -1
        /// </summary>
        public bool Sp { get; set; } // SP

        /// <summary>
        /// -1
        /// </summary>
        public bool Hw { get; set; } // HW

        /// <summary>
        /// -1
        /// </summary>
        public bool Hc { get; set; } // HC

        /// <summary>
        /// -1
        /// </summary>
        public bool Hp { get; set; } // HP

        /// <summary>
        /// -1
        /// </summary>
        public bool Dsc { get; set; } // DSC

        /// <summary>
        /// -1
        /// </summary>
        public bool Mff { get; set; } // MFF

        /// <summary>
        /// -1
        /// </summary>
        public bool Dff { get; set; } // DFF

        /// <summary>
        /// -1
        /// </summary>
        public bool Gsf { get; set; } // GSF

        /// <summary>
        /// -1
        /// </summary>
        public bool ManualBill { get; set; } // ManualBill

        /// <summary>
        /// 0
        /// </summary>
        public string BillingSpecialRequirement { get; set; } // BillingSpecialRequirement (length: 1000)

        /// <summary>
        /// 0
        /// </summary>
        public string BillingCycle { get; set; } // BillingCycle (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public float? LimitedWeight { get; set; } // LimitedWeight

        /// <summary>
        /// 0
        /// </summary>
        public float? LimitedPallet { get; set; } // LimitedPallet

        /// <summary>
        /// 0
        /// </summary>
        public float? LimitedWeight2 { get; set; } // LimitedWeight2

        /// <summary>
        /// 0
        /// </summary>
        public float? LimitedPallet2 { get; set; } // LimitedPallet2

        public CustomerService()
        {
            CustomerId = 0;
            Sw = true;
            Sc = false;
            Sp = false;
            Hw = true;
            Hc = false;
            Hp = false;
            Dsc = false;
            Mff = false;
            Dff = false;
            Gsf = false;
            ManualBill = false;
            BillingSpecialRequirement = "No special instruction";
            BillingCycle = "Monthly";
            LimitedWeight = 0f;
            LimitedPallet = 0f;
        }
    }

    // CustomerServiceCosting
    public class CustomerServiceCosting
    {
        public int CustomerServiceCostingId { get; set; } // CustomerServiceCostingID (Primary key)
        public DateTime CostingDate { get; set; } // CostingDate
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CustomerServiceCostingRemark { get; set; } // CustomerServiceCostingRemark (length: 500)
        public string ApprovedBy { get; set; } // ApprovedBy (length: 10)
        public DateTime? ApprovedTime { get; set; } // ApprovedTime
        public bool? Approved { get; set; } // Approved
        public string ServiceDetailDescription { get; set; } // ServiceDetailDescription (length: 500)
        public DateTime? ServiceProvidedDate { get; set; } // ServiceProvidedDate
        public float? TotalServiceQuantity { get; set; } // TotalServiceQuantity
        public float? TotalCalculatedCost { get; set; } // TotalCalculatedCost
        public float? UnitCost { get; set; } // UnitCost
        public float? WorkerDailyProductivity { get; set; } // WorkerDailyProductivity
        public float? ProposedWorkerRate { get; set; } // ProposedWorkerRate
        public float? ProposedOverheadMargin { get; set; } // ProposedOverheadMargin
        public float? ProposedServicePrice { get; set; } // ProposedServicePrice
        public float? ActualProposedWorkerRate { get; set; } // ActualProposedWorkerRate
        public string CustomerServiceCostingProcess { get; set; } // CustomerServiceCostingProcess (length: 2000)
        public string CustomerServiceCostNumber { get; set; } // CustomerServiceCostNumber (length: 20)
        public string IsoFormNumber { get; set; } // ISOFormNumber (length: 50)
        public Guid CustomerId { get; set; } // CustomerID
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID

        public CustomerServiceCosting()
        {
            CostingDate = DateTime.Now;
            CreatedTime = DateTime.Now;
            Approved = false;
            ActualProposedWorkerRate = 0f;
        }
    }

    // CustomerServiceCostingDetails
    public class CustomerServiceCostingDetail
    {
        public int CustomerServiceCostingDetailId { get; set; } // CustomerServiceCostingDetailID (Primary key)
        public int CustomerServiceCostingId { get; set; } // CustomerServiceCostingID
        public string ItemDescription { get; set; } // ItemDescription (length: 500)
        public float ItemQuantity { get; set; } // ItemQuantity
        public string ItemUnitOfMeasure { get; set; } // ItemUnitOfMeasure (length: 20)
        public float ItemUnitRate { get; set; } // ItemUnitRate
        public string ItemRemark { get; set; } // ItemRemark (length: 200)
    }

    // CustomerStatus
    public class CustomerStatu
    {
        public byte CustomerStatus { get; set; } // CustomerStatus (Primary key)
        public string Description { get; set; } // Description (length: 100)
    }

    // Customers_tmp
    public class CustomersTmp
    {
        public int Id { get; set; } // ID (Primary key)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerNumberAccounting { get; set; } // CustomerNumberAccounting (length: 50)
        public string CustomerNumberErp { get; set; } // CustomerNumberERP (length: 50)
    }

    // CustomerSuppliers
    public class CustomerSupplier
    {
        public Guid CustomerSupplierId { get; set; } // CustomerSupplierID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public Guid? CustomerSupplierMainId { get; set; } // CustomerSupplierMainID
        public string CustomerSupplierCode { get; set; } // CustomerSupplierCode (length: 50)
        public string CustomerSupplierName { get; set; } // CustomerSupplierName (length: 250)
        public string CustomerSupplierAddress { get; set; } // CustomerSupplierAddress (length: 250)
        public string CustomerSupplierPhone { get; set; } // CustomerSupplierPhone (length: 50)
        public string CustomerSupplierEmail { get; set; } // CustomerSupplierEmail (length: 250)
        public string CustomerSupplierContacts { get; set; } // CustomerSupplierContacts (length: 250)
        public string CustomerSupplierDescriptions { get; set; } // CustomerSupplierDescriptions (length: 1000)
        public string CustomerSupplierTaxName { get; set; } // CustomerSupplierTaxName (length: 250)
        public string CustomerSupplierTaxCode { get; set; } // CustomerSupplierTaxCode (length: 20)
        public string CustomerSupplierDeliveryAddress { get; set; } // CustomerSupplierDeliveryAddress (length: 500)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public byte[] Ts { get; set; } // TS

        public CustomerSupplier()
        {
            CustomerSupplierId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // CustomerTaxGroups
    public class CustomerTaxGroup
    {
        public string CustomerTaxGroup_ { get; set; } // CustomerTaxGroup (Primary key) (length: 100)
    }

    // CustomerType
    public class CustomerType
    {
        public string CustomerType_ { get; set; } // CustomerType (Primary key) (length: 50)
        public string Description { get; set; } // Description (length: 200)
    }

    // DailyChecks
    /// <summary>
    /// 0
    /// </summary>
    public class DailyCheck
    {
        /// <summary>
        /// 0
        /// </summary>
        public int DailyCheckId { get; set; } // DailyCheckID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int SupervisorId { get; set; } // SupervisorID

        /// <summary>
        /// 0
        /// </summary>
        public byte ShiftId { get; set; } // ShiftID

        /// <summary>
        /// 0
        /// </summary>
        public byte? DepartmentId { get; set; } // DepartmentID

        /// <summary>
        /// 0
        /// </summary>
        public string DailyCheckRemark { get; set; } // DailyCheckRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime DailyCheckDate { get; set; } // DailyCheckDate

        /// <summary>
        /// 0
        /// </summary>
        public DateTime DailyCheckCreateDate { get; set; } // DailyCheckCreateDate

        /// <summary>
        /// 0
        /// </summary>
        public bool ColdRooms { get; set; } // ColdRooms

        /// <summary>
        /// 0
        /// </summary>
        public string ColdRoomRemark { get; set; } // ColdRoomRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool Doors { get; set; } // Doors

        /// <summary>
        /// 0
        /// </summary>
        public string DoorRemark { get; set; } // DoorRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool AmenitiesRooms { get; set; } // AmenitiesRooms

        /// <summary>
        /// 0
        /// </summary>
        public string AmenitiesRoomsRemark { get; set; } // AmenitiesRoomsRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool RepackingRooms { get; set; } // RepackingRooms

        /// <summary>
        /// 0
        /// </summary>
        public string RepackingRoomsRemark { get; set; } // RepackingRoomsRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool Annex { get; set; } // Annex

        /// <summary>
        /// 0
        /// </summary>
        public string AnnexRemark { get; set; } // AnnexRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool Mhe { get; set; } // MHE

        /// <summary>
        /// 0
        /// </summary>
        public string MheRemark { get; set; } // MHERemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool Products { get; set; } // Products

        /// <summary>
        /// 0
        /// </summary>
        public string ProductRemark { get; set; } // ProductRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool Yard { get; set; } // Yard

        /// <summary>
        /// 0
        /// </summary>
        public string YardRemark { get; set; } // YardRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool ReadStatus { get; set; } // ReadStatus

        /// <summary>
        /// 0
        /// </summary>
        public string ReadBy { get; set; } // ReadBy (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public string ReadComment { get; set; } // ReadComment (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool DailyCheckConfirmed { get; set; } // DailyCheckConfirmed

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime

        public DailyCheck()
        {
            ColdRooms = false;
            DailyCheckConfirmed = false;
        }
    }

    // DailyCheckDetails
    /// <summary>
    /// 0
    /// </summary>
    public class DailyCheckDetail
    {
        /// <summary>
        /// 0
        /// </summary>
        public int DailyCheckDetailId { get; set; } // DailyCheckDetailID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int DailyCheckId { get; set; } // DailyCheckID

        /// <summary>
        /// 0
        /// </summary>
        public bool ColdRooms { get; set; } // ColdRooms

        /// <summary>
        /// 0
        /// </summary>
        public string ColdRoomRemark { get; set; } // ColdRoomRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool Doors { get; set; } // Doors

        /// <summary>
        /// 0
        /// </summary>
        public string DoorRemark { get; set; } // DoorRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool AmenitiesRooms { get; set; } // AmenitiesRooms

        /// <summary>
        /// 0
        /// </summary>
        public string AmenitiesRoomsRemark { get; set; } // AmenitiesRoomsRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool RepackingRooms { get; set; } // RepackingRooms

        /// <summary>
        /// 0
        /// </summary>
        public string RepackingRoomsRemark { get; set; } // RepackingRoomsRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool Annex { get; set; } // Annex

        /// <summary>
        /// 0
        /// </summary>
        public string AnnexRemark { get; set; } // AnnexRemark (length: 250)

        public DailyCheckDetail()
        {
            ColdRooms = false;
        }
    }

    // DailyPrintedLunch
    /// <summary>
    /// 2
    /// DailyPrintedLunch.LunchID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class DailyPrintedLunch
    {
        /// <summary>
        /// 0
        /// </summary>
        public int LunchId { get; set; } // LunchID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime PrintedDate { get; set; } // PrintedDate

        /// <summary>
        /// 0
        /// </summary>
        public byte Shift { get; set; } // Shift
    }

    // DailyTask
    /// <summary>
    /// 2
    /// DailyTask.TaskID DESC
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class DailyTask
    {
        /// <summary>
        /// -1
        /// </summary>
        public int TaskId { get; set; } // TaskID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string TaskDescription { get; set; } // TaskDescription (length: 255)

        /// <summary>
        /// 0
        /// </summary>
        public string UserId { get; set; } // UserID (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime TaskCreatedTime { get; set; } // TaskCreatedTime

        /// <summary>
        /// -1
        /// </summary>
        public bool TaskDone { get; set; } // TaskDone

        /// <summary>
        /// -1
        /// </summary>
        public string DoneBy { get; set; } // DoneBy (length: 50)

        /// <summary>
        /// 3675
        /// </summary>
        public DateTime? DoneTime { get; set; } // DoneTime

        /// <summary>
        /// 0
        /// </summary>
        public bool Sticky { get; set; } // Sticky

        /// <summary>
        /// 0
        /// </summary>
        public bool Forguard { get; set; } // Forguard

        public DailyTask()
        {
            TaskDone = false;
            Sticky = false;
            Forguard = false;
        }
    }

    // DailyWorks
    public class DailyWork
    {
        public int DailyWorkId { get; set; } // DailyWorkID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? Deadline { get; set; } // Deadline
        public string WorkDescription { get; set; } // WorkDescription (length: 255)
        public string ApplicationId { get; set; } // ApplicationID (length: 50)

        /// <summary>
        /// 0-Chưa làm gì, 1-Đang làm, 2-Xong
        /// </summary>
        public byte? ImplementationStatus { get; set; } // ImplementationStatus
        public string ImplementationBy { get; set; } // ImplementationBy (length: 30)
        public string AssignedTo { get; set; } // AssignedTo (length: 20)
        public int? RequestBy { get; set; } // RequestBy
        public string WorkCategory { get; set; } // WorkCategory (length: 50)

        public DailyWork()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // The table 'DataCrossDock' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // DataCrossDock
    public class DataCrossDock
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 30)
        public string CustomerName { get; set; } // CustomerName (length: 255)
        public DateTime? OrderDate { get; set; } // OrderDate
        public string ProcessingOrderNumber { get; set; } // ProcessingOrderNumber (length: 30)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 30)
        public string WareHouseCustomerInterface { get; set; } // WareHouseCustomerInterface (length: 30)
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 30)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 30)
        public string OtmShipTo { get; set; } // OTM_ShipTo (length: 30)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 30)
        public int? Qty { get; set; } // Qty
        public decimal? Weights { get; set; } // Weights
        public int? TotalCarton { get; set; } // TotalCarton
        public bool? IsWeightingRequire { get; set; } // IsWeightingRequire
        public string Type { get; set; } // Type (length: 255)
        public string Status { get; set; } // Status (length: 255)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 255)
        public string TripRemark { get; set; } // TripRemark (length: 255)
    }

    // DeletedDispatchingProducts
    public class DeletedDispatchingProduct
    {
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID (Primary key)
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID (Primary key)
        public Guid DispatchingProductId { get; set; } // DispatchingProductID (Primary key)
        public int? DispatchingQuantity { get; set; } // DispatchingQuantity
        public string DispatchingDeletedBy { get; set; } // DispatchingDeletedBy (length: 50)
        public DateTime? DispatchingDeleteDate { get; set; } // DispatchingDeleteDate
        public Guid? ProductId { get; set; } // ProductID
        public short? PackagesPerPallet { get; set; } // PackagesPerPallet
        public int? TotalPackages { get; set; } // TotalPackages
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public byte? Status { get; set; } // Status
        public string Remark { get; set; } // Remark (length: 50)
        public string UserId { get; set; } // UserID (length: 100)
        public short? Plts { get; set; } // Plts
        public string CustomerRef { get; set; } // CustomerRef (length: 100)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // TS
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalUnits { get; set; } // TotalUnits
        public short? UnitPerPackage { get; set; } // UnitPerPackage
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public float? Temperature { get; set; } // Temperature
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public byte? SendStatus { get; set; } // SendStatus
        public DateTime? SendTime { get; set; } // SendTime
        public long? CustomerRefDetailId { get; set; } // CustomerRef_DetailID
        public double? PackingPercentage { get; set; } // PackingPercentage
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 100)
        public string Message { get; set; } // Message (length: 255)
        public int? DeliveryActual { get; set; } // DeliveryActual

        public DeletedDispatchingProduct()
        {
            DispatchingDeleteDate = DateTime.Now;
            Status = 0;
            CreatedTime = DateTime.Now;
            TotalWeight = 0m;
            UnitPerPackage = 1;
            SendStatus = 0;
            DeliveryActual = 0;
        }
    }

    // DeletedQuarantines
    public class DeletedQuarantine
    {
        public int QuarantineId { get; set; } // QuarantineID (Primary key)
        public DateTime QuarantineDate { get; set; } // QuarantineDate
        public string UserName { get; set; } // UserName (length: 50)
        public string QuarantineRemark { get; set; } // QuarantineRemark (length: 250)
        public bool QuarantineConfirm { get; set; } // QuarantineConfirm
        public bool QuarantineType { get; set; } // QuarantineType
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte? PalletStatus { get; set; } // PalletStatus
        public Guid CustomerId { get; set; } // CustomerID
        public string QuarantineNumber { get; set; } // QuarantineNumber (length: 20)
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 50)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public string DeletedBy { get; set; } // DeletedBy (length: 50)
        public DateTime? DeletedTime { get; set; } // DeletedTime
    }

    // DeletedQuarantineDetails
    public class DeletedQuarantineDetail
    {
        public int QuarantineDetailId { get; set; } // QuarantineDetailID (Primary key)
        public int QuarantineId { get; set; } // QuarantineID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int TotalPackages { get; set; } // TotalPackages
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public string QuarantineDetailRemark { get; set; } // QuarantineDetailRemark (length: 250)
        public string IcUser { get; set; } // ICUser (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid ProductId { get; set; } // ProductID
        public Guid? PalletId { get; set; } // PalletID
        public string DeletedBy { get; set; } // DeletedBy (length: 50)
        public DateTime? DeletedTime { get; set; } // DeletedTime
    }

    // DeletedReceivingOrderDetails
    /// <summary>
    /// 2
    /// DeletedReceivingOrderDetails.ReceivingOrderDetailID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class DeletedReceivingOrderDetail
    {
        /// <summary>
        /// -1
        /// </summary>
        public int? ReceivingQuantity { get; set; } // ReceivingQuantity

        /// <summary>
        /// -1
        /// </summary>
        public string ReceivingDeletedBy { get; set; } // ReceivingDeletedBy (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? ReceivingDeleteDate { get; set; } // ReceivingDeleteDate
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID (Primary key)
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public Guid ReceivingProductId { get; set; } // ReceivingProductID
        public short? PackagesPerPallet { get; set; } // PackagesPerPallet
        public Guid? ProductId { get; set; } // ProductID
        public int? TotalPackages { get; set; } // TotalPackages
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string Remark { get; set; } // Remark (length: 200)
        public string CustomerRef { get; set; } // CustomerRef (length: 250)
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 50)
        public int? TransactionId { get; set; } // TransactionID

        /// <summary>
        /// 0: Plan; 1: waiting; 2: confirmed; 3: confirmed priority dispatch; 4: quarantined
        /// </summary>
        public byte? Status { get; set; } // Status
        public float? PalletHeight { get; set; } // PalletHeight
        public string UserName { get; set; } // UserName (length: 50)
        public short? Plts { get; set; } // Plts
        public byte[] Ts { get; set; } // TS
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeight { get; set; } // TotalWeight
        public short? PackingListQuantity { get; set; } // PackingListQuantity
        public short? UnitPerPackage { get; set; } // UnitPerPackage
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string Origin { get; set; } // Origin (length: 50)
        public decimal? RejectPercentage { get; set; } // RejectPercentage
        public decimal? PackagingWeight { get; set; } // PackagingWeight
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime

        public DeletedReceivingOrderDetail()
        {
            ReceivingDeleteDate = DateTime.Now;
            Plts = 0;
            TotalUnits = 0;
            TotalWeight = 0m;
            UnitPerPackage = 1;
            CreatedTime = DateTime.Now;
        }
    }

    // DeliveryOrders
    public class DeliveryOrder
    {
        public int DeliveryOrderId { get; set; } // DeliveryOrderID (Primary key)
        public string DeliveryOrderNumber { get; set; } // DeliveryOrderNumber (length: 16)
        public DateTime? DeliveryOrderDate { get; set; } // DeliveryOrderDate
        public DateTime? Deadline { get; set; } // Deadline
        public string CreatedBy { get; set; } // CreatedBy (length: 12)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int CustomerId { get; set; } // CustomerID
        public int CustomerClientId { get; set; } // CustomerClientID
        public string DeliveryOrderRemark { get; set; } // DeliveryOrderRemark (length: 500)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 15)
        public int DispatchingOrderId { get; set; } // DispatchingOrderID
        public byte[] Ts { get; set; } // ts
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 25)
        public byte? DeliveryStatus { get; set; } // DeliveryStatus
        public string DeliveryType { get; set; } // DeliveryType (length: 50)
        public string PaymentMethod { get; set; } // PaymentMethod (length: 50)
        public decimal? Money { get; set; } // Money
        public string RejectReason { get; set; } // RejectReason (length: 50)

        public DeliveryOrder()
        {
            CreatedTime = DateTime.Now;
            CustomerClientId = 1;
        }
    }

    // DeliveryOrderDetails
    public class DeliveryOrderDetail
    {
        public int DeliveryOrderDetailId { get; set; } // DeliveryOrderDetailID (Primary key)
        public int DeliveryOrderId { get; set; } // DeliveryOrderID
        public int DispatchingProductId { get; set; } // DispatchingProductID
        public string CreatedBy { get; set; } // CreatedBy (length: 12)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int? TotalPackages { get; set; } // TotalPackages
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeight { get; set; } // TotalWeight
        public decimal? Cbm { get; set; } // CBM
        public string Remark { get; set; } // Remark (length: 500)
        public byte? DeliveryStatus { get; set; } // DeliveryStatus
        public byte[] Ts { get; set; } // ts
        public int? TotalPackagesActual { get; set; } // TotalPackagesActual

        public DeliveryOrderDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // DeliveryStatusDefinitions
    public class DeliveryStatusDefinition
    {
        public int DeliveryStatusDefinitionId { get; set; } // DeliveryStatusDefinitionID (Primary key)
        public string DeliveryStatusDescription { get; set; } // DeliveryStatusDescription (length: 50)
    }

    // Departments
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class Department
    {
        /// <summary>
        /// -1
        /// </summary>
        public int DepartmentId { get; set; } // DepartmentID (Primary key)

        /// <summary>
        /// 2490
        /// </summary>
        public string DepartmentName { get; set; } // DepartmentName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string DepartmentNameShort { get; set; } // DepartmentNameShort (length: 15)

        /// <summary>
        /// 0
        /// </summary>
        public string DepartmentNameVietnam { get; set; } // DepartmentNameVietnam (length: 150)
        public int? UserDepartmentDefinitionId { get; set; } // UserDepartmentDefinitionID
        public int? StoreId { get; set; } // StoreID
        public string SlackChannel { get; set; } // SlackChannel (length: 150)
        public string SlackToken { get; set; } // SlackToken (length: 500)
        public int? WarehouseId { get; set; } // WarehouseID
    }

    // DestinationPorts
    public class DestinationPort
    {
        public int DestinationPortId { get; set; } // DestinationPortID (Primary key)
        public string DestinationPortName { get; set; } // DestinationPortName (length: 100)
    }

    // DispatchingCartons
    public class DispatchingCarton
    {
        public Guid DispatchingCartonId { get; set; } // DispatchingCartonID (Primary key)

        /// <summary>
        /// DispatchingLocationID
        /// </summary>
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public Guid PalletCartonId { get; set; } // PalletCartonID
        public float? CartonWeight { get; set; } // CartonWeight
        public string DispatchingRemark { get; set; } // DispatchingRemark (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 100)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public byte[] Ts { get; set; } // ts
        public bool? CheckDelete { get; set; } // CheckDelete
        public int? CartonUnit { get; set; } // CartonUnit
        public string BarcodeString { get; set; } // BarcodeString (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent DispatchingOrderDetail pointed by [DispatchingCartons].([DispatchingOrderDetailId]) (FK_DispatchingCartons_DispatchingOrderDetails)
        /// </summary>
        public virtual DispatchingOrderDetail DispatchingOrderDetail { get; set; } // FK_DispatchingCartons_DispatchingOrderDetails

        public DispatchingCarton()
        {
            DispatchingCartonId = Guid.NewGuid();
            CartonWeight = 0f;
            CreatedTime = DateTime.Now;
            CheckDelete = false;
        }
    }

    // DispatchingCartons_temp
    public class DispatchingCartonsTemp
    {
        public Guid DispatchingCartonId { get; set; } // DispatchingCartonID (Primary key)

        /// <summary>
        /// DispatchingLocationID
        /// </summary>
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public Guid PalletCartonId { get; set; } // PalletCartonID
        public float? CartonWeight { get; set; } // CartonWeight
        public string DispatchingRemark { get; set; } // DispatchingRemark (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 100)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public byte[] Ts { get; set; } // ts
        public bool? CheckDelete { get; set; } // CheckDelete
        public int? CartonUnit { get; set; } // CartonUnit
        public string BarcodeString { get; set; } // BarcodeString (length: 100)

        public DispatchingCartonsTemp()
        {
            DispatchingCartonId = Guid.NewGuid();
            CartonWeight = 0f;
            CreatedTime = DateTime.Now;
            CheckDelete = false;
        }
    }

    // DispatchingOrders
    /// <summary>
    /// 2
    /// ((DispatchingOrders.DispatchingOrderID=423357))
    /// DispatchingOrders.DispatchingOrderID DESC
    /// False
    /// 0
    /// 0
    /// </summary>
    public class DispatchingOrder
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public int? DispatchingOrderLocalId { get; set; } // DispatchingOrderLocalID

        /// <summary>
        /// -1
        /// </summary>
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public Guid CustomerId { get; set; } // CustomerID
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID

        /// <summary>
        /// -1
        /// </summary>
        public string DispatchingOrderRemark { get; set; } // DispatchingOrderRemark (length: 250)
        public string InternalRemark { get; set; } // InternalRemark (length: 300)

        /// <summary>
        /// -1
        /// </summary>
        public bool Status { get; set; } // Status

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// -1
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 10)

        /// <summary>
        /// 0
        /// </summary>
        public decimal? Temperature { get; set; } // Temperature

        /// <summary>
        /// 0
        /// </summary>
        public string SealNumber { get; set; } // SealNumber (length: 40)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime

        /// <summary>
        /// 0
        /// </summary>
        public byte? DispatchingOrderProgress { get; set; } // DispatchingOrderProgress

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS
        public bool? Electricity { get; set; } // Electricity
        public double? ProgressPercentage { get; set; } // ProgressPercentage
        public bool? IsAttachment { get; set; } // IsAttachment
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 32)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 50)
        public int? TimeSlotId { get; set; } // TimeSlotID
        public int? DockDoorId { get; set; } // DockDoorID
        public double? PickingPercentage { get; set; } // PickingPercentage
        public bool? IsDeleted { get; set; } // IsDeleted
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 50)
        public Guid? RouteId { get; set; } // RouteID
        public int? TransporterId { get; set; } // TransporterID
        public double? PackingPercentage { get; set; } // PackingPercentage
        public int? PerformanceCategoryId { get; set; } // PerformanceCategoryID
        public Guid? WorkDefinitionId { get; set; } // WorkDefinitionID
        public string DeliveryId { get; set; } // DeliveryID (length: 32)
        public byte? OrderTypeId { get; set; } // OrderTypeID
        public int? TotalCarton { get; set; } // TotalCarton
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child DispatchingProducts where [DispatchingProducts].[DispatchingOrderID] point to this entity (FK_DispatchingProducts_DispatchingOrders)
        /// </summary>
        public virtual ICollection<DispatchingProduct> DispatchingProducts { get; set; } // DispatchingProducts.FK_DispatchingProducts_DispatchingOrders

        /// <summary>
        /// Child DispatchingProductCartons where [DispatchingProductCartons].[DispatchingOrderID] point to this entity (FK_DispatchingProductCartons_DispatchingOrders)
        /// </summary>
        public virtual ICollection<DispatchingProductCarton> DispatchingProductCartons { get; set; } // DispatchingProductCartons.FK_DispatchingProductCartons_DispatchingOrders

        /// <summary>
        /// Child DispatchingProductCartonsHistories where [DispatchingProductCartons_History].[DispatchingOrderID] point to this entity (FK__Dispatchi__Dispa__25CDB372)
        /// </summary>
        public virtual ICollection<DispatchingProductCartonsHistory> DispatchingProductCartonsHistories { get; set; } // DispatchingProductCartons_History.FK__Dispatchi__Dispa__25CDB372

        /// <summary>
        /// Child TempIndexRouteDeliveries where [TempIndexRouteDelivery].[DispatchingOrderID] point to this entity (FK_TempIndexRouteDeliveryDispatchingOrders)
        /// </summary>
        public virtual ICollection<TempIndexRouteDelivery> TempIndexRouteDeliveries { get; set; } // TempIndexRouteDelivery.FK_TempIndexRouteDeliveryDispatchingOrders

        /// <summary>
        /// Child XDocPickingLists where [XDoc_PickingList].[DispatchingOrderID] point to this entity (FK_DispatchingOrderID)
        /// </summary>
        public virtual ICollection<XDocPickingList> XDocPickingLists { get; set; } // XDoc_PickingList.FK_DispatchingOrderID

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [DispatchingOrders].([CustomerId]) (FK_DispatchingOrders_Customers)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_DispatchingOrders_Customers

        public DispatchingOrder()
        {
            DispatchingOrderId = Guid.NewGuid();
            Status = false;
            CreatedTime = DateTime.Now;
            DispatchingOrderProgress = 1;
            Electricity = false;
            ProgressPercentage = 0;
            IsAttachment = false;
            PickingPercentage = 0;
            IsDeleted = false;
            PackingPercentage = 0;
            PerformanceCategoryId = 0;
            OrderTypeId = 0;
            DispatchingProductCartons = new List<DispatchingProductCarton>();
            DispatchingProductCartonsHistories = new List<DispatchingProductCartonsHistory>();
            DispatchingProducts = new List<DispatchingProduct>();
            TempIndexRouteDeliveries = new List<TempIndexRouteDelivery>();
            XDocPickingLists = new List<XDocPickingList>();
        }
    }

    // DispatchingOrderDetails
    /// <summary>
    /// 2
    /// DispatchingOrderDetails.QuantityOfPackages
    /// True
    /// 0
    /// 500000
    /// </summary>
    public class DispatchingOrderDetail
    {
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID (Primary key)
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
        public Guid PalletId { get; set; } // PalletID

        /// <summary>
        /// -1
        /// </summary>
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public byte? Status { get; set; } // Status

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// 109
        /// </summary>
        public int PackageQuantity { get; set; } // PackageQuantity

        /// <summary>
        /// 109
        /// </summary>
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public string DispatchingOrderDetailRemark { get; set; } // DispatchingOrderDetailRemark (length: 200)
        public bool? Checked { get; set; } // Checked
        public bool? CheckBreak { get; set; } // CheckBreak
        public string DispatchingScannedBy { get; set; } // DispatchingScannedBy (length: 50)
        public DateTime? DispatchingScannedTime { get; set; } // DispatchingScannedTime

        /// <summary>
        /// Bỏ
        /// </summary>
        public string PickingScannedBy { get; set; } // PickingScannedBy (length: 50)
        public DateTime? PickingScannedTime { get; set; } // PickingScannedTime
        public DateTime? PrintedTime { get; set; } // PrintedTime
        public int? PrintedPickingList { get; set; } // PrintedPickingList
        public int? ActualQuantity { get; set; } // ActualQuantity
        public string DispatchedBy { get; set; } // DispatchedBy (length: 50)
        public int? QtyRemainAtPallet { get; set; } // QtyRemainAtPallet

        // Reverse navigation

        /// <summary>
        /// Child DispatchingCartons where [DispatchingCartons].[DispatchingOrderDetailID] point to this entity (FK_DispatchingCartons_DispatchingOrderDetails)
        /// </summary>
        public virtual ICollection<DispatchingCarton> DispatchingCartons { get; set; } // DispatchingCartons.FK_DispatchingCartons_DispatchingOrderDetails

        /// <summary>
        /// Child DispatchingProductPacks where [DispatchingProductPacks].[DispatchingOrderDetailID] point to this entity (FK_DispatchingProductPacks_DispatchingOrderDetails)
        /// </summary>
        public virtual ICollection<DispatchingProductPack> DispatchingProductPacks { get; set; } // DispatchingProductPacks.FK_DispatchingProductPacks_DispatchingOrderDetails

        // Foreign keys

        /// <summary>
        /// Parent DispatchingProduct pointed by [DispatchingOrderDetails].([DispatchingProductId]) (FK_DispatchingOrderDetails_DispatchingProducts)
        /// </summary>
        public virtual DispatchingProduct DispatchingProduct { get; set; } // FK_DispatchingOrderDetails_DispatchingProducts

        /// <summary>
        /// Parent Pallet pointed by [DispatchingOrderDetails].([PalletId]) (FK_DispatchingOrderDetails_Pallets)
        /// </summary>
        public virtual Pallet Pallet { get; set; } // FK_DispatchingOrderDetails_Pallets

        public DispatchingOrderDetail()
        {
            DispatchingOrderDetailId = Guid.NewGuid();
            UnitQuantity = 0;
            PalletWeight = 0f;
            Checked = false;
            CheckBreak = false;
            PrintedPickingList = 0;
            ActualQuantity = 0;
            DispatchingCartons = new List<DispatchingCarton>();
            DispatchingProductPacks = new List<DispatchingProductPack>();
        }
    }

    // DispatchingOrderIsPrintedPikingList
    public class DispatchingOrderIsPrintedPikingList
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID (Primary key)
        public string Username { get; set; } // Username (length: 255)
    }

    // DispatchingPallets
    public class DispatchingPallet
    {
        public Guid DispatchingPalletId { get; set; } // DispatchingPalletID (Primary key)
        public string DispatchingPalletNumber { get; set; } // DispatchingPalletNumber (length: 16)
        public string PalletNo { get; set; } // PalletNo (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public string DispatchingPalletRemark { get; set; } // DispatchingPalletRemark (length: 150)

        public DispatchingPallet()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // DispatchingProducts
    /// <summary>
    /// 2
    /// ((DispatchingProducts.DispatchingProductID=232525))
    /// False
    /// 0
    /// 500000
    /// </summary>
    public class DispatchingProduct
    {
        public Guid DispatchingProductId { get; set; } // DispatchingProductID (Primary key)
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public Guid ProductId { get; set; } // ProductID

        /// <summary>
        /// -1
        /// </summary>
        public short? PackagesPerPallet { get; set; } // PackagesPerPallet

        /// <summary>
        /// 109
        /// </summary>
        public int TotalPackages { get; set; } // TotalPackages

        /// <summary>
        /// -1
        /// </summary>
        public float? WeightPerPackage { get; set; } // WeightPerPackage

        /// <summary>
        /// -1
        /// </summary>
        public int? TransactionId { get; set; } // TransactionID

        /// <summary>
        /// -1
        /// </summary>
        public byte? Status { get; set; } // Status

        /// <summary>
        /// -1
        /// </summary>
        public string Remark { get; set; } // Remark (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string UserId { get; set; } // UserID (length: 100)

        /// <summary>
        /// -1
        /// </summary>
        public short? Plts { get; set; } // Plts

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerRef { get; set; } // CustomerRef (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS
        public decimal? TotalWeight { get; set; } // TotalWeight

        /// <summary>
        /// 0
        /// </summary>
        public int? TotalUnits { get; set; } // TotalUnits
        public short? UnitPerPackage { get; set; } // UnitPerPackage
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public float? Temperature { get; set; } // Temperature
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public byte? SendStatus { get; set; } // SendStatus
        public DateTime? SendTime { get; set; } // SendTime
        public long? CustomerRefDetailId { get; set; } // CustomerRef_DetailID
        public double? PackingPercentage { get; set; } // PackingPercentage
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 100)
        public string Message { get; set; } // Message (length: 255)
        public int? DeliveryActual { get; set; } // DeliveryActual

        // Reverse navigation

        /// <summary>
        /// Child DispatchingOrderDetails where [DispatchingOrderDetails].[DispatchingProductID] point to this entity (FK_DispatchingOrderDetails_DispatchingProducts)
        /// </summary>
        public virtual ICollection<DispatchingOrderDetail> DispatchingOrderDetails { get; set; } // DispatchingOrderDetails.FK_DispatchingOrderDetails_DispatchingProducts

        // Foreign keys

        /// <summary>
        /// Parent DispatchingOrder pointed by [DispatchingProducts].([DispatchingOrderId]) (FK_DispatchingProducts_DispatchingOrders)
        /// </summary>
        public virtual DispatchingOrder DispatchingOrder { get; set; } // FK_DispatchingProducts_DispatchingOrders

        /// <summary>
        /// Parent Product pointed by [DispatchingProducts].([ProductId]) (FK_DispatchingProducts_Products)
        /// </summary>
        public virtual Product Product { get; set; } // FK_DispatchingProducts_Products

        public DispatchingProduct()
        {
            DispatchingProductId = Guid.NewGuid();
            Status = 0;
            CreatedTime = DateTime.Now;
            TotalWeight = 0m;
            UnitPerPackage = 1;
            SendStatus = 0;
            DeliveryActual = 0;
            DispatchingOrderDetails = new List<DispatchingOrderDetail>();
        }
    }

    // DispatchingProductCartons
    public class DispatchingProductCarton
    {
        public long DispatchingProductCartonId { get; set; } // DispatchingProductCartonID (Primary key)
        public Guid? DispatchingOrderId { get; set; } // DispatchingOrderID
        public short? CartonNumber { get; set; } // CartonNumber
        public string CartonDescription { get; set; } // CartonDescription (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public string PackageType { get; set; } // PackageType (length: 15)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public bool? Completed { get; set; } // Completed
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public DateTime? DispatchingProductCartonDate { get; set; } // DispatchingProductCartonDate
        public bool? Confirmed { get; set; } // Confirmed
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public bool? IsDispatch { get; set; } // IsDispatch
        public string BarcodeString { get; set; } // BarcodeString (length: 255)
        public string UserDispatch { get; set; } // UserDispatch (length: 255)
        public string DeviceNumberDispatch { get; set; } // DeviceNumberDispatch (length: 255)
        public DateTime? DispatchTime { get; set; } // DispatchTime
        public int? InnerQty { get; set; } // InnerQty
        public string Remark { get; set; } // Remark

        // Reverse navigation

        /// <summary>
        /// Child DispatchingProductPacks where [DispatchingProductPacks].[DispatchingProductCartonID] point to this entity (FK_DispatchingProductPacks_DispatchingProductCartons)
        /// </summary>
        public virtual ICollection<DispatchingProductPack> DispatchingProductPacks { get; set; } // DispatchingProductPacks.FK_DispatchingProductPacks_DispatchingProductCartons

        // Foreign keys

        /// <summary>
        /// Parent DispatchingOrder pointed by [DispatchingProductCartons].([DispatchingOrderId]) (FK_DispatchingProductCartons_DispatchingOrders)
        /// </summary>
        public virtual DispatchingOrder DispatchingOrder { get; set; } // FK_DispatchingProductCartons_DispatchingOrders

        public DispatchingProductCarton()
        {
            CartonNumber = 0;
            CreatedTime = DateTime.Now;
            WeightOfPackage = 0m;
            UpdatedTime = DateTime.Now;
            Completed = false;
            Confirmed = false;
            InnerQty = 0;
            DispatchingProductPacks = new List<DispatchingProductPack>();
        }
    }

    // DispatchingProductCartons_History
    public class DispatchingProductCartonsHistory
    {
        public long DispatchingProductCartonId { get; set; } // DispatchingProductCartonID (Primary key)
        public Guid? DispatchingOrderId { get; set; } // DispatchingOrderID
        public short? CartonNumber { get; set; } // CartonNumber
        public string CartonDescription { get; set; } // CartonDescription (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public string PackageType { get; set; } // PackageType (length: 15)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public bool? Completed { get; set; } // Completed
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public DateTime? DispatchingProductCartonDate { get; set; } // DispatchingProductCartonDate
        public bool? Confirmed { get; set; } // Confirmed
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public long DispatchingProductCartonIdOld { get; set; } // DispatchingProductCartonID_Old
        public int? IsDispatch { get; set; } // IsDispatch
        public string UserDispatch { get; set; } // UserDispatch (length: 255)
        public DateTime? DispatchTime { get; set; } // DispatchTime
        public string Remark { get; set; } // Remark
        public string BarcodeString { get; set; } // BarcodeString (length: 255)
        public string DeviceNumberDispatch { get; set; } // DeviceNumberDispatch (length: 255)
        public int? InnerQty { get; set; } // InnerQty

        // Foreign keys

        /// <summary>
        /// Parent DispatchingOrder pointed by [DispatchingProductCartons_History].([DispatchingOrderId]) (FK__Dispatchi__Dispa__25CDB372)
        /// </summary>
        public virtual DispatchingOrder DispatchingOrder { get; set; } // FK__Dispatchi__Dispa__25CDB372

        public DispatchingProductCartonsHistory()
        {
            CartonNumber = 0;
            CreatedTime = DateTime.Now;
            WeightOfPackage = 0m;
            UpdatedTime = DateTime.Now;
            Completed = false;
            Confirmed = false;
        }
    }

    // DispatchingProductPacks
    public class DispatchingProductPack
    {
        public long DispatchingProductPackId { get; set; } // DispatchingProductPackID (Primary key)
        public long? DispatchingProductCartonId { get; set; } // DispatchingProductCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber
        public Guid? DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID

        // Foreign keys

        /// <summary>
        /// Parent DispatchingOrderDetail pointed by [DispatchingProductPacks].([DispatchingOrderDetailId]) (FK_DispatchingProductPacks_DispatchingOrderDetails)
        /// </summary>
        public virtual DispatchingOrderDetail DispatchingOrderDetail { get; set; } // FK_DispatchingProductPacks_DispatchingOrderDetails

        /// <summary>
        /// Parent DispatchingProductCarton pointed by [DispatchingProductPacks].([DispatchingProductCartonId]) (FK_DispatchingProductPacks_DispatchingProductCartons)
        /// </summary>
        public virtual DispatchingProductCarton DispatchingProductCarton { get; set; } // FK_DispatchingProductPacks_DispatchingProductCartons

        public DispatchingProductPack()
        {
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // DispatchingProductPacksDelete
    public class DispatchingProductPacksDelete
    {
        public long DispatchingProductPackId { get; set; } // DispatchingProductPackID (Primary key)
        public long? DispatchingProductCartonId { get; set; } // DispatchingProductCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber
        public Guid? DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID

        public DispatchingProductPacksDelete()
        {
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // DispatchingProductPacks_History
    public class DispatchingProductPacksHistory
    {
        public long DispatchingProductPackId { get; set; } // DispatchingProductPackID (Primary key)
        public long? DispatchingProductCartonId { get; set; } // DispatchingProductCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber
        public Guid? DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public int? DispatchingProductPackIdold { get; set; } // DispatchingProductPackIDOLD
        public int? IsDispatch { get; set; } // IsDispatch
        public string UserDispatch { get; set; } // UserDispatch (length: 255)
        public DateTime? DispatchTime { get; set; } // DispatchTime

        public DispatchingProductPacksHistory()
        {
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // DispatchingUnits
    public class DispatchingUnit
    {
        public int DispatchingUnitId { get; set; } // DispatchingUnitID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)

        /// <summary>
        /// getdate()
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string Remark { get; set; } // Remark (length: 50)
        public int DispatchingCartonId { get; set; } // DispatchingCartonID
        public int ReceivingUnitId { get; set; } // ReceivingUnitID
        public byte[] Ts { get; set; } // ts

        public DispatchingUnit()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // DistributionOrders
    public class DistributionOrder
    {
        public int DistributionOrderId { get; set; } // DistributionOrderID (Primary key)
        public string DistributionOrderNumber { get; set; } // DistributionOrderNumber (length: 20)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int TruckId { get; set; } // TruckID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public decimal? Kilometer { get; set; } // Kilometer
        public decimal? Quantity { get; set; } // Quantity
        public string DistributionRemark { get; set; } // DistributionRemark (length: 300)
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut
        public int? PartId { get; set; } // PartID
        public string UserCheckOut { get; set; } // UserCheckOut (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public int TruckDriverHistoryId { get; set; } // TruckDriverHistoryID
        public bool? IsCheckOut { get; set; } // IsCheckOut
        public byte[] Ts { get; set; } // ts
        public byte? PumpTrigger { get; set; } // PumpTrigger
        public short? ChipQty { get; set; } // ChipQty
        public short? KeyQty { get; set; } // KeyQty
        public int? StoreId { get; set; } // StoreID
        public DateTime? FillTime { get; set; } // FillTime
        public int? GasStationId { get; set; } // GasStationID
        public string DocumentNumber { get; set; } // DocumentNumber (length: 50)
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 50)
        public bool? Outside { get; set; } // Outside
        public bool? ZaloSent { get; set; } // ZaloSent
        public int? DistributionOrderMainId { get; set; } // DistributionOrderMainID
        public decimal? NormsActual { get; set; } // NormsActual
        public decimal? QtyOfKilometer { get; set; } // QtyOfKilometer

        public DistributionOrder()
        {
            CreatedTime = DateTime.Now;
            PartId = 5;
            IsCheckOut = false;
            StoreId = 1;
            Outside = false;
            ZaloSent = false;
        }
    }

    // DockDoors
    public class DockDoor
    {
        public int DockDoorId { get; set; } // DockDoorID (Primary key)
        public string DockNumber { get; set; } // DockNumber (length: 5)
        public int WarehouseId { get; set; } // WarehouseID
        public string DockDoorRemark { get; set; } // DockDoorRemark (length: 250)
    }

    // Drivers
    public class Driver
    {
        public int DriverId { get; set; } // DriverID (Primary key)
        public string DriverCode { get; set; } // DriverCode (length: 50)
        public string DriverName { get; set; } // DriverName (length: 50)
        public string DriverTeamId { get; set; } // DriverTeamID (length: 50)
        public DateTime? StartDate { get; set; } // StartDate
        public string IdCard { get; set; } // IDCard (length: 50)
        public string BankAccount { get; set; } // BankAccount (length: 50)
        public string MobileNo { get; set; } // MobileNo (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? Active { get; set; } // Active
        public string Remark { get; set; } // Remark (length: 200)
        public byte[] Ts { get; set; } // TS
        public Guid? EmployeeId { get; set; } // EmployeeID

        public Driver()
        {
            CreatedTime = DateTime.Now;
            Active = true;
        }
    }

    // Drivers_HRM
    public class DriversHrm
    {
        public string Msnv { get; set; } // MSNV (Primary key) (length: 50)
        public string TenNv { get; set; } // TenNV (length: 50)
        public string ViTri { get; set; } // ViTri (length: 50)
        public string Description { get; set; } // Description (length: 100)
        public string Site { get; set; } // Site (length: 50)
    }

    // DSCartonStockOnHandDaily
    public class DsCartonStockOnHandDaily
    {
        public int ReportDateId { get; set; } // ReportDateID
        public DateTime? ReportDate { get; set; } // ReportDate
        public int? Quantity { get; set; } // Quantity
        public int? CustomerId { get; set; } // CustomerID
    }

    // dtproperties
    public class Dtproperty
    {
        public int Id { get; set; } // id (Primary key)
        public int? Objectid { get; set; } // objectid
        public string Property { get; set; } // property (Primary key) (length: 64)
        public string Value { get; set; } // value (length: 255)
        public byte[] Lvalue { get; set; } // lvalue (length: 2147483647)
        public int Version { get; set; } // version
        public string Uvalue { get; set; } // uvalue (length: 255)

        public Dtproperty()
        {
            Version = 0;
        }
    }

    // EDIBookingBigC
    public class EdiBookingBigC
    {
        public long Id { get; set; } // ID (Primary key)
        public long? C1PoDetail40StoresOrder41 { get; set; } // 1- PO_DETAIL (STORES ORDER)
        public long? C2LineNo { get; set; } // 2-LINE NO
        public long? C3PoMain40PoSupplier41 { get; set; } // 3-PO_MAIN (PO SUPPLIER)
        public string C4WhCode { get; set; } // 4-WH CODE (length: 50)
        public string C5TillCode { get; set; } // 5-TILL CODE (length: 50)
        public string C6GoldCode { get; set; } // 6-GOLD CODE (length: 50)
        public string C7Discription { get; set; } // 7-DISCRIPTION (length: 200)
        public string C8Lv { get; set; } // 8-LV (length: 50)
        public string C9Lu { get; set; } // 9-LU (length: 50)
        public string C10SupplierCode { get; set; } // 10-SUPPLIER CODE (length: 50)
        public string C11SupplierName { get; set; } // 11-SUPPLIER NAME (length: 200)
        public string C12Comm46Contract { get; set; } // 12-COMM.CONTRACT (length: 50)
        public string C13Dept { get; set; } // 13-DEPT (length: 50)
        public DateTime? C14DeliveryDate { get; set; } // 14-DELIVERY DATE
        public int? C15Store { get; set; } // 15-STORE
        public string C16StoresName { get; set; } // 16-STORES NAME (length: 100)
        public float? C17OrderQty { get; set; } // 17-ORDER QTY
        public string C18StockUnit { get; set; } // 18-STOCK UNIT (length: 50)
        public string C19XDocking47Storage { get; set; } // 19-X-DOCKING/ STORAGE (length: 50)
        public string C20Region { get; set; } // 20-REGION (length: 50)
        public string C21UnitPckSize { get; set; } // 21-UNIT PCK SIZE (length: 50)
    }

    // EDIDataSorting
    public class EdiDataSorting
    {
        public DateTime TransDate { get; set; } // TRANS_DATE (Primary key)
        public string PoNo { get; set; } // PO_NO (Primary key) (length: 255)
        public DateTime DocDate { get; set; } // DOC_DATE (Primary key)
        public string Site { get; set; } // SITE (Primary key) (length: 255)
        public string Vendor { get; set; } // VENDOR (length: 255)
        public string Sku { get; set; } // SKU (Primary key) (length: 255)
        public decimal QtyOrder { get; set; } // QTY_ORDER (Primary key)
        public decimal QtyDeliver { get; set; } // QTY_DELIVER (Primary key)
        public string UomDeliver { get; set; } // UOM_DELIVER (Primary key) (length: 20)
        public int Pack { get; set; } // PACK (Primary key)
        public string UomWeight { get; set; } // UOM_WEIGHT (Primary key) (length: 10)
        public int TotalBox { get; set; } // TOTAL_BOX (Primary key)
        public string DeliveryNo { get; set; } // DELIVERY_NO (Primary key) (length: 30)
        public Guid Id { get; set; } // ID (Primary key)
        public string FileName { get; set; } // FileName (Primary key) (length: 255)
        public string FileType { get; set; } // FileType (Primary key) (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime (Primary key)
        public int IsDeleted { get; set; } // IsDeleted (Primary key)
        public DateTime? DeletedTime { get; set; } // DeletedTime
        public Guid? CustomerId { get; set; } // CustomerID

        public EdiDataSorting()
        {
            Id = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            IsDeleted = 0;
        }
    }

    // EDI_DetailBreakdowns
    public class EdiDetailBreakdown
    {
        public Guid EdiDetailBreakDownId { get; set; } // EDI_DetailBreakDownID (Primary key)
        public int? QuantityMax { get; set; } // QuantityMax
        public int? Quantity { get; set; } // Quantity
        public string CustomerRef { get; set; } // CustomerRef (length: 50)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public Guid EdiOrderDetailId { get; set; } // EDI_OrderDetailID
        public Guid ProductId { get; set; } // ProductID
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID

        public EdiDetailBreakdown()
        {
            EdiDetailBreakDownId = Guid.NewGuid();
        }
    }

    // EDI_Orders
    public class EdiOrder
    {
        public Guid EdiOrderId { get; set; } // EDI_OrderID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public DateTime OrderDate { get; set; } // OrderDate
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
        public string CustomerReference { get; set; } // CustomerReference (length: 300)
        public DateTime? ProcessingTime { get; set; } // ProcessingTime
        public int? ProcessingStatus { get; set; } // ProcessingStatus
        public int OrderType { get; set; } // OrderType
        public string ProcessingOrderNumber { get; set; } // ProcessingOrderNumber (length: 50)
        public string ProcessedBy { get; set; } // ProcessedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public bool FileUploaded { get; set; } // FileUploaded
        public string FileUploadedCode { get; set; } // FileUploadedCode (length: 250)
        public int TotalQuantity { get; set; } // TotalQuantity
        public byte[] Ts { get; set; } // TS
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 20)
        public byte? CustomerDispatchType { get; set; } // CustomerDispatchType
        public string EdiOrderRemark { get; set; } // EDIOrderRemark (length: 300)
        public int? EdiOrderLocalId { get; set; } // EDI_OrderLocalID
        public string EdiOrderNumber { get; set; } // EDI_OrderNumber (length: 20)
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public Guid? RouteId { get; set; } // RouteID
        public int? TransporterId { get; set; } // TransporterID
        public string TruckNumber { get; set; } // TruckNumber (length: 50)
        public DateTime? DeliveryDate { get; set; } // DeliveryDate
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 50)
        public int? Version { get; set; } // Version
        public string CommonColumId { get; set; } // CommonColumID (length: 255)
        public bool? Status { get; set; } // Status
        public int? Active { get; set; } // Active
        public string StatusProcess { get; set; } // StatusProcess (length: 255)
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 30)
        public string WareHouseCustomerInterface { get; set; } // WareHouseCustomerInterface (length: 255)
        public string SubventoryCustomerInterface { get; set; } // SubventoryCustomerInterface (length: 255)
        public string LocatorCustomerInterface { get; set; } // LocatorCustomerInterface (length: 255)
        public string CustomerLocation { get; set; } // CustomerLocation (length: 255)
        public string VendorCustomerCode { get; set; } // VendorCustomerCode (length: 255)
        public int? PalletNumber { get; set; } // PalletNumber
        public int? TimeSlotId { get; set; } // TimeSlotID
        public decimal? TotalWeights { get; set; } // TotalWeights
        public string VehicleType { get; set; } // VehicleType (length: 30)
        public string StatusDescription { get; set; } // StatusDescription (length: 100)
        public decimal? RatingValue { get; set; } // RatingValue
        public string PhoneNumber { get; set; } // PhoneNumber (length: 100)
        public int? DockDoorId { get; set; } // DockDoorID

        // Reverse navigation

        /// <summary>
        /// Child EdiOrderDetails where [EDI_OrderDetails].[EDI_OrderID] point to this entity (FK_EDI_OrderDetails_EDI_Orders)
        /// </summary>
        public virtual ICollection<EdiOrderDetail> EdiOrderDetails { get; set; } // EDI_OrderDetails.FK_EDI_OrderDetails_EDI_Orders

        public EdiOrder()
        {
            EdiOrderId = Guid.NewGuid();
            ProcessingStatus = 0;
            CreatedTime = DateTime.Now;
            FileUploaded = false;
            CustomerDispatchType = 1;
            Version = 1;
            TotalWeights = 0m;
            EdiOrderDetails = new List<EdiOrderDetail>();
        }
    }

    // EDI_OrderDetails
    public class EdiOrderDetail
    {
        public Guid EdiOrderDetailId { get; set; } // EDI_OrderDetailID (Primary key)
        public Guid EdiOrderId { get; set; } // EDI_OrderID
        public Guid? ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string Packages { get; set; } // Packages (length: 50)
        public int? Quantity { get; set; } // Quantity
        public bool Fifo { get; set; } // FIFO
        public int? Status { get; set; } // Status
        public int? QuantityMax { get; set; } // QuantityMax
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? ExpiryDate { get; set; } // ExpiryDate
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public string ProductRemark { get; set; } // ProductRemark (length: 250)
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public decimal? Weights { get; set; } // Weights
        public int? Units { get; set; } // Units
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public long CustomerRefDetailId { get; set; } // CustomerRef_DetailID
        public Guid? CommonColumId { get; set; } // CommonColumID
        public bool? Active { get; set; } // Active
        public int? Version { get; set; } // version
        public bool? IsHold { get; set; } // IsHold
        public decimal? PoWeight { get; set; } // PO_WEIGHT
        public decimal? Tolerance { get; set; } // Tolerance
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public int? QtyMiss { get; set; } // QtyMiss
        public decimal? WeightMiss { get; set; } // WeightMiss

        /// <summary>
        /// 1: Qty&lt;&gt; 0, Weight &lt;&gt;0; 2: Qty=0, Weight &lt;&gt;0; 3: CheckStock; 4: ProductionOrder
        /// </summary>
        public int? OrderType { get; set; } // OrderType

        /// <summary>
        /// PalletStatus
        /// </summary>
        public string PalletStatus { get; set; } // PalletStatus (length: 30)
        public int? QtyPicked { get; set; } // QtyPicked
        public string Package1 { get; set; } // Package1 (length: 255)
        public string Package2 { get; set; } // Package2 (length: 255)
        public string SubInterface { get; set; } // SubInterface (length: 255)
        public string LocatorInterface { get; set; } // LocatorInterface (length: 255)
        public int? XdocId { get; set; } // XdocID
        public DateTime? XdocGetTime { get; set; } // XdocGetTime
        public string CustomerItem { get; set; } // CustomerItem (length: 255)

        // Foreign keys

        /// <summary>
        /// Parent EdiOrder pointed by [EDI_OrderDetails].([EdiOrderId]) (FK_EDI_OrderDetails_EDI_Orders)
        /// </summary>
        public virtual EdiOrder EdiOrder { get; set; } // FK_EDI_OrderDetails_EDI_Orders

        public EdiOrderDetail()
        {
            EdiOrderDetailId = Guid.NewGuid();
            Fifo = true;
            CustomerRefDetailId = 0;
            Active = true;
            Version = 1;
            CreatedTime = DateTime.Now;
            QtyPicked = 0;
        }
    }

    // EDI_OrderType
    public class EdiOrderType
    {
        public int EdiOrderTypeId { get; set; } // EDI_OrderTypeID (Primary key)
        public string EdiOrderTypeDescription { get; set; } // EDI_OrderTypeDescription (length: 100)
        public string EdiOrderType_ { get; set; } // EDI_OrderType (length: 10)
    }

    // EDI_tmpProductID
    public class EdiTmpProductId
    {
        public Guid EdiTmpProductId_ { get; set; } // EDI_tmpProductID (Primary key)
        public Guid? EdiOrderDetailId { get; set; } // EDI_OrderDetailID
        public Guid? ProductId { get; set; } // ProductID
        public DateTime? UseByDate { get; set; } // UseByDate
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public int? TotalRemain { get; set; } // TotalRemain
        public int? RequestQuantity { get; set; } // RequestQuantity
        public bool? Fifo { get; set; } // FIFO

        public EdiTmpProductId()
        {
            EdiTmpProductId_ = Guid.NewGuid();
        }
    }

    // EDI_tmpProductRemains
    public class EdiTmpProductRemain
    {
        public Guid TmpProductRemainId { get; set; } // tmpProductRemainID (Primary key)
        public string TmpProductRemainName { get; set; } // tmpProductRemainName (length: 100)
        public decimal? TmpWeightPerPackage { get; set; } // tmpWeightPerPackage
        public int? TmpRemainQuantity { get; set; } // tmpRemainQuantity
        public string TmpProductRemainNumber { get; set; } // tmpProductRemainNumber (length: 30)
        public Guid? TmpCustomerId { get; set; } // tmpCustomerID
        public DateTime? TmpUpdateTime { get; set; } // tmpUpdateTime
        public string TmpProductRemainNumberFull { get; set; } // tmpProductRemainNumberFull (length: 30)

        public EdiTmpProductRemain()
        {
            TmpProductRemainId = Guid.NewGuid();
        }
    }

    // EDI_tmpProductRemains_PickSequence
    public class EdiTmpProductRemainsPickSequence
    {
        public int Id { get; set; } // ID (Primary key)
        public Guid TmpProductRemainId { get; set; } // tmpProductRemainID
        public string TmpProductRemainName { get; set; } // tmpProductRemainName (length: 100)
        public decimal? TmpWeightPerPackage { get; set; } // tmpWeightPerPackage
        public int? TmpRemainQuantity { get; set; } // tmpRemainQuantity
        public string TmpProductRemainNumber { get; set; } // tmpProductRemainNumber (length: 30)
        public DateTime? TmpUpdateTime { get; set; } // tmpUpdateTime
        public string TmpProductRemainNumberFull { get; set; } // tmpProductRemainNumberFull (length: 30)
        public DateTime? TmpProductionDate { get; set; } // tmpProductionDate
        public DateTime? TmpExpiryDate { get; set; } // tmpExpiryDate
        public string TmpCustomerRef { get; set; } // tmpCustomerRef (length: 30)
        public Guid? TmpCustomerId { get; set; } // tmpCustomerID
        public Guid? TmpReceivingOrderId { get; set; } // tmpReceivingOrderID
    }

    // EFile
    public class EFile
    {
        public Guid Id { get; set; } // ID (Primary key)
        public string FileName { get; set; } // FileName (length: 255)
        public byte[] FileContent { get; set; } // FileContent
        public string FileType { get; set; } // FileType (length: 10)
        public Guid? CustomerId { get; set; } // CustomerID
        public DateTime? OrderDate { get; set; } // OrderDate
        public Guid? ReferenceId { get; set; } // ReferenceID

        public EFile()
        {
            Id = Guid.NewGuid();
        }
    }

    // ElectricityConsumption
    public class ElectricityConsumption
    {
        public Guid ElectricityConsumptionId { get; set; } // ElectricityConsumptionID (Primary key)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 20)
        public string Reason { get; set; } // Reason (length: 30)
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string Remark { get; set; } // Remark (length: 250)
        public decimal? QuantityKwh { get; set; } // QuantityKwh

        /// <summary>
        /// RunningHour = EndTime - StartTime
        /// </summary>
        public decimal? QuantityHour { get; set; } // QuantityHour
        public string ContainerType { get; set; } // ContainerType (length: 50)

        /// <summary>
        /// RunningHour = EndTime - StartTime
        /// </summary>
        public DateTime? RunningHours { get; set; } // RunningHours
        public Guid? OtherServiceDetailId { get; set; } // OtherServiceDetailID
        public Guid? CustomerId { get; set; } // CustomerID
        public string VehicleInOutNumber { get; set; } // VehicleInOutNumber (length: 20)
        public Guid? ContInOutId { get; set; } // ContInOutID
        public bool? Electricity { get; set; } // Electricity

        public ElectricityConsumption()
        {
            ElectricityConsumptionId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            ContInOutId = Guid.NewGuid();
            Electricity = false;
        }
    }

    // Employees
    /// <summary>
    /// 2
    /// ((EmployeeID=200))
    /// Employees.EmployeeID
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class Employee
    {
        public Guid EmployeeId { get; set; } // EmployeeID (Primary key)
        public int? EmployeeCode { get; set; } // EmployeeCode
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)

        /// <summary>
        /// 2604
        /// </summary>
        public string VietnamName { get; set; } // VietnamName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? DateOfBirth { get; set; } // DateOfBirth

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? DateOfEntry { get; set; } // DateOfEntry

        /// <summary>
        /// -1
        /// </summary>
        public string IdCardNumber { get; set; } // IDCardNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? IdCardIssueDate { get; set; } // IDCardIssueDate

        /// <summary>
        /// 1800
        /// </summary>
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string PersonnalTaxCode { get; set; } // PersonnalTaxCode (length: 25)
        public string SocialInsuaranceNumber { get; set; } // SocialInsuaranceNumber (length: 50)
        public string HealthInsuaranceNumber { get; set; } // HealthInsuaranceNumber (length: 50)
        public string ContractNumber { get; set; } // ContractNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? ContractDate { get; set; } // ContractDate
        public DateTime? EffectiveDate { get; set; } // EffectiveDate

        /// <summary>
        /// Địa chỉ trong giấy CMND - quê quán
        /// </summary>
        public string Address { get; set; } // Address (length: 250)

        /// <summary>
        /// Địa chỉ tạm trú
        /// </summary>
        public string AddressNow { get; set; } // AddressNow (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string Mobile { get; set; } // Mobile (length: 50)
        public string BankAccountNumber { get; set; } // BankAccountNumber (length: 25)
        public string IdCardIssuePlace { get; set; } // IDCardIssuePlace (length: 50)
        public DateTime? ContractDateFirst { get; set; } // ContractDateFirst

        /// <summary>
        /// -1
        /// </summary>
        public short? Status { get; set; } // Status

        /// <summary>
        /// -1
        /// </summary>
        public string Education { get; set; } // Education (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string FirstName { get; set; } // FirstName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string LastName { get; set; } // LastName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Phone { get; set; } // Phone (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Email { get; set; } // Email (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Photograph { get; set; } // Photograph (length: 50)

        /// <summary>
        /// Employee is working or not working
        /// </summary>
        public bool Active { get; set; } // Active

        /// <summary>
        /// Employee is permanent or temporary
        /// </summary>
        public bool ContractPermanent { get; set; } // ContractPermanent

        /// <summary>
        /// 2745
        /// </summary>
        public string BikeNumber { get; set; } // BikeNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public bool BikeUse { get; set; } // BikeUse

        /// <summary>
        /// -1
        /// </summary>
        public int PositionId { get; set; } // PositionID

        /// <summary>
        /// -1
        /// </summary>
        public int? DepartmentId { get; set; } // DepartmentID

        /// <summary>
        /// -1
        /// </summary>
        public byte? ShiftId { get; set; } // ShiftID

        /// <summary>
        /// 0
        /// </summary>
        public int? StoreId { get; set; } // StoreID

        /// <summary>
        /// -1
        /// </summary>
        public byte? Grade { get; set; } // Grade

        /// <summary>
        /// 0
        /// </summary>
        public bool PerformanceStatus { get; set; } // PerformanceStatus

        /// <summary>
        /// 0
        /// </summary>
        public bool Sex { get; set; } // Sex

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// -1
        /// </summary>
        public string InOutCardNumber { get; set; } // InOutCardNumber (length: 5)
        public bool MonthlyAdvanceRequired { get; set; } // MonthlyAdvanceRequired
        public int? MonthlyAdvanceAmount { get; set; } // MonthlyAdvanceAmount

        /// <summary>
        /// Địa chỉ trong giấy CMND - quê quán
        /// </summary>
        public string Remark { get; set; } // Remark (length: 100)
        public bool? IsLunch { get; set; } // IsLunch
        public string LunchPlace { get; set; } // LunchPlace (length: 4)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? LeaveDate { get; set; } // LeaveDate
        public bool? IsLeave { get; set; } // IsLeave
        public bool? IsOutsourcing { get; set; } // IsOutsourcing
        public string EnglishName { get; set; } // EnglishName (length: 50)
        public Guid? SupplierId { get; set; } // SupplierID
        public Guid? ReportTo { get; set; } // ReportTo
        public bool? IsOnlineWorking { get; set; } // IsOnlineWorking
        public DateTime? EndProbationDate { get; set; } // EndProbationDate

        // Reverse navigation

        /// <summary>
        /// Child EmployeeWorkings where [EmployeeWorkings].[EmployeeID] point to this entity (FK_EmployeeWorkings_Employees)
        /// </summary>
        public virtual ICollection<EmployeeWorking> EmployeeWorkings { get; set; } // EmployeeWorkings.FK_EmployeeWorkings_Employees

        /// <summary>
        /// Child FeeBackForCulturals where [FeeBackForCultural].[EmployeeRef] point to this entity (FK_FreeBackCultural_Employee)
        /// </summary>
        public virtual ICollection<FeeBackForCultural> FeeBackForCulturals { get; set; } // FeeBackForCultural.FK_FreeBackCultural_Employee

        // Foreign keys

        /// <summary>
        /// Parent Position pointed by [Employees].([PositionId]) (FK_Employees_Positions)
        /// </summary>
        public virtual Position Position { get; set; } // FK_Employees_Positions

        public Employee()
        {
            EmployeeId = Guid.NewGuid();
            Active = true;
            ContractPermanent = false;
            BikeUse = false;
            PositionId = 1;
            StoreId = 1;
            PerformanceStatus = true;
            Sex = false;
            MonthlyAdvanceRequired = false;
            CreatedTime = DateTime.Now;
            IsOnlineWorking = false;
            EmployeeWorkings = new List<EmployeeWorking>();
            FeeBackForCulturals = new List<FeeBackForCultural>();
        }
    }

    // EmployeeAnnualHistories
    /// <summary>
    /// 2
    /// ((EmployeeID=122))
    /// EmployeeAnnualHistories.Remark DESC
    /// True
    /// 0
    /// 1000000
    /// </summary>
    public class EmployeeAnnualHistory
    {
        /// <summary>
        /// 1968
        /// </summary>
        public int EmployeeHistoryId { get; set; } // EmployeeHistoryID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// -1
        /// </summary>
        public int YearId { get; set; } // YearID

        /// <summary>
        /// -1
        /// </summary>
        public byte? PositionId { get; set; } // PositionID

        /// <summary>
        /// -1
        /// </summary>
        public byte? Grade { get; set; } // Grade

        /// <summary>
        /// -1
        /// </summary>
        public bool? ContractPermanent { get; set; } // ContractPermanent

        /// <summary>
        /// -1
        /// </summary>
        public string EvaluationGrade { get; set; } // EvaluationGrade (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Remark { get; set; } // Remark (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public int? DepartmentId { get; set; } // DepartmentID

        /// <summary>
        /// -1
        /// </summary>
        public int? StoreId { get; set; } // StoreID

        /// <summary>
        /// 109
        /// </summary>
        public double? Salary { get; set; } // Salary

        /// <summary>
        /// 109
        /// </summary>
        public double? SalaryAllowance { get; set; } // SalaryAllowance

        /// <summary>
        /// 109
        /// </summary>
        public double? SalarySeniority { get; set; } // SalarySeniority

        /// <summary>
        /// 0
        /// </summary>
        public Guid? RecordId { get; set; } // RecordID
        public byte[] TimeStamp { get; set; } // TimeStamp
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)

        public EmployeeAnnualHistory()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // EmployeeAreas
    public class EmployeeArea
    {
        public string RoomId { get; set; } // RoomID (Primary key) (length: 10)
        public string RoomDescription { get; set; } // RoomDescription (length: 250)
        public byte Warehouse { get; set; } // Warehouse
        public int? RoomArea { get; set; } // RoomArea
        public int? QuantityOfPallets { get; set; } // QuantityOfPallets
        public int? RoomVolume { get; set; } // RoomVolume
        public int? StoreId { get; set; } // StoreID
        public int EmployeeAreaId { get; set; } // EmployeeAreaID
    }

    // EmployeeAreaResponsibities
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class EmployeeAreaResponsibity
    {
        /// <summary>
        /// 0
        /// </summary>
        public int EmployeeAreaId { get; set; } // EmployeeAreaID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string AreaRemark { get; set; } // AreaRemark (length: 250)
        public int? StoreId { get; set; } // StoreID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public Guid? RoomId { get; set; } // RoomID

        public EmployeeAreaResponsibity()
        {
            StoreId = 1;
        }
    }

    // EmployeeChangeHistories
    public class EmployeeChangeHistory
    {
        public int EmployeeChangeHistoryId { get; set; } // EmployeeChangeHistoryID (Primary key)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public int EmployeeId { get; set; } // EmployeeID
        public string Description { get; set; } // Description (length: 500)
        public string Salary { get; set; } // Salary (length: 500)
        public string SalaryResponsibility { get; set; } // SalaryResponsibility (length: 500)
        public string SalaryAllowance { get; set; } // SalaryAllowance (length: 500)
        public string SalarySeniority { get; set; } // SalarySeniority (length: 500)
        public DateTime EffectiveDate { get; set; } // EffectiveDate
        public DateTime ImplementationDate { get; set; } // ImplementationDate
        public DateTime PeriodOfTime { get; set; } // PeriodOfTime
        public bool? Delegate { get; set; } // Delegate
        public byte[] TimeStamp { get; set; } // TimeStamp
        public int? OldPositionId { get; set; } // OldPositionID
        public byte? OldShiftId { get; set; } // OldShiftID
        public byte? OldDepartmentId { get; set; } // OldDepartmentID
        public int? OldStoreId { get; set; } // OldStoreID

        /// <summary>
        /// Employee is permanent or temporary
        /// </summary>
        public bool? OldContractPermanent { get; set; } // OldContractPermanent
        public string OldEducation { get; set; } // OldEducation (length: 20)
        public int? PositionId { get; set; } // PositionID
        public byte? ShiftId { get; set; } // ShiftID
        public byte? DepartmentId { get; set; } // DepartmentID
        public int? StoreId { get; set; } // StoreID

        /// <summary>
        /// Employee is permanent or temporary
        /// </summary>
        public bool? ContractPermanent { get; set; } // ContractPermanent
        public string Education { get; set; } // Education (length: 20)
        public string ApprovedBy { get; set; } // ApprovedBy (length: 255)
        public DateTime? ApprovedTime { get; set; } // ApprovedTime

        public EmployeeChangeHistory()
        {
            CreatedTime = DateTime.Now;
            OldStoreId = 1;
            OldContractPermanent = false;
            StoreId = 1;
            ContractPermanent = false;
        }
    }

    // EmployeeCodeFinger_HN
    public class EmployeeCodeFingerHn
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
    }

    // EmployeeCoreValues
    public class EmployeeCoreValue
    {
        public int EmployeeCoreValueId { get; set; } // EmployeeCoreValueID (Primary key)
        public Guid? EmployeeId { get; set; } // EmployeeID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid? CoreValueEmployeeId { get; set; } // CoreValueEmployeeID
        public string Remark { get; set; } // Remark (length: 300)

        public EmployeeCoreValue()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // EmployeeCoreValuesScores
    public class EmployeeCoreValuesScore
    {
        public int Score { get; set; } // Score (Primary key)
        public string ScoreDescription { get; set; } // ScoreDescription (length: 300)
    }

    // EmployeeEducations
    public class EmployeeEducation
    {
        public string Education { get; set; } // Education (Primary key) (length: 50)
        public string Description { get; set; } // Description (length: 200)
    }

    // EmployeeFamilyMembers
    public class EmployeeFamilyMember
    {
        public int EmployeeFamilyMemberId { get; set; } // EmployeeFamilyMemberID (Primary key)
        public string FullName { get; set; } // FullName (length: 50)
        public DateTime DateOfBirth { get; set; } // DateOfBirth
        public bool Sex { get; set; } // Sex
        public string Relationship { get; set; } // Relationship (length: 50)
        public string Mobile { get; set; } // Mobile (length: 50)
        public string Remark { get; set; } // Remark (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public bool? Dependent { get; set; } // Dependent
        public byte[] Ts { get; set; } // TS
        public Guid EmployeeId { get; set; } // EmployeeID

        public EmployeeFamilyMember()
        {
            Sex = false;
            CreatedTime = DateTime.Now;
            Dependent = false;
        }
    }

    // EmployeeHistory
    /// <summary>
    /// 2
    /// EmployeeHistory.HistoryDescription
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class EmployeeHistory
    {
        /// <summary>
        /// 0
        /// </summary>
        public int EmployeeHistoryId { get; set; } // EmployeeHistoryID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string HistoryDescription { get; set; } // HistoryDescription (length: 400)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public string HistoryCategory { get; set; } // HistoryCategory (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EditTime { get; set; } // EditTime
        public string BeforeDataChanged { get; set; } // BeforeDataChanged (length: 100)
        public string AfterDataChanged { get; set; } // AfterDataChanged (length: 100)
        public Guid EmployeeId { get; set; } // EmployeeID

        public EmployeeHistory()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // EmployeeInOutDisplay
    public class EmployeeInOutDisplay
    {
        public int EmployeeId { get; set; } // EmployeeID
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut
        public string FirstName { get; set; } // FirstName (length: 50)
    }

    // EmployeeMovements
    /// <summary>
    /// 0
    /// </summary>
    public class EmployeeMovement
    {
        /// <summary>
        /// 0
        /// </summary>
        public int EmployeeMovementId { get; set; } // EmployeeMovementID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? MovementDate { get; set; } // MovementDate

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ConfirmTime { get; set; } // ConfirmTime

        /// <summary>
        /// 0
        /// </summary>
        public string MovementReason { get; set; } // MovementReason (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public byte? MovementType { get; set; } // MovementType

        /// <summary>
        /// 0
        /// </summary>
        public int? OldReferenceId { get; set; } // OldReferenceID

        /// <summary>
        /// 0
        /// </summary>
        public int? NewReferenceId { get; set; } // NewReferenceID
    }

    // EmployeeOTSupervisors
    /// <summary>
    /// 2
    /// ((EmployeeID=259))
    /// EmployeeOTSupervisors.EmployeeOTSupervisorID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class EmployeeOtSupervisor
    {
        /// <summary>
        /// 0
        /// </summary>
        public DateTime EmployeeOtSupervisorDate { get; set; } // EmployeeOTSupervisorDate

        /// <summary>
        /// 0
        /// </summary>
        public string AuthorisedBy { get; set; } // AuthorisedBy (length: 300)

        /// <summary>
        /// 0
        /// </summary>
        public float HourQuantity { get; set; } // HourQuantity

        /// <summary>
        /// 0
        /// </summary>
        public string DayStatus { get; set; } // DayStatus (length: 7)

        /// <summary>
        /// 0
        /// </summary>
        public bool? SundayHoliday { get; set; } // SundayHoliday

        /// <summary>
        /// 0
        /// </summary>
        public int Gate { get; set; } // Gate

        /// <summary>
        /// 0
        /// </summary>
        public bool EmployeeOtSupervisorConfirm { get; set; } // EmployeeOTSupervisorConfirm

        /// <summary>
        /// 0
        /// </summary>
        public string Remarks { get; set; } // Remarks (length: 250)
        public Guid EmployeeId { get; set; } // EmployeeID
        public bool EmployeeOtSupervisorAccept { get; set; } // EmployeeOTSupervisorAccept
        public byte? Status { get; set; } // Status
        public Guid EmployeeOtSupervisorId { get; set; } // EmployeeOTSupervisorID (Primary key)
        public bool Rejected { get; set; } // Rejected
        public string RejectedReason { get; set; } // RejectedReason (length: 200)

        public EmployeeOtSupervisor()
        {
            HourQuantity = 0f;
            SundayHoliday = false;
            Gate = 1;
            EmployeeOtSupervisorConfirm = false;
            EmployeeOtSupervisorAccept = false;
            Status = 0;
            EmployeeOtSupervisorId = Guid.NewGuid();
            Rejected = false;
        }
    }

    // EmployeeReminders
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class EmployeeReminder
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ReminderId { get; set; } // ReminderID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string ReminderDescription { get; set; } // ReminderDescription (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime ReminderDate { get; set; } // ReminderDate

        /// <summary>
        /// 0
        /// </summary>
        public bool ReminderAcknowledged { get; set; } // ReminderAcknowledged

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? AcknowledgedTime { get; set; } // AcknowledgedTime

        /// <summary>
        /// 0
        /// </summary>
        public int? AcknowledgedBy { get; set; } // AcknowledgedBy

        /// <summary>
        /// 0
        /// </summary>
        public string ReminderedBy { get; set; } // ReminderedBy (length: 50)
        public string ReminderNumber { get; set; } // ReminderNumber (length: 10)
        public int? EmployeeKpiDefinitionId { get; set; } // EmployeeKPIDefinitionID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public Guid? RoomId { get; set; } // RoomID

        public EmployeeReminder()
        {
            ReminderDate = DateTime.Now;
            ReminderAcknowledged = false;
        }
    }

    // EmployeesImport
    public class EmployeesImport
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key)
        public int? EmployeeCode { get; set; } // EmployeeCode
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public DateTime? DateOfBirth { get; set; } // DateOfBirth
        public DateTime? DateOfEntry { get; set; } // DateOfEntry
        public string IdCardNumber { get; set; } // IDCardNumber (length: 50)
        public DateTime? IdCardIssueDate { get; set; } // IDCardIssueDate
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string PersonnalTaxCode { get; set; } // PersonnalTaxCode (length: 25)
        public string SocialInsuaranceNumber { get; set; } // SocialInsuaranceNumber (length: 50)
        public string HealthInsuaranceNumber { get; set; } // HealthInsuaranceNumber (length: 50)
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public DateTime? ContractDate { get; set; } // ContractDate
        public DateTime? EffectiveDate { get; set; } // EffectiveDate
        public string Address { get; set; } // Address (length: 250)
        public string AddressNow { get; set; } // AddressNow (length: 250)
    }

    // EmployeesImport_HCM
    public class EmployeesImportHcm
    {
        public int Id { get; set; } // ID (Primary key)
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string Office { get; set; } // Office (length: 100)
        public string Department { get; set; } // Department (length: 100)
    }

    // EmployeesImport_HCM2
    public class EmployeesImportHcm2
    {
        public int EmployeeCode { get; set; } // EmployeeCode (Primary key)
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public int PositionId { get; set; } // PositionID
        public int? DepartmentId { get; set; } // DepartmentID
        public byte? ShiftId { get; set; } // ShiftID
        public int? StoreId { get; set; } // StoreID
        public string Remark { get; set; } // Remark (length: 50)

        public EmployeesImportHcm2()
        {
            PositionId = 1;
            StoreId = 1;
        }
    }

    // EmployeesImport_HCM_TanTao
    public class EmployeesImportHcmTanTao
    {
        public int Id { get; set; } // ID (Primary key)
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
        public int? EmployeeCode { get; set; } // EmployeeCode
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string Department { get; set; } // Department (length: 100)
        public string Office { get; set; } // Office (length: 100)
    }

    // EmployeesImport_HN
    public class EmployeesImportHn
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string Gender { get; set; } // Gender (length: 50)
        public DateTime? DateOfBirth { get; set; } // DateOfBirth
        public string IdCardNumber { get; set; } // IDCardNumber (length: 50)
        public DateTime? IdCardIssueDate { get; set; } // IDCardIssueDate
        public string IdCardNumberPlace { get; set; } // IDCardNumberPlace (length: 50)
        public string Address { get; set; } // Address (length: 250)
        public string Mobile { get; set; } // Mobile (length: 50)
        public DateTime? DateOfEntry { get; set; } // DateOfEntry
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
    }

    // EmployeeWorkings
    /// <summary>
    /// 2
    /// EmployeeWorkings.EmployeeWorkingID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class EmployeeWorking
    {
        public Guid EmployeeWorkingId { get; set; } // EmployeeWorkingID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public Guid EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? OrderDate { get; set; } // OrderDate

        /// <summary>
        /// -1
        /// </summary>
        public int Percentage { get; set; } // Percentage

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public decimal? ProductionQuantity { get; set; } // ProductionQuantity

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string Unit { get; set; } // Unit (length: 10)
        public string EquipmentId { get; set; } // EquipmentID (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [EmployeeWorkings].([EmployeeId]) (FK_EmployeeWorkings_Employees)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK_EmployeeWorkings_Employees

        public EmployeeWorking()
        {
            EmployeeWorkingId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // EmployeeWorking_StoreHNNew
    public class EmployeeWorkingStoreHnNew
    {
        public int? EmployeeCode { get; set; } // EmployeeCode
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public int Percentage { get; set; } // Percentage
        public Guid WorkDefinitionId { get; set; } // WorkDefinitionID
        public decimal? ProductionQuantity { get; set; } // ProductionQuantity
        public float? UnitPrice { get; set; } // UnitPrice
        public float? Money { get; set; } // Money
        public string Description { get; set; } // Description (length: 200)
        public string Remark { get; set; } // Remark (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string OrderRemark { get; set; } // OrderRemark (length: 250)
        public DateTime? EmployeeWorkingCreatedTime { get; set; } // EmployeeWorkingCreatedTime
        public DateTime? TimeWorking { get; set; } // TimeWorking
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? OrderDate { get; set; } // OrderDate
        public Guid? CustomerId { get; set; } // CustomerID
        public int? StoreId { get; set; } // StoreID
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public bool IsProductivity { get; set; } // isProductivity
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string PositionVietnam { get; set; } // PositionVietnam (length: 50)
        public int PositionId { get; set; } // PositionID
        public Guid EmployeeId { get; set; } // EmployeeID
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalPackages { get; set; } // TotalPackages
    }

    // Equipments
    public class Equipment
    {
        public string EquipmentId { get; set; } // EquipmentID (length: 50)
        public string EquipmentName { get; set; } // EquipmentName (length: 100)
        public string EquipmentNameVn { get; set; } // EquipmentNameVN (length: 100)
        public string Manufacturer { get; set; } // Manufacturer (length: 50)
        public string Model { get; set; } // Model (length: 50)
        public string Type { get; set; } // Type (length: 50)
        public string SerialNumber { get; set; } // SerialNumber (length: 50)
        public DateTime? RecievedDate { get; set; } // RecievedDate
        public DateTime? WarrantyExpiredate { get; set; } // WarrantyExpiredate
        public int EquipmentCategoryId { get; set; } // EquipmentCategoryID
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)
        public string Capacity { get; set; } // Capacity (length: 30)
        public string HRate { get; set; } // HRate (length: 15)
        public string Remark { get; set; } // Remark (length: 500)
        public string ItEquipmentComputerName { get; set; } // ITEquipmentComputerName (length: 50)
        public string Note { get; set; } // Note (length: 50)
        public int? ItDepartment { get; set; } // ITDepartment
        public string ItEquipmentLocation { get; set; } // ITEquipmentLocation (length: 50)
        public string ItEquipmentUser { get; set; } // ITEquipmentUser (length: 50)
        public string ItEquipmentSpecification { get; set; } // ITEquipmentSpecification (length: 250)
        public string Softwares { get; set; } // Softwares (length: 250)
        public bool? Licencing { get; set; } // Licencing
        public string ItEquipmentNumber { get; set; } // ITEquipmentNumber (length: 50)
        public string ItEquipmentCondition { get; set; } // ITEquipmentCondition (length: 250)
        public DateTime? ItEquipmentBuyingDate { get; set; } // ITEquipmentBuyingDate
        public float? ItEquipmentPrice { get; set; } // ITEquipmentPrice
        public string BuyingWhere { get; set; } // BuyingWhere (length: 50)
        public bool? Service { get; set; } // Service
        public bool? Internet { get; set; } // Internet
        public bool? ForJob { get; set; } // ForJob
        public bool? Lan { get; set; } // LAN
        public string UserId { get; set; } // UserID (length: 20)
        public int LocationId { get; set; } // LocationID
        public DateTime? EquipmentDateEntry { get; set; } // EquipmentDateEntry
        public string Eid { get; set; } // EID (length: 50)
        public byte[] Ts { get; set; } // TS
        public byte Status { get; set; } // Status
        public int? PropertyCategoryId { get; set; } // PropertyCategoryID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public int? PurchasingOrderId { get; set; } // PurchasingOrderID
        public string MeasureAccuracy { get; set; } // Measure_Accuracy (length: 50)
        public string MeasureMeasuringRange { get; set; } // Measure_MeasuringRange (length: 50)
        public string MeasureDepartmentUsing { get; set; } // Measure_DepartmentUsing (length: 50)
        public string MeasureCalibrationPlace { get; set; } // Measure_CalibrationPlace (length: 50)
        public DateTime? MeasureCalibrationDate { get; set; } // Measure_CalibrationDate
        public DateTime? MeasureCalibrationExpireDate { get; set; } // Measure_CalibrationExpireDate
        public bool? EquipmentConfirm { get; set; } // EquipmentConfirm
        public bool? ScheduleMaintenance { get; set; } // ScheduleMaintenance
        public string EquipmentStatusNote { get; set; } // EquipmentStatusNote (length: 300)
        public DateTime? RepacePlans { get; set; } // RepacePlans
        public string ScheduledCheck { get; set; } // ScheduledCheck (length: 10)
        public string DoneBy { get; set; } // DoneBy (length: 10)
        public string CheckMethods { get; set; } // CheckMethods (length: 10)
        public string BackupPlans { get; set; } // BackupPlans (length: 10)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public string WifiMacAddress { get; set; } // Wifi_MAC_Address (length: 50)
        public int StoreId { get; set; } // StoreID
    }

    // Exception
    public class Exception
    {
        public long ExceptioId { get; set; } // ExceptioID (Primary key)
        public string ExceptionType { get; set; } // ExceptionType (length: 100)
        public DateTime? ExceiptonTime { get; set; } // ExceiptonTime
        public string ExceptionMessage { get; set; } // ExceptionMessage (length: 2147483647)
        public string UserException { get; set; } // UserException (length: 50)
        public int? StoreId { get; set; } // StoreID
    }

    // FeeBackForCultural
    public class FeeBackForCultural
    {
        public Guid FeeBackId { get; set; } // FeeBackID (Primary key)
        public string Content { get; set; } // Content
        public string Type { get; set; } // Type (length: 5)
        public Guid EmployeeRef { get; set; } // EmployeeRef
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public Guid? FeeBackIdMain { get; set; } // FeeBackIDMain
        public bool? IsDelete { get; set; } // IsDelete
        public string UpdatedBy { get; set; } // UpdatedBy (length: 100)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [FeeBackForCultural].([EmployeeRef]) (FK_FreeBackCultural_Employee)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK_FreeBackCultural_Employee

        /// <summary>
        /// Parent UserAccount pointed by [FeeBackForCultural].([CreatedBy]) (FK_FreeBackCultural_UserAccount)
        /// </summary>
        public virtual UserAccount UserAccount { get; set; } // FK_FreeBackCultural_UserAccount

        public FeeBackForCultural()
        {
            FeeBackId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // FeeBackForCulturalType
    public class FeeBackForCulturalType
    {
        public int FeeBackForCulturalTypeId { get; set; } // FeeBackForCulturalTypeID (Primary key)
        public string TypeDescription { get; set; } // TypeDescription (length: 100)
    }

    // Feedbacks
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class Feedback
    {
        /// <summary>
        /// 0
        /// </summary>
        public int FeedbackId { get; set; } // FeedbackID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime FeedbackDate { get; set; } // FeedbackDate

        /// <summary>
        /// 0
        /// </summary>
        public string UserName { get; set; } // UserName (length: 25)

        /// <summary>
        /// 0
        /// </summary>
        public string IpClient { get; set; } // IPClient (length: 25)

        /// <summary>
        /// 0
        /// </summary>
        public string FeedbackDescription { get; set; } // FeedbackDescription (length: 500)
        public string ResponsedDescription { get; set; } // ResponsedDescription (length: 500)
        public string ResponsedBy { get; set; } // ResponsedBy (length: 25)
        public DateTime? ResponsedTime { get; set; } // ResponsedTime
        public int? CustomerId { get; set; } // CustomerID
        public byte? Status { get; set; } // Status

        public Feedback()
        {
            FeedbackDate = DateTime.Now;
        }
    }

    // FingerMachines
    public class FingerMachine
    {
        public int FingerMachineId { get; set; } // FingerMachineID (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Ip { get; set; } // IP (length: 50)
        public int? Port { get; set; } // Port
        public byte? Gate { get; set; } // Gate
        public bool? IsChecked { get; set; } // IsChecked
    }

    // FingerMachineData
    public class FingerMachineData
    {
        public string FingerMachineId { get; set; } // FingerMachineID (length: 100)
        public string Ip { get; set; } // IP (length: 100)
        public string DwTMachineNumber { get; set; } // dwTMachineNumber (length: 100)
        public string IdwEnrollNumber { get; set; } // _idwEnrollNumber (length: 100)
        public string IdwVerifyMode { get; set; } // _idwVerifyMode (length: 100)
        public string IdwInOutMode { get; set; } // _idwInOutMode (length: 100)
        public string STime { get; set; } // _sTime (length: 100)
        public long Id { get; set; } // ID (Primary key)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public FingerMachineData()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // FT_StockTakeByRequestManyProduct
    public class FtStockTakeByRequestManyProduct
    {
        public int? QtyProducts { get; set; } // QtyProducts
        public int LocationId { get; set; } // LocationID
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
    }

    // FT_TotalStockHandlingByDay
    public class FtTotalStockHandlingByDay
    {
        public DateTime ReportDate { get; set; } // ReportDate
        public float? HandlingC { get; set; } // HandlingC
        public float? HandlingW { get; set; } // HandlingW
        public float? HandlingP { get; set; } // HandlingP
    }

    // FT_TotalStockHandlingByMonth
    public class FtTotalStockHandlingByMonth
    {
        public DateTime? ReportMonth { get; set; } // ReportMonth
        public float? HandlingC { get; set; } // HandlingC
        public float? HandlingW { get; set; } // HandlingW
        public float? HandlingP { get; set; } // HandlingP
    }

    // FT_TotalStockHandlingByWeek
    public class FtTotalStockHandlingByWeek
    {
        public DateTime? ReportWeek { get; set; } // ReportWeek
        public float? HandlingC { get; set; } // HandlingC
        public float? HandlingW { get; set; } // HandlingW
        public float? HandlingP { get; set; } // HandlingP
    }

    // FT_TotalStockOnHandAvgByDay
    public class FtTotalStockOnHandAvgByDay
    {
        public DateTime ReportDate { get; set; } // ReportDate
        public double? AverageStockW { get; set; } // AverageStockW
        public double? AverageStockC { get; set; } // AverageStockC
        public double? AverageStockP { get; set; } // AverageStockP
    }

    // GasStation
    public class GasStation
    {
        public int GasStationId { get; set; } // GasStationID (Primary key)
        public string GasStationName { get; set; } // GasStationName (length: 100)
        public bool? IsInternal { get; set; } // IsInternal
        public byte[] Ts { get; set; } // ts
        public string GasStationRemark { get; set; } // GasStationRemark (length: 255)
        public bool? Active { get; set; } // Active
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 20)
        public string GasStationAddress { get; set; } // GasStationAddress (length: 255)
        public bool? IsNorm { get; set; } // IsNorm

        public GasStation()
        {
            IsInternal = true;
            Active = true;
            CreatedTime = DateTime.Now;
            IsNorm = false;
        }
    }

    // Gates
    public class Gate
    {
        public byte Gate_ { get; set; } // Gate (Primary key)
        public byte StoreId { get; set; } // StoreID
        public string GateVietnam { get; set; } // GateVietnam (length: 20)
    }

    // Gate_Companies
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class GateCompany
    {
        /// <summary>
        /// -1
        /// </summary>
        public int CompanyId { get; set; } // CompanyID (Primary key)

        /// <summary>
        /// 2205
        /// </summary>
        public string CompanyName { get; set; } // CompanyName (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string CompanyNumber { get; set; } // CompanyNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string CompanyAddress { get; set; } // CompanyAddress (length: 250)

        /// <summary>
        /// 2355
        /// </summary>
        public string CompanyPhoneNumber { get; set; } // CompanyPhoneNumber (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string CompanyContact { get; set; } // CompanyContact (length: 250)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public int? StoreId { get; set; } // StoreID

        public GateCompany()
        {
            StoreId = 0;
        }
    }

    // Gate_ContInOut
    /// <summary>
    /// 2
    /// ((CustomerID=51))
    /// Gate_ContInOut.ContInOutID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class GateContInOut
    {
        public Guid ContInOutId { get; set; } // ContInOutID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 100)

        /// <summary>
        /// 2364
        /// </summary>
        public string ContainerNum { get; set; } // ContainerNum (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public string ContainerType { get; set; } // ContainerType (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Reason { get; set; } // Reason (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string ProductQty { get; set; } // ProductQty (length: 10)

        /// <summary>
        /// 2508
        /// </summary>
        public DateTime? TimeIn { get; set; } // TimeIn

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? TimeOut { get; set; } // TimeOut

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime

        /// <summary>
        /// 0
        /// </summary>
        public string UserOut { get; set; } // UserOut (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public bool? CheckOut { get; set; } // CheckOut

        /// <summary>
        /// -1
        /// </summary>
        public bool? Via { get; set; } // Via

        /// <summary>
        /// -1
        /// </summary>
        public string TruckIn { get; set; } // TruckIn (length: 13)

        /// <summary>
        /// -1
        /// </summary>
        public string TruckOut { get; set; } // TruckOut (length: 13)

        /// <summary>
        /// 0
        /// </summary>
        public bool? UserCheckOut { get; set; } // UserCheckOut

        /// <summary>
        /// 0
        /// </summary>
        public bool? TruckCheckOut { get; set; } // TruckCheckOut

        /// <summary>
        /// 0
        /// </summary>
        public string UserTruckOut { get; set; } // UserTruckOut (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public byte? Gate { get; set; } // Gate

        /// <summary>
        /// 0
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public string Remarks { get; set; } // Remarks (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartWorkingTime { get; set; } // StartWorkingTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndWorkingTime { get; set; } // EndWorkingTime

        /// <summary>
        /// 0
        /// </summary>
        public string SealNumber { get; set; } // SealNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string TempOut { get; set; } // TempOut (length: 5)

        /// <summary>
        /// 0
        /// </summary>
        public string DockNumber { get; set; } // DockNumber (length: 5)
        public byte[] Ts { get; set; } // TS
        public long? DriverMobilePhone { get; set; } // DriverMobilePhone
        public string CustomerRequirement { get; set; } // CustomerRequirement (length: 300)
        public DateTime? ExpectedProcessTime { get; set; } // ExpectedProcessTime
        public string ContInOutNumber { get; set; } // ContInOutNumber (length: 20)
        public int? StoreId { get; set; } // StoreID
        public Guid? CustomerId { get; set; } // CustomerID

        /// <summary>
        /// Sẽ xóa bỏ
        /// </summary>
        public Guid? OtherServiceId { get; set; } // OtherServiceID

        /// <summary>
        /// Xem bỏ miền này
        /// </summary>
        public Guid? ElectricityConsumptionId { get; set; } // ElectricityConsumptionID
        public int? ContInOutLocalId { get; set; } // ContInOutLocalID
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public GateContInOut()
        {
            ContInOutId = Guid.NewGuid();
            CheckOut = false;
            Via = false;
            UserCheckOut = false;
            TruckCheckOut = false;
            Gate = 1;
            StoreId = 1;
            CreatedTime = DateTime.Now;
        }
    }

    // Gate_EmployeeInOut
    /// <summary>
    /// 2
    /// ((EmployeeID=65))
    /// Gate_EmployeeInOut.EmployeeInOutID DESC
    /// True
    /// 0
    /// 276
    /// 0
    /// </summary>
    public class GateEmployeeInOut
    {
        public Guid EmployeeInOutId { get; set; } // EmployeeInOutID (Primary key)
        public Guid EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? TimeIn { get; set; } // TimeIn

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? TimeOut { get; set; } // TimeOut

        /// <summary>
        /// -1
        /// </summary>
        public bool? CheckOut { get; set; } // CheckOut

        /// <summary>
        /// 3528
        /// </summary>
        public string Remark { get; set; } // Remark (length: 100)

        /// <summary>
        /// -1
        /// </summary>
        public string BikeNumber { get; set; } // BikeNumber (length: 30)

        /// <summary>
        /// -1
        /// </summary>
        public bool? CheckBike { get; set; } // CheckBike

        /// <summary>
        /// 810
        /// </summary>
        public byte? Gate { get; set; } // Gate

        /// <summary>
        /// 2190
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 300)
        public byte[] Ts { get; set; } // TS

        public GateEmployeeInOut()
        {
            EmployeeInOutId = Guid.NewGuid();
            CheckOut = false;
            CheckBike = true;
            Gate = 1;
            CreatedTime = DateTime.Now;
        }
    }

    // Gate_Properties
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class GateProperty
    {
        /// <summary>
        /// 0
        /// </summary>
        public int PropertyId { get; set; } // PropertyID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string PropertyName { get; set; } // PropertyName (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public string PropertyRemark { get; set; } // PropertyRemark (length: 100)
    }

    // Gate_PropertyMovements
    /// <summary>
    /// 2
    /// ((Gate_PropertyMovements.CustomerID=604))
    /// Gate_PropertyMovements.PropertyMovementDate DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class GatePropertyMovement
    {
        public Guid PropertyMovementId { get; set; } // PropertyMovementID (Primary key)

        /// <summary>
        /// 3048
        /// </summary>
        public DateTime? PropertyMovementDate { get; set; } // PropertyMovementDate

        /// <summary>
        /// -1
        /// </summary>
        public int PropertyId { get; set; } // PropertyID

        /// <summary>
        /// 3924
        /// </summary>
        public string AuthorizedBy { get; set; } // AuthorizedBy (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public byte Gate { get; set; } // Gate

        /// <summary>
        /// 3048
        /// </summary>
        public string Remark { get; set; } // Remark (length: 150)

        /// <summary>
        /// 4032
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 200)

        /// <summary>
        /// -1
        /// </summary>
        public double Quantity { get; set; } // Quantity
        public int? StoreId { get; set; } // StoreID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public Guid? CustomerId { get; set; } // CustomerID

        public GatePropertyMovement()
        {
            PropertyMovementId = Guid.NewGuid();
            PropertyMovementDate = DateTime.Now;
        }
    }

    // Gate_TruckInOut
    /// <summary>
    /// 2
    /// ((Gate_TruckInOut.OtherServiceID=0))
    /// Gate_TruckInOut.TruckInOutID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class GateTruckInOut
    {
        public Guid TruckInOutId { get; set; } // TruckInOutID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 100)

        /// <summary>
        /// -1
        /// </summary>
        public string TruckNum { get; set; } // TruckNum (length: 10)

        /// <summary>
        /// -1
        /// </summary>
        public string DriverName { get; set; } // DriverName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string TruckType { get; set; } // TruckType (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string TruckReason { get; set; } // TruckReason (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string ProductQty { get; set; } // ProductQty (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? TimeIn { get; set; } // TimeIn

        /// <summary>
        /// -1
        /// </summary>
        public bool? CheckOut { get; set; } // CheckOut

        /// <summary>
        /// 2400
        /// </summary>
        public DateTime? TimeOut { get; set; } // TimeOut

        /// <summary>
        /// -1
        /// </summary>
        public string CmBl { get; set; } // CM_BL (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public string UserOut { get; set; } // UserOut (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public bool? UserCheckOut { get; set; } // UserCheckOut

        /// <summary>
        /// -1
        /// </summary>
        public byte Gate { get; set; } // Gate

        /// <summary>
        /// 0
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartWorkingTime { get; set; } // StartWorkingTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndWorkingTime { get; set; } // EndWorkingTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime

        /// <summary>
        /// 0
        /// </summary>
        public double? PowerQuantity { get; set; } // PowerQuantity

        /// <summary>
        /// 0
        /// </summary>
        public double? RunningFloat { get; set; } // RunningFloat

        /// <summary>
        /// 0
        /// </summary>
        public string Remarks { get; set; } // Remarks (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string SealNumber { get; set; } // SealNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string DockNumber { get; set; } // DockNumber (length: 5)

        /// <summary>
        /// Đang sử dụng trong Main Trip của Metro
        /// </summary>
        public bool? TruckConfirmed { get; set; } // TruckConfirmed
        public byte[] Ts { get; set; } // ts
        public string TruckInOutNumber { get; set; } // TruckInOutNumber (length: 16)
        public float? LoadingCapacity { get; set; } // LoadingCapacity
        public float? TruckTemperatureBefore { get; set; } // TruckTemperatureBefore
        public long? DriverMobilePhone { get; set; } // DriverMobilePhone
        public string CustomerRequirement { get; set; } // CustomerRequirement (length: 300)
        public DateTime? ExpectedProcessTime { get; set; } // ExpectedProcessTime
        public int? StoreId { get; set; } // StoreID
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? OtherServiceId { get; set; } // OtherServiceID

        public GateTruckInOut()
        {
            TruckInOutId = Guid.NewGuid();
            CheckOut = false;
            UserCheckOut = false;
            Gate = 1;
            TruckConfirmed = false;
            StoreId = 1;
        }
    }

    // Gate_TruckPowerKwh
    public class GateTruckPowerKwh
    {
        public int TruckGroupPowerId { get; set; } // TruckGroupPowerID (Primary key)
        public string TruckGroupPower { get; set; } // TruckGroupPower (length: 50)
        public float? TruckPowerKwh { get; set; } // TruckPowerKwh
        public string TruckPowerRemark { get; set; } // TruckPowerRemark (length: 100)
    }

    // Gate_VehicleType
    public class GateVehicleType
    {
        public string VehicleType { get; set; } // VehicleType (Primary key) (length: 50)
        public decimal? VehicleCapacity { get; set; } // VehicleCapacity
        public string Description { get; set; } // Description (length: 100)
        public string Category { get; set; } // Category (length: 15)
    }

    // Gate_Workers
    public class GateWorker
    {
        public int WorkerId { get; set; } // WorkerID (Primary key)
        public string WorkerName { get; set; } // WorkerName (length: 50)
        public string CardId { get; set; } // CardID (length: 12)
        public string Comment { get; set; } // Comment (length: 50)
        public string Category { get; set; } // Category (length: 50)
        public string CardType { get; set; } // CardType (length: 25)
        public bool? Active { get; set; } // Active
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid CompanyId { get; set; } // CompanyID

        public GateWorker()
        {
            Active = true;
            CreatedTime = DateTime.Now;
        }
    }

    // Gate_WorkerInOut
    /// <summary>
    /// 0
    /// </summary>
    public class GateWorkerInOut
    {
        /// <summary>
        /// 0
        /// </summary>
        public int WorkerInOutId { get; set; } // WorkerInOutID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public string WorkerName { get; set; } // WorkerName (length: 50)
        public DateTime? TimeIn { get; set; } // TimeIn
        public bool? CheckOut { get; set; } // CheckOut
        public DateTime? TimeOut { get; set; } // TimeOut
        public string IDcard { get; set; } // IDcard (length: 30)
        public string Remark { get; set; } // Remark (length: 50)
        public byte? Gate { get; set; } // Gate
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public int? StoreId { get; set; } // StoreID
        public byte[] Ts { get; set; } // ts

        public GateWorkerInOut()
        {
            Gate = 1;
        }
    }

    // Gate_WorkerLaborSafetyTraining
    public class GateWorkerLaborSafetyTraining
    {
        public int LaborSafetyTrainId { get; set; } // LaborSafetyTrainID (Primary key)
        public string LaborSafetyTrainBy { get; set; } // LaborSafetyTrainBy (length: 50)
        public DateTime? LaborSafetyTrainDate { get; set; } // LaborSafetyTrainDate
        public string Description { get; set; } // Description (length: 300)
        public int WorkerId { get; set; } // WorkerID
    }

    // Gate_WorkerRegularInOut
    /// <summary>
    /// 2
    /// Gate_WorkerRegularInOut.WorkerRegularInOutID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class GateWorkerRegularInOut
    {
        /// <summary>
        /// -1
        /// </summary>
        public int WorkerRegularInOutId { get; set; } // WorkerRegularInOutID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int WorkerId { get; set; } // WorkerID

        /// <summary>
        /// 2412
        /// </summary>
        public DateTime? TimeIn1 { get; set; } // TimeIn1

        /// <summary>
        /// 3408
        /// </summary>
        public DateTime? TimeOut1 { get; set; } // TimeOut1

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? TimeIn2 { get; set; } // TimeIn2

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? TimeOut2 { get; set; } // TimeOut2

        /// <summary>
        /// 0
        /// </summary>
        public bool? CheckOut { get; set; } // CheckOut

        /// <summary>
        /// -1
        /// </summary>
        public byte? Gate { get; set; } // Gate

        /// <summary>
        /// -1
        /// </summary>
        public string Remark { get; set; } // Remark (length: 300)
        public short? UniformReflectedLight { get; set; } // UniformReflectedLight

        public GateWorkerRegularInOut()
        {
            CheckOut = false;
        }
    }

    // GenerateRandomBarcodeLabel
    public class GenerateRandomBarcodeLabel
    {
        public Guid Id { get; set; } // ID (Primary key)
        public int? IndexNumber { get; set; } // IndexNumber
        public string Type { get; set; } // Type (length: 255)
        public string BarcodeString { get; set; } // BarcodeString (length: 255)
        public DateTime CreatedDate { get; set; } // CreatedDate
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 255)

        public GenerateRandomBarcodeLabel()
        {
            Id = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // The table 'GetKmTowLocation' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // GetKmTowLocation
    public class GetKmTowLocation
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 255)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 255)
        public int? PalletNumber { get; set; } // PalletNumber
        public string ShipTime { get; set; } // ShipTime (length: 255)
        public decimal? Kms { get; set; } // Kms
    }

    // GPSLocationTrackingHistory
    public class GpsLocationTrackingHistory
    {
        public int GpsLocationTrackingHistoryId { get; set; } // GPSLocationTrackingHistoryID (Primary key)
        public string UserName { get; set; } // UserName (length: 30)
        public decimal X { get; set; } // x
        public decimal Y { get; set; } // y
        public DateTime TrackingTime { get; set; } // TrackingTime
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)

        public GpsLocationTrackingHistory()
        {
            TrackingTime = DateTime.Now;
        }
    }

    // Highs
    public class High
    {
        public int High_ { get; set; } // High (Primary key)
        public string HighBarcode { get; set; } // HighBarcode (length: 4)
    }

    // History_BillingDetails
    public class HistoryBillingDetail
    {
        public Guid BillingDetailId { get; set; } // BillingDetailID (Primary key)
        public Guid BillingId { get; set; } // BillingID
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity
        public int? InvoiceId { get; set; } // InvoiceID
        public bool? ManualUpdate { get; set; } // ManualUpdate
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice

        public HistoryBillingDetail()
        {
            DeletedTime = DateTime.Now;
        }
    }

    // History_ContractDetails
    public class HistoryContractDetail
    {
        public Guid ContractDetailId { get; set; } // ContractDetailID (Primary key)
        public Guid ContractId { get; set; } // ContractID
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice
        public string ContractDetailRemark { get; set; } // ContractDetailRemark (length: 50)
        public string CurrencyUnit { get; set; } // CurrencyUnit (length: 3)
        public double? CheckingQuantity { get; set; } // CheckingQuantity
        public double? CheckingQuantity2 { get; set; } // CheckingQuantity2
        public string UpdatedBy { get; set; } // UpdatedBy (length: 20)
        public DateTime? UpdateTime { get; set; } // UpdateTime
        public string ScopeOfWork { get; set; } // ScopeOfWork
        public string ScopeOfWorkVietnam { get; set; } // ScopeOfWorkVietnam
        public byte Vat { get; set; } // VAT
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime

        public HistoryContractDetail()
        {
            DeletedTime = DateTime.Now;
        }
    }

    // History_DispatchingLocations
    public class HistoryDispatchingLocation
    {
        public int DispatchingLocationId { get; set; } // DispatchingLocationID
        public int DispatchingProductId { get; set; } // DispatchingProductID
        public int LocationId { get; set; } // LocationID
        public string Label { get; set; } // Label (length: 12)
        public short? QuantityOfPackages { get; set; } // QuantityOfPackages
        public string DispatchingLocationRemark { get; set; } // DispatchingLocationRemark (length: 150)
        public bool DispatchingLocationStatus { get; set; } // DispatchingLocationStatus
        public int NewId { get; set; } // NewID
    }

    // History_DispatchingOrders
    public class HistoryDispatchingOrder
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public int DispatchingOrderLocalId { get; set; } // DispatchingOrderLocalID
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public Guid CustomerId { get; set; } // CustomerID
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public string DispatchingOrderRemark { get; set; } // DispatchingOrderRemark (length: 250)
        public string InternalRemark { get; set; } // InternalRemark (length: 300)
        public bool Status { get; set; } // Status
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public decimal? Temperature { get; set; } // Temperature
        public string SealNumber { get; set; } // SealNumber (length: 40)
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public byte? DispatchingOrderProgress { get; set; } // DispatchingOrderProgress
        public byte[] Ts { get; set; } // TS
        public bool? Electricity { get; set; } // Electricity
        public double? ProgressPercentage { get; set; } // ProgressPercentage
        public bool? IsAttachment { get; set; } // IsAttachment
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 32)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 15)
        public int? TimeSlotId { get; set; } // TimeSlotID
        public int? DockDoorId { get; set; } // DockDoorID
        public double? PickingPercentage { get; set; } // PickingPercentage
        public bool? IsDeleted { get; set; } // IsDeleted
    }

    // History_DispatchingOrderDetails
    public class HistoryDispatchingOrderDetail
    {
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
        public Guid PalletId { get; set; } // PalletID
        public int? PackageQuantity { get; set; } // PackageQuantity
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public string DispatchingOrderDetailRemark { get; set; } // DispatchingOrderDetailRemark (length: 500)
        public bool? Checked { get; set; } // Checked
        public bool? CheckBreak { get; set; } // CheckBreak
        public string DispatchingScannedBy { get; set; } // DispatchingScannedBy (length: 50)
        public DateTime? DispatchingScannedTime { get; set; } // DispatchingScannedTime
        public DateTime? PickingScannedTime { get; set; } // PickingScannedTime
        public string PickingScannedBy { get; set; } // PickingScannedBy (length: 50)
    }

    // History_DispatchingProducts
    public class HistoryDispatchingProduct
    {
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public Guid ProductId { get; set; } // ProductID
        public short? PackagesPerPallet { get; set; } // PackagesPerPallet
        public int TotalPackages { get; set; } // TotalPackages
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public int? TransactionId { get; set; } // TransactionID
        public byte? Status { get; set; } // Status
        public string Remark { get; set; } // Remark (length: 50)
        public string UserId { get; set; } // UserID (length: 50)
        public short? Plts { get; set; } // Plts
        public string CustomerRef { get; set; } // CustomerRef (length: 100)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // TS
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeight { get; set; } // TotalWeight
        public short? UnitPerPackage { get; set; } // UnitPerPackage
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
    }

    // History_DispatchingProductPacks
    public class HistoryDispatchingProductPack
    {
        public long DispatchingProductPackId { get; set; } // DispatchingProductPackID
        public long? DispatchingProductCartonId { get; set; } // DispatchingProductCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 50)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber
        public Guid? DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime
    }

    // History_DistributionOrders
    public class HistoryDistributionOrder
    {
        public int DistributionOrderId { get; set; } // DistributionOrderID (Primary key)
        public string DistributionOrderNumber { get; set; } // DistributionOrderNumber (length: 20)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int TruckId { get; set; } // TruckID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public decimal? Kilometer { get; set; } // Kilometer
        public decimal? Quantity { get; set; } // Quantity
        public string DistributionRemark { get; set; } // DistributionRemark (length: 300)
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut
        public int? PartId { get; set; } // PartID
        public string UserCheckOut { get; set; } // UserCheckOut (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public int TruckDriverHistoryId { get; set; } // TruckDriverHistoryID
        public bool? IsCheckOut { get; set; } // IsCheckOut
        public byte[] Ts { get; set; } // ts
        public byte? PumpTrigger { get; set; } // PumpTrigger
        public short? ChipQty { get; set; } // ChipQty
        public short? KeyQty { get; set; } // KeyQty
        public int? StoreId { get; set; } // StoreID
        public DateTime? FillTime { get; set; } // FillTime
        public int? GasStationId { get; set; } // GasStationID
        public string DocumentNumber { get; set; } // DocumentNumber (length: 50)
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 50)
        public bool? Outside { get; set; } // Outside
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime
        public string IpAddress { get; set; } // IPAddress (length: 50)

        public HistoryDistributionOrder()
        {
            DeletedTime = DateTime.Now;
        }
    }

    // History_EmployeeWorkings
    public class HistoryEmployeeWorking
    {
        public int EmployeeWorkingId { get; set; } // EmployeeWorkingID
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? OrderDate { get; set; } // OrderDate
        public int EmployeeId { get; set; } // EmployeeID
        public int Percentage { get; set; } // Percentage
        public string Remark { get; set; } // Remark (length: 50)
        public float? ProductionQuantity { get; set; } // ProductionQuantity
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string Unit { get; set; } // Unit (length: 10)
    }

    // History_Gate_ContTruckInOut
    public class HistoryGateContTruckInOut
    {
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public string ContainerNum { get; set; } // ContainerNum (length: 20)
        public string ContainerType { get; set; } // ContainerType (length: 50)
        public string Reason { get; set; } // Reason (length: 50)
        public string ProductQty { get; set; } // ProductQty (length: 10)
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string UserOut { get; set; } // UserOut (length: 50)
        public DateTime? RunningHour { get; set; } // RunningHour
        public float? RunningFloat { get; set; } // RunningFloat
        public float? PowerQuantity { get; set; } // PowerQuantity
        public bool? CheckOut { get; set; } // CheckOut
        public bool? Via { get; set; } // Via
        public string TruckIn { get; set; } // TruckIn (length: 13)
        public string TruckOut { get; set; } // TruckOut (length: 13)
        public bool? UserCheckOut { get; set; } // UserCheckOut
        public bool? TruckCheckOut { get; set; } // TruckCheckOut
        public string UserTruckOut { get; set; } // UserTruckOut (length: 50)
        public byte? Gate { get; set; } // Gate
        public float? EstimateHour { get; set; } // EstimateHour
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public string Remarks { get; set; } // Remarks (length: 250)
        public DateTime? StartWorkingTime { get; set; } // StartWorkingTime
        public DateTime? EndWorkingTime { get; set; } // EndWorkingTime
        public string SealNumber { get; set; } // SealNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string TempOut { get; set; } // TempOut (length: 5)

        /// <summary>
        /// 0
        /// </summary>
        public string DockNumber { get; set; } // DockNumber (length: 5)

        /// <summary>
        /// 0
        /// </summary>
        public string DriverName { get; set; } // DriverName (length: 50)
        public string CmBl { get; set; } // CM_BL (length: 30)
        public string TruckReason { get; set; } // TruckReason (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string IpAddressDeleted { get; set; } // IPAddressDeleted (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? TimeDeleted { get; set; } // TimeDeleted

        /// <summary>
        /// 0
        /// </summary>
        public string VehicleType { get; set; } // VehicleType (length: 7)
        public Guid? ContInOutId { get; set; } // ContInOutID
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? OtherServiceId { get; set; } // OtherServiceID
        public Guid Id { get; set; } // ID (Primary key)

        public HistoryGateContTruckInOut()
        {
            CheckOut = false;
            Via = false;
            UserCheckOut = false;
            TruckCheckOut = false;
            Id = Guid.NewGuid();
        }
    }

    // History_Pallets
    public class HistoryPallet
    {
        public Guid PalletId { get; set; } // PalletID
        public string Label { get; set; } // Label (length: 15)
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public bool OnHold { get; set; } // OnHold
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid LocationId { get; set; } // LocationID
        public byte Status { get; set; } // status
        public bool CanMove { get; set; } // CanMove
        public string Remark { get; set; } // Remark (length: 800)
        public bool CanNotAdd { get; set; } // CanNotAdd
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public byte? PalletStatus { get; set; } // PalletStatus
        public string ReceivingScannedBy { get; set; } // ReceivingScannedBy (length: 50)
        public DateTime? ReceivingScannedTime { get; set; } // ReceivingScannedTime
        public string PutAwayScannedBy { get; set; } // PutAwayScannedBy (length: 50)
        public DateTime? PutAwayScannedTime { get; set; } // PutAwayScannedTime
        public long? PalletNumber { get; set; } // PalletNumber
    }

    // History_PalletCartons
    public class HistoryPalletCarton
    {
        public Guid PalletCartonId { get; set; } // PalletCartonID (Primary key)
        public long? PalletCartonNumber { get; set; } // PalletCartonNumber
        public Guid PalletId { get; set; } // PalletID
        public float? CartonWeight { get; set; } // CartonWeight
        public string PalletRemark { get; set; } // PalletRemark (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 100)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? PalletGrossWeight { get; set; } // PalletGrossWeight
        public int? CartonUnits { get; set; } // CartonUnits
        public bool? CheckDelete { get; set; } // CheckDelete
        public decimal? CartonWeightPay { get; set; } // CartonWeightPay
        public int? StoreId { get; set; } // StoreID
        public DateTime? ProDate { get; set; } // ProDate
        public bool? IsRecordNew { get; set; } // IsRecordNew
        public string BarcodeString { get; set; } // BarcodeString (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime

        public HistoryPalletCarton()
        {
            DeletedTime = DateTime.Now;
        }
    }

    // History_Products
    public class HistoryProduct
    {
        public int ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public int CustomerId { get; set; } // CustomerID
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public bool? Discontinue { get; set; } // Discontinue
        public float? TemperatureRequire { get; set; } // TemperatureRequire
        public short PackagesPerPallet { get; set; } // PackagesPerPallet
        public short? PackagesPerPallet2 { get; set; } // PackagesPerPallet2
        public string Remark { get; set; } // Remark (length: 50)
        public string Packages { get; set; } // Packages (length: 50)
        public int HomeLocation1 { get; set; } // HomeLocation1
        public int HomeLocation2 { get; set; } // HomeLocation2
        public int? PickingLocation { get; set; } // PickingLocation
        public short? Inners { get; set; } // Inners
        public string HomeRoom1 { get; set; } // HomeRoom1 (length: 1)
        public string HomeRoom2 { get; set; } // HomeRoom2 (length: 1)
        public bool PickingMethod { get; set; } // PickingMethod
        public int ProductCategory { get; set; } // ProductCategory
        public byte[] Ts { get; set; } // TS
        public int? WarehouseNo { get; set; } // WAREHOUSE_NO
        public decimal? GrossWeightPerPackage { get; set; } // GrossWeightPerPackage
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 100)
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime
        public string ProductNameVn { get; set; } // ProductNameVN (length: 100)
        public byte? ProductCategoryId { get; set; } // ProductCategoryID
        public short? WarningDaysBeforeExpiry { get; set; } // WarningDaysBeforeExpiry
        public bool? IsWeightingRequire { get; set; } // IsWeightingRequire
    }

    // History_ReceivingOrders
    public class HistoryReceivingOrder
    {
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public Guid CustomerId { get; set; } // CustomerID
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public bool Status { get; set; } // Status
        public int? TransactionId { get; set; } // TransactionID
        public float? Temperature { get; set; } // Temperature
        public string DockNumber { get; set; } // DockNumber (length: 2)
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public byte? ReceivingOrderProgress { get; set; } // ReceivingOrderProgress
        public string SealNumber { get; set; } // SealNumber (length: 12)
        public byte[] Ts { get; set; } // TS
        public string BlNumber { get; set; } // BLNumber (length: 50)
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 50)
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public DateTime? ContractDate { get; set; } // ContractDate
        public DateTime? LadenDate { get; set; } // LadenDate
        public string LadingReportNumber { get; set; } // LadingReportNumber (length: 50)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 32)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 10)
        public int? TimeSlotId { get; set; } // TimeSlotID
        public string ReceivingOrderRemark { get; set; } // ReceivingOrderRemark (length: 250)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? ReceivingOrderLocalId { get; set; } // ReceivingOrderLocalID
    }

    // History_ReceivingOrderDetails
    public class HistoryReceivingOrderDetail
    {
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public Guid ProductId { get; set; } // ProductID
        public short PackagesPerPallet { get; set; } // PackagesPerPallet
        public int TotalPackages { get; set; } // TotalPackages
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string Remark { get; set; } // Remark (length: 50)
        public int? TransactionId { get; set; } // TransactionID
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public byte Status { get; set; } // Status
        public float? PalletHeight { get; set; } // PalletHeight
        public string UserName { get; set; } // UserName (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public short? Plts { get; set; } // Plts
        public byte[] Ts { get; set; } // TS
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeight { get; set; } // TotalWeight
        public short? PackingListQuantity { get; set; } // PackingListQuantity
        public short? UnitPerPackage { get; set; } // UnitPerPackage
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime
        public string Origin { get; set; } // Origin (length: 50)
        public decimal? RejectPercentage { get; set; } // RejectPercentage
        public decimal? PackagingWeight { get; set; } // PackagingWeight
    }

    // HitCounters
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class HitCounter
    {
        /// <summary>
        /// 0
        /// </summary>
        public int HitCounterId { get; set; } // HitCounterID (Primary key)

        /// <summary>
        /// 109
        /// </summary>
        public int? TotalVisitTimes { get; set; } // TotalVisitTimes

        /// <summary>
        /// 0
        /// </summary>
        public int? ApplicationEnd { get; set; } // Application_End
    }

    // HolidayDate
    /// <summary>
    /// 2
    /// HolidayDate.HolidayDateID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class HolidayDate
    {
        /// <summary>
        /// 0
        /// </summary>
        public int HolidayDateId { get; set; } // HolidayDateID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime HolidayDate_ { get; set; } // HolidayDate

        /// <summary>
        /// 0
        /// </summary>
        public string Description { get; set; } // Description (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public string Year { get; set; } // Year (length: 4)
    }

    // HouseKeepingChecks
    public class HouseKeepingCheck
    {
        public int HouseKeepingCheckId { get; set; } // HouseKeepingCheckID (Primary key)
        public int EmployeeAreaId { get; set; } // EmployeeAreaID
        public DateTime HouseKeepingCheckDate { get; set; } // HouseKeepingCheckDate
        public string HouseKeepingCheckBy { get; set; } // HouseKeepingCheckBy (length: 20)
        public string HouseKeepingCheckGrade { get; set; } // HouseKeepingCheckGrade (length: 10)
        public string HouseKeepingCheckRemark { get; set; } // HouseKeepingCheckRemark (length: 100)
        public string HouseKeepingCheckNumber { get; set; } // HouseKeepingCheckNumber (length: 16)

        public HouseKeepingCheck()
        {
            HouseKeepingCheckDate = DateTime.Now;
        }
    }

    // IN_BinLoc
    public class InBinLoc
    {
        public string SiteId { get; set; } // SiteID (length: 10)
        public string WhseLoc { get; set; } // WhseLoc (length: 30)
        public string Descr { get; set; } // Descr (length: 30)
        public bool SalesAllowed { get; set; } // SalesAllowed
        public bool IssueAllowed { get; set; } // IssueAllowed
        public DateTime CrtdDateTime { get; set; } // Crtd_DateTime
        public string CrtdProg { get; set; } // Crtd_Prog (length: 8)
        public string CrtdUser { get; set; } // Crtd_User (length: 10)
        public DateTime LUpdDateTime { get; set; } // LUpd_DateTime
        public string LUpdProg { get; set; } // LUpd_Prog (length: 8)
        public string LUpdUser { get; set; } // LUpd_User (length: 10)
        public byte[] Tstamp { get; set; } // tstamp (length: 8)
        public string Zone { get; set; } // Zone (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string Way { get; set; } // Way (length: 15)
        public string Layer { get; set; } // Layer (length: 15)
        public string Square { get; set; } // Square (length: 15)
        public string SiteType { get; set; } // SiteType (length: 15)
        public bool StkItem { get; set; } // StkItem
        public bool Active { get; set; } // Active
        public double LocQty { get; set; } // LocQty
        public double MaxWeight { get; set; } // MaxWeight
    }

    // IN_Inventory
    public class InInventory
    {
        public string InvtId { get; set; } // InvtID (length: 30)
        public string Buyer { get; set; } // Buyer (length: 10)
        public string ClassId { get; set; } // ClassID (length: 6)
        public string CogsAcct { get; set; } // COGSAcct (length: 10)
        public string CogsSub { get; set; } // COGSSub (length: 24)
        public string Color { get; set; } // Color (length: 20)
        public string Descr { get; set; } // Descr (length: 100)
        public string DfltPoUnit { get; set; } // DfltPOUnit (length: 15)
        public string DfltSalesAcct { get; set; } // DfltSalesAcct (length: 10)
        public string DfltSalesSub { get; set; } // DfltSalesSub (length: 24)
        public string DfltDiscAcct { get; set; } // DfltDiscAcct (length: 10)
        public string DfltDiscSub { get; set; } // DfltDiscSub (length: 24)
        public string DfltPromAcct { get; set; } // DfltPromAcct (length: 10)
        public string DfltPromSub { get; set; } // DfltPromSub (length: 24)
        public string DfltSite { get; set; } // DfltSite (length: 10)
        public string DfltSoUnit { get; set; } // DfltSOUnit (length: 15)
        public string DfltWhseLoc { get; set; } // DfltWhseLoc (length: 30)
        public short Exported { get; set; } // Exported
        public string FrtAcct { get; set; } // FrtAcct (length: 10)
        public string FrtSub { get; set; } // FrtSub (length: 24)
        public string InvtAcct { get; set; } // InvtAcct (length: 10)
        public string InvtSub { get; set; } // InvtSub (length: 24)
        public string InvtType { get; set; } // InvtType (length: 1)
        public string KitType { get; set; } // KitType (length: 1)
        public double LastCost { get; set; } // LastCost
        public double LastStdCost { get; set; } // LastStdCost
        public string LcVarianceAcct { get; set; } // LCVarianceAcct (length: 10)
        public string LcVarianceSub { get; set; } // LCVarianceSub (length: 24)
        public double LossRate00 { get; set; } // LossRate00
        public double LossRate01 { get; set; } // LossRate01
        public double LossRate02 { get; set; } // LossRate02
        public double LossRate03 { get; set; } // LossRate03
        public short LotSerFxdLen { get; set; } // LotSerFxdLen
        public string LotSerFxdTyp { get; set; } // LotSerFxdTyp (length: 1)
        public string LotSerFxdVal { get; set; } // LotSerFxdVal (length: 12)
        public string LotSerIssMthd { get; set; } // LotSerIssMthd (length: 1)
        public short LotSerNumLen { get; set; } // LotSerNumLen
        public string LotSerNumVal { get; set; } // LotSerNumVal (length: 25)
        public string LotSerTrack { get; set; } // LotSerTrack (length: 2)
        public string MaterialType { get; set; } // MaterialType (length: 10)
        public string NodeId { get; set; } // NodeID (length: 30)
        public short NodeLevel { get; set; } // NodeLevel
        public int ParentRecordId { get; set; } // ParentRecordID
        public double PoFee { get; set; } // POFee
        public string PpvAcct { get; set; } // PPVAcct (length: 10)
        public string PpvSub { get; set; } // PPVSub (length: 24)
        public double PrePayPct { get; set; } // PrePayPct
        public string PriceClassId { get; set; } // PriceClassID (length: 10)
        public string SerAssign { get; set; } // SerAssign (length: 1)
        public short ShelfLife { get; set; } // ShelfLife
        public string Size { get; set; } // Size (length: 10)
        public string Source { get; set; } // Source (length: 1)
        public double SoFee { get; set; } // SOFee
        public string Status { get; set; } // Status (length: 2)
        public double StdCost { get; set; } // StdCost
        public DateTime StdCostDate { get; set; } // StdCostDate
        public double StkBasePrc { get; set; } // StkBasePrc
        public short StkItem { get; set; } // StkItem
        public string StkUnit { get; set; } // StkUnit (length: 15)
        public string Style { get; set; } // Style (length: 10)
        public string TaxCat { get; set; } // TaxCat (length: 10)
        public string ValMthd { get; set; } // ValMthd (length: 1)
        public short WarrantyDays { get; set; } // WarrantyDays
        public DateTime CrtdDateTime { get; set; } // Crtd_DateTime
        public string CrtdProg { get; set; } // Crtd_Prog (length: 8)
        public string CrtdUser { get; set; } // Crtd_User (length: 10)
        public DateTime LUpdDateTime { get; set; } // LUpd_DateTime
        public string LUpdProg { get; set; } // LUpd_Prog (length: 8)
        public string LUpdUser { get; set; } // LUpd_User (length: 10)
        public byte[] Tstamp { get; set; } // tstamp (length: 8)
        public string BarCode { get; set; } // BarCode (length: 20)
        public string Descr1 { get; set; } // Descr1 (length: 100)
        public string Picture { get; set; } // Picture (length: 30)
        public string VendId1 { get; set; } // VendID1 (length: 15)
        public string VendId2 { get; set; } // VendID2 (length: 15)
        public double StkVol { get; set; } // StkVol
        public double StkWt { get; set; } // StkWt
        public string StkWtUnit { get; set; } // StkWtUnit (length: 15)
        public double IrSftyStkDays { get; set; } // IRSftyStkDays
        public double IrSftyStkPct { get; set; } // IRSftyStkPct
        public double IrSftyStkQty { get; set; } // IRSftyStkQty
        public double IrOverStkQty { get; set; } // IROverStkQty
        public DateTime DateDep { get; set; } // DateDep
        public bool LotSerRcptAuto { get; set; } // LotSerRcptAuto
        public string ImportTaxId { get; set; } // ImportTaxID (length: 10)
        public double? SoPrice { get; set; } // SOPrice
        public int StopSell { get; set; } // StopSell
        public string MthdIssue { get; set; } // MthdIssue (length: 2)
        public double Weight { get; set; } // Weight
        public double WeightAll { get; set; } // WeightAll
        public double QtyInLot { get; set; } // QtyInLot
    }

    // IN_ItemSite
    public class InItemSite
    {
        public string InvtId { get; set; } // InvtID (length: 30)
        public string SiteId { get; set; } // SiteID (length: 10)
        public double AvgCost { get; set; } // AvgCost
        public string CogsAcct { get; set; } // COGSAcct (length: 10)
        public string CogsSub { get; set; } // COGSSub (length: 24)
        public string SalesAcct { get; set; } // SalesAcct (length: 10)
        public string SalesSub { get; set; } // SalesSub (length: 24)
        public string InvtAcct { get; set; } // InvtAcct (length: 10)
        public string InvtSub { get; set; } // InvtSub (length: 24)
        public string Buyer { get; set; } // Buyer (length: 10)
        public string DfltPoUnit { get; set; } // DfltPOUnit (length: 15)
        public string DfltSoUnit { get; set; } // DfltSOUnit (length: 15)
        public string DfltWhseLoc { get; set; } // DfltWhseLoc (length: 30)
        public double LastCost { get; set; } // LastCost
        public DateTime LastPurchaseDate { get; set; } // LastPurchaseDate
        public double LastPurchasePrice { get; set; } // LastPurchasePrice
        public double LastStdCost { get; set; } // LastStdCost
        public double QtyAlloc { get; set; } // QtyAlloc
        public double QtyAllocIn { get; set; } // QtyAllocIN
        public double QtyAllocPoRet { get; set; } // QtyAllocPORet
        public double QtyAllocSo { get; set; } // QtyAllocSO
        public double QtyAvail { get; set; } // QtyAvail
        public double QtyInTransit { get; set; } // QtyInTransit
        public double QtyOnBo { get; set; } // QtyOnBO
        public double QtyOnHand { get; set; } // QtyOnHand
        public double QtyOnPo { get; set; } // QtyOnPO
        public double QtyOnTransferOrders { get; set; } // QtyOnTransferOrders
        public double QtyOnSo { get; set; } // QtyOnSO
        public double QtyShipNotInv { get; set; } // QtyShipNotInv
        public double StdCost { get; set; } // StdCost
        public DateTime StdCostDate { get; set; } // StdCostDate
        public short StkItem { get; set; } // StkItem
        public double TotCost { get; set; } // TotCost
        public DateTime CrtdDateTime { get; set; } // Crtd_DateTime
        public string CrtdProg { get; set; } // Crtd_Prog (length: 8)
        public string CrtdUser { get; set; } // Crtd_User (length: 10)
        public DateTime LUpdDateTime { get; set; } // LUpd_DateTime
        public string LUpdProg { get; set; } // LUpd_Prog (length: 8)
        public string LUpdUser { get; set; } // LUpd_User (length: 10)
        public byte[] Tstamp { get; set; } // tstamp (length: 8)
        public double QtyUnCosted { get; set; } // QtyUnCosted
    }

    // IN_LotTrans
    public class InLotTran
    {
        public string BranchId { get; set; } // BranchID (length: 10)
        public string BatNbr { get; set; } // BatNbr (length: 10)
        public string RefNbr { get; set; } // RefNbr (length: 15)
        public string LotSerNbr { get; set; } // LotSerNbr (length: 25)
        public string InTranLineRef { get; set; } // INTranLineRef (length: 5)
        public DateTime ExpDate { get; set; } // ExpDate
        public string InvtId { get; set; } // InvtID (length: 30)
        public short InvtMult { get; set; } // InvtMult
        public string KitId { get; set; } // KitID (length: 30)
        public string MfgrLotSerNbr { get; set; } // MfgrLotSerNbr (length: 25)
        public double Qty { get; set; } // Qty
        public string SiteId { get; set; } // SiteID (length: 10)
        public string ToSiteId { get; set; } // ToSiteID (length: 10)
        public string ToWhseLoc { get; set; } // ToWhseLoc (length: 30)
        public DateTime TranDate { get; set; } // TranDate
        public string TranType { get; set; } // TranType (length: 2)
        public string TranScr { get; set; } // TranScr (length: 2)
        public double UnitCost { get; set; } // UnitCost
        public double UnitPrice { get; set; } // UnitPrice
        public DateTime WarrantyDate { get; set; } // WarrantyDate
        public string WhseLoc { get; set; } // WhseLoc (length: 30)
        public string CrtdProg { get; set; } // Crtd_Prog (length: 8)
        public string CrtdUser { get; set; } // Crtd_User (length: 10)
        public DateTime CrtdDateTime { get; set; } // Crtd_DateTime
        public string LUpdProg { get; set; } // LUpd_Prog (length: 8)
        public string LUpdUser { get; set; } // LUpd_User (length: 10)
        public DateTime LUpdDateTime { get; set; } // LUpd_DateTime
        public byte[] Tstamp { get; set; } // tstamp (length: 8)
        public double CnvFact { get; set; } // CnvFact
        public string UnitMultDiv { get; set; } // UnitMultDiv (length: 1)
        public string UnitDesc { get; set; } // UnitDesc (length: 15)
        public string CustId { get; set; } // CustID (length: 30)
        public DateTime MfcDate { get; set; } // MfcDate
        public double RcptQty { get; set; } // RcptQty
        public double Weight { get; set; } // Weight
        public double TotWeight { get; set; } // TotWeight
    }

    // Inners
    /// <summary>
    /// 2
    /// Inners.InnerNumber
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class Inner
    {
        /// <summary>
        /// -1
        /// </summary>
        public int InnerId { get; set; } // InnerID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int? ProductId { get; set; } // ProductID

        /// <summary>
        /// -1
        /// </summary>
        public string InnerNumber { get; set; } // InnerNumber (length: 50)

        /// <summary>
        /// 4440
        /// </summary>
        public string InnerName { get; set; } // InnerName (length: 100)

        /// <summary>
        /// ingredient
        /// </summary>
        public string Ingredents { get; set; } // Ingredents (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string UnitWeight { get; set; } // UnitWeight (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string CountryOriginal { get; set; } // CountryOriginal (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string StorageTemp { get; set; } // StorageTemp (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Distributor { get; set; } // Distributor (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public int? InnerQuantity { get; set; } // InnerQuantity

        /// <summary>
        /// -1
        /// </summary>
        public string PackageDate { get; set; } // PackageDate (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string UseByDate { get; set; } // UseByDate (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public bool Printed { get; set; } // Printed

        /// <summary>
        /// -1
        /// </summary>
        public string Unit { get; set; } // Unit (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string UnitVolume { get; set; } // UnitVolume (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Manufactured { get; set; } // Manufactured (length: 500)
        public string Supplier { get; set; } // Supplier (length: 100)
        public int? ArticleNumber { get; set; } // ArticleNumber

        public Inner()
        {
            Printed = false;
            Unit = "0";
            UnitVolume = "KLT";
        }
    }

    // IN_Site
    public class InSite
    {
        public string SiteId { get; set; } // SiteId (length: 10)
        public string Name { get; set; } // Name (length: 30)
        public string WhKeeper { get; set; } // WhKeeper (length: 30)
        public string Addr1 { get; set; } // Addr1 (length: 50)
        public string Addr2 { get; set; } // Addr2 (length: 50)
        public string City { get; set; } // City (length: 10)
        public string State { get; set; } // State (length: 10)
        public string Country { get; set; } // Country (length: 3)
        public string Zip { get; set; } // Zip (length: 10)
        public string Fax { get; set; } // Fax (length: 30)
        public string Phone { get; set; } // Phone (length: 30)
        public string SlsAcct { get; set; } // SlsAcct (length: 10)
        public string SlsSub { get; set; } // SlsSub (length: 31)
        public string CogsAcct { get; set; } // COGSAcct (length: 10)
        public string CogsSub { get; set; } // COGSSub (length: 31)
        public string DiscAcct { get; set; } // DiscAcct (length: 10)
        public string DiscSub { get; set; } // DiscSub (length: 31)
        public string MiscAcct { get; set; } // MiscAcct (length: 10)
        public string MiscSub { get; set; } // MiscSub (length: 31)
        public string PromAcct { get; set; } // PromAcct (length: 10)
        public string PromSub { get; set; } // PromSub (length: 31)
        public string FrtAcct { get; set; } // FrtAcct (length: 10)
        public string FrtSub { get; set; } // FrtSub (length: 31)
        public DateTime CrtdDateTime { get; set; } // Crtd_DateTime
        public string CrtdProg { get; set; } // Crtd_Prog (length: 8)
        public string CrtdUser { get; set; } // Crtd_User (length: 10)
        public DateTime LUpdDateTime { get; set; } // LUpd_DateTime
        public string LUpdProg { get; set; } // LUpd_Prog (length: 8)
        public string LUpdUser { get; set; } // LUpd_User (length: 10)
        public byte[] Tstamp { get; set; } // tstamp (length: 8)
        public string EmailAddress { get; set; } // EmailAddress (length: 30)
        public string SlsperId { get; set; } // SlsperId (length: 10)
    }

    // InternalAudits
    public class InternalAudit
    {
        public int InternalAuditId { get; set; } // InternalAuditID (Primary key)
        public string ProblemDescription { get; set; } // ProblemDescription (length: 2000)

        /// <summary>
        /// ProposedSolution
        /// </summary>
        public string PreventativeAction { get; set; } // PreventativeAction (length: 1000)

        /// <summary>
        /// ResolvedResult
        /// </summary>
        public string CorrectiveResult { get; set; } // CorrectiveResult (length: 1000)
        public DateTime? InternalAuditDate { get; set; } // InternalAuditDate
        public bool? InternalAuditConfirmed { get; set; } // InternalAuditConfirmed
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? PreventativeActionDoneTime { get; set; } // PreventativeActionDoneTime
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 50)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 1000)
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// Corrective Action/ResolvedMethod
        /// </summary>
        public string CorrectiveAction { get; set; } // CorrectiveAction (length: 1000)

        /// <summary>
        /// Xóa bỏ
        /// </summary>
        public string Remark { get; set; } // Remark (length: 100)
        public bool? InternalAuditStatus { get; set; } // InternalAuditStatus

        /// <summary>
        /// xóa bỏ
        /// </summary>
        public string Category { get; set; } // Category (length: 80)
        public DateTime? CorrectiveActionDoneTime { get; set; } // CorrectiveActionDoneTime
        public bool? PreventativeActionStatus { get; set; } // PreventativeActionStatus
        public bool? PreventativeActionRequired { get; set; } // PreventativeActionRequired
        public string DocumentFolder { get; set; } // DocumentFolder (length: 250)
        public string PreventativeActionBy { get; set; } // PreventativeActionBy (length: 20)
        public bool? Complained { get; set; } // Complained
        public DateTime? CompleteBeforeDate { get; set; } // CompleteBeforeDate
        public int ProblemCategoryId { get; set; } // ProblemCategoryID

        /// <summary>
        /// xóa bỏ
        /// </summary>
        public int? ProductDamageId { get; set; } // ProductDamageID
        public string Location { get; set; } // Location (length: 100)
        public bool Hospitalized { get; set; } // Hospitalized
        public bool MedicalTreated { get; set; } // MedicalTreated
        public bool Injured { get; set; } // Injured
        public string CorrectiveActionBy { get; set; } // CorrectiveActionBy (length: 20)
        public DateTime? CorrectiveBeforeDate { get; set; } // CorrectiveBeforeDate

        /// <summary>
        /// tạm
        /// </summary>
        public int? AccidentId { get; set; } // AccidentID
        public int? Weight { get; set; } // Weight
        public string ProblemNumber { get; set; } // ProblemNumber (length: 12)
        public string RootCause { get; set; } // RootCause (length: 250)
        public byte? Severity { get; set; } // Severity
        public byte? Likehood { get; set; } // Likehood
        public string AccidentLevel { get; set; } // AccidentLevel (length: 50)
        public byte? ComplainedLevel { get; set; } // ComplainedLevel
        public int? StoreId { get; set; } // StoreID
        public string EmployeeDisciplineRefNumber { get; set; } // EmployeeDisciplineRefNumber (length: 20)

        /// <summary>
        /// sẽ xóa bỏ
        /// </summary>
        public Guid? ResolvedEmployeeId { get; set; } // ResolvedEmployeeID
        public Guid? CustomerId { get; set; } // CustomerID
        public int? DepartmentId { get; set; } // DepartmentID

        public InternalAudit()
        {
            InternalAuditConfirmed = false;
            CreatedTime = DateTime.Now;
            InternalAuditStatus = false;
            PreventativeActionStatus = false;
            PreventativeActionRequired = false;
            Complained = false;
            Hospitalized = false;
            MedicalTreated = false;
            Injured = true;
            Severity = 0;
            Likehood = 0;
            ComplainedLevel = 0;
            StoreId = 0;
        }
    }

    // InternalAuditDetails
    public class InternalAuditDetail
    {
        public int InternalAuditDetailId { get; set; } // InternalAuditDetailID (Primary key)
        public string OperationCode { get; set; } // OperationCode (length: 5)
        public string DetailRemark { get; set; } // DetailRemark (length: 250)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public float? EstimatedValueLost { get; set; } // EstimatedValueLost
        public string Quantity { get; set; } // Quantity (length: 100)
        public string CurrencyUnit { get; set; } // CurrencyUnit (length: 10)
        public int InternalAuditId { get; set; } // InternalAuditID
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ExpensesCoverBy { get; set; } // ExpensesCoverBy (length: 50)
        public byte[] Ts { get; set; } // TS
        public string OrderNumber { get; set; } // OrderNumber (length: 20)

        public InternalAuditDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // InternalAuditEmployees
    public class InternalAuditEmployee
    {
        public int InternalAuditEmployeeId { get; set; } // InternalAuditEmployeeID (Primary key)
        public string Description { get; set; } // Description (length: 100)
        public int? InternalAuditId { get; set; } // InternalAuditID
        public string DisciplineActionReference { get; set; } // DisciplineActionReference (length: 20)
        public string DisciplineAction { get; set; } // DisciplineAction (length: 100)
        public Guid? EmployeeId { get; set; } // EmployeeID
    }

    // IN_Trans
    public class InTran
    {
        public string BranchId { get; set; } // BranchID (length: 10)
        public string BatNbr { get; set; } // BatNbr (length: 10)
        public string RefNbr { get; set; } // RefNbr (length: 15)
        public string LineRef { get; set; } // LineRef (length: 5)
        public string Acct { get; set; } // Acct (length: 10)
        public double CnvFact { get; set; } // CnvFact
        public string DrCr { get; set; } // DrCr (length: 1)
        public double ExtCost { get; set; } // ExtCost
        public string InvtId { get; set; } // InvtID (length: 30)
        public string InvtAcct { get; set; } // InvtAcct (length: 10)
        public short InvtMult { get; set; } // InvtMult
        public string InvtSub { get; set; } // InvtSub (length: 24)
        public string JrnlType { get; set; } // JrnlType (length: 3)
        public string ObjId { get; set; } // ObjID (length: 30)
        public string PerEnt { get; set; } // PerEnt (length: 6)
        public string PerPost { get; set; } // PerPost (length: 6)
        public double Qty { get; set; } // Qty
        public double QtyUnCosted { get; set; } // QtyUnCosted
        public string ReasonCd { get; set; } // ReasonCD (length: 6)
        public short Rlsed { get; set; } // Rlsed
        public string ShipperId { get; set; } // ShipperID (length: 15)
        public string ShipperLineRef { get; set; } // ShipperLineRef (length: 5)
        public string SiteId { get; set; } // SiteID (length: 10)
        public string SlsperId { get; set; } // SlsperID (length: 10)
        public string SubAcct { get; set; } // SubAcct (length: 24)
        public string ToSiteId { get; set; } // ToSiteID (length: 10)
        public string ToWhseLoc { get; set; } // ToWhseLoc (length: 30)
        public double TranAmt { get; set; } // TranAmt
        public double TranFee { get; set; } // TranFee
        public DateTime TranDate { get; set; } // TranDate
        public string TranDesc { get; set; } // TranDesc (length: 100)
        public string TranType { get; set; } // TranType (length: 2)
        public double UnitCost { get; set; } // UnitCost
        public string UnitDesc { get; set; } // UnitDesc (length: 15)
        public string UnitMultDiv { get; set; } // UnitMultDiv (length: 1)
        public double? UnitPrice { get; set; } // UnitPrice
        public string WhseLoc { get; set; } // WhseLoc (length: 30)
        public DateTime CrtdDateTime { get; set; } // Crtd_DateTime
        public string CrtdProg { get; set; } // Crtd_Prog (length: 8)
        public string CrtdUser { get; set; } // Crtd_User (length: 10)
        public DateTime LUpdDateTime { get; set; } // LUpd_DateTime
        public string LUpdProg { get; set; } // LUpd_Prog (length: 8)
        public string LUpdUser { get; set; } // LUpd_User (length: 10)
        public byte[] Tstamp { get; set; } // tstamp (length: 8)
        public string CostId { get; set; } // CostID (length: 30)
        public DateTime ExpDate { get; set; } // ExpDate
        public string LotSerNbr { get; set; } // LotSerNbr (length: 25)
        public double UnitLotCost { get; set; } // UnitLotCost
        public double ExtLotCost { get; set; } // ExtLotCost
        public DateTime WarrantyDate { get; set; } // WarrantyDate
        public string MfgrLotSerNbr { get; set; } // MfgrLotSerNbr (length: 25)
        public string CustId { get; set; } // CustID (length: 15)
        public DateTime MfcDate { get; set; } // MfcDate
        public double RcptQty { get; set; } // RcptQty
        public double Weight { get; set; } // Weight
        public double TotWeight { get; set; } // TotWeight
    }

    // InventoryChecking
    public class InventoryChecking
    {
        public int InventoryCheckingId { get; set; } // InventoryCheckingID (Primary key)
        public int LocationId { get; set; } // LocationID

        /// <summary>
        /// PalletID/ CartonID/ PropertyID ...
        /// </summary>
        public int DataScannedId { get; set; } // DataScannedID
        public string DataScannedType { get; set; } // DataScannedType (length: 2)
        public int? Quantity { get; set; } // Quantity
        public DateTime ScannedTime { get; set; } // ScannedTime
        public string ScannedBy { get; set; } // ScannedBy (length: 20)
        public string Result { get; set; } // Result (length: 5)
        public bool? IsRecordNew { get; set; } // IsRecordNew
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public string WarehouseType { get; set; } // WarehouseType (length: 10)

        public InventoryChecking()
        {
            Quantity = 0;
            ScannedTime = DateTime.Now;
            IsRecordNew = true;
        }
    }

    // ISOOrders
    public class IsoOrder
    {
        public int IsoOrderId { get; set; } // ISOOrderID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)

        /// <summary>
        /// Mùi hôi
        /// </summary>
        public bool? Smell { get; set; } // Smell

        /// <summary>
        /// Ướt, chảy nước
        /// </summary>
        public bool? Wet { get; set; } // Wet

        /// <summary>
        /// Bung nắp
        /// </summary>
        public bool? LidOpening { get; set; } // LidOpening

        /// <summary>
        /// Sạch
        /// </summary>
        public bool? Clean { get; set; } // Clean

        /// <summary>
        /// Thùng rách
        /// </summary>
        public bool? Torn { get; set; } // Torn

        /// <summary>
        /// Thiếu hàng
        /// </summary>
        public bool? Missing { get; set; } // Missing

        /// <summary>
        /// Móp méo
        /// </summary>
        public bool? Denting { get; set; } // Denting

        /// <summary>
        /// Hư hỏng
        /// </summary>
        public bool? Damages { get; set; } // Damages

        /// <summary>
        /// Ngã, đổ, bể
        /// </summary>
        public bool? FallBreak { get; set; } // Fall_Break

        /// <summary>
        /// Mềm
        /// </summary>
        public bool? Soft { get; set; } // Soft

        /// <summary>
        /// Xì
        /// </summary>
        public bool? Leak { get; set; } // Leak

        /// <summary>
        /// Bẩn
        /// </summary>
        public bool? Dirty { get; set; } // Dirty

        /// <summary>
        /// Mốc
        /// </summary>
        public bool? Musty { get; set; } // Musty

        /// <summary>
        /// Nguy cơ mối, mọt, côn trùng
        /// </summary>
        public bool? InsectsRisk { get; set; } // InsectsRisk

        /// <summary>
        /// Có thủy tinh, gỗ vụn bể
        /// </summary>
        public bool? GlassWoodFragments { get; set; } // Glass_WoodFragments

        /// <summary>
        /// Khác
        /// </summary>
        public bool? Others { get; set; } // Others
        public string CreatedBy { get; set; } // CreatedBy (length: 100)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ApprovedBy { get; set; } // ApprovedBy (length: 100)
        public DateTime? ApprovedTime { get; set; } // ApprovedTime
        public bool? HasLocker { get; set; } // HasLocker
        public bool? IsGoodsOnPallet { get; set; } // IsGoodsOnPallet
        public int? PalletQty { get; set; } // PalletQty
        public bool? TruckContAfterNormal { get; set; } // TruckContAfterNormal
        public bool? TruckContAfterDamaged { get; set; } // TruckContAfterDamaged
        public int? DifferentQty { get; set; } // DifferentQty
        public bool? HasThremometer { get; set; } // HasThremometer
        public int? OrderStatus { get; set; } // OrderStatus
        public string Temperature { get; set; } // Temperature (length: 5)
        public string SetupTemperature { get; set; } // SetupTemperature (length: 5)
        public bool? Electricity { get; set; } // Electricity
        public string HasThremometerTemp { get; set; } // HasThremometerTemp (length: 5)
        public bool? TruckContDirty { get; set; } // TruckContDirty

        /// <summary>
        /// Mùi hôi
        /// </summary>
        public bool? TruckContSmell { get; set; } // TruckContSmell

        public IsoOrder()
        {
            Smell = false;
            Wet = false;
            LidOpening = false;
            Clean = false;
            Torn = false;
            Missing = false;
            Denting = false;
            Damages = false;
            FallBreak = false;
            Soft = false;
            Leak = false;
            Dirty = false;
            Musty = false;
            InsectsRisk = false;
            GlassWoodFragments = false;
            Others = false;
            CreatedTime = DateTime.Now;
            HasLocker = false;
            IsGoodsOnPallet = false;
            PalletQty = 0;
            TruckContAfterNormal = false;
            TruckContAfterDamaged = false;
            HasThremometer = false;
            OrderStatus = 0;
            Electricity = false;
            TruckContSmell = false;
        }
    }

    // IssueTickets
    public class IssueTicket
    {
        public int IssueTicketId { get; set; } // IssueTicketID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string EmployeeName { get; set; } // EmployeeName (length: 50)
        public string Email { get; set; } // Email (length: 50)
        public long? PhoneNumber { get; set; } // PhoneNumber
        public string Subject { get; set; } // Subject (length: 100)
        public int? DepartmentId { get; set; } // DepartmentID
        public string Priority { get; set; } // Priority (length: 100)
        public string Description { get; set; } // Description (length: 500)
        public string Status { get; set; } // Status (length: 50)
        public byte[] Ts { get; set; } // TS

        public IssueTicket()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // ITHelpDesks
    public class ItHelpDesk
    {
        public int ItHelpDeskId { get; set; } // ITHelpDeskID (Primary key)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)

        public ItHelpDesk()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // KPIDefinitions
    public class KpiDefinition
    {
        public int KpiDefinitionId { get; set; } // KPIDefinitionID (Primary key)
        public string KpiDefinitionDescription { get; set; } // KPIDefinitionDescription (length: 500)
        public string KpiCategory { get; set; } // KPICategory (length: 50)
        public float? KpiScoreStandard { get; set; } // KPIScoreStandard
        public string KpiRemark { get; set; } // KPIRemark (length: 500)
        public string KpiCode { get; set; } // KPICode (length: 10)
        public int? KpiCategoryId { get; set; } // KPICategoryID
    }

    // KPIFinancialRequests
    public class KpiFinancialRequest
    {
        public int KpiFinancialRequestId { get; set; } // KPIFinancialRequestID (Primary key)
        public int? InboundCases { get; set; } // InboundCases
        public decimal? InboundWeight { get; set; } // InboundWeight
        public decimal? InboundCube { get; set; } // InboundCube
        public int? InboundPallets { get; set; } // InboundPallets
        public decimal? InboundWeightPerPallet { get; set; } // InboundWeightPerPallet
        public int? InboundReceipts { get; set; } // InboundReceipts
        public int? InboundUniqueSkUs { get; set; } // InboundUniqueSKUs
        public int? InboundLots { get; set; } // InboundLots
        public int? InboundTemperature { get; set; } // InboundTemperature
        public int? OutboundCases { get; set; } // OutboundCases
        public decimal? OutboundWeight { get; set; } // OutboundWeight
        public decimal? OutboundCube { get; set; } // OutboundCube
        public int? OutboundPallets { get; set; } // OutboundPallets
        public decimal? OutboundWeightPerPallet { get; set; } // OutboundWeightPerPallet
        public int? OutboundSkUs { get; set; } // OutboundSKUs
        public int? OutboundLines { get; set; } // OutboundLines
        public decimal? OutboundCasesPerLine { get; set; } // OutboundCasesPerLine
        public decimal? OutboundCasesPicked { get; set; } // OutboundCasesPicked
        public decimal? CasePickPercent { get; set; } // CasePickPercent
        public int? BlastFrozenCases { get; set; } // BlastFrozenCases
        public decimal? BlastFrozenKgs { get; set; } // BlastFrozenKgs
        public int? CasesLabeled { get; set; } // CasesLabeled
        public int? EachsPicked { get; set; } // EachsPicked
        public decimal? CatchWeightCases { get; set; } // CatchWeightCases
        public int? PalletsWrapped { get; set; } // PalletsWrapped
        public int? PalletsRestacked { get; set; } // PalletsRestacked
        public int? OccupiedCases { get; set; } // OccupiedCases
        public int? OccupiedPallets { get; set; } // OccupiedPallets
        public int? PalletCapacity { get; set; } // PalletCapacity
        public decimal? PalletOccupancyPercent { get; set; } // PalletOccupancyPercent
        public decimal? Turns { get; set; } // Turns
        public DateTime? Month { get; set; } // Month
    }

    // KPIRecordings
    public class KpiRecording
    {
        public int Kpiid { get; set; } // KPIID (Primary key)
        public string KpiDescription { get; set; } // KPIDescription (length: 500)
        public float? KpiScore123Day { get; set; } // KPIScore123Day
        public string KpiComment { get; set; } // KPIComment (length: 3000)
        public int? PayRollMonthId { get; set; } // PayRollMonthID
        public int? KpiDefinitionId { get; set; } // KPIDefinitionID
        public float? KpiScore45Day { get; set; } // KPIScore45Day
        public float? KpiScore12345Afternoon { get; set; } // KPIScore12345Afternoon
        public float? KpiScoreShift3 { get; set; } // KPIScoreShift3
        public bool? KpiConfirmed { get; set; } // KPIConfirmed
        public byte[] Ts { get; set; } // ts

        public KpiRecording()
        {
            KpiConfirmed = false;
        }
    }

    // KPIVisibility
    public class KpiVisibility
    {
        public int KpiVisibilityId { get; set; } // KPIVisibilityID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? ReportDate { get; set; } // ReportDate

        /// <summary>
        /// (Lost time accident)
        /// </summary>
        public decimal? WarehouseSafety { get; set; } // WarehouseSafety
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public decimal? Vin { get; set; } // VIN
        public decimal? Bhx { get; set; } // BHX
        public decimal? Masan { get; set; } // MASAN
        public decimal? Bigc { get; set; } // BIGC
        public decimal? Target { get; set; } // Target
        public int? Category { get; set; } // Category
        public byte[] Ts { get; set; } // ts

        /// <summary>
        /// (KG/Manhour)
        /// </summary>
        public decimal? AbaHanoi { get; set; } // ABAHanoi

        /// <summary>
        /// (KG/Manhour)
        /// </summary>
        public decimal? AbaSaigon1 { get; set; } // ABASaigon1

        /// <summary>
        /// Tổng số phiếu giao hàng có complain (not clean)/Tổng số phiếu giao hàng trong ngày
        /// </summary>
        public decimal? MasanHanam { get; set; } // MasanHanam

        /// <summary>
        /// (Lost time accident)
        /// </summary>
        public decimal? Bhxlmx { get; set; } // BHXLMX
        public decimal? WhTarget { get; set; } // WH_Target
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public string BhxKgs { get; set; } // BHX_Kgs (length: 30)
        public string BhxKm { get; set; } // BHX_Km (length: 30)
        public string VinKgs { get; set; } // VIN_Kgs (length: 30)
        public string VinKm { get; set; } // VIN_Km (length: 30)
        public string MasanKgs { get; set; } // MASAN_Kgs (length: 30)
        public string MasanKm { get; set; } // MASAN_Km (length: 30)
        public string BigcKgs { get; set; } // BIGC_Kgs (length: 30)
        public string BigcKm { get; set; } // BIGC_Km (length: 30)
        public decimal? SlVin { get; set; } // SL_VIN
        public decimal? SlBhx { get; set; } // SL_BHX
        public decimal? SlMasan { get; set; } // SL_MASAN
        public decimal? SlBigc { get; set; } // SL_BIGC
        public decimal? SlTarget { get; set; } // SL_Target
        public decimal? OtVin { get; set; } // OT_VIN
        public decimal? OtBhx { get; set; } // OT_BHX
        public decimal? OtMasan { get; set; } // OT_MASAN
        public decimal? OtBigc { get; set; } // OT_BIGC
        public decimal? OtTarget { get; set; } // OT_Target
        public decimal? DifotVin { get; set; } // DIFOT_VIN
        public decimal? DifotBhx { get; set; } // DIFOT_BHX
        public decimal? DifotMasan { get; set; } // DIFOT_MASAN
        public decimal? DifotBigc { get; set; } // DIFOT_BIGC
        public decimal? DifotTarget { get; set; } // DIFOT_Target
        public decimal? TruckVin { get; set; } // Truck_VIN
        public decimal? TruckBhx { get; set; } // Truck_BHX
        public decimal? TruckMasan { get; set; } // Truck_MASAN
        public decimal? TruckBigc { get; set; } // Truck_BIGC
        public decimal? TruckTarget { get; set; } // Truck_Target

        public KpiVisibility()
        {
            CreatedTime = DateTime.Now;
            ReportDate = DateTime.Now;
            Target = 6m;
            WhTarget = 3000m;
            SlTarget = 98m;
            OtTarget = 98m;
            DifotTarget = 98m;
            TruckTarget = 100m;
        }
    }

    // KPIVisibilityCategories
    public class KpiVisibilityCategory
    {
        public int KpiVisibilityCategoryId { get; set; } // KPIVisibilityCategoryID (Primary key)
        public string CategoryDescription { get; set; } // CategoryDescription (length: 200)
    }

    // KPIVisibility_ServiceLevel
    public class KpiVisibilityServiceLevel
    {
        public int KpiVisibilityId { get; set; } // KPIVisibilityID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? ReportDate { get; set; } // ReportDate
        public int? OnTime { get; set; } // OnTime
        public int? Difot { get; set; } // DIFOT
        public int? OsDCases { get; set; } // OS_D_Cases
        public decimal? KgPerKm { get; set; } // KgPerKm
        public decimal? WhProductivitive { get; set; } // WHProductivitive
        public decimal? TruckingProductivities { get; set; } // TruckingProductivities
        public decimal? ServiceLevel { get; set; } // ServiceLevel
        public decimal? WarehouseSafety { get; set; } // WarehouseSafety
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public decimal? Vin { get; set; } // VIN
        public decimal? Bhx { get; set; } // BHX
        public decimal? Masan { get; set; } // MASAN
        public decimal? Bigc { get; set; } // BIGC
        public decimal? Target { get; set; } // Target
    }

    // KPIVisibility_TruckingProductivities
    public class KpiVisibilityTruckingProductivity
    {
        public int KpiVisibilityId { get; set; } // KPIVisibilityID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? ReportDate { get; set; } // ReportDate
        public int? OnTime { get; set; } // OnTime
        public int? Difot { get; set; } // DIFOT
        public int? OsDCases { get; set; } // OS_D_Cases
        public decimal? KgPerKm { get; set; } // KgPerKm
        public decimal? WhProductivitive { get; set; } // WHProductivitive
        public decimal? TruckingProductivities { get; set; } // TruckingProductivities
        public decimal? ServiceLevel { get; set; } // ServiceLevel
        public decimal? WarehouseSafety { get; set; } // WarehouseSafety
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public decimal? Vin { get; set; } // VIN
        public decimal? Bhx { get; set; } // BHX
        public decimal? Masan { get; set; } // MASAN
        public decimal? Bigc { get; set; } // BIGC
        public decimal? Target { get; set; } // Target
    }

    // KPIVisibility_WarehouseSafety
    public class KpiVisibilityWarehouseSafety
    {
        public int KpiVisibilityId { get; set; } // KPIVisibilityID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? ReportDate { get; set; } // ReportDate
        public int? OnTime { get; set; } // OnTime
        public int? Difot { get; set; } // DIFOT
        public int? OsDCases { get; set; } // OS_D_Cases
        public decimal? KgPerKm { get; set; } // KgPerKm
        public decimal? WhProductivitive { get; set; } // WHProductivitive
        public decimal? TruckingProductivities { get; set; } // TruckingProductivities
        public decimal? ServiceLevel { get; set; } // ServiceLevel
        public decimal? WarehouseSafety { get; set; } // WarehouseSafety
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public decimal? Vin { get; set; } // VIN
        public decimal? Bhx { get; set; } // BHX
        public decimal? Masan { get; set; } // MASAN
        public decimal? Bigc { get; set; } // BIGC
        public decimal? Target { get; set; } // Target
    }

    // KPIVisibility_WHProductivitive
    public class KpiVisibilityWhProductivitive
    {
        public int KpiVisibilityId { get; set; } // KPIVisibilityID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? ReportDate { get; set; } // ReportDate
        public int? OnTime { get; set; } // OnTime
        public int? Difot { get; set; } // DIFOT
        public int? OsDCases { get; set; } // OS_D_Cases
        public decimal? KgPerKm { get; set; } // KgPerKm
        public decimal? WhProductivitive { get; set; } // WHProductivitive
        public decimal? TruckingProductivities { get; set; } // TruckingProductivities
        public decimal? ServiceLevel { get; set; } // ServiceLevel
        public decimal? WarehouseSafety { get; set; } // WarehouseSafety
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public decimal? Vin { get; set; } // VIN
        public decimal? Bhx { get; set; } // BHX
        public decimal? Masan { get; set; } // MASAN
        public decimal? Bigc { get; set; } // BIGC
        public decimal? Target { get; set; } // Target
    }

    // LoadingReports
    /// <summary>
    /// 2
    /// LoadingReports.LoadingReportID DESC
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class LoadingReport
    {
        public Guid LoadingReportId { get; set; } // LoadingReportID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? LoadingReportDate { get; set; } // LoadingReportDate

        /// <summary>
        /// -1
        /// </summary>
        public string Owner { get; set; } // Owner (length: 10)

        /// <summary>
        /// 0
        /// </summary>
        public string SealNumber { get; set; } // SealNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public bool? Confirmed { get; set; } // Confirmed

        /// <summary>
        /// 0
        /// </summary>
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime

        /// <summary>
        /// 0
        /// </summary>
        public string VehicleNumber { get; set; } // VehicleNumber (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public byte[] St { get; set; } // ST
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public Guid? CustomerId { get; set; } // CustomerID

        public LoadingReport()
        {
            LoadingReportId = Guid.NewGuid();
            Confirmed = false;
        }
    }

    // LoadingReportDetails
    /// <summary>
    /// 2
    /// ((LoadingReportDetails.LoadingReportID=85))
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class LoadingReportDetail
    {
        public Guid LoadingReportDetailId { get; set; } // LoadingReportDetailID (Primary key)
        public Guid ProductId { get; set; } // ProductID

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid LoadingReportId { get; set; } // LoadingReportID

        /// <summary>
        /// 0
        /// </summary>
        public int? Quantity { get; set; } // Quantity

        /// <summary>
        /// 0
        /// </summary>
        public int? D1 { get; set; } // D1

        /// <summary>
        /// 0
        /// </summary>
        public int? D2 { get; set; } // D2

        /// <summary>
        /// 0
        /// </summary>
        public int? D3 { get; set; } // D3

        /// <summary>
        /// 0
        /// </summary>
        public int? D4 { get; set; } // D4

        /// <summary>
        /// 0
        /// </summary>
        public int? D5 { get; set; } // D5

        /// <summary>
        /// 0
        /// </summary>
        public int? D6 { get; set; } // D6

        /// <summary>
        /// 0
        /// </summary>
        public int? D7 { get; set; } // D7

        /// <summary>
        /// 0
        /// </summary>
        public int? D8 { get; set; } // D8

        /// <summary>
        /// 0
        /// </summary>
        public int? D9 { get; set; } // D9

        /// <summary>
        /// 0
        /// </summary>
        public int? D10 { get; set; } // D10

        /// <summary>
        /// 0
        /// </summary>
        public int? D11 { get; set; } // D11

        /// <summary>
        /// 0
        /// </summary>
        public int? D12 { get; set; } // D12

        /// <summary>
        /// 0
        /// </summary>
        public int? D13 { get; set; } // D13

        /// <summary>
        /// 0
        /// </summary>
        public int? D14 { get; set; } // D14

        /// <summary>
        /// 0
        /// </summary>
        public int? D15 { get; set; } // D15

        /// <summary>
        /// 0
        /// </summary>
        public int? D16 { get; set; } // D16

        /// <summary>
        /// 0
        /// </summary>
        public int? D17 { get; set; } // D17

        /// <summary>
        /// 0
        /// </summary>
        public int? D18 { get; set; } // D18

        /// <summary>
        /// 0
        /// </summary>
        public int? D19 { get; set; } // D19

        /// <summary>
        /// 0
        /// </summary>
        public int? D20 { get; set; } // D20

        /// <summary>
        /// 0
        /// </summary>
        public int? D21 { get; set; } // D21

        /// <summary>
        /// 0
        /// </summary>
        public int? D22 { get; set; } // D22

        /// <summary>
        /// 0
        /// </summary>
        public int? D23 { get; set; } // D23

        /// <summary>
        /// 0
        /// </summary>
        public int? D24 { get; set; } // D24

        /// <summary>
        /// 0
        /// </summary>
        public int? D25 { get; set; } // D25

        /// <summary>
        /// 0
        /// </summary>
        public int? D26 { get; set; } // D26

        /// <summary>
        /// 0
        /// </summary>
        public int? D27 { get; set; } // D27

        /// <summary>
        /// 0
        /// </summary>
        public int? D28 { get; set; } // D28

        /// <summary>
        /// 0
        /// </summary>
        public int? D29 { get; set; } // D29

        /// <summary>
        /// 0
        /// </summary>
        public int? D30 { get; set; } // D30

        /// <summary>
        /// 0
        /// </summary>
        public int? D31 { get; set; } // D31

        /// <summary>
        /// 0
        /// </summary>
        public int? D32 { get; set; } // D32

        /// <summary>
        /// 0
        /// </summary>
        public int? D33 { get; set; } // D33

        /// <summary>
        /// 0
        /// </summary>
        public int? D34 { get; set; } // D34

        /// <summary>
        /// 0
        /// </summary>
        public int? D35 { get; set; } // D35

        /// <summary>
        /// 0
        /// </summary>
        public int? D36 { get; set; } // D36

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// 0
        /// </summary>
        public int? Sorting { get; set; } // Sorting

        /// <summary>
        /// 0
        /// </summary>
        public int? ProductQuantityCheck { get; set; } // ProductQuantityCheck

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 50)
        public int? D37 { get; set; } // D37
        public int? D38 { get; set; } // D38
        public int? D39 { get; set; } // D39
        public int? D40 { get; set; } // D40
        public int? D41 { get; set; } // D41
        public int? D42 { get; set; } // D42
        public int? D43 { get; set; } // D43
        public int? D44 { get; set; } // D44
        public int? D45 { get; set; } // D45

        public LoadingReportDetail()
        {
            LoadingReportDetailId = Guid.NewGuid();
        }
    }

    // Locations
    /// <summary>
    /// 2
    /// ((Locations.RoomID=&quot;p&quot;))
    /// Locations.LocationID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class Location
    {
        public Guid LocationId { get; set; } // LocationID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string LocationNumber { get; set; } // LocationNumber (length: 12)

        /// <summary>
        /// 615
        /// </summary>
        public short Aisle { get; set; } // Aisle

        /// <summary>
        /// 660
        /// </summary>
        public short Bay { get; set; } // Bay

        /// <summary>
        /// 735
        /// </summary>
        public short High { get; set; } // High

        /// <summary>
        /// 570
        /// </summary>
        public short Deep { get; set; } // Deep

        /// <summary>
        /// 540
        /// </summary>
        public short Used { get; set; } // Used

        /// <summary>
        /// 705
        /// </summary>
        public string Remark { get; set; } // Remark (length: 50)

        /// <summary>
        /// 585
        /// </summary>
        public bool Top { get; set; } // Top

        /// <summary>
        /// -1
        /// </summary>
        public bool Low { get; set; } // Low

        /// <summary>
        /// 0
        /// </summary>
        public string LocationNumberShort { get; set; } // LocationNumberShort (length: 6)

        /// <summary>
        /// 0
        /// </summary>
        public byte? IsBusy { get; set; } // isBusy

        /// <summary>
        /// 0
        /// </summary>
        public long? ProductQuantity { get; set; } // ProductQuantity

        /// <summary>
        /// 0
        /// </summary>
        public int? PalletQuantity { get; set; } // PalletQuantity

        /// <summary>
        /// 0
        /// </summary>
        public byte LocationCode { get; set; } // LocationCode
        public bool VeryLowHigh { get; set; } // VeryLowHigh
        public decimal? MaxWeight { get; set; } // MaxWeight
        public int? StoreId { get; set; } // StoreID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid RoomId { get; set; } // RoomID
        public int? LocationIdOld { get; set; } // LocationID_OLD
        public string RoomIdOld { get; set; } // RoomID_OLD (length: 2)
        public bool Virtual { get; set; } // Virtual
        public string LocationHq { get; set; } // LocationHQ (length: 100)
        public bool? IsLocationHome { get; set; } // IsLocationHome

        // Reverse navigation

        /// <summary>
        /// Child Pallets where [Pallets].[LocationID] point to this entity (FK_Pallets_Locations)
        /// </summary>
        public virtual ICollection<Pallet> Pallets { get; set; } // Pallets.FK_Pallets_Locations

        public Location()
        {
            LocationId = Guid.NewGuid();
            Used = 1;
            Top = false;
            Low = true;
            LocationCode = 0;
            VeryLowHigh = false;
            MaxWeight = 1000m;
            CreatedTime = DateTime.Now;
            Virtual = false;
            IsLocationHome = false;
            Pallets = new List<Pallet>();
        }
    }

    // location_abstract
    public class LocationAbstract
    {
        public string Wms { get; set; } // WMS (length: 3)
        public string WmsLocation { get; set; } // WMSLocation (length: 12)
        public string WhseLoc { get; set; } // WhseLoc (length: 30)
        public string Zone { get; set; } // Zone (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string Way { get; set; } // Way (length: 15)
        public string Layer { get; set; } // Layer (length: 15)
        public string Square { get; set; } // Square (length: 15)
    }

    // location_HQ_NG
    public class LocationHqNg
    {
        public string WhseLoc { get; set; } // WhseLoc (length: 30)
        public string LocationIsTrue { get; set; } // LocationIsTrue (length: 79)
        public string Zone { get; set; } // Zone (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string Way { get; set; } // Way (length: 15)
        public string Layer { get; set; } // Layer (length: 15)
        public string Square { get; set; } // Square (length: 15)
    }

    // The table 'location_mapping_status' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // location_mapping_status
    public class LocationMappingStatus
    {
        public string LocationNumber { get; set; } // LocationNumber (length: 20)
        public string Wms { get; set; } // wms (length: 20)
        public string Type { get; set; } // Type (length: 30)
        public string LocationHq { get; set; } // LocationHQ (length: 20)
    }

    // location_reference
    public class LocationReference
    {
        public string Hq { get; set; } // HQ (length: 30)
        public string Region { get; set; } // Region (length: 15)
        public string Wms { get; set; } // WMS (length: 51)
        public bool Active { get; set; } // Active
        public string Way { get; set; } // Way (length: 15)
        public string Layer { get; set; } // Layer (length: 15)
        public string Square { get; set; } // Square (length: 15)
    }

    // LocationsHome
    public class LocationsHome
    {
        public Guid LocationId { get; set; } // LocationID (Primary key)
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public short? Aisle { get; set; } // Aisle
        public short Bay { get; set; } // Bay
        public short High { get; set; } // High
        public short Deep { get; set; } // Deep
        public int? StoreId { get; set; } // StoreID
        public Guid RoomId { get; set; } // RoomID
        public string RoomIdOld { get; set; } // RoomID_OLD (length: 1)
        public int? LocationIdOld { get; set; } // LocationID_OLD
        public string RoomNumber { get; set; } // RoomNumber (length: 10)
    }

    // LogRecords
    /// <summary>
    /// 2
    /// ((IPClient=&quot;195.184.11.70&quot;))
    /// LogRecords.LogInID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class LogRecord
    {
        /// <summary>
        /// -1
        /// </summary>
        public int LogInId { get; set; } // LogInID (Primary key)

        /// <summary>
        /// 3108
        /// </summary>
        public DateTime? LoginDate { get; set; } // LoginDate

        /// <summary>
        /// 0
        /// </summary>
        public string UserName { get; set; } // UserName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string WindowUserName { get; set; } // WindowUserName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string LoginLevel { get; set; } // LoginLevel (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string IpClient { get; set; } // IPClient
    }

    // LunchPlaces
    public class LunchPlace
    {
        public string LunchPlaceId { get; set; } // LunchPlaceID (Primary key) (length: 2)
        public string PlaceDescription { get; set; } // PlaceDescription (length: 100)
        public int StoreId { get; set; } // StoreID
    }

    // MappingLocatorWithCustomers
    public class MappingLocatorWithCustomer
    {
        public Guid Id { get; set; } // ID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID
        public string Rooms { get; set; } // Rooms (length: 255)
        public string RoomMapping { get; set; } // Room_Mapping (length: 255)
        public string Locattion { get; set; } // Locattion (length: 255)
        public string LocationMapping { get; set; } // Location_Mapping (length: 255)
        public string WareHouse { get; set; } // WareHouse (length: 255)
        public string WareHouseMapping { get; set; } // WareHouseMapping (length: 255)
        public string Remark { get; set; } // Remark (length: 255)

        public MappingLocatorWithCustomer()
        {
            Id = Guid.NewGuid();
        }
    }

    // MappingPalletOrders
    public class MappingPalletOrder
    {
        public Guid Id { get; set; } // ID (Primary key)
        public Guid MappingOrder { get; set; } // MappingOrder
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int PalletId { get; set; } // PalletID
        public int? IsPrintTemp { get; set; } // IsPrintTemp

        public MappingPalletOrder()
        {
            Id = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // MASAN_CHECK_CARTON_OVERSIZE
    public class MasanCheckCartonOversize
    {
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public short? CartonNumber { get; set; } // CartonNumber
        public string ShipToAddress { get; set; } // SHIP_TO_ADDRESS (length: 255)
        public int? StoreNumber { get; set; } // StoreNumber
        public int? TotalPack { get; set; } // TotalPack
    }

    // MASAN_CHECK_DUPLICATEPACK_INCARTON
    public class MasanCheckDuplicatepackIncarton
    {
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public short? CartonNumber { get; set; } // CartonNumber
        public string ShipToAddress { get; set; } // SHIP_TO_ADDRESS (length: 255)
        public int? StoreNumber { get; set; } // StoreNumber
        public int? PackNumber { get; set; } // PackNumber
        public int? CountPacks { get; set; } // CountPacks
    }

    // MASAN_CHECK_PACK_CARTON_DIFF
    public class MasanCheckPackCartonDiff
    {
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 100)
        public int? StoreNumber { get; set; } // StoreNumber
        public long DispatchingProductCartonId { get; set; } // DispatchingProductCartonID
        public short CartonNumber { get; set; } // CartonNumber
        public string CartonDescription { get; set; } // CartonDescription (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 100)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int? OrQtyDiff { get; set; } // OrQtyDiff
        public int? CartonQtyDiff { get; set; } // CartonQtyDiff
        public int? OrderQuantity { get; set; } // OrderQuantity
        public decimal? OrderNetWeight { get; set; } // OrderNetWeight
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
    }

    // MASAN_CHECKTOTAL_SCAN
    public class MasanChecktotalScan
    {
        public int? Qty { get; set; } // Qty
        public decimal? W { get; set; } // W
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
    }

    // MASAN_ViewCheckCartonDuplicate
    public class MasanViewCheckCartonDuplicate
    {
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public short? CartonNumber { get; set; } // CartonNumber
        public int? CountCarton { get; set; } // CountCarton
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 100)
        public int? StoreNumber { get; set; } // StoreNumber
    }

    // Masan_ViewStockByDate2
    public class MasanViewStockByDate2
    {
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? ReceivingOrderLocalId { get; set; } // ReceivingOrderLocalID
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public int? CustomerLocalId { get; set; } // CustomerLocalID
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public Guid ProductId { get; set; } // ProductID
        public bool Discontinue { get; set; } // Discontinue
        public DateTime? UseByDate { get; set; } // UseByDate
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public Guid PalletId { get; set; } // PalletID
        public long? PalletNumber { get; set; } // PalletNumber
        public string Label { get; set; } // Label (length: 15)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int? AfterDpQuantity { get; set; } // AfterDPQuantity
        public int? CurrentQuantity { get; set; } // CurrentQuantity
    }

    // Messages
    public class Message
    {
        public int MessageId { get; set; } // MessageID (Primary key)

        /// <summary>
        /// Nội dung tin nhắn, tối đa 150 ký tự
        /// </summary>
        public string MessageDescription { get; set; } // MessageDescription (length: 150)

        /// <summary>
        /// Miền này xác định là tin dùng để nhận (Yes) hay tin gửi đi (No)
        /// </summary>
        public bool IsReceived { get; set; } // IsReceived

        /// <summary>
        /// Số điện thoại người nhận hoặc số dt người gửi
        /// </summary>
        public string DeliveryAddress { get; set; } // DeliveryAddress (length: 2000)

        /// <summary>
        /// Tin nhắn đã được gửi đi (Yes) chưa gửi (no). Tin nhận về thì lúc nào cũng là YEs
        /// </summary>
        public bool IsDelivered { get; set; } // IsDelivered

        /// <summary>
        /// Thời gian tạo ra tin nhắn
        /// </summary>
        public DateTime CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// User tạo ra tin nhắn. Nếu là tin nhận về thì là GSM Modem
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        /// <summary>
        /// Ghi chú
        /// </summary>
        public string MessageRemark { get; set; } // MessageRemark (length: 500)
    }

    // MessageSystemMaster
    public class MessageSystemMaster
    {
        public string MessageKey { get; set; } // MessageKey (Primary key) (length: 50)

        /// <summary>
        /// English
        /// </summary>
        public string Message1 { get; set; } // Message1 (length: 255)

        /// <summary>
        /// VietName
        /// </summary>
        public string Message2 { get; set; } // Message2 (length: 255)
        public string Component { get; set; } // Component (length: 100)

        /// <summary>
        /// 1:Information; 2:Warning; 3: Error
        /// </summary>
        public int? MessageType { get; set; } // MessageType
        public string ResponeCode { get; set; } // ResponeCode (length: 30)
    }

    // M_item
    public class MItem
    {
        public string ItemKey { get; set; } // item_key (Primary key) (length: 64)
        public string ItemLabel { get; set; } // item_label (length: 64)
        public int Editable { get; set; } // editable
        public string Remark { get; set; } // remark (length: 150)

        // Reverse navigation

        /// <summary>
        /// Child MItemValues where [M_item_value].[item_key] point to this entity (fk_app_m_item_value_1)
        /// </summary>
        public virtual ICollection<MItemValue> MItemValues { get; set; } // M_item_value.fk_app_m_item_value_1

        public MItem()
        {
            Editable = 0;
            Remark = "";
            MItemValues = new List<MItemValue>();
        }
    }

    // M_item_value
    public class MItemValue
    {
        public string ItemKey { get; set; } // item_key (Primary key) (length: 64)
        public string Code { get; set; } // code (Primary key) (length: 100)
        public string Name { get; set; } // name (length: 150)
        public string Remark { get; set; } // remark (length: 150)
        public bool? IsKey { get; set; } // is_key

        // Foreign keys

        /// <summary>
        /// Parent MItem pointed by [M_item_value].([ItemKey]) (fk_app_m_item_value_1)
        /// </summary>
        public virtual MItem MItem { get; set; } // fk_app_m_item_value_1
    }

    // MonthlyPayRollQuantity
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class MonthlyPayRollQuantity
    {
        /// <summary>
        /// 0
        /// </summary>
        public int MonthPayRollQuantityId { get; set; } // MonthPayRollQuantityID (Primary key)

        /// <summary>
        /// 109
        /// </summary>
        public int? PositionId { get; set; } // PositionID

        /// <summary>
        /// 0
        /// </summary>
        public string Position { get; set; } // Position (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public byte? Department { get; set; } // Department

        /// <summary>
        /// 0
        /// </summary>
        public int? Quantity { get; set; } // Quantity

        /// <summary>
        /// 0
        /// </summary>
        public int? PayRollMonthId { get; set; } // PayRollMonthID

        /// <summary>
        /// 0
        /// </summary>
        public bool? ContractPermanent { get; set; } // ContractPermanent

        /// <summary>
        /// 0
        /// </summary>
        public int? Change { get; set; } // Change

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // ts

        public MonthlyPayRollQuantity()
        {
            ContractPermanent = false;
        }
    }

    // MonthlyPayRollSummary
    /// <summary>
    /// 2
    /// MonthlyPayRollSummary.PayRollMonthID DESC
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class MonthlyPayRollSummary
    {
        /// <summary>
        /// 0
        /// </summary>
        public int PayRollMonthId { get; set; } // PayRollMonthID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string PayRollMonth { get; set; } // PayRollMonth (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 25)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public float? WorkingDays { get; set; } // WorkingDays

        /// <summary>
        /// 0
        /// </summary>
        public float? WorkingDaysChange { get; set; } // WorkingDaysChange

        /// <summary>
        /// 0
        /// </summary>
        public float? PayableHolidays { get; set; } // PayableHolidays

        /// <summary>
        /// 0
        /// </summary>
        public float? Ots { get; set; } // OTS

        /// <summary>
        /// 0
        /// </summary>
        public float? OtsChange { get; set; } // OTSChange

        /// <summary>
        /// 0
        /// </summary>
        public float? Otn { get; set; } // OTN

        /// <summary>
        /// 0
        /// </summary>
        public float? OtnChange { get; set; } // OTNChange

        /// <summary>
        /// 0
        /// </summary>
        public float? TotalWorkerHour { get; set; } // TotalWorkerHour

        /// <summary>
        /// 0
        /// </summary>
        public float? TotalWorkerHourScs { get; set; } // TotalWorkerHourSCS

        /// <summary>
        /// 0
        /// </summary>
        public float? TotalWorkerHourChange { get; set; } // TotalWorkerHourChange

        /// <summary>
        /// 0
        /// </summary>
        public float? Accidents { get; set; } // Accidents

        /// <summary>
        /// 0
        /// </summary>
        public float? AccidentsChange { get; set; } // AccidentsChange

        /// <summary>
        /// 0
        /// </summary>
        public float? AccidentLeave { get; set; } // AccidentLeave

        /// <summary>
        /// 0
        /// </summary>
        public float? AccidentLeaveChange { get; set; } // AccidentLeaveChange

        /// <summary>
        /// 0
        /// </summary>
        public float? SickLeave { get; set; } // SickLeave

        /// <summary>
        /// 0
        /// </summary>
        public float? SickLeavechange { get; set; } // SickLeavechange

        /// <summary>
        /// 0
        /// </summary>
        public int? LeaveMoreThan3Days { get; set; } // LeaveMoreThan3Days

        /// <summary>
        /// 0
        /// </summary>
        public float? LeaveMoreThan3DayChange { get; set; } // LeaveMoreThan3DayChange

        /// <summary>
        /// 0
        /// </summary>
        public string Remarks { get; set; } // Remarks (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public int? EmployeePermanentQty { get; set; } // EmployeePermanentQty

        /// <summary>
        /// 0
        /// </summary>
        public int? EmployeeTemporaryQty { get; set; } // EmployeeTemporaryQty

        /// <summary>
        /// 0
        /// </summary>
        public float? Oth { get; set; } // OTH

        /// <summary>
        /// 0
        /// </summary>
        public float? OthChange { get; set; } // OTHChange

        /// <summary>
        /// 0
        /// </summary>
        public float? HalfSum { get; set; } // HalfSum

        /// <summary>
        /// 0
        /// </summary>
        public float? OffSum { get; set; } // OffSum

        /// <summary>
        /// 0
        /// </summary>
        public float? LeaveSum { get; set; } // LeaveSum

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // ts

        public MonthlyPayRollSummary()
        {
            Accidents = 0f;
            AccidentsChange = 0f;
            AccidentLeave = 0f;
            AccidentLeaveChange = 0f;
        }
    }

    // MSN_ItemCode
    public class MsnItemCode
    {
        public int Id { get; set; } // ID (Primary key)
        public string ItemCode { get; set; } // ItemCode (length: 50)
        public string ItemCodeMain { get; set; } // ItemCodeMain (length: 50)
        public string ItemDescription { get; set; } // ItemDescription (length: 100)
    }

    // MSN_ItemCode_ShelfDay
    public class MsnItemCodeShelfDay
    {
        public int Id { get; set; } // ID (Primary key)
        public string ItemCode { get; set; } // ItemCode (length: 50)
        public int? OldShelfLifeDay { get; set; } // OldShelfLifeDay
        public string NewDescription2 { get; set; } // NewDescription_2 (length: 500)
        public string EnglishDescription { get; set; } // EnglishDescription (length: 500)
    }

    // MSN_ItemCode_Status
    public class MsnItemCodeStatus
    {
        public int Id { get; set; } // ID (Primary key)
        public string ItemCode { get; set; } // ItemCode (length: 50)
        public string ItemName { get; set; } // ItemName (length: 200)
        public string Lot { get; set; } // Lot (length: 50)
        public DateTime? ExpDate { get; set; } // ExpDate
        public string Status { get; set; } // Status (length: 50)
        public decimal? Stock { get; set; } // Stock
        public decimal? Unallocated { get; set; } // UNALLOCATED
    }

    // myimages
    public class Myimage
    {
        public int Id { get; set; } // id (Primary key)
        public byte[] Img { get; set; } // img
    }

    // News
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class News
    {
        /// <summary>
        /// 0
        /// </summary>
        public int CompanyNewId { get; set; } // CompanyNewID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? NewDate { get; set; } // NewDate

        /// <summary>
        /// 0
        /// </summary>
        public string NewDescriptions { get; set; } // NewDescriptions

        /// <summary>
        /// 0
        /// </summary>
        public string NewHeadline { get; set; } // NewHeadline (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public string ImageName { get; set; } // ImageName (length: 2000)

        /// <summary>
        /// 0
        /// </summary>
        public byte? NewType { get; set; } // NewType

        /// <summary>
        /// 0
        /// </summary>
        public string NavigateUrl { get; set; } // NavigateURL (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 10)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public bool NewsConfirmed { get; set; } // NewsConfirmed

        public News()
        {
            NewType = 0;
            NewsConfirmed = false;
        }
    }

    // Notes
    /// <summary>
    /// 0
    /// </summary>
    public class Note
    {
        /// <summary>
        /// 0
        /// </summary>
        public int NoteId { get; set; } // NoteID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime NoteDate { get; set; } // NoteDate
        public Guid CustomerId { get; set; } // CustomerID

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string NoteDescription { get; set; } // NoteDescription (length: 4000)

        /// <summary>
        /// 0
        /// </summary>
        public string DocumentFolder { get; set; } // DocumentFolder (length: 1000)

        /// <summary>
        /// 0
        /// </summary>
        public string OrderType { get; set; } // OrderType (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string VehicleNumber { get; set; } // VehicleNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerRefNumber { get; set; } // CustomerRefNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public bool Confirmed { get; set; } // Confirmed

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ConfirmTime { get; set; } // ConfirmTime

        /// <summary>
        /// 0
        /// </summary>
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? OccurTime { get; set; } // OccurTime

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerRepresentative { get; set; } // CustomerRepresentative (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public string RepresentativePosition { get; set; } // RepresentativePosition (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public string OccurLocation { get; set; } // OccurLocation (length: 500)
        public string NoteNumber { get; set; } // NoteNumber (length: 50)
        public Guid? SupervisorId { get; set; } // SupervisorID

        public Note()
        {
            CreatedTime = DateTime.Now;
            Confirmed = false;
        }
    }

    // NoteDetails
    /// <summary>
    /// 0
    /// </summary>
    public class NoteDetail
    {
        /// <summary>
        /// 0
        /// </summary>
        public int NoteDetailId { get; set; } // NoteDetailID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int NoteId { get; set; } // NoteID
        public Guid? ProductId { get; set; } // ProductID

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 40)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductName { get; set; } // ProductName (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public double? WeightPerPackage { get; set; } // WeightPerPackage

        /// <summary>
        /// 0
        /// </summary>
        public int? OriginalQuantity { get; set; } // OriginalQuantity

        /// <summary>
        /// 0
        /// </summary>
        public int? ActualQuantity { get; set; } // ActualQuantity

        /// <summary>
        /// 0
        /// </summary>
        public string OriginalState { get; set; } // OriginalState (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string ActualState { get; set; } // ActualState (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 1500)
    }

    // Notifications
    public class Notification
    {
        public int NotificationId { get; set; } // NotificationID (Primary key)
        public short? NotificationQuantity { get; set; } // NotificationQuantity
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public byte? ScanStatus { get; set; } // ScanStatus
        public string OrderType { get; set; } // OrderType (length: 2)
        public bool? IsNew { get; set; } // IsNew
        public Guid? EmployeeId { get; set; } // EmployeeID

        public Notification()
        {
            NotificationQuantity = 0;
            IsNew = true;
        }
    }

    // OfficeInformation
    public class OfficeInformation
    {
        public int OfficeId { get; set; } // OfficeID (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 50)
        public string Address { get; set; } // Address (length: 100)
        public string City { get; set; } // City (length: 50)
        public string StateOfProvince { get; set; } // StateOfProvince (length: 30)
        public string PostCode { get; set; } // PostCode (length: 15)
        public string Country { get; set; } // Country (length: 30)
        public string Phone { get; set; } // Phone (length: 20)
        public string Fax { get; set; } // Fax (length: 20)
        public string Email { get; set; } // Email (length: 50)
        public DateTime? UpdatedRemain { get; set; } // UpdatedRemain
        public DateTime? UpdatedDaily { get; set; } // UpdatedDaily
        public int StoreId { get; set; } // StoreID
        public string TaxCode { get; set; } // TaxCode (length: 50)
        public string RepresentativeName { get; set; } // RepresentativeName (length: 50)
        public string RepresentativePosition { get; set; } // RepresentativePosition (length: 50)
        public string EnglishCompanyName { get; set; } // EnglishCompanyName (length: 150)
        public string EnglishAddress { get; set; } // EnglishAddress (length: 150)
        public string EnglishRepresentativePosition { get; set; } // EnglishRepresentativePosition (length: 50)
    }

    // OfficePhones
    public class OfficePhone
    {
        public short OfficePhoneId { get; set; } // OfficePhoneID (Primary key)
        public string PhoneInternalNumber { get; set; } // PhoneInternalNumber (length: 20)
        public string DepartmentName { get; set; } // DepartmentName (length: 50)
        public string EmployeeName { get; set; } // EmployeeName (length: 35)
        public string Remark { get; set; } // Remark (length: 50)
        public int StoreId { get; set; } // StoreID
    }

    // OperatingCostCustomerIntensity
    public class OperatingCostCustomerIntensity
    {
        public string MonthDescription { get; set; } // MonthDescription (length: 50)
        public long? LocationInOut { get; set; } // LocationInOut
        public long? LocationOccupied { get; set; } // LocationOccupied
        public decimal? WeightInOut { get; set; } // WeightInOut
        public decimal? WeightInStoreNet { get; set; } // WeightInStoreNet
        public decimal? WeightInOutAdjusted { get; set; } // WeightInOutAdjusted
        public decimal? WeightInStoreGross { get; set; } // WeightInStoreGross
        public long? NumberOfTransActions { get; set; } // NumberOfTransActions
        public DateTime FromDate { get; set; } // FromDate
        public DateTime Todate { get; set; } // Todate
        public int CustomerMainId { get; set; } // CustomerMainID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
    }

    // OperatingCostCustomerMainList
    public class OperatingCostCustomerMainList
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
    }

    // OperatingCostDefinitions
    public class OperatingCostDefinition
    {
        public int OperatingCostId { get; set; } // OperatingCostID (Primary key)
        public string OperatingCostDescription { get; set; } // OperatingCostDescription (length: 250)
        public string OperatingCostCode { get; set; } // OperatingCostCode (length: 10)
        public string OperatingCostRemark { get; set; } // OperatingCostRemark (length: 500)
        public string CalculationMethod { get; set; } // CalculationMethod (length: 1000)
        public string CalculationSql { get; set; } // CalculationSQL (length: 5000)
        public bool AutoCalculation { get; set; } // AutoCalculation
        public byte? OperatingCostCategoryId { get; set; } // OperatingCostCategoryID
        public bool CreateData { get; set; } // CreateData

        // Reverse navigation

        /// <summary>
        /// Child OperatingCostMonthlyDetails where [OperatingCostMonthlyDetails].[OperatingCostID] point to this entity (FK_OperatingCostMonthlyDetails_OperatingCostDefinitions)
        /// </summary>
        public virtual ICollection<OperatingCostMonthlyDetail> OperatingCostMonthlyDetails { get; set; } // OperatingCostMonthlyDetails.FK_OperatingCostMonthlyDetails_OperatingCostDefinitions

        public OperatingCostDefinition()
        {
            AutoCalculation = true;
            CreateData = true;
            OperatingCostMonthlyDetails = new List<OperatingCostMonthlyDetail>();
        }
    }

    // OperatingCostDetailByCustomers
    public class OperatingCostDetailByCustomer
    {
        public int OperatingCostDetailByCustomerId { get; set; } // OperatingCostDetailByCustomerID (Primary key)
        public int CustomerIdOld { get; set; } // CustomerID_old
        public int OperatingCostMonthlyDetailId { get; set; } // OperatingCostMonthlyDetailID
        public decimal? OperatingCostDetailByCustomerQuantity { get; set; } // OperatingCostDetailByCustomerQuantity
        public string OperatingCostDetailByCustomerRemark { get; set; } // OperatingCostDetailByCustomerRemark (length: 500)
        public decimal OperatingCostDriverRate { get; set; } // OperatingCostDriverRate
        public decimal? OperatingCostDetailByCustomerQuantityAdjusted { get; set; } // OperatingCostDetailByCustomerQuantityAdjusted
        public Guid? CustomerId { get; set; } // CustomerID

        // Foreign keys

        /// <summary>
        /// Parent OperatingCostMonthlyDetail pointed by [OperatingCostDetailByCustomers].([OperatingCostMonthlyDetailId]) (FK_OperatingCostDetailByCustomers_OperatingCostMonthlyDetails)
        /// </summary>
        public virtual OperatingCostMonthlyDetail OperatingCostMonthlyDetail { get; set; } // FK_OperatingCostDetailByCustomers_OperatingCostMonthlyDetails

        public OperatingCostDetailByCustomer()
        {
            OperatingCostDriverRate = 1m;
        }
    }

    // OperatingCostElectricityDetails
    public class OperatingCostElectricityDetail
    {
        public int OperatingCostElectrictyDetailId { get; set; } // OperatingCostElectrictyDetailID (Primary key)
        public int CustomerIdOld { get; set; } // CustomerID_old
        public decimal ElectricityAmount { get; set; } // ElectricityAmount
        public decimal DriverRate { get; set; } // DriverRate
        public decimal? ElectricityAmountAdjusted { get; set; } // ElectricityAmountAdjusted
        public int OperatingCostElectricityId { get; set; } // OperatingCostElectricityID
        public Guid CustomerId { get; set; } // CustomerID

        // Foreign keys

        /// <summary>
        /// Parent OperatingCostElectricty pointed by [OperatingCostElectricityDetails].([OperatingCostElectricityId]) (FK_OperatingCostElectricityDetails_OperatingCostElectricty)
        /// </summary>
        public virtual OperatingCostElectricty OperatingCostElectricty { get; set; } // FK_OperatingCostElectricityDetails_OperatingCostElectricty

        public OperatingCostElectricityDetail()
        {
            DriverRate = 1m;
        }
    }

    // OperatingCostElectricty
    public class OperatingCostElectricty
    {
        public int OperatingCostElectricityId { get; set; } // OperatingCostElectricityID (Primary key)
        public string RoomId { get; set; } // RoomID (length: 20)
        public decimal ElectricityAmount { get; set; } // ElectricityAmount
        public long ElectricityKwh { get; set; } // ElectricityKwh
        public int OperatingCostMonthlyId { get; set; } // OperatingCostMonthlyID

        // Reverse navigation

        /// <summary>
        /// Child OperatingCostElectricityDetails where [OperatingCostElectricityDetails].[OperatingCostElectricityID] point to this entity (FK_OperatingCostElectricityDetails_OperatingCostElectricty)
        /// </summary>
        public virtual ICollection<OperatingCostElectricityDetail> OperatingCostElectricityDetails { get; set; } // OperatingCostElectricityDetails.FK_OperatingCostElectricityDetails_OperatingCostElectricty

        // Foreign keys

        /// <summary>
        /// Parent OperatingCostMonth pointed by [OperatingCostElectricty].([OperatingCostMonthlyId]) (FK_OperatingCostElectricty_OperatingCostMonths)
        /// </summary>
        public virtual OperatingCostMonth OperatingCostMonth { get; set; } // FK_OperatingCostElectricty_OperatingCostMonths

        public OperatingCostElectricty()
        {
            OperatingCostElectricityDetails = new List<OperatingCostElectricityDetail>();
        }
    }

    // OperatingCostEmployeeProductivity
    public class OperatingCostEmployeeProductivity
    {
        public string MonthDescription { get; set; } // MonthDescription (length: 50)
        public DateTime? PersonnelFromDate { get; set; } // PersonnelFromDate
        public DateTime? PersonnelTodate { get; set; } // PersonnelTodate
        public string DepartmentName { get; set; } // DepartmentName (length: 50)
        public int EmployeeId { get; set; } // EmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public decimal? Productivity { get; set; } // Productivity
        public decimal? LabourCostAmount { get; set; } // LabourCostAmount
        public decimal? LabourCostAmountAdjusted { get; set; } // LabourCostAmountAdjusted
        public string LabourType { get; set; } // LabourType (length: 100)
    }

    // OperatingCostInsuranceValueLastWeek
    public class OperatingCostInsuranceValueLastWeek
    {
        public int? CustomerId { get; set; } // CustomerID
        public double? TotalInsuranceValue { get; set; } // TotalInsuranceValue
    }

    // OperatingCostLabours
    public class OperatingCostLabour
    {
        public int OperatingCostLabourId { get; set; } // OperatingCostLabourID (Primary key)
        public int OperatingCostMonthlyId { get; set; } // OperatingCostMonthlyID
        public int EmployeeIdOld { get; set; } // EmployeeID_old
        public decimal? LabourCostAmount { get; set; } // LabourCostAmount
        public string LabourCostRemark { get; set; } // LabourCostRemark (length: 500)
        public Guid? EmployeeId { get; set; } // EmployeeID

        // Reverse navigation

        /// <summary>
        /// Child OperatingCostLabourDetails where [OperatingCostLabourDetails].[OperatingCostLabourID] point to this entity (FK_OperatingCostLabourDetails_OperatingCostLabours)
        /// </summary>
        public virtual ICollection<OperatingCostLabourDetail> OperatingCostLabourDetails { get; set; } // OperatingCostLabourDetails.FK_OperatingCostLabourDetails_OperatingCostLabours

        // Foreign keys

        /// <summary>
        /// Parent OperatingCostMonth pointed by [OperatingCostLabours].([OperatingCostMonthlyId]) (FK_OperatingCostLabours_OperatingCostMonths)
        /// </summary>
        public virtual OperatingCostMonth OperatingCostMonth { get; set; } // FK_OperatingCostLabours_OperatingCostMonths

        public OperatingCostLabour()
        {
            OperatingCostLabourDetails = new List<OperatingCostLabourDetail>();
        }
    }

    // OperatingCostLabourDetails
    public class OperatingCostLabourDetail
    {
        public int OperatingCostLabourDetailId { get; set; } // OperatingCostLabourDetailID (Primary key)
        public int OperatingCostLabourId { get; set; } // OperatingCostLabourID
        public int CustomerIdOld { get; set; } // CustomerID_old
        public decimal? Productivity { get; set; } // Productivity
        public decimal? UnitCost { get; set; } // UnitCost
        public decimal? LabourCostAmount { get; set; } // LabourCostAmount
        public decimal? DriverRate { get; set; } // DriverRate
        public string LabourType { get; set; } // LabourType (length: 100)
        public decimal? LabourCostAmountAdjusted { get; set; } // LabourCostAmountAdjusted
        public decimal? LabourCostAmountAdjustRated { get; set; } // LabourCostAmountAdjustRated
        public Guid? CustomerId { get; set; } // CustomerID

        // Foreign keys

        /// <summary>
        /// Parent OperatingCostLabour pointed by [OperatingCostLabourDetails].([OperatingCostLabourId]) (FK_OperatingCostLabourDetails_OperatingCostLabours)
        /// </summary>
        public virtual OperatingCostLabour OperatingCostLabour { get; set; } // FK_OperatingCostLabourDetails_OperatingCostLabours

        public OperatingCostLabourDetail()
        {
            Productivity = 0m;
            DriverRate = 1m;
        }
    }

    // OperatingCostMonths
    public class OperatingCostMonth
    {
        public int OperatingCostMonthlyId { get; set; } // OperatingCostMonthlyID (Primary key)
        public string MonthDescription { get; set; } // MonthDescription (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string OperatingCostMonthlyRemark { get; set; } // OperatingCostMonthlyRemark (length: 500)
        public DateTime FromDate { get; set; } // FromDate
        public DateTime Todate { get; set; } // Todate
        public byte NumberOfSundays { get; set; } // NumberOfSundays
        public byte NumberOfHollidays { get; set; } // NumberOfHollidays
        public DateTime? PersonnelFromDate { get; set; } // PersonnelFromDate
        public DateTime? PersonnelTodate { get; set; } // PersonnelTodate
        public bool ProcessData { get; set; } // ProcessData
        public DateTime? ProcessDataTime { get; set; } // ProcessDataTime
        public bool Confirmed { get; set; } // Confirmed
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime

        // Reverse navigation

        /// <summary>
        /// Child OperatingCostElectricties where [OperatingCostElectricty].[OperatingCostMonthlyID] point to this entity (FK_OperatingCostElectricty_OperatingCostMonths)
        /// </summary>
        public virtual ICollection<OperatingCostElectricty> OperatingCostElectricties { get; set; } // OperatingCostElectricty.FK_OperatingCostElectricty_OperatingCostMonths

        /// <summary>
        /// Child OperatingCostLabours where [OperatingCostLabours].[OperatingCostMonthlyID] point to this entity (FK_OperatingCostLabours_OperatingCostMonths)
        /// </summary>
        public virtual ICollection<OperatingCostLabour> OperatingCostLabours { get; set; } // OperatingCostLabours.FK_OperatingCostLabours_OperatingCostMonths

        /// <summary>
        /// Child OperatingCostMonthlyDetails where [OperatingCostMonthlyDetails].[OperatingCostMonthlyID] point to this entity (FK_OperatingCostMonthlyDetails_OperatingCostMonths)
        /// </summary>
        public virtual ICollection<OperatingCostMonthlyDetail> OperatingCostMonthlyDetails { get; set; } // OperatingCostMonthlyDetails.FK_OperatingCostMonthlyDetails_OperatingCostMonths

        /// <summary>
        /// Child OperationCostMonthlyParameters where [OperationCostMonthlyParameters].[OperatingCostMonthlyID] point to this entity (FK_OperationCostMonthlyParameters_OperatingCostMonths)
        /// </summary>
        public virtual ICollection<OperationCostMonthlyParameter> OperationCostMonthlyParameters { get; set; } // OperationCostMonthlyParameters.FK_OperationCostMonthlyParameters_OperatingCostMonths

        public OperatingCostMonth()
        {
            NumberOfSundays = 4;
            NumberOfHollidays = 0;
            ProcessData = false;
            Confirmed = false;
            OperatingCostElectricties = new List<OperatingCostElectricty>();
            OperatingCostLabours = new List<OperatingCostLabour>();
            OperatingCostMonthlyDetails = new List<OperatingCostMonthlyDetail>();
            OperationCostMonthlyParameters = new List<OperationCostMonthlyParameter>();
        }
    }

    // OperatingCostMonthlyDetails
    public class OperatingCostMonthlyDetail
    {
        public int OperatingCostMonthlyDetailId { get; set; } // OperatingCostMonthlyDetailID (Primary key)
        public int OperatingCostMonthlyId { get; set; } // OperatingCostMonthlyID
        public int OperatingCostId { get; set; } // OperatingCostID
        public decimal OperatingCostQuantity { get; set; } // OperatingCostQuantity
        public string OperatingCostMonthlyDetailRemark { get; set; } // OperatingCostMonthlyDetailRemark (length: 500)
        public byte? StoreId { get; set; } // StoreID

        // Reverse navigation

        /// <summary>
        /// Child OperatingCostDetailByCustomers where [OperatingCostDetailByCustomers].[OperatingCostMonthlyDetailID] point to this entity (FK_OperatingCostDetailByCustomers_OperatingCostMonthlyDetails)
        /// </summary>
        public virtual ICollection<OperatingCostDetailByCustomer> OperatingCostDetailByCustomers { get; set; } // OperatingCostDetailByCustomers.FK_OperatingCostDetailByCustomers_OperatingCostMonthlyDetails

        // Foreign keys

        /// <summary>
        /// Parent OperatingCostDefinition pointed by [OperatingCostMonthlyDetails].([OperatingCostId]) (FK_OperatingCostMonthlyDetails_OperatingCostDefinitions)
        /// </summary>
        public virtual OperatingCostDefinition OperatingCostDefinition { get; set; } // FK_OperatingCostMonthlyDetails_OperatingCostDefinitions

        /// <summary>
        /// Parent OperatingCostMonth pointed by [OperatingCostMonthlyDetails].([OperatingCostMonthlyId]) (FK_OperatingCostMonthlyDetails_OperatingCostMonths)
        /// </summary>
        public virtual OperatingCostMonth OperatingCostMonth { get; set; } // FK_OperatingCostMonthlyDetails_OperatingCostMonths

        public OperatingCostMonthlyDetail()
        {
            OperatingCostDetailByCustomers = new List<OperatingCostDetailByCustomer>();
        }
    }

    // OperatingCostNonlistedRates
    public class OperatingCostNonlistedRate
    {
        public int NominalRateId { get; set; } // NominalRateID (Primary key)
        public string TaskDescription { get; set; } // TaskDescription (length: 500)
        public decimal NominalRate { get; set; } // NominalRate
        public string TaskRemark { get; set; } // TaskRemark (length: 500)
    }

    // OperatingCostOtherActivities
    public class OperatingCostOtherActivity
    {
        public string OpeType { get; set; } // Ope_type (length: 9)
        public string Ym { get; set; } // YM (length: 7)
        public int? Trs { get; set; } // Trs
        public double? Kgs { get; set; } // Kgs
    }

    // OperatingCostStockOnHandAvgByRoom
    public class OperatingCostStockOnHandAvgByRoom
    {
        public int CustomerMainId { get; set; } // CustomerMainID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public float? AvgQtyPallets { get; set; } // AvgQtyPallets
        public float? AvgWeight { get; set; } // AvgWeight
        public string RoomId { get; set; } // RoomID (length: 1)
        public string FromDate { get; set; } // FromDate (length: 25)
        public string Todate { get; set; } // Todate (length: 25)
    }

    // OperatingCostVehicleInOutRunningTime
    public class OperatingCostVehicleInOutRunningTime
    {
        public int ContInOutId { get; set; } // ContInOutID
        public int CustomerId { get; set; } // CustomerID
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ContainerNum { get; set; } // ContainerNum (length: 20)
        public bool? Via { get; set; } // Via
        public string ContainerType { get; set; } // ContainerType (length: 50)
        public string Reason { get; set; } // Reason (length: 50)
        public string ProductQty { get; set; } // ProductQty (length: 10)
        public DateTime? TimeIn { get; set; } // TimeIn
        public bool? CheckOut { get; set; } // CheckOut
        public DateTime? TimeOut { get; set; } // TimeOut
        public DateTime? RunningHour { get; set; } // RunningHour
        public int? OtherServiceId { get; set; } // OtherServiceID
        public string UserOut { get; set; } // UserOut (length: 50)
        public bool? UserCheckOut { get; set; } // UserCheckOut
        public bool? TruckCheckOut { get; set; } // TruckCheckOut
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public byte? Gate { get; set; } // Gate
        public DateTime? DateIn { get; set; } // DateIn
        public double? RunningFloat { get; set; } // RunningFloat
        public double? PowerQuantity { get; set; } // PowerQuantity
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string VehicleType { get; set; } // VehicleType (length: 5)
        public string OrderNumber { get; set; } // OrderNumber (length: 50)
    }

    // OperationCostBlastFreezing
    public class OperationCostBlastFreezing
    {
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public DateTime? BlastFreezerCreateTime { get; set; } // BlastFreezerCreateTime
        public DateTime? StartLoadingTime { get; set; } // StartLoadingTime
        public DateTime? EndLoadingTime { get; set; } // EndLoadingTime
        public DateTime? BlastFreezerUloadingTime { get; set; } // BlastFreezerUloadingTime
        public int BlastFreezerRoomId { get; set; } // BlastFreezerRoomID
        public DateTime DateIn { get; set; } // DateIn
        public string UserName { get; set; } // UserName (length: 50)
        public string ProductDetailsRemark { get; set; } // ProductDetailsRemark (length: 50)
        public string BlastFreezerLoadingBy { get; set; } // BlastFreezerLoadingBy (length: 50)
        public DateTime? StartRunTime { get; set; } // StartRunTime
        public DateTime? EndRunTime { get; set; } // EndRunTime
        public string BlastFreezerRunningRemark { get; set; } // BlastFreezerRunningRemark (length: 50)
        public string BlastFreezerRecordNumber { get; set; } // BlastFreezerRecordNumber (length: 50)
    }

    // OperationCostMonthlyParameters
    public class OperationCostMonthlyParameter
    {
        public int OperationCostMonthlyParameterId { get; set; } // OperationCostMonthlyParameterID (Primary key)
        public int CustomerIdOld { get; set; } // CustomerID_old
        public decimal? LocationInout { get; set; } // LocationInout
        public decimal? LocationOccupied { get; set; } // LocationOccupied
        public decimal? WeightInOut { get; set; } // WeightInOut
        public decimal? WeightInStoreNet { get; set; } // WeightInStoreNet
        public decimal? WeightInOutAdjusted { get; set; } // WeightInOutAdjusted
        public decimal? WeightInStoreGross { get; set; } // WeightInStoreGross
        public decimal? NumberOfTransactions { get; set; } // NumberOfTransactions
        public int OperatingCostMonthlyId { get; set; } // OperatingCostMonthlyID
        public decimal? IndexLocationInOut { get; set; } // Index_LocationInOut
        public decimal? IndexTransactions { get; set; } // Index_Transactions
        public decimal? LocationInOutActual { get; set; } // LocationInOutActual
        public decimal? TransactionActual { get; set; } // TransactionActual
        public Guid? CustomerId { get; set; } // CustomerID

        // Foreign keys

        /// <summary>
        /// Parent OperatingCostMonth pointed by [OperationCostMonthlyParameters].([OperatingCostMonthlyId]) (FK_OperationCostMonthlyParameters_OperatingCostMonths)
        /// </summary>
        public virtual OperatingCostMonth OperatingCostMonth { get; set; } // FK_OperationCostMonthlyParameters_OperatingCostMonths

        public OperationCostMonthlyParameter()
        {
            IndexLocationInOut = 1m;
            IndexTransactions = 1m;
        }
    }

    // OperationCostNominalRates
    public class OperationCostNominalRate
    {
        public string JobName { get; set; } // JobName (length: 500)
        public float? UnitPrice { get; set; } // UnitPrice
    }

    // OperationGroupCustomers
    public class OperationGroupCustomer
    {
        public int OperationGroupDefinitionId { get; set; } // OperationGroupDefinitionID (Primary key)
        public Guid CustomerId { get; set; } // CustomerID (Primary key)
        public string Remark { get; set; } // Remark (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime

        // Foreign keys

        /// <summary>
        /// Parent OperationGroupDefinition pointed by [OperationGroupCustomers].([OperationGroupDefinitionId]) (FK_OperationGroupDefinitionID_OperationGroupDefinitions)
        /// </summary>
        public virtual OperationGroupDefinition OperationGroupDefinition { get; set; } // FK_OperationGroupDefinitionID_OperationGroupDefinitions

        public OperationGroupCustomer()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // OperationGroupDefinitions
    public class OperationGroupDefinition
    {
        public int OperationGroupDefinitionId { get; set; } // OperationGroupDefinitionID (Primary key)
        public string OperationGroupName { get; set; } // OperationGroupName (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime

        // Reverse navigation

        /// <summary>
        /// Child OperationGroupCustomers where [OperationGroupCustomers].[OperationGroupDefinitionID] point to this entity (FK_OperationGroupDefinitionID_OperationGroupDefinitions)
        /// </summary>
        public virtual ICollection<OperationGroupCustomer> OperationGroupCustomers { get; set; } // OperationGroupCustomers.FK_OperationGroupDefinitionID_OperationGroupDefinitions

        /// <summary>
        /// Child OperationGroupUsers where [OperationGroupUser].[OperationGroupDefinitionID] point to this entity (FK_OperationGroupDefinitionID_User)
        /// </summary>
        public virtual ICollection<OperationGroupUser> OperationGroupUsers { get; set; } // OperationGroupUser.FK_OperationGroupDefinitionID_User

        public OperationGroupDefinition()
        {
            CreatedTime = DateTime.Now;
            OperationGroupCustomers = new List<OperationGroupCustomer>();
            OperationGroupUsers = new List<OperationGroupUser>();
        }
    }

    // OperationGroupUser
    public class OperationGroupUser
    {
        public int OperationGroupDefinitionId { get; set; } // OperationGroupDefinitionID (Primary key)
        public string UserName { get; set; } // UserName (Primary key) (length: 20)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime

        // Foreign keys

        /// <summary>
        /// Parent OperationGroupDefinition pointed by [OperationGroupUser].([OperationGroupDefinitionId]) (FK_OperationGroupDefinitionID_User)
        /// </summary>
        public virtual OperationGroupDefinition OperationGroupDefinition { get; set; } // FK_OperationGroupDefinitionID_User

        /// <summary>
        /// Parent UserAccount pointed by [OperationGroupUser].([UserName]) (FK_UserName_AcountUser)
        /// </summary>
        public virtual UserAccount UserAccount { get; set; } // FK_UserName_AcountUser

        public OperationGroupUser()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // OrderCategories
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class OrderCategory
    {
        /// <summary>
        /// 0
        /// </summary>
        public byte OrderCategoryId { get; set; } // OrderCategoryID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string DescriptionVietnam { get; set; } // DescriptionVietnam (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public int ProductivityPercentage { get; set; } // ProductivityPercentage

        /// <summary>
        /// 0
        /// </summary>
        public byte ProductivityLevel { get; set; } // ProductivityLevel

        /// <summary>
        /// 0
        /// </summary>
        public string DescriptionEnglish { get; set; } // DescriptionEnglish (length: 250)
        public byte? OrderCategoryNumber { get; set; } // OrderCategoryNumber
        public bool? CategoryActive { get; set; } // CategoryActive

        public OrderCategory()
        {
            CategoryActive = true;
        }
    }

    // OrderProgress
    public class OrderProgress
    {
        public byte OrderProgressId { get; set; } // OrderProgressID (Primary key)
        public string OrderProgressDescription { get; set; } // OrderProgressDescription (length: 100)
    }

    // OrderType
    public class OrderType
    {
        public byte OrderTypeId { get; set; } // OrderTypeID (Primary key)
        public string OrderTypeDescription { get; set; } // OrderTypeDescription (length: 100)
        public string OrderType_ { get; set; } // OrderType (length: 10)
    }

    // OtherService
    /// <summary>
    /// 2
    /// OtherService.EmployeeID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class OtherService
    {
        public Guid OtherServiceId { get; set; } // OtherServiceID (Primary key)
        public string OtherServiceNumber { get; set; } // OtherServiceNumber (length: 20)
        public Guid CustomerId { get; set; } // CustomerID

        /// <summary>
        /// -1
        /// </summary>
        public DateTime ServiceDate { get; set; } // ServiceDate

        /// <summary>
        /// 0
        /// </summary>
        public string ServiceRemark { get; set; } // ServiceRemark (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerRep { get; set; } // CustomerRep (length: 500)

        /// <summary>
        /// -1
        /// </summary>
        public bool LockStatus { get; set; } // LockStatus

        /// <summary>
        /// 0
        /// </summary>
        public bool? BillingConfirmed { get; set; } // BillingConfirmed

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // ts
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)

        /// <summary>
        /// 1-AutoByBilling; 2 - Auto PRC
        /// </summary>
        public byte? Status { get; set; } // Status
        public Guid? BillingId { get; set; } // BillingID
        public int? OtherServiceLocalId { get; set; } // OtherServiceLocalID
        public string OrderNumber { get; set; } // OrderNumber (length: 20)

        /// <summary>
        /// 1-AutoByBilling; 2 - Auto PRC
        /// </summary>
        public string OrderType { get; set; } // OrderType (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child OtherServiceDetails where [OtherServiceDetails].[OtherServiceID] point to this entity (FK_OtherServiceDetails_OtherService)
        /// </summary>
        public virtual ICollection<OtherServiceDetail> OtherServiceDetails { get; set; } // OtherServiceDetails.FK_OtherServiceDetails_OtherService

        public OtherService()
        {
            OtherServiceId = Guid.NewGuid();
            LockStatus = false;
            BillingConfirmed = false;
            CreatedTime = DateTime.Now;
            Status = 0;
            OrderType = "Normal";
            OtherServiceDetails = new List<OtherServiceDetail>();
        }
    }

    // OtherServiceDetails
    /// <summary>
    /// 2
    /// ((OtherServiceID=29973))
    /// OtherServiceDetails.ServiceID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class OtherServiceDetail
    {
        public Guid OtherServiceDetailId { get; set; } // OtherServiceDetailID (Primary key)

        /// <summary>
        /// 109
        /// </summary>
        public decimal? Quantity { get; set; } // Quantity

        /// <summary>
        /// 0
        /// </summary>
        public string Description { get; set; } // Description (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public bool Billed { get; set; } // Billed

        /// <summary>
        /// -1
        /// </summary>
        public bool Invoiced { get; set; } // Invoiced

        /// <summary>
        /// 0
        /// </summary>
        public bool Manual { get; set; } // Manual
        public string OrderNumber { get; set; } // OrderNumber (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public Guid OtherServiceId { get; set; } // OtherServiceID
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public Guid? OrderDetailId { get; set; } // OrderDetailID
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice
        public bool? IsAutoByBilling { get; set; } // IsAutoByBilling
        public byte Vat { get; set; } // VAT
        public DateTime? RevenuedTime { get; set; } // RevenuedTime

        // Foreign keys

        /// <summary>
        /// Parent OtherService pointed by [OtherServiceDetails].([OtherServiceId]) (FK_OtherServiceDetails_OtherService)
        /// </summary>
        public virtual OtherService OtherService { get; set; } // FK_OtherServiceDetails_OtherService

        /// <summary>
        /// Parent ServicesDefinition pointed by [OtherServiceDetails].([ServicesDefinitionId]) (FK_OtherServiceDetails_ServicesDefinition)
        /// </summary>
        public virtual ServicesDefinition ServicesDefinition { get; set; } // FK_OtherServiceDetails_ServicesDefinition

        public OtherServiceDetail()
        {
            OtherServiceDetailId = Guid.NewGuid();
            Billed = false;
            Invoiced = false;
            Manual = true;
            CreatedTime = DateTime.Now;
            IsAutoByBilling = false;
            Vat = 0;
        }
    }

    // OTM_BUY_SHIPMENT
    public class OtmBuyShipment
    {
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime CreateDate { get; set; } // CreateDate
        public DateTime RecordDate { get; set; } // RecordDate
        public Guid RowPointer { get; set; } // RowPointer (Primary key via unique index IX_OTM_BUY_SHIPMENT_RowPointer)
        public byte NoteExistsFlag { get; set; } // NoteExistsFlag
        public byte InWorkflow { get; set; } // InWorkflow
        public string CustomerCode { get; set; } // CustomerCode (length: 101)
        public string ShipmentGid { get; set; } // Shipment_GID (length: 101)
        public string Trucktype { get; set; } // Trucktype (length: 101)
        public DateTime? StartTime { get; set; } // START_TIME
        public DateTime? EndTime { get; set; } // END_TIME
        public string DriverGid { get; set; } // DRIVER_GID (length: 101)
        public string PowerUnitGid { get; set; } // POWER_UNIT_GID (length: 101)
        public string Status { get; set; } // STATUS (length: 50)
        public string BuyShipmentId { get; set; } // BuyShipmentID (length: 101)
        public string InterfaceStatus { get; set; } // INTERFACE_STATUS (length: 101)
        public string AtmShipmentId { get; set; } // ATM_SHIPMENT_ID (length: 101)
        public string Mode { get; set; } // MODE (length: 20)
        public string Routeno { get; set; } // ROUTENO (length: 50)
        public int? TransmissionNo { get; set; } // TransmissionNo
        public string Message { get; set; } // MESSAGE (length: 2000)

        public OtmBuyShipment()
        {
            CreatedBy = "suser_sname()";
            UpdatedBy = "suser_sname()";
            CreateDate = DateTime.Now;
            RecordDate = DateTime.Now;
            RowPointer = Guid.NewGuid();
            NoteExistsFlag = 0;
            InWorkflow = 0;
        }
    }

    // OTM_Contacts
    public class OtmContact
    {
        public string ContactGid { get; set; } // CONTACT_GID (Primary key) (length: 101)
        public string ContactXid { get; set; } // CONTACT_XID (length: 50)
        public string FirstName { get; set; } // FIRST_NAME (length: 150)
        public string LastName { get; set; } // LAST_NAME (length: 150)
        public string JobTitle { get; set; } // JOB_TITLE (length: 100)
        public string EmailAddress { get; set; } // EMAIL_ADDRESS (length: 2000)
        public string Phone1 { get; set; } // PHONE1 (length: 80)
        public string Phone2 { get; set; } // PHONE2 (length: 80)
        public string Fax { get; set; } // FAX (length: 80)
        public string LanguageSpoken { get; set; } // LANGUAGE_SPOKEN (length: 30)
        public string IsPrimaryContact { get; set; } // IS_PRIMARY_CONTACT (length: 1)
        public string Telex { get; set; } // TELEX (length: 30)
        public string ExternalSystemGid { get; set; } // EXTERNAL_SYSTEM_GID (length: 101)
        public string Notes { get; set; } // NOTES (length: 2000)
        public string GlUserGid { get; set; } // GL_USER_GID (length: 101)
        public string RecipientDomainName { get; set; } // RECIPIENT_DOMAIN_NAME (length: 50)
        public string RouteThroughLocation { get; set; } // ROUTE_THROUGH_LOCATION (length: 1)
        public string ContactType { get; set; } // CONTACT_TYPE (length: 30)
        public string IsBroadcast { get; set; } // IS_BROADCAST (length: 1)
        public string GroupSavedQueryGid { get; set; } // GROUP_SAVED_QUERY_GID (length: 101)
        public string LocationGid { get; set; } // LOCATION_GID (length: 101)
        public string IsEmailVirusProtected { get; set; } // IS_EMAIL_VIRUS_PROTECTED (length: 1)
        public string ConsolidationProfileGid { get; set; } // CONSOLIDATION_PROFILE_GID (length: 101)
        public string ConsolidatedNotifyOnly { get; set; } // CONSOLIDATED_NOTIFY_ONLY (length: 1)
        public string IsNotificationOn { get; set; } // IS_NOTIFICATION_ON (length: 1)
        public string TimeZoneGid { get; set; } // TIME_ZONE_GID (length: 101)
        public string FromAddrContactGid { get; set; } // FROM_ADDR_CONTACT_GID (length: 101)
        public string IsFromAddress { get; set; } // IS_FROM_ADDRESS (length: 1)
        public string MiddleName { get; set; } // MIDDLE_NAME (length: 60)
        public string CellPhone { get; set; } // CELL_PHONE (length: 80)
        public string SendAsMessage { get; set; } // SEND_AS_MESSAGE (length: 1)
        public string MessageProfileGid { get; set; } // MESSAGE_PROFILE_GID (length: 101)
        public string AlternateName { get; set; } // ALTERNATE_NAME (length: 360)
        public string CompanyName { get; set; } // COMPANY_NAME (length: 360)
        public string Description { get; set; } // DESCRIPTION (length: 4000)
        public string IppPrinterGid { get; set; } // IPP_PRINTER_GID (length: 101)
        public string EcmUser { get; set; } // ECM_USER (length: 200)
        public string Attribute1 { get; set; } // ATTRIBUTE1 (length: 150)
        public string Attribute2 { get; set; } // ATTRIBUTE2 (length: 150)
        public string Attribute3 { get; set; } // ATTRIBUTE3 (length: 150)
        public string Attribute4 { get; set; } // ATTRIBUTE4 (length: 150)
        public string Attribute5 { get; set; } // ATTRIBUTE5 (length: 150)
        public string Attribute6 { get; set; } // ATTRIBUTE6 (length: 150)
        public string Attribute7 { get; set; } // ATTRIBUTE7 (length: 150)
        public string Attribute8 { get; set; } // ATTRIBUTE8 (length: 150)
        public string Attribute9 { get; set; } // ATTRIBUTE9 (length: 150)
        public string Attribute10 { get; set; } // ATTRIBUTE10 (length: 150)
        public string Attribute11 { get; set; } // ATTRIBUTE11 (length: 150)
        public string Attribute12 { get; set; } // ATTRIBUTE12 (length: 150)
        public string Attribute13 { get; set; } // ATTRIBUTE13 (length: 150)
        public string Attribute14 { get; set; } // ATTRIBUTE14 (length: 150)
        public string Attribute15 { get; set; } // ATTRIBUTE15 (length: 150)
        public string Attribute16 { get; set; } // ATTRIBUTE16 (length: 150)
        public string Attribute17 { get; set; } // ATTRIBUTE17 (length: 150)
        public string Attribute18 { get; set; } // ATTRIBUTE18 (length: 150)
        public string Attribute19 { get; set; } // ATTRIBUTE19 (length: 150)
        public string Attribute20 { get; set; } // ATTRIBUTE20 (length: 150)
        public double? AttributeNumber1 { get; set; } // ATTRIBUTE_NUMBER1
        public double? AttributeNumber2 { get; set; } // ATTRIBUTE_NUMBER2
        public double? AttributeNumber3 { get; set; } // ATTRIBUTE_NUMBER3
        public double? AttributeNumber4 { get; set; } // ATTRIBUTE_NUMBER4
        public double? AttributeNumber5 { get; set; } // ATTRIBUTE_NUMBER5
        public double? AttributeNumber6 { get; set; } // ATTRIBUTE_NUMBER6
        public double? AttributeNumber7 { get; set; } // ATTRIBUTE_NUMBER7
        public double? AttributeNumber8 { get; set; } // ATTRIBUTE_NUMBER8
        public double? AttributeNumber9 { get; set; } // ATTRIBUTE_NUMBER9
        public double? AttributeNumber10 { get; set; } // ATTRIBUTE_NUMBER10
        public DateTime? AttributeDate1 { get; set; } // ATTRIBUTE_DATE1
        public DateTime? AttributeDate2 { get; set; } // ATTRIBUTE_DATE2
        public DateTime? AttributeDate3 { get; set; } // ATTRIBUTE_DATE3
        public DateTime? AttributeDate4 { get; set; } // ATTRIBUTE_DATE4
        public DateTime? AttributeDate5 { get; set; } // ATTRIBUTE_DATE5
        public DateTime? AttributeDate6 { get; set; } // ATTRIBUTE_DATE6
        public DateTime? AttributeDate7 { get; set; } // ATTRIBUTE_DATE7
        public DateTime? AttributeDate8 { get; set; } // ATTRIBUTE_DATE8
        public DateTime? AttributeDate9 { get; set; } // ATTRIBUTE_DATE9
        public DateTime? AttributeDate10 { get; set; } // ATTRIBUTE_DATE10
        public DateTime? NameAddressUpdateDate { get; set; } // NAME_ADDRESS_UPDATE_DATE
        public string Indicator { get; set; } // INDICATOR (length: 1)
        public string UserDefined1IconGid { get; set; } // USER_DEFINED1_ICON_GID (length: 101)
        public string UserDefined2IconGid { get; set; } // USER_DEFINED2_ICON_GID (length: 101)
        public string UserDefined3IconGid { get; set; } // USER_DEFINED3_ICON_GID (length: 101)
        public string UserDefined4IconGid { get; set; } // USER_DEFINED4_ICON_GID (length: 101)
        public string UserDefined5IconGid { get; set; } // USER_DEFINED5_ICON_GID (length: 101)
        public string DomainName { get; set; } // DOMAIN_NAME (length: 50)
        public string InsertUser { get; set; } // INSERT_USER (length: 128)
        public DateTime? InsertDate { get; set; } // INSERT_DATE
        public string UpdateUser { get; set; } // UPDATE_USER (length: 128)
        public DateTime? UpdateDate { get; set; } // UPDATE_DATE
        public bool? IsCompany { get; set; } // IS_COMPANY
        public DateTime? SyncDate { get; set; } // SYNC_DATE
    }

    // OTM_CostDefinitions
    public class OtmCostDefinition
    {
        public int CostDefinitionId { get; set; } // CostDefinitionID (Primary key)
        public string CostDefinitionDescription { get; set; } // CostDefinitionDescription (length: 200)
    }

    // OTM_Drivers
    public class OtmDriver
    {
        public string DriverGid { get; set; } // DRIVER_GID (Primary key) (length: 101)
        public string DriverXid { get; set; } // DRIVER_XID (Primary key) (length: 50)
        public string DefHomeLocGid { get; set; } // DEF_HOME_LOC_GID (length: 101)
        public string FirstName { get; set; } // FIRST_NAME (length: 200)
        public string LastName { get; set; } // LAST_NAME (length: 200)
        public DateTime? DateOfBirth { get; set; } // DATE_OF_BIRTH
        public string WorkRegionGid { get; set; } // WORK_REGION_GID (length: 101)
        public string DedAcctLocnProfileGid { get; set; } // DED_ACCT_LOCN_PROFILE_GID (length: 101)
        public string ContactGid { get; set; } // CONTACT_GID (length: 101)
        public string RateOfferingGid { get; set; } // RATE_OFFERING_GID (length: 101)
        public string PrefConstraintConfigGid { get; set; } // PREF_CONSTRAINT_CONFIG_GID (length: 101)
        public string ResourceType { get; set; } // RESOURCE_TYPE (Primary key) (length: 1)
        public string UseHosHistory { get; set; } // USE_HOS_HISTORY (Primary key) (length: 1)
        public DateTime? AdjHireDate { get; set; } // ADJ_HIRE_DATE
        public string CorporationProfileGid { get; set; } // CORPORATION_PROFILE_GID (length: 101)
        public string DriverTypeGid { get; set; } // DRIVER_TYPE_GID (length: 101)
        public string IsActive { get; set; } // IS_ACTIVE (Primary key) (length: 1)
        public string SightingLocationGid { get; set; } // SIGHTING_LOCATION_GID (length: 101)
        public DateTime? SightingDate { get; set; } // SIGHTING_DATE
        public string PrevSightingLocationGid { get; set; } // PREV_SIGHTING_LOCATION_GID (length: 101)
        public DateTime? PrevSightingDate { get; set; } // PREV_SIGHTING_DATE
        public string UserDefined1IconGid { get; set; } // USER_DEFINED1_ICON_GID (length: 101)
        public string UserDefined2IconGid { get; set; } // USER_DEFINED2_ICON_GID (length: 101)
        public string UserDefined3IconGid { get; set; } // USER_DEFINED3_ICON_GID (length: 101)
        public string UserDefined4IconGid { get; set; } // USER_DEFINED4_ICON_GID (length: 101)
        public string UserDefined5IconGid { get; set; } // USER_DEFINED5_ICON_GID (length: 101)
        public string Indicator { get; set; } // INDICATOR (length: 1)
        public double? DriverAssignmentSeqNum { get; set; } // DRIVER_ASSIGNMENT_SEQ_NUM
        public string RateDistanceGid { get; set; } // RATE_DISTANCE_GID (length: 101)
        public DateTime? EndDate { get; set; } // END_DATE
        public string DomainName { get; set; } // DOMAIN_NAME (Primary key) (length: 50)
        public string InsertUser { get; set; } // INSERT_USER (Primary key) (length: 128)
        public DateTime InsertDate { get; set; } // INSERT_DATE (Primary key)
        public string UpdateUser { get; set; } // UPDATE_USER (length: 128)
        public DateTime? UpdateDate { get; set; } // UPDATE_DATE
        public string Attribute1 { get; set; } // ATTRIBUTE1 (length: 150)
        public string Attribute2 { get; set; } // ATTRIBUTE2 (length: 150)
        public string Attribute3 { get; set; } // ATTRIBUTE3 (length: 150)
        public string Attribute4 { get; set; } // ATTRIBUTE4 (length: 150)
        public string Attribute5 { get; set; } // ATTRIBUTE5 (length: 150)
        public string Attribute6 { get; set; } // ATTRIBUTE6 (length: 150)
        public string Attribute7 { get; set; } // ATTRIBUTE7 (length: 150)
        public string Attribute8 { get; set; } // ATTRIBUTE8 (length: 150)
        public string Attribute9 { get; set; } // ATTRIBUTE9 (length: 150)
        public string Attribute10 { get; set; } // ATTRIBUTE10 (length: 150)
        public string Attribute11 { get; set; } // ATTRIBUTE11 (length: 150)
        public string Attribute12 { get; set; } // ATTRIBUTE12 (length: 150)
        public string Attribute13 { get; set; } // ATTRIBUTE13 (length: 150)
        public string Attribute14 { get; set; } // ATTRIBUTE14 (length: 150)
        public string Attribute15 { get; set; } // ATTRIBUTE15 (length: 150)
        public string Attribute16 { get; set; } // ATTRIBUTE16 (length: 150)
        public string Attribute17 { get; set; } // ATTRIBUTE17 (length: 150)
        public string Attribute18 { get; set; } // ATTRIBUTE18 (length: 150)
        public string Attribute19 { get; set; } // ATTRIBUTE19 (length: 150)
        public string Attribute20 { get; set; } // ATTRIBUTE20 (length: 150)
        public double? AttributeNumber1 { get; set; } // ATTRIBUTE_NUMBER1
        public double? AttributeNumber2 { get; set; } // ATTRIBUTE_NUMBER2
        public double? AttributeNumber3 { get; set; } // ATTRIBUTE_NUMBER3
        public double? AttributeNumber4 { get; set; } // ATTRIBUTE_NUMBER4
        public double? AttributeNumber5 { get; set; } // ATTRIBUTE_NUMBER5
        public double? AttributeNumber6 { get; set; } // ATTRIBUTE_NUMBER6
        public double? AttributeNumber7 { get; set; } // ATTRIBUTE_NUMBER7
        public double? AttributeNumber8 { get; set; } // ATTRIBUTE_NUMBER8
        public double? AttributeNumber9 { get; set; } // ATTRIBUTE_NUMBER9
        public double? AttributeNumber10 { get; set; } // ATTRIBUTE_NUMBER10
        public DateTime? AttributeDate1 { get; set; } // ATTRIBUTE_DATE1
        public DateTime? AttributeDate2 { get; set; } // ATTRIBUTE_DATE2
        public DateTime? AttributeDate3 { get; set; } // ATTRIBUTE_DATE3
        public DateTime? AttributeDate4 { get; set; } // ATTRIBUTE_DATE4
        public DateTime? AttributeDate5 { get; set; } // ATTRIBUTE_DATE5
        public DateTime? AttributeDate6 { get; set; } // ATTRIBUTE_DATE6
        public DateTime? AttributeDate7 { get; set; } // ATTRIBUTE_DATE7
        public DateTime? AttributeDate8 { get; set; } // ATTRIBUTE_DATE8
        public DateTime? AttributeDate9 { get; set; } // ATTRIBUTE_DATE9
        public DateTime? AttributeDate10 { get; set; } // ATTRIBUTE_DATE10
        public DateTime? SyncDate { get; set; } // SYNC_DATE
    }

    // OTM_EVENTS
    public class OtmEvent
    {
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime CreateDate { get; set; } // CreateDate
        public DateTime RecordDate { get; set; } // RecordDate
        public Guid RowPointer { get; set; } // RowPointer (Primary key via unique index IX_OTM_EVENTS_RowPointer)
        public byte NoteExistsFlag { get; set; } // NoteExistsFlag
        public byte InWorkflow { get; set; } // InWorkflow
        public string EventGid { get; set; } // EVENT_GID (length: 1)
        public string EventName { get; set; } // EVENT_NAME (length: 101)
        public string ShipmentGid { get; set; } // SHIPMENT_GID (length: 101)

        public OtmEvent()
        {
            CreatedBy = "suser_sname()";
            UpdatedBy = "suser_sname()";
            CreateDate = DateTime.Now;
            RecordDate = DateTime.Now;
            RowPointer = Guid.NewGuid();
            NoteExistsFlag = 0;
            InWorkflow = 0;
        }
    }

    // OTM_Items
    public class OtmItem
    {
        public string ItemGid { get; set; } // ITEM_GID (Primary key) (length: 101)
        public string ItemXid { get; set; } // ITEM_XID (Primary key) (length: 50)
        public string ItemName { get; set; } // ITEM_NAME (length: 240)
        public string CommodityGid { get; set; } // COMMODITY_GID (length: 101)
        public string NmfcArticleGid { get; set; } // NMFC_ARTICLE_GID (length: 101)
        public string NmfcClassGid { get; set; } // NMFC_CLASS_GID (length: 101)
        public string StccGid { get; set; } // STCC_GID (length: 101)
        public string HtsGid { get; set; } // HTS_GID (length: 101)
        public string SitcGid { get; set; } // SITC_GID (length: 101)
        public string Description { get; set; } // DESCRIPTION (length: 500)
        public string UserDefinedCommodityGid { get; set; } // USER_DEFINED_COMMODITY_GID (length: 101)
        public string UdcClassificationListGid { get; set; } // UDC_CLASSIFICATION_LIST_GID (length: 101)
        public string BrandName { get; set; } // BRAND_NAME (length: 101)
        public DateTime? EffectiveDate { get; set; } // EFFECTIVE_DATE
        public DateTime? ExpirationDate { get; set; } // EXPIRATION_DATE
        public string ManufacturedCountryCodeGid { get; set; } // MANUFACTURED_COUNTRY_CODE_GID (length: 101)
        public string IsDrawback { get; set; } // IS_DRAWBACK (Primary key) (length: 1)
        public string IataScrCodeGid { get; set; } // IATA_SCR_CODE_GID (length: 101)
        public string MarkedForPurge { get; set; } // MARKED_FOR_PURGE (length: 1)
        public string DomainName { get; set; } // DOMAIN_NAME (Primary key) (length: 50)
        public string InsertUser { get; set; } // INSERT_USER (Primary key) (length: 128)
        public DateTime InsertDate { get; set; } // INSERT_DATE (Primary key)
        public string UpdateUser { get; set; } // UPDATE_USER (length: 128)
        public DateTime? UpdateDate { get; set; } // UPDATE_DATE
        public string UnitOfMeasure { get; set; } // UNIT_OF_MEASURE (length: 20)
        public double? PricePerUnit { get; set; } // PRICE_PER_UNIT
        public double? PricePerUnitBase { get; set; } // PRICE_PER_UNIT_BASE
        public string PricePerUnitCurrencyGid { get; set; } // PRICE_PER_UNIT_CURRENCY_GID (length: 101)
        public string IsTemplate { get; set; } // IS_TEMPLATE (Primary key) (length: 1)
        public string Attribute1 { get; set; } // ATTRIBUTE1 (length: 150)
        public string Attribute2 { get; set; } // ATTRIBUTE2 (length: 150)
        public string Attribute3 { get; set; } // ATTRIBUTE3 (length: 150)
        public string Attribute4 { get; set; } // ATTRIBUTE4 (length: 150)
        public string Attribute5 { get; set; } // ATTRIBUTE5 (length: 150)
        public string Attribute6 { get; set; } // ATTRIBUTE6 (length: 150)
        public string Attribute7 { get; set; } // ATTRIBUTE7 (length: 150)
        public string Attribute8 { get; set; } // ATTRIBUTE8 (length: 150)
        public string Attribute9 { get; set; } // ATTRIBUTE9 (length: 150)
        public string Attribute10 { get; set; } // ATTRIBUTE10 (length: 150)
        public string Attribute11 { get; set; } // ATTRIBUTE11 (length: 150)
        public string Attribute12 { get; set; } // ATTRIBUTE12 (length: 150)
        public string Attribute13 { get; set; } // ATTRIBUTE13 (length: 150)
        public string Attribute14 { get; set; } // ATTRIBUTE14 (length: 150)
        public string Attribute15 { get; set; } // ATTRIBUTE15 (length: 150)
        public string Attribute16 { get; set; } // ATTRIBUTE16 (length: 150)
        public string Attribute17 { get; set; } // ATTRIBUTE17 (length: 150)
        public string Attribute18 { get; set; } // ATTRIBUTE18 (length: 150)
        public string Attribute19 { get; set; } // ATTRIBUTE19 (length: 150)
        public string Attribute20 { get; set; } // ATTRIBUTE20 (length: 150)
        public double? AttributeNumber1 { get; set; } // ATTRIBUTE_NUMBER1
        public double? AttributeNumber2 { get; set; } // ATTRIBUTE_NUMBER2
        public double? AttributeNumber3 { get; set; } // ATTRIBUTE_NUMBER3
        public double? AttributeNumber4 { get; set; } // ATTRIBUTE_NUMBER4
        public double? AttributeNumber5 { get; set; } // ATTRIBUTE_NUMBER5
        public double? AttributeNumber6 { get; set; } // ATTRIBUTE_NUMBER6
        public double? AttributeNumber7 { get; set; } // ATTRIBUTE_NUMBER7
        public double? AttributeNumber8 { get; set; } // ATTRIBUTE_NUMBER8
        public double? AttributeNumber9 { get; set; } // ATTRIBUTE_NUMBER9
        public double? AttributeNumber10 { get; set; } // ATTRIBUTE_NUMBER10
        public DateTime? AttributeDate1 { get; set; } // ATTRIBUTE_DATE1
        public DateTime? AttributeDate2 { get; set; } // ATTRIBUTE_DATE2
        public DateTime? AttributeDate3 { get; set; } // ATTRIBUTE_DATE3
        public DateTime? AttributeDate4 { get; set; } // ATTRIBUTE_DATE4
        public DateTime? AttributeDate5 { get; set; } // ATTRIBUTE_DATE5
        public DateTime? AttributeDate6 { get; set; } // ATTRIBUTE_DATE6
        public DateTime? AttributeDate7 { get; set; } // ATTRIBUTE_DATE7
        public DateTime? AttributeDate8 { get; set; } // ATTRIBUTE_DATE8
        public DateTime? AttributeDate9 { get; set; } // ATTRIBUTE_DATE9
        public DateTime? AttributeDate10 { get; set; } // ATTRIBUTE_DATE10
        public string Indicator { get; set; } // INDICATOR (length: 1)
        public int? Priority { get; set; } // PRIORITY
        public DateTime? SyncDate { get; set; } // SYNC_DATE
    }

    // OTM_Locations
    public class OtmLocation
    {
        public string LocationGid { get; set; } // LOCATION_GID (Primary key) (length: 101)
        public string LocationXid { get; set; } // LOCATION_XID (length: 50)
        public string LocationName { get; set; } // LOCATION_NAME (length: 360)
        public string City { get; set; } // CITY (length: 240)
        public string Province { get; set; } // PROVINCE (length: 240)
        public string ProvinceCode { get; set; } // PROVINCE_CODE (length: 6)
        public string PostalCode { get; set; } // POSTAL_CODE (length: 240)
        public string CountryCode3Gid { get; set; } // COUNTRY_CODE3_GID (length: 101)
        public string Zone1 { get; set; } // ZONE1 (length: 30)
        public string Zone2 { get; set; } // ZONE2 (length: 30)
        public string Zone3 { get; set; } // ZONE3 (length: 30)
        public string Zone4 { get; set; } // ZONE4 (length: 30)
        public string TimeZoneGid { get; set; } // TIME_ZONE_GID (length: 101)
        public double? Lat { get; set; } // LAT
        public double? Lon { get; set; } // LON
        public string SourcingGroupName { get; set; } // SOURCING_GROUP_NAME (length: 120)
        public string DeliveryGroupName { get; set; } // DELIVERY_GROUP_NAME (length: 120)
        public string RegionGid { get; set; } // REGION_GID (length: 101)
        public string ServprovProfileGid { get; set; } // SERVPROV_PROFILE_GID (length: 101)
        public string LocationGroupGid { get; set; } // LOCATION_GROUP_GID (length: 101)
        public string IsTemporary { get; set; } // IS_TEMPORARY (length: 1)
        public string IsMakeApptBeforePlan { get; set; } // IS_MAKE_APPT_BEFORE_PLAN (length: 1)
        public string IsShipperKnown { get; set; } // IS_SHIPPER_KNOWN (length: 1)
        public string IsAddressValid { get; set; } // IS_ADDRESS_VALID (length: 1)
        public string RateClassificationGid { get; set; } // RATE_CLASSIFICATION_GID (length: 101)
        public string EquipmentGroupProfileGid { get; set; } // EQUIPMENT_GROUP_PROFILE_GID (length: 101)
        public double? SlotTimeInterval { get; set; } // SLOT_TIME_INTERVAL
        public string SlotTimeIntervalUomCode { get; set; } // SLOT_TIME_INTERVAL_UOM_CODE (length: 64)
        public double? SlotTimeIntervalBase { get; set; } // SLOT_TIME_INTERVAL_BASE
        public string IsLtlSplitable { get; set; } // IS_LTL_SPLITABLE (length: 1)
        public double? NumOfRowsInYard { get; set; } // NUM_OF_ROWS_IN_YARD
        public double? NumOfSlotsPerRowInYard { get; set; } // NUM_OF_SLOTS_PER_ROW_IN_YARD
        public string UseAppointmentPriority { get; set; } // USE_APPOINTMENT_PRIORITY (length: 1)
        public string ScheduleLowPriorityAppoint { get; set; } // SCHEDULE_LOW_PRIORITY_APPOINT (length: 1)
        public string EnforceTimeWindowAppoint { get; set; } // ENFORCE_TIME_WINDOW_APPOINT (length: 1)
        public string ScheduleInfeasibleAppoint { get; set; } // SCHEDULE_INFEASIBLE_APPOINT (length: 1)
        public string CountyQualifier { get; set; } // COUNTY_QUALIFIER (length: 50)
        public double? BbMaxCasesPerBatch { get; set; } // BB_MAX_CASES_PER_BATCH
        public string BbIsNewStore { get; set; } // BB_IS_NEW_STORE (length: 1)
        public string BbOrderSplitMethod { get; set; } // BB_ORDER_SPLIT_METHOD (length: 20)
        public string ExcludeFromRouteExecution { get; set; } // EXCLUDE_FROM_ROUTE_EXECUTION (length: 1)
        public double? AppointDisplay { get; set; } // APPOINT_DISPLAY
        public double? AppointDisplayBase { get; set; } // APPOINT_DISPLAY_BASE
        public string AppointDisplayUomCode { get; set; } // APPOINT_DISPLAY_UOM_CODE (length: 64)
        public double? AppointDisplayStartTime { get; set; } // APPOINT_DISPLAY_START_TIME
        public string PickupRoutingSequenceGid { get; set; } // PICKUP_ROUTING_SEQUENCE_GID (length: 101)
        public string DropoffRoutingSequenceGid { get; set; } // DROPOFF_ROUTING_SEQUENCE_GID (length: 101)
        public string PostalSplcGid { get; set; } // POSTAL_SPLC_GID (length: 101)
        public string RailSplcGid { get; set; } // RAIL_SPLC_GID (length: 101)
        public string RailStationCodeGid { get; set; } // RAIL_STATION_CODE_GID (length: 101)
        public string ErpcGid { get; set; } // ERPC_GID (length: 101)
        public string RailJunctionCodeGid { get; set; } // RAIL_JUNCTION_CODE_GID (length: 101)
        public string ServingServprovProfileGid { get; set; } // SERVING_SERVPROV_PROFILE_GID (length: 101)
        public string YardRowLabels { get; set; } // YARD_ROW_LABELS (length: 2000)
        public string YardSlotLabels { get; set; } // YARD_SLOT_LABELS (length: 2000)
        public string IsTemplate { get; set; } // IS_TEMPLATE (length: 1)
        public string Description { get; set; } // DESCRIPTION (length: 120)
        public double? StandingApptCutoffWindow { get; set; } // STANDING_APPT_CUTOFF_WINDOW
        public string AllowDriverRest { get; set; } // ALLOW_DRIVER_REST (length: 1)
        public string ApptObjectType { get; set; } // APPT_OBJECT_TYPE (length: 1)
        public double? ApptSearchDays { get; set; } // APPT_SEARCH_DAYS
        public double? ApptShowNumberOfOptions { get; set; } // APPT_SHOW_NUMBER_OF_OPTIONS
        public string AppointmentActivityType { get; set; } // APPOINTMENT_ACTIVITY_TYPE (length: 30)
        public string IsFixedAddress { get; set; } // IS_FIXED_ADDRESS (length: 1)
        public double PrimaryAddressLineSeq { get; set; } // PRIMARY_ADDRESS_LINE_SEQ
        public string DomainName { get; set; } // DOMAIN_NAME (length: 50)
        public string InsertUser { get; set; } // INSERT_USER (length: 128)
        public DateTime InsertDate { get; set; } // INSERT_DATE
        public string UpdateUser { get; set; } // UPDATE_USER (length: 128)
        public DateTime? UpdateDate { get; set; } // UPDATE_DATE
        public string Attribute1 { get; set; } // ATTRIBUTE1 (length: 150)
        public string Attribute2 { get; set; } // ATTRIBUTE2 (length: 150)
        public string Attribute3 { get; set; } // ATTRIBUTE3 (length: 150)
        public string Attribute4 { get; set; } // ATTRIBUTE4 (length: 150)
        public string Attribute5 { get; set; } // ATTRIBUTE5 (length: 150)
        public string Attribute6 { get; set; } // ATTRIBUTE6 (length: 150)
        public string Attribute7 { get; set; } // ATTRIBUTE7 (length: 150)
        public string Attribute8 { get; set; } // ATTRIBUTE8 (length: 150)
        public string Attribute9 { get; set; } // ATTRIBUTE9 (length: 150)
        public string Attribute10 { get; set; } // ATTRIBUTE10 (length: 150)
        public string Attribute11 { get; set; } // ATTRIBUTE11 (length: 150)
        public string Attribute12 { get; set; } // ATTRIBUTE12 (length: 150)
        public string Attribute13 { get; set; } // ATTRIBUTE13 (length: 150)
        public string Attribute14 { get; set; } // ATTRIBUTE14 (length: 150)
        public string Attribute15 { get; set; } // ATTRIBUTE15 (length: 150)
        public string Attribute16 { get; set; } // ATTRIBUTE16 (length: 150)
        public string Attribute17 { get; set; } // ATTRIBUTE17 (length: 150)
        public string Attribute18 { get; set; } // ATTRIBUTE18 (length: 150)
        public string Attribute19 { get; set; } // ATTRIBUTE19 (length: 150)
        public string Attribute20 { get; set; } // ATTRIBUTE20 (length: 150)
        public double? AttributeNumber1 { get; set; } // ATTRIBUTE_NUMBER1
        public double? AttributeNumber2 { get; set; } // ATTRIBUTE_NUMBER2
        public double? AttributeNumber3 { get; set; } // ATTRIBUTE_NUMBER3
        public double? AttributeNumber4 { get; set; } // ATTRIBUTE_NUMBER4
        public double? AttributeNumber5 { get; set; } // ATTRIBUTE_NUMBER5
        public double? AttributeNumber6 { get; set; } // ATTRIBUTE_NUMBER6
        public double? AttributeNumber7 { get; set; } // ATTRIBUTE_NUMBER7
        public double? AttributeNumber8 { get; set; } // ATTRIBUTE_NUMBER8
        public double? AttributeNumber9 { get; set; } // ATTRIBUTE_NUMBER9
        public double? AttributeNumber10 { get; set; } // ATTRIBUTE_NUMBER10
        public DateTime? AttributeDate1 { get; set; } // ATTRIBUTE_DATE1
        public DateTime? AttributeDate2 { get; set; } // ATTRIBUTE_DATE2
        public DateTime? AttributeDate3 { get; set; } // ATTRIBUTE_DATE3
        public DateTime? AttributeDate4 { get; set; } // ATTRIBUTE_DATE4
        public DateTime? AttributeDate5 { get; set; } // ATTRIBUTE_DATE5
        public DateTime? AttributeDate6 { get; set; } // ATTRIBUTE_DATE6
        public DateTime? AttributeDate7 { get; set; } // ATTRIBUTE_DATE7
        public DateTime? AttributeDate8 { get; set; } // ATTRIBUTE_DATE8
        public DateTime? AttributeDate9 { get; set; } // ATTRIBUTE_DATE9
        public DateTime? AttributeDate10 { get; set; } // ATTRIBUTE_DATE10
        public string IsActive { get; set; } // IS_ACTIVE (length: 1)
        public DateTime? AddressUpdateDate { get; set; } // ADDRESS_UPDATE_DATE
        public string LocationAddress { get; set; } // LOCATION_ADDRESS (length: 1000)
        public DateTime? Syndate { get; set; } // SYNDATE
        public string Cdcd { get; set; } // CDCD (length: 10)
        public string GiaoLau { get; set; } // GIAO_LAU (length: 10)
        public string CamGio { get; set; } // CAM_GIO (length: 10)
        public string CamTai { get; set; } // CAM_TAI (length: 10)
        public string KiemDem { get; set; } // KIEM_DEM (length: 10)
        public string DiemKho { get; set; } // DIEM_KHO (length: 10)
    }

    // OTM_OrderBooking_S
    public class OtmOrderBookingS
    {
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 30)
        public string UpdatedBy { get; set; } // UpdatedBy (Primary key) (length: 30)
        public DateTime CreateDate { get; set; } // CreateDate (Primary key)
        public DateTime RecordDate { get; set; } // RecordDate (Primary key)
        public Guid RowPointer { get; set; } // RowPointer (Primary key)
        public byte NoteExistsFlag { get; set; } // NoteExistsFlag (Primary key)
        public byte InWorkflow { get; set; } // InWorkflow (Primary key)
        public string OrderBookingId { get; set; } // OrderBookingID (Primary key) (length: 101)
        public int LineNum { get; set; } // LineNum (Primary key)
        public string CustomerCode { get; set; } // CustomerCode (Primary key) (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 300)
        public string OrderReleaseType { get; set; } // OrderReleaseType (length: 101)
        public string ShipFromCode { get; set; } // ShipFromCode (Primary key) (length: 50)
        public string ShipFromName { get; set; } // ShipFromName (length: 360)
        public string ShipFromAddress { get; set; } // ShipFromAddress (length: 2000)
        public string ShipToCode { get; set; } // ShipToCode (Primary key) (length: 50)
        public string ShipToName { get; set; } // ShipToName (length: 360)
        public string ShipToAddress { get; set; } // ShipToAddress (length: 2000)
        public DateTime EarlyPickupDate { get; set; } // EarlyPickupDate (Primary key)
        public DateTime? LatePickupDate { get; set; } // LatePickupDate
        public DateTime EarlyDeliveryDate { get; set; } // EarlyDeliveryDate (Primary key)
        public DateTime? LateDeliveryDate { get; set; } // LateDeliveryDate
        public string TruckType { get; set; } // TruckType (length: 101)
        public string PackagedItemXid { get; set; } // Packaged_Item_XID (Primary key) (length: 50)
        public string ItemXid { get; set; } // ItemXid (length: 101)
        public double? BookingQuantity { get; set; } // BookingQuantity
        public double? BookingWeight { get; set; } // BookingWeight
        public double? BookingVolume { get; set; } // BookingVolume
        public string CashOnDelivery { get; set; } // CashOnDelivery (Primary key) (length: 1)
        public decimal? CodAmount { get; set; } // CODAmount
        public string ShippingInstruction { get; set; } // ShippingInstruction (length: 4000)
        public string ServiceProvider { get; set; } // ServiceProvider (length: 50)
        public string Mode { get; set; } // Mode (Primary key) (length: 30)
        public string RouteNo { get; set; } // RouteNo (length: 50)
        public string LocAttribute1 { get; set; } // Loc_Attribute1 (length: 150)
        public int? ReferenceTransmissionNo { get; set; } // ReferenceTransmissionNo
        public string Status { get; set; } // Status (length: 50)
        public string ErrorMsg { get; set; } // ErrorMsg (length: 4000)
        public string InsertUser { get; set; } // Insert_User (length: 128)
        public DateTime? InsertDate { get; set; } // Insert_Date
        public string UpdateUser { get; set; } // Update_User (length: 128)
        public DateTime? UpdateDate { get; set; } // Update_Date
        public string OrderReleaseGid { get; set; } // OrderRelease_GID (length: 101)
        public string OrderReleaseXid { get; set; } // OrderRelease_XID (length: 50)
        public string StatusShipment { get; set; } // Status_Shipment (length: 50)
        public string ShipmentGid { get; set; } // Shipment_GID (length: 50)
        public string ShipmentXid { get; set; } // Shipment_XID (length: 101)
        public string BulkPlanGid { get; set; } // BulkPlan_GID (length: 101)
        public string BulkPlanXid { get; set; } // BulkPlan_XID (length: 50)
        public string ItineraryGid { get; set; } // Itinerary_GID (length: 101)
        public string ItineraryXid { get; set; } // Itinerary_XID (length: 50)
        public string BuyShipmentId { get; set; } // BuyShipmentID (length: 101)
        public DateTime? CreateShipmentDate { get; set; } // Create_Shipment_Date
        public double? ShipmentTranmissionNo { get; set; } // ShipmentTranmissionNo
        public string ShipmentErrorMsg { get; set; } // Shipment_ErrorMsg (length: 4000)
        public bool? CheckBox { get; set; } // CheckBox
        public string TempId { get; set; } // TempID (length: 50)
        public string DriverGid { get; set; } // Driver_GID (length: 101)
        public string PowerUnitGid { get; set; } // Power_Unit_GID (length: 101)
        public string DriverGid2 { get; set; } // Driver_GID_2 (length: 101)
        public string AtmShipmentId { get; set; } // ATM_SHIPMENT_ID (length: 101)
        public int? Parentlinenum { get; set; } // parentlinenum
        public string OrderReleaseLineGid { get; set; } // Order_Release_Line_GID (length: 101)
        public string OrderReleaseLineXid { get; set; } // Order_Release_Line_XID (length: 50)

        public OtmOrderBookingS()
        {
            CreatedBy = "suser_sname()";
            UpdatedBy = "suser_sname()";
            CreateDate = DateTime.Now;
            RecordDate = DateTime.Now;
            RowPointer = Guid.NewGuid();
            NoteExistsFlag = 0;
            InWorkflow = 0;
            CheckBox = false;
        }
    }

    // OutsourcedJobs
    public class OutsourcedJob
    {
        public Guid OutsourcedJobId { get; set; } // OutsourcedJobID (Primary key)
        public int? PayRollMonthId { get; set; } // PayRollMonthID
        public DateTime OutsourcedJobDate { get; set; } // OutsourcedJobDate
        public string CreatedBy { get; set; } // CreatedBy (length: 300)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool Confirmed { get; set; } // Confirmed
        public string Remark { get; set; } // Remark (length: 300)
        public decimal? UnitPrice { get; set; } // UnitPrice
        public Guid? OtherServiceDetailId { get; set; } // OtherServiceDetailID
        public Guid CustomerMainId { get; set; } // CustomerMainID
        public DateTime? FromTime { get; set; } // FromTime
        public DateTime? ToTime { get; set; } // ToTime
        public bool Accepted { get; set; } // Accepted
        public string AcceptedBy { get; set; } // AcceptedBy (length: 20)
        public bool Rejected { get; set; } // Rejected
        public string RejectedBy { get; set; } // RejectedBy (length: 20)
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 150)
        public byte[] Ts { get; set; } // ts
        public Guid OutsourcedJobDefinitionId { get; set; } // OutsourcedJobDefinitionID
        public int? OutsourcedJobLocalId { get; set; } // OutsourcedJobLocalID
        public string OutsourcedJobNumber { get; set; } // OutsourcedJobNumber (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child OutsourcedJobDetails where [OutsourcedJobDetails].[OutsourcedJobID] point to this entity (FK_OutsourcedJobDetails_OutsourcedJobs)
        /// </summary>
        public virtual ICollection<OutsourcedJobDetail> OutsourcedJobDetails { get; set; } // OutsourcedJobDetails.FK_OutsourcedJobDetails_OutsourcedJobs

        // Foreign keys

        /// <summary>
        /// Parent OutsourcedJobDefinition pointed by [OutsourcedJobs].([OutsourcedJobDefinitionId]) (FK_OutsourcedJobs_OutsourcedJobDefinitions)
        /// </summary>
        public virtual OutsourcedJobDefinition OutsourcedJobDefinition { get; set; } // FK_OutsourcedJobs_OutsourcedJobDefinitions

        public OutsourcedJob()
        {
            OutsourcedJobId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Confirmed = false;
            Rejected = false;
            OutsourcedJobDetails = new List<OutsourcedJobDetail>();
        }
    }

    // OutsourcedJobDefinitions
    public class OutsourcedJobDefinition
    {
        public Guid OutsourcedJobDefinitionId { get; set; } // OutsourcedJobDefinitionID (Primary key)
        public string OutsourcedJobDefinitionNumber { get; set; } // OutsourcedJobDefinitionNumber (length: 10)
        public string Description { get; set; } // Description (length: 200)
        public string Remark { get; set; } // Remark (length: 200)
        public decimal? UnitPrice { get; set; } // UnitPrice
        public string Unit { get; set; } // Unit (length: 10)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 40)
        public bool? Discontinued { get; set; } // Discontinued
        public Guid? ServiceDefinitionId { get; set; } // ServiceDefinitionID
        public Guid? CustomerMainId { get; set; } // CustomerMainID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)

        // Reverse navigation

        /// <summary>
        /// Child OutsourcedJobs where [OutsourcedJobs].[OutsourcedJobDefinitionID] point to this entity (FK_OutsourcedJobs_OutsourcedJobDefinitions)
        /// </summary>
        public virtual ICollection<OutsourcedJob> OutsourcedJobs { get; set; } // OutsourcedJobs.FK_OutsourcedJobs_OutsourcedJobDefinitions

        public OutsourcedJobDefinition()
        {
            OutsourcedJobDefinitionId = Guid.NewGuid();
            Discontinued = false;
            CreatedTime = DateTime.Now;
            OutsourcedJobs = new List<OutsourcedJob>();
        }
    }

    // OutsourcedJobDetails
    public class OutsourcedJobDetail
    {
        public Guid OutsourcedJobDetailId { get; set; } // OutsourcedJobDetailID (Primary key)
        public Guid OutsourcedJobId { get; set; } // OutsourcedJobID
        public Guid EmployeeId { get; set; } // EmployeeID
        public decimal Quantity { get; set; } // Quantity
        public string OutsourcedJobDetailRemark { get; set; } // OutsourcedJobDetailRemark (length: 200)
        public bool CheckDelete { get; set; } // CheckDelete
        public byte[] Ts { get; set; } // ts
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        // Foreign keys

        /// <summary>
        /// Parent OutsourcedJob pointed by [OutsourcedJobDetails].([OutsourcedJobId]) (FK_OutsourcedJobDetails_OutsourcedJobs)
        /// </summary>
        public virtual OutsourcedJob OutsourcedJob { get; set; } // FK_OutsourcedJobDetails_OutsourcedJobs

        public OutsourcedJobDetail()
        {
            OutsourcedJobDetailId = Guid.NewGuid();
            CheckDelete = false;
            CreatedTime = DateTime.Now;
        }
    }

    // PackageDefinition
    public class PackageDefinition
    {
        public string Packages { get; set; } // Packages (Primary key) (length: 15)
        public string Description { get; set; } // Description (length: 50)
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public bool? IsPackage { get; set; } // IsPackage
        public int? MaxQty { get; set; } // MaxQty
        public double? Hight { get; set; } // Hight
        public double? Width { get; set; } // Width
        public double? Lenght { get; set; } // Lenght

        public PackageDefinition()
        {
            IsPackage = false;
        }
    }

    // Pallets
    /// <summary>
    /// 2
    /// ((Pallets.PalletID=5766582))
    /// False
    /// 0
    /// 500000
    /// </summary>
    public class Pallet
    {
        public Guid PalletId { get; set; } // PalletID (Primary key)

        /// <summary>
        /// 1188
        /// </summary>
        public long? PalletNumber { get; set; } // PalletNumber
        public Guid LocationId { get; set; } // LocationID

        /// <summary>
        /// 0
        /// </summary>
        public string Label { get; set; } // Label (length: 15)
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID

        /// <summary>
        /// -1
        /// </summary>
        public short OriginalQuantity { get; set; } // OriginalQuantity

        /// <summary>
        /// 109
        /// </summary>
        public short AfterDpQuantity { get; set; } // AfterDPQuantity

        /// <summary>
        /// 1512
        /// </summary>
        public short CurrentQuantity { get; set; } // CurrentQuantity

        /// <summary>
        /// 852
        /// </summary>
        public bool OnHold { get; set; } // OnHold

        /// <summary>
        /// 1032
        /// </summary>
        public byte Status { get; set; } // status

        /// <summary>
        /// 1152
        /// </summary>
        public bool CanMove { get; set; } // CanMove

        /// <summary>
        /// 996
        /// </summary>
        public string Remark { get; set; } // Remark (length: 800)

        /// <summary>
        /// -1
        /// </summary>
        public bool CanNotAdd { get; set; } // CanNotAdd

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// 109
        /// </summary>
        public int? UnitQuantity { get; set; } // UnitQuantity

        /// <summary>
        /// -1
        /// </summary>
        public float? PalletWeight { get; set; } // PalletWeight
        public byte? PalletStatus { get; set; } // PalletStatus
        public string ReceivingScannedBy { get; set; } // ReceivingScannedBy (length: 50)
        public DateTime? ReceivingScannedTime { get; set; } // ReceivingScannedTime

        /// <summary>
        /// Bỏ
        /// </summary>
        public string PutAwayScannedBy { get; set; } // PutAwayScannedBy (length: 50)
        public DateTime? PutAwayScannedTime { get; set; } // PutAwayScannedTime
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string LotSerNbr { get; set; } // LotSerNbr (length: 100)
        public int? ActualQuantity { get; set; } // ActualQuantity
        public string ReceivedBy { get; set; } // ReceivedBy (length: 50)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string Reference { get; set; } // Reference (length: 800)

        // Reverse navigation

        /// <summary>
        /// Child DispatchingOrderDetails where [DispatchingOrderDetails].[PalletID] point to this entity (FK_DispatchingOrderDetails_Pallets)
        /// </summary>
        public virtual ICollection<DispatchingOrderDetail> DispatchingOrderDetails { get; set; } // DispatchingOrderDetails.FK_DispatchingOrderDetails_Pallets

        /// <summary>
        /// Child PalletCartons where [PalletCartons].[PalletID] point to this entity (FK_PalletCartons_Pallets)
        /// </summary>
        public virtual ICollection<PalletCarton> PalletCartons { get; set; } // PalletCartons.FK_PalletCartons_Pallets

        // Foreign keys

        /// <summary>
        /// Parent Location pointed by [Pallets].([LocationId]) (FK_Pallets_Locations)
        /// </summary>
        public virtual Location Location { get; set; } // FK_Pallets_Locations

        /// <summary>
        /// Parent ReceivingOrderDetail pointed by [Pallets].([ReceivingOrderDetailId]) (FK_Pallets_ReceivingOrderDetails)
        /// </summary>
        public virtual ReceivingOrderDetail ReceivingOrderDetail { get; set; } // FK_Pallets_ReceivingOrderDetails

        public Pallet()
        {
            PalletId = Guid.NewGuid();
            OriginalQuantity = 0;
            AfterDpQuantity = 0;
            CurrentQuantity = 0;
            OnHold = false;
            Status = 0;
            CanMove = false;
            CanNotAdd = false;
            UnitQuantity = 0;
            PalletWeight = 0f;
            PalletStatus = 0;
            CreatedTime = DateTime.Now;
            ActualQuantity = 0;
            DispatchingOrderDetails = new List<DispatchingOrderDetail>();
            PalletCartons = new List<PalletCarton>();
        }
    }

    // PalletCartons
    public class PalletCarton
    {
        public Guid PalletCartonId { get; set; } // PalletCartonID (Primary key)
        public long? PalletCartonNumber { get; set; } // PalletCartonNumber
        public Guid PalletId { get; set; } // PalletID
        public float? CartonWeight { get; set; } // CartonWeight
        public string PalletRemark { get; set; } // PalletRemark (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 100)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? PalletGrossWeight { get; set; } // PalletGrossWeight
        public int? CartonUnits { get; set; } // CartonUnits
        public bool? CheckDelete { get; set; } // CheckDelete
        public decimal? CartonWeightPay { get; set; } // CartonWeightPay
        public int? StoreId { get; set; } // StoreID
        public DateTime? ProDate { get; set; } // ProDate
        public bool? IsRecordNew { get; set; } // IsRecordNew
        public string BarcodeString { get; set; } // BarcodeString (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)

        // Foreign keys

        /// <summary>
        /// Parent Pallet pointed by [PalletCartons].([PalletId]) (FK_PalletCartons_Pallets)
        /// </summary>
        public virtual Pallet Pallet { get; set; } // FK_PalletCartons_Pallets

        public PalletCarton()
        {
            PalletCartonId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            CartonUnits = 0;
            CheckDelete = false;
            IsRecordNew = true;
        }
    }

    // PalletHoldings
    /// <summary>
    /// 2
    /// PalletHoldings.PalletHoldingID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class PalletHolding
    {
        public Guid PalletHoldingId { get; set; } // PalletHoldingID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string PalletHoldingBy { get; set; } // PalletHoldingBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string PalletHoldingDescription { get; set; } // PalletHoldingDescription (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime PalletHoldingTime { get; set; } // PalletHoldingTime

        /// <summary>
        /// 0
        /// </summary>
        public bool OnHold { get; set; } // OnHold
        public byte? PalletStatus { get; set; } // PalletStatus
        public Guid PalletId { get; set; } // PalletID

        public PalletHolding()
        {
            PalletHoldingId = Guid.NewGuid();
            PalletHoldingTime = DateTime.Now;
            OnHold = false;
        }
    }

    // PalletRelated
    public class PalletRelated
    {
        public int PalletRelatedId { get; set; } // PalletRelatedID (Primary key)
        public int PalletId { get; set; } // PalletID (Primary key)
        public int? DiaptchingOrderDetailId { get; set; } // DiaptchingOrderDetailID
    }

    // PalletStatus
    public class PalletStatu
    {
        public byte PalletStatus { get; set; } // PalletStatus (Primary key)
        public string PalletStatusDescription { get; set; } // PalletStatusDescription (length: 200)
        public string PalletStatusDescriptionVietnam { get; set; } // PalletStatusDescriptionVietnam (length: 250)
        public bool? IsHold { get; set; } // IsHold
    }

    // Parts
    /// <summary>
    /// System.Byte[]
    /// ((PartGroupID=6))
    /// Parts.PartID DESC
    /// 1
    /// System.Byte[]
    /// 0
    /// </summary>
    public class Part
    {
        /// <summary>
        /// 1152
        /// </summary>
        public int PartId { get; set; } // PartID (Primary key)

        /// <summary>
        /// 3732
        /// </summary>
        public string PartName { get; set; } // PartName (length: 200)

        /// <summary>
        /// 2448
        /// </summary>
        public string PartOriginal { get; set; } // PartOriginal (length: 50)

        /// <summary>
        /// cho phep null va duplicate tam
        /// </summary>
        public string PartNumber { get; set; } // PartNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public int PartGroupId { get; set; } // PartGroupID

        /// <summary>
        /// 0
        /// </summary>
        public int? PartCategoryId { get; set; } // PartCategoryID

        /// <summary>
        /// 0
        /// </summary>
        public string EquipmentGroupId { get; set; } // EquipmentGroupID (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public int? LocationId { get; set; } // LocationID

        /// <summary>
        /// -1
        /// </summary>
        public string PartRemark { get; set; } // PartRemark (length: 300)

        /// <summary>
        /// tam Allow Null
        /// </summary>
        public int? CategoryId { get; set; } // CategoryID

        /// <summary>
        /// -1
        /// </summary>
        public string PropertyModelAndSpecification { get; set; } // PropertyModelAndSpecification (length: 300)

        /// <summary>
        /// -1
        /// </summary>
        public string Unit { get; set; } // Unit (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public float? UnitPriceVnd { get; set; } // UnitPriceVND

        /// <summary>
        /// -1
        /// </summary>
        public float? UnitPriceUsd { get; set; } // UnitPriceUSD

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? PartEntryTime { get; set; } // PartEntryTime

        /// <summary>
        /// 0
        /// </summary>
        public string PartOwner { get; set; } // PartOwner (length: 25)

        /// <summary>
        /// IT
        /// </summary>
        public string ItEquipmentSpecification { get; set; } // ITEquipmentSpecification (length: 250)

        /// <summary>
        /// tmp
        /// </summary>
        public int? SupplierId { get; set; } // SupplierID

        /// <summary>
        /// tmp
        /// </summary>
        public DateTime? ItEquipmentBuyingDate { get; set; } // ITEquipmentBuyingDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public string PartOriginalType { get; set; } // PartOriginalType (length: 25)
        public int? PropertyOldId { get; set; } // PropertyOldID
        public bool? Discontinue { get; set; } // Discontinue
        public byte[] Ts { get; set; } // ts
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)
        public int? PropertyCategoryId { get; set; } // PropertyCategoryID

        // Reverse navigation

        /// <summary>
        /// Child PurchasingOrderDetails where [PurchasingOrderDetails].[PartID] point to this entity (FK_PurchasingOrderDetails_Parts)
        /// </summary>
        public virtual ICollection<PurchasingOrderDetail> PurchasingOrderDetails { get; set; } // PurchasingOrderDetails.FK_PurchasingOrderDetails_Parts

        /// <summary>
        /// Child ReceivedPartDetails where [ReceivedPartDetails].[PartID] point to this entity (FK_ReceivedPartDetails_Parts)
        /// </summary>
        public virtual ICollection<ReceivedPartDetail> ReceivedPartDetails { get; set; } // ReceivedPartDetails.FK_ReceivedPartDetails_Parts

        // Foreign keys

        /// <summary>
        /// Parent PartCategory pointed by [Parts].([PartCategoryId]) (FK_Parts_PartCategories)
        /// </summary>
        public virtual PartCategory PartCategory { get; set; } // FK_Parts_PartCategories

        /// <summary>
        /// Parent PartGroup pointed by [Parts].([PartGroupId]) (FK_Parts_PartGroups1)
        /// </summary>
        public virtual PartGroup PartGroup { get; set; } // FK_Parts_PartGroups1

        public Part()
        {
            PartGroupId = 1;
            PartEntryTime = DateTime.Now;
            Discontinue = false;
            PurchasingOrderDetails = new List<PurchasingOrderDetail>();
            ReceivedPartDetails = new List<ReceivedPartDetail>();
        }
    }

    // PartCategories
    /// <summary>
    /// System.Byte[]
    /// 0
    /// System.Byte[]
    /// 10000
    /// </summary>
    public class PartCategory
    {
        /// <summary>
        /// -1
        /// </summary>
        public int PartCategoryId { get; set; } // PartCategoryID (Primary key)

        /// <summary>
        /// 4188
        /// </summary>
        public string PartCategoryDescription { get; set; } // PartCategoryDescription (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Parts where [Parts].[PartCategoryID] point to this entity (FK_Parts_PartCategories)
        /// </summary>
        public virtual ICollection<Part> Parts { get; set; } // Parts.FK_Parts_PartCategories

        public PartCategory()
        {
            Parts = new List<Part>();
        }
    }

    // PartGroups
    /// <summary>
    /// System.Byte[]
    /// 0
    /// System.Byte[]
    /// 10000
    /// </summary>
    public class PartGroup
    {
        /// <summary>
        /// -1
        /// </summary>
        public int PartGroupId { get; set; } // PartGroupID (Primary key)

        /// <summary>
        /// 2688
        /// </summary>
        public string PartGroupDescription { get; set; } // PartGroupDescription (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)

        // Reverse navigation

        /// <summary>
        /// Child Parts where [Parts].[PartGroupID] point to this entity (FK_Parts_PartGroups1)
        /// </summary>
        public virtual ICollection<Part> Parts { get; set; } // Parts.FK_Parts_PartGroups1

        public PartGroup()
        {
            Parts = new List<Part>();
        }
    }

    // PayRollDetails
    /// <summary>
    /// 2
    /// ((EmployeeID=219))
    /// PayRollDetails.PayrollDate DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class PayRollDetail
    {
        /// <summary>
        /// -1
        /// </summary>
        public int PayrollDetailId { get; set; } // PayrollDetailID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime PayrollDate { get; set; } // PayrollDate

        /// <summary>
        /// -1
        /// </summary>
        public float Ots { get; set; } // OTS

        /// <summary>
        /// -1
        /// </summary>
        public float Otn { get; set; } // OTN

        /// <summary>
        /// Holiday
        /// </summary>
        public float Oth { get; set; } // OTH

        /// <summary>
        /// -1
        /// </summary>
        public bool Sick { get; set; } // Sick

        /// <summary>
        /// -1
        /// </summary>
        public bool Leave { get; set; } // Leave

        /// <summary>
        /// -1
        /// </summary>
        public bool Haft { get; set; } // Haft

        /// <summary>
        /// -1
        /// </summary>
        public bool Off { get; set; } // Off

        /// <summary>
        /// 1830
        /// </summary>
        public string TimeWork { get; set; } // TimeWork (length: 100)

        /// <summary>
        /// -1
        /// </summary>
        public bool SunHol { get; set; } // SunHol

        /// <summary>
        /// 2370
        /// </summary>
        public string User { get; set; } // User (length: 300)

        /// <summary>
        /// 0
        /// </summary>
        public string GuardRemark { get; set; } // GuardRemark (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public byte? SystemLeave { get; set; } // SystemLeave

        /// <summary>
        /// 0
        /// </summary>
        public byte? Lunch { get; set; } // Lunch

        /// <summary>
        /// 0
        /// </summary>
        public byte? Noodles { get; set; } // Noodles

        /// <summary>
        /// 0
        /// </summary>
        public byte? Milk { get; set; } // Milk

        /// <summary>
        /// 0
        /// </summary>
        public bool LunchCompensate { get; set; } // LunchCompensate

        /// <summary>
        /// 0
        /// </summary>
        public string BenefitUser { get; set; } // BenefitUser (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// -1
        /// </summary>
        public string PayrollRemark { get; set; } // PayrollRemark (length: 255)

        /// <summary>
        /// -1
        /// </summary>
        public bool? NightShift { get; set; } // NightShift

        /// <summary>
        /// -1
        /// </summary>
        public bool? HolidayDay { get; set; } // HolidayDay

        /// <summary>
        /// -1
        /// </summary>
        public string LunchPlace { get; set; } // LunchPlace (length: 2)
        public float Otnn { get; set; } // OTNN
        public float Otsn { get; set; } // OTSN

        /// <summary>
        /// Holiday
        /// </summary>
        public float Othn { get; set; } // OTHN
        public float Otnn43 { get; set; } // OTNN+
        public Guid EmployeeId { get; set; } // EmployeeID

        public PayRollDetail()
        {
            Ots = 0f;
            Otn = 0f;
            Oth = 0f;
            Sick = false;
            Leave = false;
            Haft = false;
            Off = false;
            SunHol = false;
            SystemLeave = 0;
            LunchCompensate = false;
            NightShift = false;
            HolidayDay = false;
            Otnn = 0f;
            Otsn = 0f;
            Othn = 0f;
            Otnn43 = 0f;
        }
    }

    // PayRollEmployeeInvalid
    /// <summary>
    /// 0
    /// </summary>
    public class PayRollEmployeeInvalid
    {
        /// <summary>
        /// 0
        /// </summary>
        public int PayRollEmployeeInvalidId { get; set; } // PayRollEmployeeInvalidID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? PayrollDate { get; set; } // PayrollDate

        /// <summary>
        /// 0
        /// </summary>
        public string TimeWork { get; set; } // TimeWork (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public string Reason { get; set; } // Reason (length: 250)
    }

    // PayRollGradedPayments
    /// <summary>
    /// 0
    /// </summary>
    public class PayRollGradedPayment
    {
        /// <summary>
        /// 0
        /// </summary>
        public string Grade { get; set; } // Grade (Primary key) (length: 2)

        /// <summary>
        /// 0
        /// </summary>
        public double? Percentage { get; set; } // Percentage
    }

    // PayrollMonth
    /// <summary>
    /// 2
    /// PayrollMonth.PayRollMonthID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class PayrollMonth
    {
        /// <summary>
        /// 1572
        /// </summary>
        public int PayRollMonthId { get; set; } // PayRollMonthID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string PayRollMonth { get; set; } // PayRollMonth (length: 25)

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public int? WorkingDays { get; set; } // WorkingDays

        /// <summary>
        /// -1
        /// </summary>
        public int? SundayHoliday { get; set; } // SundayHoliday

        /// <summary>
        /// -1
        /// </summary>
        public int? PayableHoliday { get; set; } // PayableHoliday

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? FromDate { get; set; } // FromDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? ToDate { get; set; } // ToDate

        /// <summary>
        /// 2424
        /// </summary>
        public bool PayrollMonthConfirm { get; set; } // PayrollMonthConfirm

        /// <summary>
        /// 0
        /// </summary>
        public bool PayrollMonthLock { get; set; } // PayrollMonthLock

        /// <summary>
        /// 0
        /// </summary>
        public string AcceptBy { get; set; } // AcceptBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string AccountingUser { get; set; } // AccountingUser (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // ts

        /// <summary>
        /// 0
        /// </summary>
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? AccountingTime { get; set; } // AccountingTime

        /// <summary>
        /// 0
        /// </summary>
        public bool? AccountingConfirm { get; set; } // AccountingConfirm
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public PayrollMonth()
        {
            PayrollMonthConfirm = false;
            PayrollMonthLock = false;
            AccountingConfirm = false;
            CreatedTime = DateTime.Now;
        }
    }

    // PayrollMonthlyDetails
    /// <summary>
    /// 2
    /// ((PayrollMonthlyDetails.EmployeeID=273))
    /// PayrollMonthlyDetails.PayRollMonthID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class PayrollMonthlyDetail
    {
        /// <summary>
        /// -1
        /// </summary>
        public int PayRollMonthlyId { get; set; } // PayRollMonthlyID (Primary key)

        /// <summary>
        /// 1920
        /// </summary>
        public int? PayRollMonthId { get; set; } // PayRollMonthID

        /// <summary>
        /// -1
        /// </summary>
        public bool? ContractPermanent { get; set; } // ContractPermanent

        /// <summary>
        /// -1
        /// </summary>
        public float? WorkingDays { get; set; } // WorkingDays
        public float? WorkingDayNightShift { get; set; } // WorkingDayNightShift

        /// <summary>
        /// 1020
        /// </summary>
        public float? Ots { get; set; } // OTS

        /// <summary>
        /// 960
        /// </summary>
        public float? Otn { get; set; } // OTN

        /// <summary>
        /// 900
        /// </summary>
        public float? Oth { get; set; } // OTH

        /// <summary>
        /// 1068
        /// </summary>
        public float? Sick { get; set; } // Sick

        /// <summary>
        /// 852
        /// </summary>
        public float? Leave { get; set; } // Leave

        /// <summary>
        /// 732
        /// </summary>
        public float? Haft { get; set; } // Haft

        /// <summary>
        /// 804
        /// </summary>
        public float? Off { get; set; } // Off

        /// <summary>
        /// -1
        /// </summary>
        public string User { get; set; } // User (length: 50)

        /// <summary>
        /// Chuyên cần
        /// </summary>
        public string Abc { get; set; } // ABC (length: 2)

        /// <summary>
        /// -1
        /// </summary>
        public float Performance { get; set; } // Performance

        /// <summary>
        /// -1
        /// </summary>
        public float PerformanceAverage { get; set; } // PerformanceAverage

        /// <summary>
        /// 0
        /// </summary>
        public float? PerformancePercent { get; set; } // PerformancePercent

        /// <summary>
        /// -1
        /// </summary>
        public bool PerformanceStatus { get; set; } // PerformanceStatus

        /// <summary>
        /// -1
        /// </summary>
        public int? PositionId { get; set; } // PositionID

        /// <summary>
        /// -1
        /// </summary>
        public string Position { get; set; } // Position (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public byte? DepartmentId { get; set; } // DepartmentID

        /// <summary>
        /// -1
        /// </summary>
        public byte? ShiftId { get; set; } // ShiftID

        /// <summary>
        /// -1
        /// </summary>
        public string PayRollMonthlyRemark { get; set; } // PayRollMonthlyRemark (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public bool? Advance { get; set; } // Advance

        /// <summary>
        /// 705
        /// </summary>
        public bool? Active { get; set; } // Active

        /// <summary>
        /// 0
        /// </summary>
        public string SupervisorRemark { get; set; } // SupervisorRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string SupervisorUser { get; set; } // SupervisorUser (length: 40)

        /// <summary>
        /// 0
        /// </summary>
        public bool? PersonnelCheck { get; set; } // PersonnelCheck

        /// <summary>
        /// 0
        /// </summary>
        public string PersonnelRemark { get; set; } // PersonnelRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? PersonnelCheckTime { get; set; } // PersonnelCheckTime

        /// <summary>
        /// 0
        /// </summary>
        public bool? SafetyCheck { get; set; } // SafetyCheck

        /// <summary>
        /// 0
        /// </summary>
        public string SafetyRemark { get; set; } // SafetyRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? SafetyCheckTime { get; set; } // SafetyCheckTime

        /// <summary>
        /// 0
        /// </summary>
        public bool? ManagerCheck { get; set; } // ManagerCheck

        /// <summary>
        /// 0
        /// </summary>
        public string ManagerRemark { get; set; } // ManagerRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string ManagerCheckUser { get; set; } // ManagerCheckUser (length: 40)

        /// <summary>
        /// 0
        /// </summary>
        public string AbCtemp { get; set; } // ABCtemp (length: 5)

        /// <summary>
        /// -1
        /// </summary>
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// 0
        /// </summary>
        public bool IsBirthday { get; set; } // IsBirthday
        public string EvaluationSafety { get; set; } // EvaluationSafety (length: 2)
        public string EvaluationPerformance { get; set; } // EvaluationPerformance (length: 2)
        public string EvaluationTime { get; set; } // EvaluationTime (length: 2)
        public string EvaluationAttitude { get; set; } // EvaluationAttitude (length: 2)
        public float? WorkingDayHoliday { get; set; } // WorkingDayHoliday
        public float? Oth43 { get; set; } // OTH+
        public bool? AllowUpdated { get; set; } // AllowUpdated
        public float? Otnn { get; set; } // OTNN
        public float? Otsn { get; set; } // OTSN
        public float? Othn { get; set; } // OTHN
        public float? Otnn43 { get; set; } // OTNN+

        /// <summary>
        /// Chuyên môn
        /// </summary>
        public string Abc1 { get; set; } // ABC1 (length: 2)
        public string EvaluationCreative { get; set; } // EvaluationCreative (length: 2)
        public string PersonnelUser { get; set; } // PersonnelUser (length: 100)
        public int? StoreId { get; set; } // StoreID
        public Guid EmployeeId { get; set; } // EmployeeID

        public PayrollMonthlyDetail()
        {
            WorkingDays = 0f;
            WorkingDayNightShift = 0f;
            Ots = 0f;
            Otn = 0f;
            Oth = 0f;
            Sick = 0f;
            Leave = 0f;
            Abc = "A";
            Performance = 1f;
            PerformanceAverage = 1f;
            PerformanceStatus = true;
            PositionId = 0;
            Advance = false;
            Active = true;
            PersonnelCheck = false;
            SafetyCheck = false;
            ManagerCheck = false;
            IsBirthday = false;
            EvaluationSafety = "B";
            EvaluationPerformance = "B";
            EvaluationTime = "A";
            EvaluationAttitude = "B";
            WorkingDayHoliday = 0f;
            Oth43 = 0f;
            AllowUpdated = true;
            Otnn = 0f;
            Otsn = 0f;
            Othn = 0f;
            Otnn43 = 0f;
            Abc1 = "B";
            EvaluationCreative = "B";
        }
    }

    // PayRollYear
    public class PayRollYear
    {
        /// <summary>
        /// 109
        /// </summary>
        public short PayRollYearId { get; set; } // PayRollYearID (Primary key)
        public DateTime FromDate { get; set; } // FromDate
        public DateTime ToDate { get; set; } // ToDate
    }

    // PickingLists
    public class PickingList
    {
        public string LotNo { get; set; } // Lot_no (length: 50)
        public string TruckNo { get; set; } // Truck_no (length: 400)
        public DateTime? PickDate { get; set; } // Pick_date
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string UserName { get; set; } // UserName (length: 20)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? ExpiryDate { get; set; } // ExpiryDate
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public string ProductRemark { get; set; } // ProductRemark (length: 250)
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? Quantity { get; set; } // Quantity
        public decimal? Weights { get; set; } // Weights
        public int? Units { get; set; } // Units
        public string ClientCode { get; set; } // ClientCode (length: 50)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
        public Guid? CustomerId { get; set; } // CustomerID
        public long? CustomerRefDetailId { get; set; } // CustomerRef_DetailID
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 100)
        public string Packages { get; set; } // Packages (length: 50)
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 50)
        public int Id { get; set; } // id (Primary key)
        public bool? Hold { get; set; } // Hold
        public decimal? PoWeight { get; set; } // PO_WEIGHT
        public decimal? Tolerance { get; set; } // Tolerance
        public string BarcodeString { get; set; } // BarcodeString (length: 50)
        public Guid? EdiOrderId { get; set; } // EDI_OrderID

        /// <summary>
        /// 1: Qty&lt;&gt; 0, Weight &lt;&gt;0; 2: Qty=0, Weight &lt;&gt;0; 3: CheckStock
        /// </summary>
        public int? OrderType { get; set; } // OrderType

        /// <summary>
        /// Pallet Status
        /// </summary>
        public string PalletStatus { get; set; } // PalletStatus (length: 30)
        public DateTime? ProDate { get; set; } // Pro_date
        public DateTime? ExpDate { get; set; } // Exp_date
    }

    // PickingListSorting
    public class PickingListSorting
    {
        public int ShipTo { get; set; } // ShipTo
        public int PalletNumber { get; set; } // PalletNumber
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public int OrderQty { get; set; } // OrderQty
        public int? ActQty { get; set; } // ActQty
        public int? MoveQty { get; set; } // MoveQty
        public int? RemainQty { get; set; } // RemainQty
        public string Version { get; set; } // Version (length: 255)
        public int? ReceivingTotal { get; set; } // ReceivingTotal
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid CustomerId { get; set; } // CustomerID
        public DateTime DeliveryDate { get; set; } // DeliveryDate
        public Guid SortingId { get; set; } // SortingID (Primary key)
        public Guid XdocPickingListId { get; set; } // XdocPickingListID

        public PickingListSorting()
        {
            Version = "1";
            SortingId = Guid.NewGuid();
        }
    }

    // PickingLists_Scan
    public class PickingListsScan
    {
        public string LotNo { get; set; } // Lot_no (length: 50)
        public string TruckNo { get; set; } // Truck_no (length: 400)
        public DateTime? PickDate { get; set; } // Pick_date
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string UserName { get; set; } // UserName (length: 20)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? ExpiryDate { get; set; } // ExpiryDate
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public string ProductRemark { get; set; } // ProductRemark (length: 250)
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? Quantity { get; set; } // Quantity
        public decimal? Weights { get; set; } // Weights
        public int? Units { get; set; } // Units
        public string ClientCode { get; set; } // ClientCode (length: 50)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
        public Guid? CustomerId { get; set; } // CustomerID
        public long? CustomerRefDetailId { get; set; } // CustomerRef_DetailID
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 100)
        public string Packages { get; set; } // Packages (length: 50)
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 50)
        public int Id { get; set; } // id (Primary key)
        public bool? Hold { get; set; } // Hold
        public decimal? PoWeight { get; set; } // PO_WEIGHT
        public decimal? Tolerance { get; set; } // Tolerance
        public string BarcodeString { get; set; } // BarcodeString (length: 50)
        public Guid? EdiOrderId { get; set; } // EDI_OrderID
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public long? BoxId { get; set; } // BoxID
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
    }

    // PickingLists_Scan_AllData
    public class PickingListsScanAllData
    {
        public string LotNo { get; set; } // Lot_no (length: 50)
        public string TruckNo { get; set; } // Truck_no (length: 400)
        public DateTime? PickDate { get; set; } // Pick_date
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string UserName { get; set; } // UserName (length: 20)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? ExpiryDate { get; set; } // ExpiryDate
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public string ProductRemark { get; set; } // ProductRemark (length: 250)
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? Quantity { get; set; } // Quantity
        public decimal? Weights { get; set; } // Weights
        public int? Units { get; set; } // Units
        public string ClientCode { get; set; } // ClientCode (length: 50)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
        public Guid? CustomerId { get; set; } // CustomerID
        public long? CustomerRefDetailId { get; set; } // CustomerRef_DetailID
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 100)
        public string Packages { get; set; } // Packages (length: 50)
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 50)
        public int Id { get; set; } // id (Primary key)
        public bool? Hold { get; set; } // Hold
        public decimal? PoWeight { get; set; } // PO_WEIGHT
        public decimal? Tolerance { get; set; } // Tolerance
        public string BarcodeString { get; set; } // BarcodeString (length: 50)
        public Guid? EdiOrderId { get; set; } // EDI_OrderID
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public PickingListsScanAllData()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // The table 'PickPackShipCrossDockConfirm' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // PickPackShipCrossDockConfirm
    public class PickPackShipCrossDockConfirm
    {
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 255)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 255)
        public string TripNumber { get; set; } // TripNumber (length: 255)
        public string TripId { get; set; } // TripID (length: 255)
        public string AtmVehicleNo { get; set; } // ATM_VehicleNo (length: 255)
        public string OtmOrderBooking { get; set; } // OTM_OrderBooking (length: 255)
        public string ProductNumber { get; set; } // ProductNumber (length: 255)
        public int? Quantity { get; set; } // Quantity
        public decimal? Weights { get; set; } // Weights
        public int? QtyAtc { get; set; } // QtyAtc
        public decimal? WeightAct { get; set; } // WeightAct
        public string LocationGid { get; set; } // LocationGID (length: 255)
        public string AtmTripNumber { get; set; } // ATM_TripNumber (length: 255)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string Packages { get; set; } // Packages (length: 255)
        public string Packages2 { get; set; } // Packages2 (length: 255)
        public string DeliveryDate { get; set; } // DeliveryDate (length: 255)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 255)
        public string CustomerNumberErp { get; set; } // CustomerNumberERP (length: 255)
        public string PalletNumber { get; set; } // PalletNumber (length: 255)
        public string Region { get; set; } // Region (length: 255)
        public string CustomerRefDetailId { get; set; } // CustomerRef_DetailID (length: 255)
        public string EdiOrderNumber { get; set; } // EDI_OrderNumber (length: 30)
    }

    // Positions
    /// <summary>
    /// 2
    /// Positions.PositionID DESC
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class Position
    {
        public int PositionId { get; set; } // PositionID (Primary key)
        public string PositionDescription { get; set; } // PositionDescription (length: 50)
        public string PositionVietnam { get; set; } // PositionVietnam (length: 50)
        public string Remark { get; set; } // Remark (length: 50)
        public byte? ManagementLevel { get; set; } // ManagementLevel
        public bool IsProductivity { get; set; } // isProductivity
        public string CustomerAllocationMethod { get; set; } // CustomerAllocationMethod (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? ReportToPositionId { get; set; } // ReportToPositionID
        public bool? Active { get; set; } // Active
        public byte[] Ts { get; set; } // ts

        // Reverse navigation

        /// <summary>
        /// Child Employees where [Employees].[PositionID] point to this entity (FK_Employees_Positions)
        /// </summary>
        public virtual ICollection<Employee> Employees { get; set; } // Employees.FK_Employees_Positions

        public Position()
        {
            IsProductivity = false;
            CustomerAllocationMethod = "LocationInOut";
            CreatedTime = DateTime.Now;
            Active = true;
            Employees = new List<Employee>();
        }
    }

    // PositionGrades
    public class PositionGrade
    {
        public int PositionGradeId { get; set; } // PositionGradeID (Primary key)
        public int PositionId { get; set; } // PositionID
        public string PositionGradeName { get; set; } // PositionGradeName (length: 100)
        public string PositionGradeDescription { get; set; } // PositionGradeDescription (length: 500)
        public string PositionGradeRequirements { get; set; } // PositionGradeRequirements
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
    }

    // PositionTrainingRequirements
    public class PositionTrainingRequirement
    {
        public int PositionTrainingRequirementId { get; set; } // PositionTrainingRequirementID (Primary key)
        public int? PositionId { get; set; } // PositionID
        public int? TrainingDefinitionId { get; set; } // TrainingDefinitionID
        public short? Frequence { get; set; } // Frequence
        public string DefaultTrainingLocation { get; set; } // DefaultTrainingLocation (length: 100)
        public string Remark { get; set; } // Remark (length: 150)
    }

    // ProblemCategories
    public class ProblemCategory
    {
        public int ProblemCategoryId { get; set; } // ProblemCategoryID (Primary key)
        public string ProblemCategoryDescription { get; set; } // ProblemCategoryDescription (length: 100)
    }

    // Products
    /// <summary>
    /// 2
    /// Products.PickingMethod
    /// True
    /// 0
    /// 100000
    /// </summary>
    public class Product
    {
        public Guid ProductId { get; set; } // ProductID (Primary key)

        /// <summary>
        /// 2730
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 40)

        /// <summary>
        /// 5490
        /// </summary>
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid CustomerId { get; set; } // CustomerID

        /// <summary>
        /// -1
        /// </summary>
        public decimal WeightPerPackage { get; set; } // WeightPerPackage

        /// <summary>
        /// -1
        /// </summary>
        public bool Discontinue { get; set; } // Discontinue

        /// <summary>
        /// -1
        /// </summary>
        public float? TemperatureRequire { get; set; } // TemperatureRequire

        /// <summary>
        /// 1380
        /// </summary>
        public short PackagesPerPallet { get; set; } // PackagesPerPallet

        /// <summary>
        /// 1395
        /// </summary>
        public short? PackagesPerPallet2 { get; set; } // PackagesPerPallet2

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 125)

        /// <summary>
        /// 0
        /// </summary>
        public string Packages { get; set; } // Packages (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public int? PickingLocation { get; set; } // PickingLocation

        /// <summary>
        /// -1
        /// </summary>
        public short Inners { get; set; } // Inners

        /// <summary>
        /// 0
        /// </summary>
        public bool PickingMethod { get; set; } // PickingMethod

        /// <summary>
        /// 0
        /// </summary>
        public int ProductCategory { get; set; } // ProductCategory

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS
        public int? WarehouseNo { get; set; } // WAREHOUSE_NO
        public decimal? GrossWeightPerPackage { get; set; } // GrossWeightPerPackage
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 100)
        public string ProductNameVn { get; set; } // ProductNameVN (length: 100)
        public byte? ProductCategoryId { get; set; } // ProductCategoryID
        public short? WarningDaysBeforeExpiry { get; set; } // WarningDaysBeforeExpiry
        public bool? IsWeightingRequire { get; set; } // IsWeightingRequire
        public bool? IsAllowLocationChange { get; set; } // IsAllowLocationChange
        public string Origin { get; set; } // Origin (length: 50)
        public decimal? Cbm { get; set; } // CBM
        public int? SafetyStock { get; set; } // SafetyStock
        public short? Pcs { get; set; } // Pcs
        public Guid? HomeRoom1 { get; set; } // HomeRoom1
        public Guid? HomeRoom2 { get; set; } // HomeRoom2
        public Guid? HomeLocation1 { get; set; } // HomeLocation1
        public Guid? HomeLocation2 { get; set; } // HomeLocation2

        /// <summary>
        /// Bỏ - Buu
        /// </summary>
        public int? ProductMainId { get; set; } // ProductMainID
        public string Packages2 { get; set; } // Packages2 (length: 20)
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public short? Shelfdate { get; set; } // Shelfdate
        public string InvtId { get; set; } // InvtID (length: 30)
        public Guid? MainProductId { get; set; } // MainProductID
        public int? CustomerProductGroupId { get; set; } // CustomerProductGroupID
        public string BarcodeString { get; set; } // BarcodeString (length: 255)
        public bool? IsExpDateRequire { get; set; } // IsExpDateRequire
        public bool? IsProDateRequire { get; set; } // IsProDateRequire

        // Reverse navigation

        /// <summary>
        /// Child DispatchingProducts where [DispatchingProducts].[ProductID] point to this entity (FK_DispatchingProducts_Products)
        /// </summary>
        public virtual ICollection<DispatchingProduct> DispatchingProducts { get; set; } // DispatchingProducts.FK_DispatchingProducts_Products

        /// <summary>
        /// Child ReceivingOrderDetails where [ReceivingOrderDetails].[ProductID] point to this entity (FK_ReceivingOrderDetails_Products)
        /// </summary>
        public virtual ICollection<ReceivingOrderDetail> ReceivingOrderDetails { get; set; } // ReceivingOrderDetails.FK_ReceivingOrderDetails_Products

        /// <summary>
        /// Child XDocPickingLists where [XDoc_PickingList].[ProductID] point to this entity (FK_Products)
        /// </summary>
        public virtual ICollection<XDocPickingList> XDocPickingLists { get; set; } // XDoc_PickingList.FK_Products

        public Product()
        {
            ProductId = Guid.NewGuid();
            Discontinue = false;
            PackagesPerPallet = 50;
            PackagesPerPallet2 = 50;
            Packages = "N'Ctns'";
            Inners = 1;
            PickingMethod = false;
            ProductCategory = 1;
            CreatedTime = DateTime.Now;
            ProductCategoryId = 1;
            WarningDaysBeforeExpiry = 0;
            IsWeightingRequire = false;
            IsAllowLocationChange = true;
            Pcs = 1;
            WeightOfPackage = 0m;
            Shelfdate = 0;
            IsExpDateRequire = false;
            IsProDateRequire = false;
            DispatchingProducts = new List<DispatchingProduct>();
            ReceivingOrderDetails = new List<ReceivingOrderDetail>();
            XDocPickingLists = new List<XDocPickingList>();
        }
    }

    // ProductCategories
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class ProductCategory
    {
        /// <summary>
        /// 0
        /// </summary>
        public byte ProductCategoryId { get; set; } // ProductCategoryID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductCategoryDescription { get; set; } // ProductCategoryDescription (length: 50)
        public byte? ProductCategoryGroupId { get; set; } // ProductCategoryGroupID
    }

    // ProductCategoryGroups
    public class ProductCategoryGroup
    {
        public byte ProductCategoryGroupId { get; set; } // ProductCategoryGroupID (Primary key)
        public string ProductCategoryGroupName { get; set; } // ProductCategoryGroupName (length: 100)
    }

    // ProductChanging
    /// <summary>
    /// 2
    /// ProductChanging.ProductChangingID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class ProductChanging
    {
        public Guid ProductChangingId { get; set; } // ProductChangingID (Primary key)

        /// <summary>
        /// 2550
        /// </summary>
        public DateTime? ChangeDate { get; set; } // ChangeDate

        /// <summary>
        /// -1
        /// </summary>
        public string ChangeBy { get; set; } // ChangeBy (length: 15)

        /// <summary>
        /// 10725
        /// </summary>
        public string ChangeDescription { get; set; } // ChangeDescription (length: 500)
        public Guid? ReferenceId { get; set; } // ReferenceID
        public string OrderType { get; set; } // OrderType (length: 20)
        public string OrderNumber { get; set; } // OrderNumber (length: 50)

        public ProductChanging()
        {
            ProductChangingId = Guid.NewGuid();
            ChangeDate = DateTime.Now;
        }
    }

    // ProductionOrders
    public class ProductionOrder
    {
        public Guid ProductionOrderId { get; set; } // ProductionOrderID (Primary key)
        public string ProductionOrderNumber { get; set; } // ProductionOrderNumber (length: 20)
        public int? ProductionOrderLocalId { get; set; } // ProductionOrderLocalID
        public DateTime? ProductionOrderDate { get; set; } // ProductionOrderDate
        public string Status { get; set; } // Status (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public Guid CustomerId { get; set; } // CustomerID
        public string ProductionOrderRemark { get; set; } // ProductionOrderRemark (length: 200)
        public Guid BillOfMaterialId { get; set; } // BillOfMaterialID
        public decimal? PlannedWeight { get; set; } // Planned_Weight
        public int? PlannedUnit { get; set; } // Planned_Unit
        public DateTime? StartDate { get; set; } // StartDate
        public DateTime? EndDate { get; set; } // EndDate
        public byte[] Ts { get; set; } // ts

        /// <summary>
        /// RO
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public byte? ShiftId { get; set; } // ShiftID
        public string OrderType { get; set; } // OrderType (length: 20)

        public ProductionOrder()
        {
            ProductionOrderId = Guid.NewGuid();
            Status = "0";
            CreatedTime = DateTime.Now;
            BillOfMaterialId = Guid.NewGuid();
        }
    }

    // ProductionOrderDetails
    public class ProductionOrderDetail
    {
        public Guid ProductionOrderDetailId { get; set; } // ProductionOrderDetailID (Primary key)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 500)
        public Guid ProductionOrderId { get; set; } // ProductionOrderID
        public Guid MaterialProductId { get; set; } // Material_ProductID
        public decimal? MaterialQuantity { get; set; } // Material_Quantity
        public byte[] Ts { get; set; } // ts
        public string ProductionOrderDetailRemark { get; set; } // ProductionOrderDetailRemark (length: 500)

        /// <summary>
        /// DO
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 20)

        /// <summary>
        /// DO
        /// </summary>
        public string OrderType { get; set; } // OrderType (length: 20)
        public decimal? MaterialActual { get; set; } // Material_Actual

        public ProductionOrderDetail()
        {
            ProductionOrderDetailId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // The table 'ProductMasan' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ProductMasan
    public class ProductMasan
    {
        public string ItemNumber { get; set; } // ITEM_NUMBER (length: 255)
        public string ItemType { get; set; } // ITEM_TYPE (length: 255)
        public string ItemDesc { get; set; } // ITEM_DESC (length: 255)
        public string PrimaryUom { get; set; } // PRIMARY_UOM (length: 255)
        public string SecondaryOum { get; set; } // SECONDARY_OUM (length: 255)
        public string DefaultLotStatus { get; set; } // DEFAULT_LOT_STATUS (length: 255)
        public string ShelfLifeDays { get; set; } // SHELF_LIFE_DAYS (length: 255)
        public string PackSizeDesc { get; set; } // PACK_SIZE_DESC (length: 255)
        public string StandardSkuDesc { get; set; } // STANDARD_SKU_DESC (length: 255)
        public string ItemStatus { get; set; } // ITEM_STATUS (length: 255)
        public decimal? SizeGram { get; set; } // SIZE_GRAM
        public decimal? Size { get; set; } // SIZE_
        public string PackageKg { get; set; } // PACKAGE_KG (length: 10)
        public string PackageKg1 { get; set; } // PACKAGE_KG1 (length: 10)
        public string CategoryDesc { get; set; } // CATEGORY_DESC (length: 255)
    }

    // ProductNumber_BHX_Import2
    public class ProductNumberBhxImport2
    {
        public string ProductNumber { get; set; } // ProductNumber (Primary key) (length: 50)
    }

    // Profiles
    /// <summary>
    /// 0
    /// </summary>
    public class Profile
    {
        /// <summary>
        /// 0
        /// </summary>
        public int MyProfileId { get; set; } // MyProfileID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public int CustomerMainId { get; set; } // CustomerMainID

        /// <summary>
        /// 0
        /// </summary>
        public bool DefaultCustomer { get; set; } // DefaultCustomer

        public Profile()
        {
            DefaultCustomer = false;
        }
    }

    // Properties
    public class Property
    {
        public int PropertyId { get; set; } // PropertyID
        public string PropertyName { get; set; } // PropertyName (length: 200)
        public string PartOriginal { get; set; } // PartOriginal (length: 50)
        public string PartNumber { get; set; } // PartNumber (length: 50)
        public int PartGroupId { get; set; } // PartGroupID
        public int PartCategoryId { get; set; } // PartCategoryID
        public string EquipmentGroupId { get; set; } // EquipmentGroupID (length: 50)
        public int? LocationId { get; set; } // LocationID
        public string PartRemark { get; set; } // PartRemark (length: 50)
        public int? CategoryId { get; set; } // CategoryID
        public string PropertyModelAndSpecification { get; set; } // PropertyModelAndSpecification (length: 50)
        public string Unit { get; set; } // Unit (length: 50)
        public float? UnitPriceVnd { get; set; } // UnitPriceVND
        public float? UnitPriceUsd { get; set; } // UnitPriceUSD
        public DateTime? PartEntryTime { get; set; } // PartEntryTime
        public string PartOwner { get; set; } // PartOwner (length: 25)
        public string ItEquipmentSpecification { get; set; } // ITEquipmentSpecification (length: 250)
        public int? SupplierId { get; set; } // SupplierID
        public DateTime? ItEquipmentBuyingDate { get; set; } // ITEquipmentBuyingDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public string PartOriginalType { get; set; } // PartOriginalType (length: 25)
        public int? PropertyOldId { get; set; } // PropertyOldID
    }

    // PurchasingOrders
    /// <summary>
    /// System.Byte[]
    /// (((OrderEmployeeID=51))) And ((PurchasingOrderID_OLD=1017))
    /// PurchasingOrders.PurchasingOrderID DESC
    /// 1
    /// System.Byte[]
    /// 0
    /// </summary>
    public class PurchasingOrder
    {
        /// <summary>
        /// 1848
        /// </summary>
        public int PurchasingOrderId { get; set; } // PurchasingOrderID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string PurchasingOrderNumber { get; set; } // PurchasingOrderNumber (length: 16)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime PuchasingDate { get; set; } // PuchasingDate

        /// <summary>
        /// 1104
        /// </summary>
        public int SupplierId { get; set; } // SupplierID

        /// <summary>
        /// 1728
        /// </summary>
        public int? OrderEmployeeId { get; set; } // OrderEmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? DeliveryDate { get; set; } // DeliveryDate

        /// <summary>
        /// 3852
        /// </summary>
        public string DeliveryAddress { get; set; } // DeliveryAddress (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string OrderBy { get; set; } // OrderBy (length: 50)

        /// <summary>
        /// 1656
        /// </summary>
        public bool OrderConfirmed { get; set; } // OrderConfirmed

        /// <summary>
        /// 0
        /// </summary>
        public string PurchasingRemark { get; set; } // PurchasingRemark (length: 150)

        /// <summary>
        /// 0
        /// </summary>
        public string Currency { get; set; } // Currency (length: 3)

        /// <summary>
        /// 0
        /// </summary>
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public float? ExchangeRate { get; set; } // ExchangeRate
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 30)
        public string UsedPeriod { get; set; } // UsedPeriod (length: 100)
        public bool? StrategicSupplier { get; set; } // StrategicSupplier
        public DateTime? AdvancePaymentDate { get; set; } // AdvancePaymentDate
        public DateTime? FinalPaymentDate { get; set; } // FinalPaymentDate
        public bool? RiskAssessmentRequired { get; set; } // RiskAssessmentRequired
        public bool? CompetitivePricingRequired { get; set; } // CompetitivePricingRequired
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public DateTime? ContractDate { get; set; } // ContractDate
        public DateTime? ContractExpiredDate { get; set; } // ContractExpiredDate
        public bool? ContractRequired { get; set; } // ContractRequired
        public string DocumentFileScan { get; set; } // DocumentFileScan (length: 200)

        /// <summary>
        /// 0
        /// </summary>
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)
        public byte[] Ts { get; set; } // ts
        public bool OrderConfirmedAll { get; set; } // OrderConfirmedAll
        public string OrderConfirmedAllBy { get; set; } // OrderConfirmedAllBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? StoreId { get; set; } // StoreID
        public string CreatedBy { get; set; } // CreatedBy (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child PurchasingOrderDetails where [PurchasingOrderDetails].[PurchasingOrderID] point to this entity (FK_PurchasingOrderDetails_PurchasingOrders)
        /// </summary>
        public virtual ICollection<PurchasingOrderDetail> PurchasingOrderDetails { get; set; } // PurchasingOrderDetails.FK_PurchasingOrderDetails_PurchasingOrders

        // Foreign keys

        /// <summary>
        /// Parent Supplier pointed by [PurchasingOrders].([SupplierId]) (FK_PurchasingOrders_Suppliers)
        /// </summary>
        public virtual Supplier Supplier { get; set; } // FK_PurchasingOrders_Suppliers

        public PurchasingOrder()
        {
            OrderConfirmed = false;
            ExchangeRate = 1f;
            StrategicSupplier = true;
            RiskAssessmentRequired = false;
            CompetitivePricingRequired = false;
            ContractRequired = false;
            OrderConfirmedAll = false;
            CreatedTime = DateTime.Now;
            StoreId = 1;
            PurchasingOrderDetails = new List<PurchasingOrderDetail>();
        }
    }

    // PurchasingOrderDetails
    /// <summary>
    /// System.Byte[]
    /// PurchasingOrderDetails.PurchasingOrderDetailID DESC
    /// 1
    /// System.Byte[]
    /// 0
    /// </summary>
    public class PurchasingOrderDetail
    {
        /// <summary>
        /// -1
        /// </summary>
        public int PurchasingOrderDetailId { get; set; } // PurchasingOrderDetailID (Primary key)

        /// <summary>
        /// 1944
        /// </summary>
        public int PurchasingOrderId { get; set; } // PurchasingOrderID

        /// <summary>
        /// 0
        /// </summary>
        public int PartId { get; set; } // PartID

        /// <summary>
        /// Sẽ Xóa
        /// </summary>
        public float? UnitPriceUsd { get; set; } // UnitPriceUSD

        /// <summary>
        /// -1
        /// </summary>
        public decimal? UnitPriceVnd { get; set; } // UnitPriceVND

        /// <summary>
        /// 624
        /// </summary>
        public string ItemRemark { get; set; } // ItemRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 100)
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)
        public int? PropertyCategoryId { get; set; } // PropertyCategoryID
        public byte Status { get; set; } // Status
        public byte[] Ts { get; set; } // ts
        public decimal OrderQuantity { get; set; } // OrderQuantity
        public decimal DeliveryQuantity { get; set; } // DeliveryQuantity
        public DateTime? DeliveryDateDetail { get; set; } // DeliveryDateDetail

        // Foreign keys

        /// <summary>
        /// Parent Part pointed by [PurchasingOrderDetails].([PartId]) (FK_PurchasingOrderDetails_Parts)
        /// </summary>
        public virtual Part Part { get; set; } // FK_PurchasingOrderDetails_Parts

        /// <summary>
        /// Parent PurchasingOrder pointed by [PurchasingOrderDetails].([PurchasingOrderId]) (FK_PurchasingOrderDetails_PurchasingOrders)
        /// </summary>
        public virtual PurchasingOrder PurchasingOrder { get; set; } // FK_PurchasingOrderDetails_PurchasingOrders

        public PurchasingOrderDetail()
        {
            Status = 0;
            OrderQuantity = 0m;
            DeliveryQuantity = 0m;
        }
    }

    // QAReport
    public class QaReport
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public string Original { get; set; } // Original (length: 50)

        /// <summary>
        /// Source
        /// </summary>
        public string Supplier { get; set; } // Supplier (length: 50)
        public string Manufactured { get; set; } // Manufactured (length: 50)
        public string DocumentFileScan { get; set; } // DocumentFileScan (length: 200)
        public string CustomNo { get; set; } // CustomNo (length: 200)
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? RecorderConfirmed { get; set; } // RecorderConfirmed
        public byte[] Ts { get; set; } // ts
        public DateTime? RecorderOccurTime { get; set; } // RecorderOccurTime
        public string RecorderTransporterRepresentative { get; set; } // RecorderTransporterRepresentative (length: 40)
        public string RecorderTransporter { get; set; } // RecorderTransporter (length: 40)
        public string RecorderTruckNo { get; set; } // RecorderTruckNo (length: 40)
        public string RecorderPhoneNo { get; set; } // RecorderPhoneNo (length: 50)
        public string RecorderTemperature { get; set; } // RecorderTemperature (length: 30)
        public string RecorderDriver { get; set; } // RecorderDriver (length: 50)
        public string RecorderCode { get; set; } // RecorderCode (length: 50)
        public string RecorderProductBranch { get; set; } // RecorderProductBranch (length: 30)
        public string RecorderDescription { get; set; } // RecorderDescription (length: 1000)
        public string ContainerNo { get; set; } // ContainerNo (length: 50)
        public string Note { get; set; } // Note (length: 100)

        /// <summary>
        /// Source
        /// </summary>
        public int? StoreNumber { get; set; } // StoreNumber
        public Guid QaReportId { get; set; } // QAReportID (Primary key)

        /// <summary>
        /// Source
        /// </summary>
        public Guid? SupplierId { get; set; } // SupplierID

        public QaReport()
        {
            CreatedTime = DateTime.Now;
            RecorderConfirmed = false;
        }
    }

    // QAReportDetails
    public class QaReportDetail
    {
        public Guid QaReportDetailId { get; set; } // QAReportDetailID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string OrderNumber { get; set; } // OrderNumber (length: 12)
        public string Origin { get; set; } // Origin (length: 50)
        public string Manufactured { get; set; } // Manufactured (length: 150)
        public string CustomNo { get; set; } // CustomNo (length: 100)
        public string ContainerNo { get; set; } // ContainerNo (length: 50)
        public string Note { get; set; } // Note (length: 1000)

        /// <summary>
        /// Source
        /// </summary>
        public string SupplierName { get; set; } // SupplierName (length: 100)

        /// <summary>
        /// Source
        /// </summary>
        public int? StoreNumber { get; set; } // StoreNumber
        public byte[] Ts { get; set; } // ts
        public string FileLocatoin { get; set; } // FileLocatoin (length: 1000)
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID

        /// <summary>
        /// Source
        /// </summary>
        public Guid? SupplierId { get; set; } // SupplierID

        public QaReportDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // QHSE
    public class Qhse
    {
        public int Qhseid { get; set; } // QHSEID (Primary key)
        public string QhseNumber { get; set; } // QHSENumber (length: 16)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string Category { get; set; } // Category (length: 20)
        public bool? PhotoAttachment { get; set; } // PhotoAttachment
        public string Comment { get; set; } // Comment (length: 1000)
        public string ManagementResponse { get; set; } // ManagementResponse (length: 200)
        public string ResponseBy { get; set; } // ResponseBy (length: 50)
        public DateTime? ResponseTime { get; set; } // ResponseTime
        public string Location { get; set; } // Location (length: 300)
        public int? AssignedTo { get; set; } // AssignedTo
        public string AssignedComment { get; set; } // AssignedComment (length: 500)
        public bool Confirmed { get; set; } // Confirmed
        public byte[] Ts { get; set; } // ts
        public bool? IsDeleted { get; set; } // IsDeleted
        public string DeletedBy { get; set; } // DeletedBy (length: 20)
        public DateTime? DeletedTime { get; set; } // DeletedTime
        public string Subject { get; set; } // Subject (length: 60)
        public DateTime? AssignedCommentTime { get; set; } // AssignedCommentTime
        public DateTime Deadline { get; set; } // Deadline
        public int? Department { get; set; } // Department
        public bool AssigmentReject { get; set; } // AssigmentReject
        public byte? TaskProgress { get; set; } // TaskProgress
        public decimal? Evaluation { get; set; } // Evaluation
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public int? StoreId { get; set; } // StoreID

        public Qhse()
        {
            QhseNumber = "XXX";
            CreatedTime = DateTime.Now;
            Category = "Q";
            PhotoAttachment = false;
            AssignedTo = 0;
            Confirmed = false;
            IsDeleted = false;
            Subject = "Q";
            Deadline = DateTime.Now;
            AssigmentReject = false;
            TaskProgress = 0;
        }
    }

    // qryEDIProductRemains
    public class QryEdiProductRemain
    {
        public int? TmpProductRemainId { get; set; } // tmpProductRemainID
        public string TmpProductRemainName { get; set; } // tmpProductRemainName (length: 100)
        public int? TmpRemainQuantity { get; set; } // tmpRemainQuantity
        public string TmpProductRemainNumber { get; set; } // tmpProductRemainNumber (length: 30)
        public int? TmpCustomerId { get; set; } // tmpCustomerID
    }

    // QualityCheckings
    public class QualityChecking
    {
        public int QualityCheckingId { get; set; } // QualityCheckingID (Primary key)
        public DateTime QualityCheckingDate { get; set; } // QualityCheckingDate
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public bool Confirmed { get; set; } // Confirmed
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 20)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public string QualityCheckingRemark { get; set; } // QualityCheckingRemark (length: 500)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        // Reverse navigation

        /// <summary>
        /// Child QualityCheckingDetails where [QualityCheckingDetails].[QualityCheckingID] point to this entity (FK_QualityCheckingDetails_QualityCheckings)
        /// </summary>
        public virtual ICollection<QualityCheckingDetail> QualityCheckingDetails { get; set; } // QualityCheckingDetails.FK_QualityCheckingDetails_QualityCheckings

        public QualityChecking()
        {
            Confirmed = false;
            QualityCheckingDetails = new List<QualityCheckingDetail>();
        }
    }

    // QualityCheckingDetails
    public class QualityCheckingDetail
    {
        public int QualityCheckingDetailId { get; set; } // QualityCheckingDetailID (Primary key)
        public int QualityCheckingId { get; set; } // QualityCheckingID
        public int CustomerId { get; set; } // CustomerID
        public int ProductId { get; set; } // ProductID
        public int QuantityOfPackages { get; set; } // QuantityOfPackages
        public int TotalUnits { get; set; } // TotalUnits
        public float TotalWeight { get; set; } // TotalWeight
        public string CheckingDetailRemark { get; set; } // CheckingDetailRemark (length: 250)
        public bool CheckingPassed { get; set; } // CheckingPassed
        public string ReferenceNumber { get; set; } // ReferenceNumber (length: 20)
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? CheckingQuantity { get; set; } // CheckingQuantity
        public string CheckedBy { get; set; } // CheckedBy (length: 20)
        public string CustomerRef { get; set; } // CustomerRef (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent QualityChecking pointed by [QualityCheckingDetails].([QualityCheckingId]) (FK_QualityCheckingDetails_QualityCheckings)
        /// </summary>
        public virtual QualityChecking QualityChecking { get; set; } // FK_QualityCheckingDetails_QualityCheckings
    }

    // Quarantines
    /// <summary>
    /// 0
    /// </summary>
    public class Quarantine
    {
        public int QuarantineId { get; set; } // QuarantineID (Primary key)
        public string QuarantineNumber { get; set; } // QuarantineNumber (length: 20)
        public DateTime QuarantineDate { get; set; } // QuarantineDate
        public string UserName { get; set; } // UserName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool QuarantineType { get; set; } // QuarantineType
        public string QuarantineRemark { get; set; } // QuarantineRemark (length: 250)
        public bool QuarantineConfirm { get; set; } // QuarantineConfirm
        public byte PalletStatus { get; set; } // PalletStatus
        public Guid CustomerId { get; set; } // CustomerID
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 50)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public bool? Accepted { get; set; } // Accepted
        public string AcceptedBy { get; set; } // AcceptedBy (length: 50)
        public DateTime? AcceptedTime { get; set; } // AcceptedTime
        public byte[] Ts { get; set; } // TS

        public Quarantine()
        {
            CreatedTime = DateTime.Now;
            QuarantineType = false;
            QuarantineConfirm = false;
            Accepted = false;
        }
    }

    // QuarantineDetails
    /// <summary>
    /// 0
    /// </summary>
    public class QuarantineDetail
    {
        public int QuarantineDetailId { get; set; } // QuarantineDetailID (Primary key)
        public int QuarantineId { get; set; } // QuarantineID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)

        /// <summary>
        /// 109
        /// </summary>
        public int TotalPackages { get; set; } // TotalPackages

        /// <summary>
        /// 109
        /// </summary>
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public string QuarantineDetailRemark { get; set; } // QuarantineDetailRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string IcUser { get; set; } // ICUser (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid ProductId { get; set; } // ProductID
        public Guid? PalletId { get; set; } // PalletID

        public QuarantineDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // Ratings
    public class Rating
    {
        public int RatingId { get; set; } // RatingID (Primary key)
        public decimal? RatingValue { get; set; } // RatingValue
        public string OrderNumber { get; set; } // OrderNumber (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)

        public Rating()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // ReasonDefinition
    public class ReasonDefinition
    {
        public string ReasonCode { get; set; } // REASON_CODE (Primary key) (length: 50)
        public string ReasonMeaning { get; set; } // REASON_MEANING (length: 100)
        public string Status { get; set; } // STATUS (length: 20)
        public Guid? CustomerId { get; set; } // CustomerID

        public ReasonDefinition()
        {
            CustomerId = Guid.NewGuid();
        }
    }

    // ReasonModifyBillingDetailAdjectments
    public class ReasonModifyBillingDetailAdjectment
    {
        public int Code { get; set; } // Code (Primary key)
        public string Reason { get; set; } // Reason (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreateTime { get; set; } // CreateTime
    }

    // ReceivedParts
    /// <summary>
    /// System.Byte[]
    /// ReceivedParts.ReceivedPartID DESC
    /// 1
    /// System.Byte[]
    /// 0
    /// </summary>
    public class ReceivedPart
    {
        /// <summary>
        /// -1
        /// </summary>
        public int ReceivedPartId { get; set; } // ReceivedPartID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int PurchasingOrderId { get; set; } // PurchasingOrderID

        /// <summary>
        /// -1
        /// </summary>
        public int SupplierId { get; set; } // SupplierID

        /// <summary>
        /// 0
        /// </summary>
        public DateTime PuchasingDate { get; set; } // PuchasingDate

        /// <summary>
        /// -1
        /// </summary>
        public int? OrderEmployeeId { get; set; } // OrderEmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public string PurchasingRemark { get; set; } // PurchasingRemark (length: 200)

        /// <summary>
        /// 2064
        /// </summary>
        public bool OrderConfirmed { get; set; } // OrderConfirmed

        /// <summary>
        /// 0
        /// </summary>
        public DateTime DeliveryDate { get; set; } // DeliveryDate

        /// <summary>
        /// -1
        /// </summary>
        public string DeliveryAddress { get; set; } // DeliveryAddress (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string OrderBy { get; set; } // OrderBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string ConfirmBy { get; set; } // ConfirmBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)
        public string ReceivedPartNumber { get; set; } // ReceivedPartNumber (length: 16)
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        // Reverse navigation

        /// <summary>
        /// Child ReceivedPartDetails where [ReceivedPartDetails].[PartReceivedID] point to this entity (FK_ReceivedPartDetails_ReceivedParts)
        /// </summary>
        public virtual ICollection<ReceivedPartDetail> ReceivedPartDetails { get; set; } // ReceivedPartDetails.FK_ReceivedPartDetails_ReceivedParts

        // Foreign keys

        /// <summary>
        /// Parent Supplier pointed by [ReceivedParts].([SupplierId]) (FK_ReceivedParts_Suppliers1)
        /// </summary>
        public virtual Supplier Supplier { get; set; } // FK_ReceivedParts_Suppliers1

        public ReceivedPart()
        {
            OrderConfirmed = false;
            CreatedTime = DateTime.Now;
            ReceivedPartDetails = new List<ReceivedPartDetail>();
        }
    }

    // ReceivedPartDetails
    /// <summary>
    /// System.Byte[]
    /// 0
    /// System.Byte[]
    /// 0
    /// </summary>
    public class ReceivedPartDetail
    {
        /// <summary>
        /// -1
        /// </summary>
        public int PartReceivedDetailId { get; set; } // PartReceivedDetailID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int PartReceivedId { get; set; } // PartReceivedID

        /// <summary>
        /// -1
        /// </summary>
        public int PartId { get; set; } // PartID

        /// <summary>
        /// -1
        /// </summary>
        public float? UnitPriceUsd { get; set; } // UnitPriceUSD

        /// <summary>
        /// -1
        /// </summary>
        public float? UnitPriceVnd { get; set; } // UnitPriceVND

        /// <summary>
        /// -1
        /// </summary>
        public decimal? DeliveryQuantity { get; set; } // DeliveryQuantity

        /// <summary>
        /// -1
        /// </summary>
        public string ItemRemark { get; set; } // ItemRemark (length: 300)

        /// <summary>
        /// -1
        /// </summary>
        public string LabelOwner { get; set; } // LabelOwner (length: 25)

        /// <summary>
        /// -1
        /// </summary>
        public string LabelAccountNumber { get; set; } // LabelAccountNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? LabelDate { get; set; } // LabelDate

        /// <summary>
        /// -1
        /// </summary>
        public string LabelRemark { get; set; } // LabelRemark (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string LabelAccountId { get; set; } // LabelAccountID (length: 50)
        public string DepartmentCategoryId { get; set; } // DepartmentCategoryID (length: 4)
        public int? PropertyCategoryId { get; set; } // PropertyCategoryID

        // Foreign keys

        /// <summary>
        /// Parent Part pointed by [ReceivedPartDetails].([PartId]) (FK_ReceivedPartDetails_Parts)
        /// </summary>
        public virtual Part Part { get; set; } // FK_ReceivedPartDetails_Parts

        /// <summary>
        /// Parent ReceivedPart pointed by [ReceivedPartDetails].([PartReceivedId]) (FK_ReceivedPartDetails_ReceivedParts)
        /// </summary>
        public virtual ReceivedPart ReceivedPart { get; set; } // FK_ReceivedPartDetails_ReceivedParts
    }

    // ReceivingCartons
    /// <summary>
    /// 2
    /// ((ReceivingCartons.ReceivingOrderDetailID=1234452))
    /// ReceivingCartons.CartonDescription DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class ReceivingCarton
    {
        public Guid ReceivingCartonId { get; set; } // ReceivingCartonID (Primary key)
        public Guid? ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid? DispatchingProductId { get; set; } // DispatchingProductID

        /// <summary>
        /// 0
        /// </summary>
        public string CartonNumber { get; set; } // CartonNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string CartonDescription { get; set; } // CartonDescription (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public bool? Dispatched { get; set; } // Dispatched

        /// <summary>
        /// 0
        /// </summary>
        public int? DataRangeFrom { get; set; } // DataRangeFrom

        /// <summary>
        /// 0
        /// </summary>
        public int? DatarangeTo { get; set; } // DatarangeTo

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public byte[] Ts { get; set; } // ts
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 25)

        public ReceivingCarton()
        {
            Dispatched = false;
            CreatedTime = DateTime.Now;
        }
    }

    // ReceivingOrders
    /// <summary>
    /// 2
    /// ((ReceivingOrders.ReceivingOrderID=194167))
    /// ReceivingOrders.ReceivingOrderID DESC
    /// True
    /// 0
    /// 250000
    /// </summary>
    public class ReceivingOrder
    {
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? ReceivingOrderLocalId { get; set; } // ReceivingOrderLocalID

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public Guid CustomerId { get; set; } // CustomerID

        /// <summary>
        /// -1
        /// </summary>
        public bool Status { get; set; } // Status

        /// <summary>
        /// -1
        /// </summary>
        public decimal? Temperature { get; set; } // Temperature

        /// <summary>
        /// -1
        /// </summary>
        public string ReceivingOrderRemark { get; set; } // ReceivingOrderRemark (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 10)

        /// <summary>
        /// 2430
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime

        /// <summary>
        /// 0
        /// </summary>
        public byte? ReceivingOrderProgress { get; set; } // ReceivingOrderProgress

        /// <summary>
        /// 0
        /// </summary>
        public string SealNumber { get; set; } // SealNumber (length: 12)

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS
        public string InvoiceNumber { get; set; } // InvoiceNumber (length: 50)
        public string LadingReportNumber { get; set; } // LadingReportNumber (length: 50)
        public string CustomsDeclarationNumber { get; set; } // CustomsDeclarationNumber (length: 70)
        public string ContractNumber { get; set; } // ContractNumber (length: 70)
        public string Origin { get; set; } // Origin (length: 50)
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public string InternalRemark { get; set; } // InternalRemark (length: 300)
        public bool? Electricity { get; set; } // Electricity
        public double? ProgressPercentage { get; set; } // ProgressPercentage
        public bool? IsAttachment { get; set; } // IsAttachment
        public int? CustomerSupplierId { get; set; } // CustomerSupplierID
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 32)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 50)
        public int? TimeSlotId { get; set; } // TimeSlotID
        public int? DockDoorId { get; set; } // DockDoorID
        public double? PutAwayPercentage { get; set; } // PutAwayPercentage
        public bool? IsDeleted { get; set; } // IsDeleted
        public int? PerformanceCategoryId { get; set; } // PerformanceCategoryID
        public Guid? WorkDefinitionId { get; set; } // WorkDefinitionID
        public byte? OrderTypeId { get; set; } // OrderTypeID

        // Reverse navigation

        /// <summary>
        /// Child ReceivingOrderDetails where [ReceivingOrderDetails].[ReceivingOrderID] point to this entity (FK_ReceivingOrderDetails_ReceivingOrders)
        /// </summary>
        public virtual ICollection<ReceivingOrderDetail> ReceivingOrderDetails { get; set; } // ReceivingOrderDetails.FK_ReceivingOrderDetails_ReceivingOrders

        /// <summary>
        /// Child ReceivingProductCartons where [ReceivingProductCartons].[ReceivingOrderID] point to this entity (FK_ReceivingProductCartons_ReceivingOrders)
        /// </summary>
        public virtual ICollection<ReceivingProductCarton> ReceivingProductCartons { get; set; } // ReceivingProductCartons.FK_ReceivingProductCartons_ReceivingOrders

        /// <summary>
        /// Child ReceivingProductCartonsHistories where [ReceivingProductCartons_History].[ReceivingOrderID] point to this entity (FK__Receiving__Recei__54F44D5D)
        /// </summary>
        public virtual ICollection<ReceivingProductCartonsHistory> ReceivingProductCartonsHistories { get; set; } // ReceivingProductCartons_History.FK__Receiving__Recei__54F44D5D

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [ReceivingOrders].([CustomerId]) (FK_ReceivingOrders_Customers)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_ReceivingOrders_Customers

        public ReceivingOrder()
        {
            ReceivingOrderId = Guid.NewGuid();
            Status = false;
            CreatedTime = DateTime.Now;
            ReceivingOrderProgress = 1;
            Electricity = false;
            ProgressPercentage = 0;
            IsAttachment = false;
            IsDeleted = false;
            PerformanceCategoryId = 0;
            OrderTypeId = 0;
            ReceivingOrderDetails = new List<ReceivingOrderDetail>();
            ReceivingProductCartons = new List<ReceivingProductCarton>();
            ReceivingProductCartonsHistories = new List<ReceivingProductCartonsHistory>();
        }
    }

    // ReceivingOrderDetails
    /// <summary>
    /// 2
    /// ReceivingOrderDetails.ReceivingOrderDetailID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class ReceivingOrderDetail
    {
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID (Primary key)
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID

        /// <summary>
        /// -1
        /// </summary>
        public short PackagesPerPallet { get; set; } // PackagesPerPallet
        public Guid ProductId { get; set; } // ProductID

        /// <summary>
        /// -1
        /// </summary>
        public int TotalPackages { get; set; } // TotalPackages

        /// <summary>
        /// -1
        /// </summary>
        public float WeightPerPackage { get; set; } // WeightPerPackage

        /// <summary>
        /// 1830
        /// </summary>
        public DateTime? ProductionDate { get; set; } // ProductionDate

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? UseByDate { get; set; } // UseByDate

        /// <summary>
        /// -1
        /// </summary>
        public string Remark { get; set; } // Remark (length: 200)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerRef { get; set; } // CustomerRef (length: 250)
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public int? TransactionId { get; set; } // TransactionID

        /// <summary>
        /// 0: Plan; 1: waiting; 2: confirmed; 3: confirmed priority dispatch; 4: quarantined
        /// </summary>
        public byte Status { get; set; } // Status

        /// <summary>
        /// -1
        /// </summary>
        public float? PalletHeight { get; set; } // PalletHeight

        /// <summary>
        /// -1
        /// </summary>
        public string UserName { get; set; } // UserName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public short? Plts { get; set; } // Plts

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeight { get; set; } // TotalWeight
        public short? PackingListQuantity { get; set; } // PackingListQuantity
        public short? UnitPerPackage { get; set; } // UnitPerPackage
        public string CreatedBy { get; set; } // CreatedBy (length: 25)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string Origin { get; set; } // Origin (length: 50)
        public decimal? RejectPercentage { get; set; } // RejectPercentage
        public decimal? PackagingWeight { get; set; } // PackagingWeight
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime

        // Reverse navigation

        /// <summary>
        /// Child Pallets where [Pallets].[ReceivingOrderDetailID] point to this entity (FK_Pallets_ReceivingOrderDetails)
        /// </summary>
        public virtual ICollection<Pallet> Pallets { get; set; } // Pallets.FK_Pallets_ReceivingOrderDetails

        // Foreign keys

        /// <summary>
        /// Parent Product pointed by [ReceivingOrderDetails].([ProductId]) (FK_ReceivingOrderDetails_Products)
        /// </summary>
        public virtual Product Product { get; set; } // FK_ReceivingOrderDetails_Products

        /// <summary>
        /// Parent ReceivingOrder pointed by [ReceivingOrderDetails].([ReceivingOrderId]) (FK_ReceivingOrderDetails_ReceivingOrders)
        /// </summary>
        public virtual ReceivingOrder ReceivingOrder { get; set; } // FK_ReceivingOrderDetails_ReceivingOrders

        public ReceivingOrderDetail()
        {
            ReceivingOrderDetailId = Guid.NewGuid();
            Plts = 0;
            TotalUnits = 0;
            TotalWeight = 0m;
            UnitPerPackage = 1;
            CreatedTime = DateTime.Now;
            Pallets = new List<Pallet>();
        }
    }

    // ReceivingPallets
    public class ReceivingPallet
    {
        public Guid ReceivingPalletId { get; set; } // ReceivingPalletID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 50)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber
        public byte[] Ts { get; set; } // ts

        public ReceivingPallet()
        {
            ReceivingPalletId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // ReceivingProductCartons
    public class ReceivingProductCarton
    {
        public long ReceivingCartonId { get; set; } // ReceivingCartonID (Primary key)
        public Guid? ReceivingOrderId { get; set; } // ReceivingOrderID
        public short? CartonNumber { get; set; } // CartonNumber
        public string CartonDescription { get; set; } // CartonDescription (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public string PackageType { get; set; } // PackageType (length: 15)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public bool? Completed { get; set; } // Completed
        public DateTime? ProductCartonDate { get; set; } // ProductCartonDate
        public bool? Confirmed { get; set; } // Confirmed
        public bool? IsScan { get; set; } // IsScan
        public long? DispatchingProductCartonId { get; set; } // DispatchingProductCartonID

        // Reverse navigation

        /// <summary>
        /// Child ReceivingProductPacks where [ReceivingProductPacks].[ReceivingCartonID] point to this entity (FK_ReceivingProductPacks_ReceivingProductCartons)
        /// </summary>
        public virtual ICollection<ReceivingProductPack> ReceivingProductPacks { get; set; } // ReceivingProductPacks.FK_ReceivingProductPacks_ReceivingProductCartons

        // Foreign keys

        /// <summary>
        /// Parent ReceivingOrder pointed by [ReceivingProductCartons].([ReceivingOrderId]) (FK_ReceivingProductCartons_ReceivingOrders)
        /// </summary>
        public virtual ReceivingOrder ReceivingOrder { get; set; } // FK_ReceivingProductCartons_ReceivingOrders

        public ReceivingProductCarton()
        {
            CartonNumber = 0;
            CreatedTime = DateTime.Now;
            WeightOfPackage = 0m;
            UpdatedTime = DateTime.Now;
            Completed = false;
            Confirmed = false;
            ReceivingProductPacks = new List<ReceivingProductPack>();
        }
    }

    // ReceivingProductCartons_History
    public class ReceivingProductCartonsHistory
    {
        public long ReceivingCartonId { get; set; } // ReceivingCartonID (Primary key)
        public Guid? ReceivingOrderId { get; set; } // ReceivingOrderID
        public short? CartonNumber { get; set; } // CartonNumber
        public string CartonDescription { get; set; } // CartonDescription (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public string PackageType { get; set; } // PackageType (length: 15)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public bool? Completed { get; set; } // Completed
        public DateTime? ProductCartonDate { get; set; } // ProductCartonDate
        public bool? Confirmed { get; set; } // Confirmed
        public bool? IsScan { get; set; } // IsScan
        public long? DispatchingProductCartonId { get; set; } // DispatchingProductCartonID

        // Foreign keys

        /// <summary>
        /// Parent ReceivingOrder pointed by [ReceivingProductCartons_History].([ReceivingOrderId]) (FK__Receiving__Recei__54F44D5D)
        /// </summary>
        public virtual ReceivingOrder ReceivingOrder { get; set; } // FK__Receiving__Recei__54F44D5D

        public ReceivingProductCartonsHistory()
        {
            CartonNumber = 0;
            CreatedTime = DateTime.Now;
            WeightOfPackage = 0m;
            UpdatedTime = DateTime.Now;
            Completed = false;
            Confirmed = false;
        }
    }

    // ReceivingProductPacks
    public class ReceivingProductPack
    {
        public long ReceivingProductPackId { get; set; } // ReceivingProductPackID (Primary key)
        public long? ReceivingCartonId { get; set; } // ReceivingCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber

        // Foreign keys

        /// <summary>
        /// Parent ReceivingProductCarton pointed by [ReceivingProductPacks].([ReceivingCartonId]) (FK_ReceivingProductPacks_ReceivingProductCartons)
        /// </summary>
        public virtual ReceivingProductCarton ReceivingProductCarton { get; set; } // FK_ReceivingProductPacks_ReceivingProductCartons

        public ReceivingProductPack()
        {
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // ReceivingProductPacks_History
    public class ReceivingProductPacksHistory
    {
        public long ReceivingProductPackId { get; set; } // ReceivingProductPackID (Primary key)
        public long? ReceivingCartonId { get; set; } // ReceivingCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber
        public long? ReceivingProductPackIdold { get; set; } // ReceivingProductPackIDOLD

        public ReceivingProductPacksHistory()
        {
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // ReceivingUnits
    public class ReceivingUnit
    {
        public int ReceivingUnitId { get; set; } // ReceivingUnitID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int PalletCartonId { get; set; } // PalletCartonID
        public decimal? UnitWeights { get; set; } // UnitWeights
        public string CustomerRef { get; set; } // CustomerRef (length: 50)
        public byte[] Ts { get; set; } // TS

        public ReceivingUnit()
        {
            CreatedTime = DateTime.Now;
            UnitWeights = 0m;
        }
    }

    // Releases
    /// <summary>
    /// 0
    /// </summary>
    public class Release
    {
        public int ReleaseId { get; set; } // ReleaseID (Primary key)
        public DateTime ReleaseDate { get; set; } // ReleaseDate
        public string UserName { get; set; } // UserName (length: 50)
        public int CustomerId { get; set; } // CustomerID
        public string CustomerName { get; set; } // CustomerName (length: 250)
        public string ReleaseRemark { get; set; } // ReleaseRemark (length: 250)
        public bool ReleaseConfirm { get; set; } // ReleaseConfirm

        /// <summary>
        /// 109
        /// </summary>
        public byte ReleaseType { get; set; } // ReleaseType
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public string ReleaseConfirmedBy { get; set; } // ReleaseConfirmedBy (length: 250)

        // Reverse navigation

        /// <summary>
        /// Child ReleaseDetails where [ReleaseDetails].[ReleaseID] point to this entity (FK_ReleaseDetails_Releases)
        /// </summary>
        public virtual ICollection<ReleaseDetail> ReleaseDetails { get; set; } // ReleaseDetails.FK_ReleaseDetails_Releases

        public Release()
        {
            ReleaseConfirm = false;
            ReleaseType = 0;
            ReleaseDetails = new List<ReleaseDetail>();
        }
    }

    // ReleaseDetails
    /// <summary>
    /// 0
    /// </summary>
    public class ReleaseDetail
    {
        public int ReleaseDetailId { get; set; } // ReleaseDetailID (Primary key)
        public int ReleaseId { get; set; } // ReleaseID
        public int CustomerProductGroupId { get; set; } // CustomerProductGroupID
        public string CustomerProductGroupName { get; set; } // CustomerProductGroupName (length: 50)
        public int? ReleaseTotalPackages { get; set; } // ReleaseTotalPackages
        public float ReleaseTotalWeight { get; set; } // ReleaseTotalWeight
        public string ReleaseDetailRemark { get; set; } // ReleaseDetailRemark (length: 250)
        public string IcUser { get; set; } // ICUser (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        // Foreign keys

        /// <summary>
        /// Parent CustomerProductGroup pointed by [ReleaseDetails].([CustomerProductGroupId]) (FK_ReleaseDetails_CustomerProductGroups)
        /// </summary>
        public virtual CustomerProductGroup CustomerProductGroup { get; set; } // FK_ReleaseDetails_CustomerProductGroups

        /// <summary>
        /// Parent Release pointed by [ReleaseDetails].([ReleaseId]) (FK_ReleaseDetails_Releases)
        /// </summary>
        public virtual Release Release { get; set; } // FK_ReleaseDetails_Releases
    }

    // Reports
    /// <summary>
    /// 2
    /// Reports.ReportID
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class Report
    {
        /// <summary>
        /// -1
        /// </summary>
        public int ReportId { get; set; } // ReportID (Primary key)

        /// <summary>
        /// 3564
        /// </summary>
        public string ReportName { get; set; } // ReportName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string ReportSystemName { get; set; } // ReportSystemName (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string ReportWmsName { get; set; } // ReportWMSName (length: 250)

        /// <summary>
        /// 1-Customers, 2-Manager, 3-IT
        /// </summary>
        public byte RecipientGroupId { get; set; } // RecipientGroupID
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public Report()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // ReportDates
    public class ReportDate
    {
        public DateTime ReportDate_ { get; set; } // ReportDate (Primary key)
        public string ReportMonth { get; set; } // ReportMonth (Primary key) (length: 7)
        public DateTime BeginOfTheMonth { get; set; } // BeginOfTheMonth (Primary key)
        public DateTime EndOfTheMonth { get; set; } // EndOfTheMonth (Primary key)
        public int DaysOfTheMonth { get; set; } // DaysOfTheMonth (Primary key)
        public int WeekNumber { get; set; } // WeekNumber (Primary key)
        public Guid? StockOnHandWeeklyId { get; set; } // StockOnHandWeeklyID
    }

    // ReportToCustomer
    /// <summary>
    /// 0
    /// </summary>
    public class ReportToCustomer
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ReportToCustomerId { get; set; } // ReportToCustomerID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string SendObject { get; set; } // SendObject (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 500)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime SentTime { get; set; } // SentTime

        /// <summary>
        /// 0
        /// </summary>
        public string SentBy { get; set; } // SentBy (length: 50)

        /// <summary>
        /// 109
        /// </summary>
        public string SendAddress { get; set; } // SendAddress (length: 500)
    }

    // The table 'Results' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Results
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 465
    /// 500
    /// </summary>
    public class Result
    {
        /// <summary>
        /// 0
        /// </summary>
        public string String { get; set; } // String (length: 500)
    }

    // Rooms
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class Room
    {
        public Guid RoomId { get; set; } // RoomID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string RoomNumber { get; set; } // RoomNumber (length: 2)

        /// <summary>
        /// -1
        /// </summary>
        public float Temperature { get; set; } // Temperature

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? DateRoom { get; set; } // DateRoom

        /// <summary>
        /// 0
        /// </summary>
        public byte Warehouse { get; set; } // Warehouse

        /// <summary>
        /// 0
        /// </summary>
        public string RoomDescription { get; set; } // RoomDescription (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public int? RoomArea { get; set; } // RoomArea

        /// <summary>
        /// 0
        /// </summary>
        public int? QuantityOfPallets { get; set; } // QuantityOfPallets

        /// <summary>
        /// 0
        /// </summary>
        public int? RoomVolume { get; set; } // RoomVolume

        /// <summary>
        /// 0
        /// </summary>
        public string RoomProductStorage { get; set; } // RoomProductStorage (length: 250)
        public float? TemperatureFrom { get; set; } // TemperatureFrom
        public float? TemperatureTo { get; set; } // TemperatureTo
        public float? HumidityFrom { get; set; } // HumidityFrom
        public float? HumidityTo { get; set; } // HumidityTo
        public string UpdatedBy { get; set; } // UpdatedBy (length: 200)
        public int StoreId { get; set; } // StoreID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid? LostProductLocationId { get; set; } // LostProductLocationID

        public Room()
        {
            RoomId = Guid.NewGuid();
            Warehouse = 1;
            CreatedTime = DateTime.Now;
        }
    }

    // The table 'Room_Area' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Room_Area
    public class RoomArea
    {
        public string Room { get; set; } // Room (length: 3)
        public string Area { get; set; } // Area (length: 2)
        public int? Id { get; set; } // id
        public string Wms { get; set; } // WMS (length: 2)
    }

    // RoomNumbers
    /// <summary>
    /// 0
    /// </summary>
    public class RoomNumber
    {
        /// <summary>
        /// 0
        /// </summary>
        public string RoomId { get; set; } // RoomID (Primary key) (length: 1)

        /// <summary>
        /// 0
        /// </summary>
        public int? RoomNumber_ { get; set; } // RoomNumber
    }

    // Rooms_Locations
    public class RoomsLocation
    {
        public Guid RoomId { get; set; } // RoomID (Primary key)
        public int QtyLow { get; set; } // QtyLow
        public int QtyHigh { get; set; } // QtyHigh

        /// <summary>
        /// 0
        /// </summary>
        public int? QtyStandards { get; set; } // QtyStandards
        public int? QtyAvailable { get; set; } // QtyAvailable
        public string RoomRemark { get; set; } // RoomRemark (length: 250)
        public int StoreId { get; set; } // StoreID
        public string RoomNumber { get; set; } // RoomNumber (length: 2)
        public float? TemperatureFrom { get; set; } // TemperatureFrom
        public float? TemperatureTo { get; set; } // TemperatureTo
        public float? HumidityFrom { get; set; } // HumidityFrom
        public float? HumidityTo { get; set; } // HumidityTo
    }

    // SafetyClothesEnquiry
    public class SafetyClothesEnquiry
    {
        public int SafetyClothesEnquiryId { get; set; } // SafetyClothesEnquiryID (Primary key)
        public int EmployeeId { get; set; } // EmployeeID
        public DateTime EnquiryDate { get; set; } // EnquiryDate
        public string EnquiryRemark { get; set; } // EnquiryRemark (length: 150)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? Confirmed { get; set; } // Confirmed
        public byte[] Ts { get; set; } // ts
        public int? StoreId { get; set; } // StoreID

        public SafetyClothesEnquiry()
        {
            CreatedTime = DateTime.Now;
            Confirmed = false;
        }
    }

    // SafetyClothesEnquiryDetails
    public class SafetyClothesEnquiryDetail
    {
        public int SafetyClothesEnquiryDetailId { get; set; } // SafetyClothesEnquiryDetailID (Primary key)
        public int SafetyClothesEnquiryId { get; set; } // SafetyClothesEnquiryID
        public int PartId { get; set; } // PartID
        public int? EnquiryQuantity { get; set; } // EnquiryQuantity
        public int? EnquiryIdOld { get; set; } // EnquiryID_Old
        public int? SafetyClothesIdOld { get; set; } // SafetyClothesID_Old
        public int? EnquiryDetailIdOld { get; set; } // EnquiryDetailID_Old
    }

    // SafetyContacts
    public class SafetyContact
    {
        public int SafetyContactId { get; set; } // SafetyContactID (Primary key)
        public DateTime SafetyContactDate { get; set; } // SafetyContactDate (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 20)
        public DateTime CreatedTime { get; set; } // CreatedTime (Primary key)
        public string SafetyContactDescription { get; set; } // SafetyContactDescription (length: 1000)
        public string EmployeeId { get; set; } // EmployeeID (length: 100)
        public string SafetyCommiteeResponse { get; set; } // SafetyCommiteeResponse (length: 1000)
        public string TaskAssignedTo { get; set; } // TaskAssignedTo (length: 20)
        public DateTime? TaskPlannedDate { get; set; } // TaskPlannedDate
        public bool TaskCompleted { get; set; } // TaskCompleted (Primary key)
        public bool Confirmed { get; set; } // Confirmed (Primary key)
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 20)
        public string ManagementResponse { get; set; } // ManagementResponse (length: 1000)
    }

    // SafetyStocks
    /// <summary>
    /// System.Byte[]
    /// SafetyStocks.ProductIDPack
    /// 1
    /// System.Byte[]
    /// 0
    /// </summary>
    public class SafetyStock
    {
        public Guid SafetyStockId { get; set; } // SafetyStockID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNumber6 { get; set; } // ProductNumber6 (length: 18)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductName6 { get; set; } // ProductName6 (length: 70)

        /// <summary>
        /// 0
        /// </summary>
        public int? SafetyStock_ { get; set; } // SafetyStock

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNumber2 { get; set; } // ProductNumber2 (length: 18)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductName2 { get; set; } // ProductName2 (length: 70)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNumberP { get; set; } // ProductNumberP (length: 18)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNameP { get; set; } // ProductNameP (length: 70)

        /// <summary>
        /// 64xxxxxx
        /// </summary>
        public Guid? ProductId6 { get; set; } // ProductID6

        /// <summary>
        /// xxxxxxxx
        /// </summary>
        public Guid? ProductId2 { get; set; } // ProductID2

        /// <summary>
        /// WMP-808
        /// </summary>
        public Guid? ProductIdPack { get; set; } // ProductIDPack
        public Guid? CustomerId { get; set; } // CustomerID

        public SafetyStock()
        {
            SafetyStockId = Guid.NewGuid();
            SafetyStock_ = 0;
        }
    }

    // SafetyStockReasons
    public class SafetyStockReason
    {
        public int SafetyStockReasonId { get; set; } // SafetyStockReasonID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? ProductId6 { get; set; } // ProductID6

        /// <summary>
        /// 0
        /// </summary>
        public string Reason { get; set; } // Reason (length: 150)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ReasonTime { get; set; } // ReasonTime

        /// <summary>
        /// 0
        /// </summary>
        public string Owner { get; set; } // Owner (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public int? ProductId6Stock { get; set; } // ProductID6_Stock

        /// <summary>
        /// 0
        /// </summary>
        public int? ProductIdPackStock { get; set; } // ProductIDPack_Stock

        /// <summary>
        /// 0
        /// </summary>
        public int? ProductId2Stock { get; set; } // ProductID2_Stock

        /// <summary>
        /// 0
        /// </summary>
        public bool? IsCurrent { get; set; } // IsCurrent

        public SafetyStockReason()
        {
            IsCurrent = true;
        }
    }

    // SafetyStockReasonDefinitions
    public class SafetyStockReasonDefinition
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ReasonId { get; set; } // ReasonID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string Reason { get; set; } // Reason (length: 150)
    }

    // SalesOrders
    public class SalesOrder
    {
        public Guid SalesOrderId { get; set; } // SalesOrderID (Primary key)
        public string SalesOrderNumber { get; set; } // SalesOrderNumber (length: 30)
        public DateTime? SalesOrderDate { get; set; } // SalesOrderDate
        public Guid StoreId { get; set; } // StoreID
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string SalesOrderRemark { get; set; } // SalesOrderRemark (length: 200)
        public Guid? CustomerId { get; set; } // CustomerID
        public byte? OperationCategoryId { get; set; } // OperationCategoryID
        public string SoNo { get; set; } // SO_NO (length: 50)
        public string TruckNumber { get; set; } // TruckNumber (length: 50)
        public string DriverName { get; set; } // DriverName (length: 50)
        public bool? SalesOrderConfirmed { get; set; } // SalesOrderConfirmed
        public byte[] Ts { get; set; } // TS
        public byte SupplierGroupId { get; set; } // SupplierGroupID
        public int? SalesOrderDept { get; set; } // SalesOrderDept
        public byte? Status { get; set; } // Status

        // Reverse navigation

        /// <summary>
        /// Child SalesOrderProducts where [SalesOrderProducts].[SalesOrderID] point to this entity (FK_SaleOrderProduct_SalesOrderID)
        /// </summary>
        public virtual ICollection<SalesOrderProduct> SalesOrderProducts { get; set; } // SalesOrderProducts.FK_SaleOrderProduct_SalesOrderID

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [SalesOrders].([CustomerId]) (FK_SaleOrder_Customer)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_SaleOrder_Customer

        /// <summary>
        /// Parent CustomerClient pointed by [SalesOrders].([StoreId]) (FK_SaleOrder_CustomerClients)
        /// </summary>
        public virtual CustomerClient CustomerClient { get; set; } // FK_SaleOrder_CustomerClients

        public SalesOrder()
        {
            SalesOrderId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            SalesOrderConfirmed = false;
            SupplierGroupId = 0;
            SalesOrderProducts = new List<SalesOrderProduct>();
        }
    }

    // SalesOrderProducts
    public class SalesOrderProduct
    {
        public Guid SalesOrderProductId { get; set; } // SalesOrderProductID (Primary key)
        public Guid SalesOrderId { get; set; } // SalesOrderID
        public string SalesOrderProductRemark { get; set; } // SalesOrderProductRemark (length: 200)
        public string ProductNumer { get; set; } // ProductNumer (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public byte? Status { get; set; } // Status
        public int? PurchasingOrderProductId { get; set; } // PurchasingOrderProductID
        public int? DispatchedActualCarton { get; set; } // DispatchedActualCarton
        public decimal? DispatchedActualWeight { get; set; } // DispatchedActualWeight
        public decimal? DispatchedActualVolume { get; set; } // DispatchedActualVolume
        public int? StoreBookingCarton { get; set; } // StoreBookingCarton
        public decimal? StoreBookingWeight { get; set; } // StoreBookingWeight
        public decimal? StoreBookingVolume { get; set; } // StoreBookingVolume
        public int? DispatchedActualBasket1 { get; set; } // DispatchedActualBasket1
        public int? DispatchedActualBasket2 { get; set; } // DispatchedActualBasket2
        public int? DispatchedActualPallet { get; set; } // DispatchedActualPallet
        public decimal? DispatchedGrossWeight { get; set; } // DispatchedGrossWeight
        public decimal? DispatchedGrossWeightScale { get; set; } // DispatchedGrossWeightScale
        public decimal? PackagingWeight { get; set; } // PackagingWeight
        public string SoNo { get; set; } // SO_NO (length: 50)
        public float? Lining { get; set; } // Lining
        public bool? BreakCheck { get; set; } // BreakCheck
        public byte[] Ts { get; set; } // ts
        public decimal? DamageWeightPercent { get; set; } // DamageWeightPercent
        public bool? SopQuarantine { get; set; } // SOPQuarantine
        public int? DispatchedActualBasket3 { get; set; } // DispatchedActualBasket3
        public int? DispatchedActualBasket4 { get; set; } // DispatchedActualBasket4
        public int? DispatchedActualBasket5 { get; set; } // DispatchedActualBasket5
        public int? DispatchedActualBasket6 { get; set; } // DispatchedActualBasket6
        public int? Trolley { get; set; } // Trolley
        public int? BasketId { get; set; } // BasketID
        public int? BasketQuantity { get; set; } // BasketQuantity
        public double? NaturalLossRateSo { get; set; } // NaturalLossRateSO
        public string PoNo { get; set; } // PO_NO (length: 50)
        public string PoNoLine { get; set; } // PO_NOLine (length: 50)
        public string Lv { get; set; } // LV (length: 50)
        public string Lu { get; set; } // LU (length: 50)
        public string Comm { get; set; } // COMM (length: 50)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 250)
        public string WhCode { get; set; } // WH_CODE (length: 50)
        public string TillCode { get; set; } // TILL_CODE (length: 50)
        public DateTime? ScannedTime { get; set; } // ScannedTime
        public string ScannedBy { get; set; } // ScannedBy (length: 30)
        public string ScannedResult { get; set; } // ScannedResult (length: 10)
        public byte? ScannedStatus { get; set; } // ScannedStatus
        public string Region { get; set; } // REGION (length: 50)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string Pakage1 { get; set; } // Pakage1 (length: 255)
        public string Pakage2 { get; set; } // Pakage2 (length: 255)

        // Foreign keys

        /// <summary>
        /// Parent SalesOrder pointed by [SalesOrderProducts].([SalesOrderId]) (FK_SaleOrderProduct_SalesOrderID)
        /// </summary>
        public virtual SalesOrder SalesOrder { get; set; } // FK_SaleOrderProduct_SalesOrderID

        public SalesOrderProduct()
        {
            SalesOrderProductId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Status = 0;
            SoNo = "0";
            Lining = 0f;
            DamageWeightPercent = 0m;
            NaturalLossRateSo = 0;
            ScannedStatus = 0;
        }
    }

    // Schedules
    /// <summary>
    /// 2
    /// Schedules.Label
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class Schedule
    {
        /// <summary>
        /// -1
        /// </summary>
        public int Id { get; set; } // ID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int? EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// -1
        /// </summary>
        public int? UserId { get; set; } // UserId

        /// <summary>
        /// -1
        /// </summary>
        public int? Status { get; set; } // Status

        /// <summary>
        /// 2484
        /// </summary>
        public string Subject { get; set; } // Subject (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Description { get; set; } // Description

        /// <summary>
        /// -1
        /// </summary>
        public int? Label { get; set; } // Label

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime

        /// <summary>
        /// -1
        /// </summary>
        public string Location { get; set; } // Location (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public bool? AllDay { get; set; } // AllDay

        /// <summary>
        /// -1
        /// </summary>
        public int? EventType { get; set; } // EventType

        /// <summary>
        /// -1
        /// </summary>
        public string RecurrenceInfo { get; set; } // RecurrenceInfo

        /// <summary>
        /// -1
        /// </summary>
        public string ReminderInfo { get; set; } // ReminderInfo

        /// <summary>
        /// -1
        /// </summary>
        public decimal? Price { get; set; } // Price

        /// <summary>
        /// -1
        /// </summary>
        public string ContactInfo { get; set; } // ContactInfo
    }

    // ServicesDefinition
    /// <summary>
    /// 2
    /// ServicesDefinition.ServiceNumber
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class ServicesDefinition
    {
        public Guid ServicesDefinitionId { get; set; } // ServicesDefinitionID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)

        /// <summary>
        /// 3612
        /// </summary>
        public string ServiceName { get; set; } // ServiceName (length: 150)
        public string ServiceNameVietnamese { get; set; } // ServiceNameVietnamese (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public bool Code { get; set; } // Code

        /// <summary>
        /// -1
        /// </summary>
        public int? CustomerCategory { get; set; } // CustomerCategory

        /// <summary>
        /// -1
        /// </summary>
        public string ServiceCategory { get; set; } // ServiceCategory (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public double? CheckingQuantityMax { get; set; } // CheckingQuantityMax

        /// <summary>
        /// -1
        /// </summary>
        public double? CheckingQuantityMin { get; set; } // CheckingQuantityMin
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? HandlingOvertime { get; set; } // HandlingOvertime
        public string ServiceType { get; set; } // ServiceType (length: 50)
        public string ServiceStandardScopeOfWork { get; set; } // ServiceStandardScopeOfWork (length: 4000)
        public decimal? ServicePrice { get; set; } // ServicePrice
        public string ScopeOfWork { get; set; } // ScopeOfWork
        public string ScopeOfWorkVietnam { get; set; } // ScopeOfWorkVietnam
        public bool? Discontinued { get; set; } // Discontinued
        public string ServicesDefinitionMeasureId { get; set; } // ServicesDefinitionMeasureID (length: 50)
        public string Measure { get; set; } // Measure (length: 100)
        public string MeasureVietnam { get; set; } // MeasureVietnam (length: 100)
        public byte Vat { get; set; } // VAT
        public string MemoLineName { get; set; } // MEMO_LINE_NAME (length: 100)
        public byte[] Ts { get; set; } // ts
        public string ServiceDescription { get; set; } // ServiceDescription (length: 300)

        /// <summary>
        /// 0-Normal, 1-Bac thang
        /// </summary>
        public byte? ServiceMethod { get; set; } // ServiceMethod

        // Reverse navigation

        /// <summary>
        /// Child ContractDetails where [ContractDetails].[ServicesDefinitionID] point to this entity (FK_ContractDetails_ServicesDefinition)
        /// </summary>
        public virtual ICollection<ContractDetail> ContractDetails { get; set; } // ContractDetails.FK_ContractDetails_ServicesDefinition

        /// <summary>
        /// Child OtherServiceDetails where [OtherServiceDetails].[ServicesDefinitionID] point to this entity (FK_OtherServiceDetails_ServicesDefinition)
        /// </summary>
        public virtual ICollection<OtherServiceDetail> OtherServiceDetails { get; set; } // OtherServiceDetails.FK_OtherServiceDetails_ServicesDefinition

        public ServicesDefinition()
        {
            ServicesDefinitionId = Guid.NewGuid();
            Code = false;
            ServiceCategory = "Both";
            CreatedTime = DateTime.Now;
            HandlingOvertime = false;
            ServicePrice = 0m;
            Discontinued = false;
            Vat = 0;
            ServiceMethod = 0;
            ContractDetails = new List<ContractDetail>();
            OtherServiceDetails = new List<OtherServiceDetail>();
        }
    }

    // ServicesDefinitionMeasures
    public class ServicesDefinitionMeasure
    {
        public string ServicesDefinitionMeasureId { get; set; } // ServicesDefinitionMeasureID (Primary key) (length: 50)
        public string ServicesDefinitionMeasureVn { get; set; } // ServicesDefinitionMeasureVN (length: 50)
        public string MeasureDescription { get; set; } // MeasureDescription (length: 200)
    }

    // ServicesDefinition_MEMO_LINE_NAME
    public class ServicesDefinitionMemoLineName
    {
        public string ServiceNumber { get; set; } // ServiceNumber (Primary key) (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 150)
        public string MemoLineName { get; set; } // MEMO_LINE_NAME (length: 50)
        public string ServiceDescription { get; set; } // ServiceDescription (length: 300)
    }

    // ServicesDefinition_tmp
    public class ServicesDefinitionTmp
    {
        public string ServiceNumber { get; set; } // ServiceNumber (Primary key) (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 150)
        public string ServiceNameVietnamese { get; set; } // ServiceNameVietnamese (length: 150)
        public string ServiceDescription { get; set; } // ServiceDescription (length: 300)
    }

    // Shifts
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class Shift
    {
        /// <summary>
        /// 0
        /// </summary>
        public byte ShiftId { get; set; } // ShiftID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime FromTime { get; set; } // FromTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime ToTime { get; set; } // ToTime
        public byte? ShiftName { get; set; } // ShiftName
        public byte? WorkingHours { get; set; } // WorkingHours
    }

    // SOLOMON_ContractDetails
    public class SolomonContractDetail
    {
        public string ContractNbr { get; set; } // ContractNbr (length: 30)
        public string CustomerId { get; set; } // CustomerID (length: 15)
        public string ServiceId { get; set; } // ServiceID (length: 20)
        public DateTime FromDate { get; set; } // FromDate
        public DateTime ToDate { get; set; } // ToDate
        public double? Price { get; set; } // Price
        public string CuryId { get; set; } // CuryID (length: 10)
        public string Status { get; set; } // Status (length: 1)
        public DateTime? ReviewDate { get; set; } // ReviewDate
    }

    // SOLOMON_ServicesDefinition
    public class SolomonServicesDefinition
    {
        public string ServiceId { get; set; } // serviceID (length: 20)
        public string ServiceName { get; set; } // ServiceName (length: 60)
        public string Uom { get; set; } // UOM (length: 6)
    }

    // SOShipped
    public class SoShipped
    {
        public string SoNumber { get; set; } // SONumber (length: 30)
        public Guid TripId { get; set; } // TripID
        public DateTime CreatedTime { get; set; } // CreatedTime
        public DateTime DeliveryDate { get; set; } // DeliveryDate
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public int IsDeleted { get; set; } // IsDeleted
        public string DeletedBy { get; set; } // DeletedBy (length: 255)
        public Guid Id { get; set; } // ID (Primary key)

        public SoShipped()
        {
            CreatedTime = DateTime.Now;
            IsDeleted = 0;
            Id = Guid.NewGuid();
        }
    }

    // StationaryRequests
    public class StationaryRequest
    {
        public int StationaryRequestId { get; set; } // StationaryRequestID (Primary key)
        public DateTime StationaryRequestDate { get; set; } // StationaryRequestDate
        public int RequestedBy { get; set; } // RequestedBy
        public string StationaryRequestRemark { get; set; } // StationaryRequestRemark (length: 50)
        public DateTime? EspectedDeliveryDate { get; set; } // EspectedDeliveryDate
        public bool? Confirmed { get; set; } // Confirmed
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public int? StationaryRequestOldId { get; set; } // StationaryRequestOldID
        public byte[] Ts { get; set; } // ts
    }

    // StockMovements
    /// <summary>
    /// 2
    /// ((AuthorisedBy=&quot;Cong&quot;))
    /// StockMovements.StockMovementID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class StockMovement
    {
        public Guid StockMovementId { get; set; } // StockMovementID (Primary key)

        /// <summary>
        /// 2145
        /// </summary>
        public DateTime? DateMovement { get; set; } // DateMovement

        /// <summary>
        /// -1
        /// </summary>
        public bool Automatic { get; set; } // Automatic

        /// <summary>
        /// -1
        /// </summary>
        public string ReasonMovement { get; set; } // ReasonMovement (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public string AuthorisedBy { get; set; } // AuthorisedBy (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string StockMovementType { get; set; } // StockMovementType (length: 15)
        public Guid? EmployeeId { get; set; } // EmployeeID
        public Guid SourceLocation { get; set; } // SourceLocation
        public Guid DestinationLocation { get; set; } // DestinationLocation

        public StockMovement()
        {
            StockMovementId = Guid.NewGuid();
            Automatic = false;
            CreatedTime = DateTime.Now;
        }
    }

    // StockMovementDetails
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 500000
    /// </summary>
    public class StockMovementDetail
    {
        public Guid StockMovementDetailId { get; set; } // StockMovementDetailID (Primary key)
        public Guid? StockMovementId { get; set; } // StockMovementID
        public Guid? PalletId { get; set; } // PalletID

        /// <summary>
        /// -1
        /// </summary>
        public int? Quantity { get; set; } // quantity
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public StockMovementDetail()
        {
            StockMovementDetailId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // StockMovementMass
    /// <summary>
    /// System.Byte[]
    /// StockMovementMass.StockMovementMassID DESC
    /// 1
    /// System.Byte[]
    /// 0
    /// </summary>
    public class StockMovementMass
    {
        /// <summary>
        /// 0
        /// </summary>
        public DateTime StockMovementMassDate { get; set; } // StockMovementMassDate

        /// <summary>
        /// 0
        /// </summary>
        public string UserId { get; set; } // UserID (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string StockMovementMassRemark { get; set; } // StockMovementMassRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool StockMovementMassConfirm { get; set; } // StockMovementMassConfirm

        /// <summary>
        /// 0
        /// </summary>
        public string StockMovementMassInformation { get; set; } // StockMovementMassInformation (length: 250)
        public string StockMovementMassNumber { get; set; } // StockMovementMassNumber (length: 20)
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public bool IsPrinted { get; set; } // IsPrinted
        public byte[] Ts { get; set; } // Ts
        public Guid StockMovementMassId { get; set; } // StockMovementMassID (Primary key)
        public Guid? ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid? ReceivingOrderId { get; set; } // ReceivingOrderID
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public Guid? EmployeeId2 { get; set; } // EmployeeID2
        public Guid? EmployeeId3 { get; set; } // EmployeeID3
        public int? StockMovementMassLocalId { get; set; } // StockMovementMassLocalID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? StoreId { get; set; } // StoreID
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 30)

        public StockMovementMass()
        {
            StockMovementMassConfirm = false;
            IsPrinted = false;
            StockMovementMassId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            ConfirmedTime = DateTime.Now;
        }
    }

    // StockMovementMassPallets
    public class StockMovementMassPallet
    {
        public Guid StockMovementMassPalletId { get; set; } // StockMovementMassPalletID (Primary key)
        public Guid PalletId { get; set; } // PalletID
        public long? PalletNumber { get; set; } // PalletNumber
        public Guid SourceLocationId { get; set; } // SourceLocationID
        public string Label { get; set; } // Label (length: 15)
        public Guid? DestinationLocationId { get; set; } // DestinationLocationID
        public Guid? ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public bool? OnHold { get; set; } // OnHold
        public byte? Status { get; set; } // status
        public bool? CanMove { get; set; } // CanMove
        public string Remark { get; set; } // Remark (length: 800)
        public bool? CanNotAdd { get; set; } // CanNotAdd
        public byte[] Ts { get; set; } // TS
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public byte? PalletStatus { get; set; } // PalletStatus
        public string ReceivingScannedBy { get; set; } // ReceivingScannedBy (length: 50)
        public DateTime? ReceivingScannedTime { get; set; } // ReceivingScannedTime
        public string PutAwayScannedBy { get; set; } // PutAwayScannedBy (length: 50)
        public DateTime? PutAwayScannedTime { get; set; } // PutAwayScannedTime
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid StockMovementMassId { get; set; } // StockMovementMassID

        public StockMovementMassPallet()
        {
            StockMovementMassPalletId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // StockOnHandDaily
    public class StockOnHandDaily
    {
        public Guid DateId { get; set; } // DateID
        public DateTime ReportDate { get; set; } // ReportDate
        public bool Confirmed { get; set; } // Confirmed
        public string DoneBy { get; set; } // DoneBy (length: 50)
        public DateTime CreatedTime { get; set; } // CreatedTime
    }

    // StockOnHandDailyCapacity
    public class StockOnHandDailyCapacity
    {
        public Guid StockOnHandDailyCapacityId { get; set; } // StockOnHandDailyCapacityID
        public int StoreId { get; set; } // StoreID
        public Guid RoomId { get; set; } // RoomID
        public int QuantityOfLocations { get; set; } // QuantityOfLocations
        public int QuantityOfLocationOff { get; set; } // QuantityOfLocationOff
        public int QuantityOfLocationOccupied { get; set; } // QuantityOfLocationOccupied
        public Guid DateId { get; set; } // DateID
        public int? QuantityOfLocationsFixed { get; set; } // QuantityOfLocationsFixed
        public int? QuantityOfLocationsVirtual { get; set; } // QuantityOfLocationsVirtual
    }

    // StockOnHandDailyDetails
    public class StockOnHandDailyDetail
    {
        public Guid StockOnHandDetailId { get; set; } // StockOnHandDetailID
        public int? ProductLines { get; set; } // ProductLines
        public int? Pallets { get; set; } // Pallets
        public double? Weight { get; set; } // Weight
        public long? Cartons { get; set; } // Cartons
        public string Remarks { get; set; } // Remarks (length: 50)
        public string DoneBy { get; set; } // DoneBy (length: 50)
        public int? PalletLow { get; set; } // PalletLow
        public int? PalletVeryLow { get; set; } // PalletVeryLow
        public int? PalletVeryHigh { get; set; } // PalletVeryHigh
        public int? PalletHigh { get; set; } // PalletHigh
        public int? PalletIn { get; set; } // PalletIn
        public Guid DateId { get; set; } // DateID
        public Guid CustomerId { get; set; } // CustomerID
    }

    // StockOnHandDailyDetailPallets
    public class StockOnHandDailyDetailPallet
    {
        public Guid StockOnHandDetailPalletId { get; set; } // StockOnHandDetailPalletID
        public Guid DateId { get; set; } // DateID
        public Guid PalletId { get; set; } // PalletID
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public string Label { get; set; } // Label (length: 15)
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public bool OnHold { get; set; } // OnHold
        public Guid LocationId { get; set; } // LocationID
        public bool Status { get; set; } // status
        public bool CanMove { get; set; } // CanMove
        public string Remark { get; set; } // Remark (length: 800)
        public bool CanNotAdd { get; set; } // CanNotAdd
        public byte[] Ts { get; set; } // TS
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public byte? PalletStatus { get; set; } // PalletStatus
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? BillingCalculated { get; set; } // BillingCalculated
        public string BillingComments { get; set; } // BillingComments (length: 250)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 20)
        public byte? LocationCategoryId { get; set; } // LocationCategoryID
        public long? PalletNumber { get; set; } // PalletNumber
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
    }

    // StockOnHandDailyDetailsByRoom
    public class StockOnHandDailyDetailsByRoom
    {
        public Guid StockOnHandDailyByRoomId { get; set; } // StockOnHandDailyByRoomID
        public Guid StockOnHandId { get; set; } // StockOnHandID
        public Guid RoomId { get; set; } // RoomID
        public long QuantityPallets { get; set; } // QuantityPallets
        public long QuantityCartons { get; set; } // QuantityCartons
        public long QuantityWeight { get; set; } // QuantityWeight
        public Guid CustomerId { get; set; } // CustomerID
    }

    // StockOnHandDailyInOut
    public class StockOnHandDailyInOut
    {
        public int StockOnHandDailyInOutId { get; set; } // StockOnHandDailyInOutID
        public int DateId { get; set; } // DateID
        public long? InC { get; set; } // InC
        public long? InW { get; set; } // InW
        public long? InP { get; set; } // InP
        public long? OutC { get; set; } // OutC
        public long? OutW { get; set; } // OutW
        public long? OutP { get; set; } // OutP
        public int? StoreId { get; set; } // StoreID
    }

    // StockOnHandWeekly
    public class StockOnHandWeekly
    {
        public int WeekId { get; set; } // WeekID
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime ToDate { get; set; } // ToDate
        public string WeekRemarks { get; set; } // WeekRemarks (length: 250)
        public bool WeekConfirm { get; set; } // WeekConfirm
    }

    // StockOnHandWeeklyDetails
    public class StockOnHandWeeklyDetail
    {
        public int DataId { get; set; } // DataID
        public int WeekId { get; set; } // WeekID
        public int CustomerId { get; set; } // CustomerID
        public int? ActualProductLines { get; set; } // ActualProductLines
        public int? ConProductLines { get; set; } // ConProductLines
        public int? OccupiedPallets { get; set; } // OccupiedPallets
        public double? TotalWeight { get; set; } // TotalWeight
        public int? NumberOfCartons { get; set; } // NumberOfCartons
        public string Remarks { get; set; } // Remarks (length: 250)
        public double? HandlingWeight { get; set; } // HandlingWeight
        public double? WorkerWeight { get; set; } // WorkerWeight
        public double? DockHours { get; set; } // DockHours
    }

    // Stores
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class Store
    {
        /// <summary>
        /// -1
        /// </summary>
        public int StoreId { get; set; } // StoreID (Primary key)
        public string StoreNumber { get; set; } // StoreNumber (length: 30)

        /// <summary>
        /// -1
        /// </summary>
        public string StoreDescription { get; set; } // StoreDescription (length: 250)

        /// <summary>
        /// 3336
        /// </summary>
        public string StoreVietnam { get; set; } // StoreVietnam (length: 250)
        public string RangeId { get; set; } // RangeID (length: 20)
    }

    // The table 'StoreCarton' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // StoreCarton
    public class StoreCarton
    {
        public string Code { get; set; } // Code (length: 255)
        public string ShipTo { get; set; } // ShipTo (length: 255)
        public string CartonBarcode { get; set; } // CartonBarcode (length: 255)
        public string CatonId { get; set; } // CatonID (length: 255)
        public string Key { get; set; } // Key (length: 255)
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public Guid? CustomerId { get; set; } // CustomerID
        public DateTime? OrderDate { get; set; } // OrderDate
    }

    // store_temp
    public class StoreTemp
    {
        public string Wms { get; set; } // WMS (Primary key) (length: 10)
        public string Hq { get; set; } // HQ (Primary key) (length: 10)
        public int Type { get; set; } // Type (Primary key)
    }

    // Suppliers
    /// <summary>
    /// System.Byte[]
    /// Suppliers.SupplierID_OLD DESC
    /// 1
    /// System.Byte[]
    /// 0
    /// </summary>
    public class Supplier
    {
        /// <summary>
        /// -1
        /// </summary>
        public int SupplierId { get; set; } // SupplierID (Primary key)
        public string SupplierCode { get; set; } // SupplierCode (length: 50)

        /// <summary>
        /// 3648
        /// </summary>
        public string SupplierName { get; set; } // SupplierName (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string SupplierAddress { get; set; } // SupplierAddress (length: 250)
        public Guid? CustomerId { get; set; } // CustomerID

        /// <summary>
        /// -1
        /// </summary>
        public string SupplierContactName { get; set; } // SupplierContactName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string SupplierTitle { get; set; } // SupplierTitle (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string SupplierPhone { get; set; } // SupplierPhone (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string SupplierFax { get; set; } // SupplierFax (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string SupplierEmail { get; set; } // SupplierEmail (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string SupplierRemark { get; set; } // SupplierRemark (length: 300)

        /// <summary>
        /// 0
        /// </summary>
        public string SupplierFullName { get; set; } // SupplierFullName (length: 250)
        public bool? StrategicSupplier { get; set; } // StrategicSupplier
        public byte[] Ts { get; set; } // ts
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 150)
        public string SupplierTaxCode { get; set; } // SupplierTaxCode (length: 25)
        public string SupplierBankAccountNumber { get; set; } // SupplierBankAccountNumber (length: 25)
        public string SupplierBankAccountName { get; set; } // SupplierBankAccountName (length: 100)
        public int? SupplierOldId { get; set; } // SupplierOldID
        public string SupplierMobile { get; set; } // SupplierMobile (length: 50)
        public string SupplierWebsite { get; set; } // SupplierWebsite (length: 70)

        // Reverse navigation

        /// <summary>
        /// Child PurchasingOrders where [PurchasingOrders].[SupplierID] point to this entity (FK_PurchasingOrders_Suppliers)
        /// </summary>
        public virtual ICollection<PurchasingOrder> PurchasingOrders { get; set; } // PurchasingOrders.FK_PurchasingOrders_Suppliers

        /// <summary>
        /// Child ReceivedParts where [ReceivedParts].[SupplierID] point to this entity (FK_ReceivedParts_Suppliers1)
        /// </summary>
        public virtual ICollection<ReceivedPart> ReceivedParts { get; set; } // ReceivedParts.FK_ReceivedParts_Suppliers1

        public Supplier()
        {
            CreatedTime = DateTime.Now;
            SupplierTaxCode = "0";
            PurchasingOrders = new List<PurchasingOrder>();
            ReceivedParts = new List<ReceivedPart>();
        }
    }

    // The table 'SyncSaleShipmentInfor' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // SyncSaleShipmentInfor
    public class SyncSaleShipmentInfor
    {
        public string StopType { get; set; } // STOP_TYPE (length: 255)
        public string OrderBookingId { get; set; } // OrderBookingID (length: 255)
        public string OrderReleaseGid { get; set; } // ORDER_RELEASE_GID (length: 255)
        public string OrderreleaseGid { get; set; } // Orderrelease_gid (length: 255)
        public string AtmShipmentId { get; set; } // ATM_SHIPMENT_ID (length: 255)
        public string OrderReleaseLineGid { get; set; } // ORDER_RELEASE_LINE_GID (length: 255)
        public string CustomerCode { get; set; } // CustomerCode (length: 255)
        public string Routeno { get; set; } // ROUTENO (length: 255)
        public string AtmShipmentGid { get; set; } // ATM_SHIPMENT_GID (length: 255)
        public string ShipUnitGid { get; set; } // SHIP_UNIT_GID (length: 255)
        public string ShipUnitXid { get; set; } // SHIP_UNIT_XID (length: 255)
        public string LocationGid { get; set; } // LOCATION_GID (length: 255)
        public decimal? NetWeight { get; set; } // NetWeight
        public decimal? GrossWeight { get; set; } // GrossWeight
        public string UserSync { get; set; } // UserSync (length: 30)
        public DateTime? SyncTime { get; set; } // SyncTime
        public string ShipUnitLineNo { get; set; } // SHIP_UNIT_LINE_NO (length: 255)
    }

    // SyncValidateSaleShipment
    public class SyncValidateSaleShipment
    {
        public Guid ValidateId { get; set; } // ValidateID (Primary key)
        public string WmsTripNumber { get; set; } // WMS_TripNumber (length: 30)
        public string WmsShipTo { get; set; } // WMS_ShipTo (length: 255)
        public decimal? WmsWeight { get; set; } // WMS_Weight
        public int? WmsTotalPakage { get; set; } // WMS_TotalPakage
        public string WmsVehicleNo { get; set; } // WMS_VehicleNo (length: 15)

        /// <summary>
        /// ATM_SHIPMENT_ID
        /// </summary>
        public string AtmTripNumber { get; set; } // ATM_TripNumber (length: 30)

        /// <summary>
        /// Dop_Location
        /// </summary>
        public string AtmShipTo { get; set; } // ATM_ShipTo (length: 255)
        public string OtmOrderBooking { get; set; } // OTM_OrderBooking (length: 255)

        /// <summary>
        /// TruckNumber
        /// </summary>
        public string AtmVehicleNo { get; set; } // ATM_VehicleNo (length: 30)
        public string WmsDriverName { get; set; } // WMS_DriverName (length: 255)
        public bool? ResultCheckAtmShipmmentId { get; set; } // ResultCheck_ATM_ShipmmentID
        public bool? ResultCheckAtmShipto { get; set; } // ResultCheck_ATM_Shipto
        public bool? ResultCheckOtmOtherBooking { get; set; } // ResultCheck_OTM_OtherBooking
        public string ResultCode { get; set; } // ResultCode (length: 10)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public bool? ResultCheckAtmVehicleNo { get; set; } // ResultCheck_ATM_VehicleNo
        public string Customer { get; set; } // Customer (length: 30)
        public string DeletedBy { get; set; } // DeletedBy (length: 30)
        public DateTime? DeletedTime { get; set; } // DeletedTime
        public bool? Confirmed { get; set; } // Confirmed
        public string CofirmedBy { get; set; } // CofirmedBy (length: 255)
        public bool? ResultCheckTotalShipTo { get; set; } // ResultCheck_TotalShipTo
        public string ShipToLocation { get; set; } // ShipToLocation (length: 255)

        public SyncValidateSaleShipment()
        {
            ValidateId = Guid.NewGuid();
            ResultCheckAtmShipmmentId = false;
            ResultCheckAtmShipto = false;
            ResultCheckOtmOtherBooking = false;
            CreatedTime = DateTime.Now;
            ResultCheckAtmVehicleNo = false;
        }
    }

    // TableLog
    public class TableLog
    {
        public Guid LogId { get; set; } // LogID (Primary key)
        public string UserName { get; set; } // UserName (length: 30)
        public DateTime CreateTime { get; set; } // CreateTime
        public string FunctionName { get; set; } // FunctionName (length: 50)
        public string SqlCommand { get; set; } // SQLCommand (length: 1073741823)
        public string Type { get; set; } // Type (length: 50)
        public int StoreId { get; set; } // StoreID

        public TableLog()
        {
            LogId = Guid.NewGuid();
            CreateTime = DateTime.Now;
        }
    }

    // Tasks
    /// <summary>
    /// 2
    /// ((Tasks.CustomerID=550))
    /// Tasks.LastSendTime DESC
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class Task
    {
        /// <summary>
        /// -1
        /// </summary>
        public int TaskId { get; set; } // TaskID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int ReportId { get; set; } // ReportID

        /// <summary>
        /// -1
        /// </summary>
        public short SendVia { get; set; } // SendVia

        /// <summary>
        /// -1
        /// </summary>
        public string Scheduling { get; set; } // Scheduling (length: 3)

        /// <summary>
        /// 3096
        /// </summary>
        public DateTime? LastSendTime { get; set; } // LastSendTime

        /// <summary>
        /// -1
        /// </summary>
        public bool TaskResult { get; set; } // TaskResult

        /// <summary>
        /// -1
        /// </summary>
        public string TaskResultDescription { get; set; } // TaskResultDescription (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? NextSendTime { get; set; } // NextSendTime

        /// <summary>
        /// 0
        /// </summary>
        public string Destination { get; set; } // Destination (length: 4000)

        /// <summary>
        /// 0
        /// </summary>
        public byte? ReportFormat { get; set; } // ReportFormat
        public byte[] Ts { get; set; } // TS
        public Guid? CustomerId { get; set; } // CustomerID
        public string SendAt { get; set; } // SendAt (length: 2)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string TaskType { get; set; } // TaskType (length: 30)

        public Task()
        {
            ReportId = 1;
            SendVia = 2;
            TaskResult = false;
            CreatedTime = DateTime.Now;
        }
    }

    // TaskHistories
    public class TaskHistory
    {
        public int TaskHistoryId { get; set; } // TaskHistoryID (Primary key)
        public int? TaskId { get; set; } // TaskID
        public DateTime? SentTime { get; set; } // SentTime

        public TaskHistory()
        {
            SentTime = DateTime.Now;
        }
    }

    // The table 'T_ChamCong_DataMCC' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // T_ChamCong_DataMCC
    public class TChamCongDataMcc
    {
        public string FingerMachineId { get; set; } // FingerMachineID (length: 100)
        public string Ip { get; set; } // IP (length: 100)
        public string DwTMachineNumber { get; set; } // dwTMachineNumber (length: 100)
        public string DwSenrollNumber { get; set; } // dwSenrollNumber (length: 100)
        public string DwVerifyMode { get; set; } // dwVerifyMode (length: 100)
        public string IdwInOutMode { get; set; } // idwInOutMode (length: 100)
        public string DwYear { get; set; } // dwYear (length: 100)
        public string DwMonth { get; set; } // dwMonth (length: 100)
        public string DwDay { get; set; } // dwDay (length: 100)
        public string DwHour { get; set; } // dwHour (length: 100)
        public string DwMinute { get; set; } // dwMinute (length: 100)
        public string DwSecond { get; set; } // dwSecond (length: 100)
        public string DwWorkcode { get; set; } // dwWorkcode (length: 100)
        public string DateCheck { get; set; } // dateCheck (length: 100)
    }

    // The table 'T_DataMCC5000A' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // T_DataMCC5000A
    public class TDataMcc5000A
    {
        public string FingerMachineId { get; set; } // FingerMachineID (length: 100)
        public string Ip { get; set; } // IP (length: 100)
        public string DwTMachineNumber { get; set; } // dwTMachineNumber (length: 100)
        public string IdwEnrollNumber { get; set; } // _idwEnrollNumber (length: 100)
        public string IdwVerifyMode { get; set; } // _idwVerifyMode (length: 100)
        public string IdwInOutMode { get; set; } // _idwInOutMode (length: 100)
        public string STime { get; set; } // _sTime (length: 100)
    }

    // TempIndexRouteDelivery
    public class TempIndexRouteDelivery
    {
        public Guid Id { get; set; } // ID (Primary key)
        public int PalletNumber { get; set; } // PalletNumber
        public int RouteIndex { get; set; } // RouteIndex
        public string RouteCode { get; set; } // RouteCode (length: 255)
        public string StoreNumber { get; set; } // StoreNumber (length: 255)
        public string ShipTo { get; set; } // ShipTo (length: 255)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 255)
        public string DiverName { get; set; } // DiverName (length: 255)
        public string TotalTemp { get; set; } // TotalTemp (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string Barcode { get; set; } // Barcode (length: 255)
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public int IndexRow { get; set; } // IndexRow
        public int IsDeleted { get; set; } // IsDeleted
        public string DeletedBy { get; set; } // DeletedBy (length: 255)
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public DateTime? DeliveryTime { get; set; } // DeliveryTime
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 30)

        // Foreign keys

        /// <summary>
        /// Parent CustomerClient pointed by [TempIndexRouteDelivery].([CustomerClientId]) (FK_TempIndexRouteCustomerClietns)
        /// </summary>
        public virtual CustomerClient CustomerClient { get; set; } // FK_TempIndexRouteCustomerClietns

        /// <summary>
        /// Parent DispatchingOrder pointed by [TempIndexRouteDelivery].([DispatchingOrderId]) (FK_TempIndexRouteDeliveryDispatchingOrders)
        /// </summary>
        public virtual DispatchingOrder DispatchingOrder { get; set; } // FK_TempIndexRouteDeliveryDispatchingOrders

        public TempIndexRouteDelivery()
        {
            Id = Guid.NewGuid();
            PalletNumber = 0;
            CreatedTime = DateTime.Now;
            IsDeleted = 0;
        }
    }

    // The table 'tempPickingLists' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tempPickingLists
    public class TempPickingList
    {
        public string LotNo { get; set; } // Lot_no (length: 50)
        public string TruckNo { get; set; } // Truck_no (length: 400)
        public DateTime? PickDate { get; set; } // Pick_date
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int? Quantity { get; set; } // Quantity
        public DateTime? ProDate { get; set; } // Pro_date
        public DateTime? ExpDate { get; set; } // Exp_date
        public int? ReceivingOrderNumber { get; set; } // ReceivingOrderNumber
        public string Reference { get; set; } // Reference (length: 300)
        public string Remark { get; set; } // Remark (length: 300)
        public decimal? Weights { get; set; } // Weights
        public decimal? PoWeight { get; set; } // PO_WEIGHT
        public decimal? Tolerance { get; set; } // TOLERANCE
        public int? Units { get; set; } // Units
        public string ClientCode { get; set; } // Client_Code (length: 50)
        public string IsHold { get; set; } // IsHold (length: 2)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
    }

    // The table 'TempSH_03' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // TempSH_03
    public class TempSh03
    {
        public string Ou { get; set; } // OU (length: 255)
        public string OrderNumber { get; set; } // Order Number (length: 255)
        public string OrderType { get; set; } // Order Type (length: 255)
        public string CustomerPo { get; set; } // Customer PO (length: 255)
        public string CustomerNumber { get; set; } // Customer Number (length: 255)
        public string CustomerName { get; set; } // Customer Name (length: 255)
        public string BillToLocation { get; set; } // Bill to Location (length: 255)
        public string ShipToLocation { get; set; } // Ship to Location (length: 255)
        public string BillToAddress { get; set; } // Bill to Address (length: 255)
        public string ShipToAdress { get; set; } // Ship to Adress (length: 255)
        public string Province { get; set; } // Province (length: 255)
        public DateTime? OrderDate { get; set; } // Order Date
        public DateTime? DeliveryDate { get; set; } // Delivery Date
        public DateTime? ScheduleDate { get; set; } // Schedule Date
        public string OrderItem { get; set; } // Order Item (length: 255)
        public string ItemDescription { get; set; } // Item Description (length: 255)
        public string Uom1 { get; set; } // Uom 1 (length: 255)
        public decimal? OrderQty1 { get; set; } // Order Qty 1
        public string Uom2 { get; set; } // Uom 2 (length: 255)
        public decimal? OrderQty2 { get; set; } // Order Qty 2
        public string DetailId { get; set; } // Detail ID (length: 255)
        public string Kho { get; set; } // Kho (length: 255)
        public string LinesStatus { get; set; } // Lines Status (length: 255)
        public string Hold { get; set; } // Hold (length: 255)
        public string CustomerClass { get; set; } // Customer Class (length: 255)
        public string Sub { get; set; } // Sub (length: 255)
        public string CustomerPo1 { get; set; } // Customer PO1 (length: 255)
        public string Po { get; set; } // PO (length: 255)
    }

    // Test
    public class Test
    {
        public int TestId { get; set; } // TestID (Primary key)
        public DateTime? TestTime { get; set; } // TestTime
        public string TestRemark { get; set; } // TestRemark (length: 51)
        public int? ProductId { get; set; } // ProductID
        public int? ProductIdQty { get; set; } // ProductIDQty
        public int? DispatchingOrderId { get; set; } // DispatchingOrderID
        public DateTime? ExpiryDate { get; set; } // ExpiryDate
        public string UserName { get; set; } // UserName (length: 50)
        public string ProductNumber { get; set; } // ProductNumber (length: 100)
        public short? TotalQuantity { get; set; } // TotalQuantity
        public int? CustomerMainId { get; set; } // CustomerMainID

        public Test()
        {
            TestTime = DateTime.Now;
            ExpiryDate = DateTime.Now;
        }
    }

    // TEST2
    public class Test2
    {
        public int IdAuto { get; set; } // idAuto (Primary key)
        public string Remark { get; set; } // Remark
        public int? BillingCustomerId { get; set; } // BillingCustomerID
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public float? ContractServicePrice { get; set; } // ContractServicePrice
        public float? Amount { get; set; } // Amount
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public int? RowCount { get; set; } // ROW_COUNT
        public string Dd { get; set; } // DD (length: 2)
        public string Mm { get; set; } // MM (length: 2)
        public string Kg { get; set; } // KG (length: 5)
        public string CartonWeightChar { get; set; } // CartonWeightChar (length: 5)
        public string ProductNumber { get; set; } // ProductNumber (length: 5)

        public Test2()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // Test3
    public class Test3
    {
        public int? Id { get; set; } // ID
        public string Remark { get; set; } // Remark (length: 10)
        public int Id1 { get; set; } // ID1 (Primary key)
    }

    // tmpAccounting_BillingContractNull
    public class TmpAccountingBillingContractNull
    {
        public int? ContractId { get; set; } // ContractID
        public string Name { get; set; } // Name (length: 30)
        public string CustId { get; set; } // CustID (Primary key) (length: 15)
        public string ServiceId { get; set; } // ServiceID (Primary key) (length: 20)
        public int CustomerWms { get; set; } // Customer_WMS (Primary key)
        public string ContractNbr { get; set; } // contractNbr (Primary key) (length: 30)
        public DateTime? ContractDate { get; set; } // contractDate
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime? ToDate { get; set; } // ToDate
    }

    // tmpAccounting_Revenues
    public class TmpAccountingRevenue
    {
        public string InvoiceNo { get; set; } // InvoiceNo (length: 30)
        public DateTime? InvoiceDate { get; set; } // InvoiceDate
        public DateTime? InvoiceFromDate { get; set; } // InvoiceFromDate
        public DateTime? InvoiceToDate { get; set; } // InvoiceToDate
        public string BillingNo { get; set; } // BillingNo (length: 10)
        public int? CustomerIdOld { get; set; } // CustomerID_old
        public string ServiceNumber { get; set; } // ServiceNumber (length: 20)
        public string ServiceName { get; set; } // ServiceName (length: 4000)
        public string Uom { get; set; } // UOM (length: 4000)
        public double? ServiceQuantity { get; set; } // ServiceQuantity
        public double? CuryPrice { get; set; } // CuryPrice
        public string CuryId { get; set; } // curyID (length: 10)
        public string Category { get; set; } // Category (length: 30)
        public int RecordId { get; set; } // RecordID (Primary key via unique index IX_tmpAccounting_Revenues_3)
        public string BillType { get; set; } // BillType (length: 10)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 20)
        public Guid? CustomerId { get; set; } // CustomerID
    }

    // tmpAisles
    /// <summary>
    /// 0
    /// </summary>
    public class TmpAisle
    {
        /// <summary>
        /// 0
        /// </summary>
        public int AisleId { get; set; } // AisleID (Primary key)
    }

    // tmpATMOrderRelaseIDByDate
    public class TmpAtmOrderRelaseIdByDate
    {
        public string User { get; set; } // User (Primary key) (length: 255)
        public DateTime DeliverDate { get; set; } // DeliverDate (Primary key)
        public string ShipToName { get; set; } // ShipToName (Primary key) (length: 255)
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 255)
    }

    // tmpBillingByOvertime
    public class TmpBillingByOvertime
    {
        public int BillingByOverTimeId { get; set; } // BillingByOverTimeID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public bool? BillingChecked { get; set; } // BillingChecked
        public DateTime? OrderDate { get; set; } // OrderDate
        public int? CustomerId { get; set; } // CustomerID
        public int? EmployeeId { get; set; } // EmployeeID
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut
        public int? TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
        public string VehicleNumber { get; set; } // VehicleNumber (length: 50)
        public bool? Sunday { get; set; } // Sunday
        public float? Percentage { get; set; } // Percentage

        public TmpBillingByOvertime()
        {
            BillingChecked = false;
            EmployeeId = 0;
            TotalWeight = 0m;
            Sunday = false;
            Percentage = 100f;
        }
    }

    // tmpBillingByProducts
    /// <summary>
    /// 0
    /// </summary>
    public class TmpBillingByProduct
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductName { get; set; } // ProductName (length: 100)
    }

    // tmpBillingCombined
    public class TmpBillingCombined
    {
        public int Id { get; set; } // ID (Primary key)
        public int? CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime? ToDate { get; set; } // ToDate
        public bool? CheckCombined { get; set; } // CheckCombined
        public string UserId { get; set; } // UserID (length: 30)
        public int? BillingId { get; set; } // BillingID

        public TmpBillingCombined()
        {
            CheckCombined = false;
        }
    }

    // tmpBillingCustomers
    /// <summary>
    /// 0
    /// </summary>
    public class TmpBillingCustomer
    {
        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // ID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public long? LimitedWeight { get; set; } // LimitedWeight

        /// <summary>
        /// 0
        /// </summary>
        public long? LimitedPallet { get; set; } // LimitedPallet

        /// <summary>
        /// 0
        /// </summary>
        public long? EndPreviousCarton { get; set; } // EndPreviousCarton

        /// <summary>
        /// 0
        /// </summary>
        public double? EndPreviousWeight { get; set; } // EndPreviousWeight

        /// <summary>
        /// 0
        /// </summary>
        public long? EndPreviousPallet { get; set; } // EndPreviousPallet
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? EmployeeId { get; set; } // EmployeeID

        public TmpBillingCustomer()
        {
            LimitedWeight = 0;
            LimitedPallet = 0;
        }
    }

    // tmpBillingCustomerJoined
    public class TmpBillingCustomerJoined
    {
        public int Id { get; set; } // ID (Primary key)
        public int? CustomerId { get; set; } // CustomerID
        public int? EmployeeId { get; set; } // EmployeeID

        public TmpBillingCustomerJoined()
        {
            EmployeeId = 0;
        }
    }

    // tmpBillingCustomersContracts
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class TmpBillingCustomersContract
    {
        /// <summary>
        /// 0
        /// </summary>
        public int BillingCustomerContractId { get; set; } // BillingCustomerContractID (Primary key)

        /// <summary>
        /// 2388
        /// </summary>
        public int BillingCustomerId { get; set; } // BillingCustomerID

        /// <summary>
        /// 0
        /// </summary>
        public string ServiceName { get; set; } // ServiceName (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity

        /// <summary>
        /// 0
        /// </summary>
        public string ServiceRemark { get; set; } // ServiceRemark (length: 1000)

        /// <summary>
        /// 0
        /// </summary>
        public double? CheckingQuantity { get; set; } // CheckingQuantity

        /// <summary>
        /// 0
        /// </summary>
        public double? CheckingQuantity2 { get; set; } // CheckingQuantity2

        /// <summary>
        /// 0
        /// </summary>
        public bool ManualUpdate { get; set; } // ManualUpdate
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public Guid? ContractId { get; set; } // ContractID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice

        public TmpBillingCustomersContract()
        {
            ManualUpdate = false;
            CreatedTime = DateTime.Now;
        }
    }

    // tmpBillingCustomersContracts_test
    public class TmpBillingCustomersContractsTest
    {
        public int BillingCustomerContractId { get; set; } // BillingCustomerContractID (Primary key)
        public int? BillingCustomerId { get; set; } // BillingCustomerID
        public string ServiceName { get; set; } // ServiceName (length: 250)
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity
        public string ServiceRemark { get; set; } // ServiceRemark (length: 1000)
        public double? CheckingQuantity { get; set; } // CheckingQuantity
        public double? CheckingQuantity2 { get; set; } // CheckingQuantity2
        public bool ManualUpdate { get; set; } // ManualUpdate
        public Guid? CustomerId { get; set; } // CustomerID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public Guid? ContractId { get; set; } // ContractID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice

        public TmpBillingCustomersContractsTest()
        {
            ManualUpdate = false;
            CustomerId = Guid.NewGuid();
            EmployeeId = Guid.NewGuid();
            ServicesDefinitionId = Guid.NewGuid();
            ContractId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
        }
    }

    // tmpBillingInvoiceSummaryByMonth
    public class TmpBillingInvoiceSummaryByMonth
    {
        public int TmpBillingInvoiceSummaryByMonthId { get; set; } // tmpBillingInvoiceSummaryByMonthID (Primary key)
        public Guid? CustomerId { get; set; } // CustomerID
        public string ServiceType { get; set; } // ServiceType (length: 50)
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity
        public long? Amount { get; set; } // Amount
        public int? AmountVat { get; set; } // AmountVAT
        public long? TotalAmount { get; set; } // TotalAmount
        public decimal? ContractServicePrice { get; set; } // ContractServicePrice
        public byte? Vat { get; set; } // VAT
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? BeginStockW { get; set; } // BeginStockW
        public decimal? EndStockW { get; set; } // EndStockW
        public decimal? BeginStockPlt { get; set; } // BeginStockPlt
        public decimal? EndStockPlt { get; set; } // EndStockPlt
        public int? StoreId { get; set; } // StoreID
        public string CustomerNumberAccounting { get; set; } // CustomerNumberAccounting (length: 50)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public DateTime? BillingFromDate { get; set; } // BillingFromDate
        public DateTime? BillingToDate { get; set; } // BillingToDate

        public TmpBillingInvoiceSummaryByMonth()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // tmpBillingInvoiceSummaryByMonthStorage
    public class TmpBillingInvoiceSummaryByMonthStorage
    {
        public int Id { get; set; } // ID (Primary key)
        public Guid? CustomerId { get; set; } // CustomerID
        public decimal? BeginStockW { get; set; } // BeginStockW
        public decimal? EndStockW { get; set; } // EndStockW
        public decimal? BeginStockPlt { get; set; } // BeginStockPlt
        public decimal? EndStockPlt { get; set; } // EndStockPlt
        public int? StoreId { get; set; } // StoreID
    }

    // tmpBillingReport
    /// <summary>
    /// 2
    /// ((tmpBillingReport.CustomerID=27))
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class TmpBillingReport
    {
        /// <summary>
        /// 0
        /// </summary>
        public DateTime ReportDate { get; set; } // ReportDate

        /// <summary>
        /// 109
        /// </summary>
        public double BeginC { get; set; } // BeginC

        /// <summary>
        /// 109
        /// </summary>
        public decimal BeginW { get; set; } // BeginW

        /// <summary>
        /// 109
        /// </summary>
        public double InC { get; set; } // InC

        /// <summary>
        /// 109
        /// </summary>
        public decimal InW { get; set; } // InW

        /// <summary>
        /// 109
        /// </summary>
        public double OutC { get; set; } // OutC

        /// <summary>
        /// 109
        /// </summary>
        public decimal OutW { get; set; } // OutW

        /// <summary>
        /// 109
        /// </summary>
        public double CloseC { get; set; } // CloseC

        /// <summary>
        /// 109
        /// </summary>
        public decimal CloseW { get; set; } // CloseW

        /// <summary>
        /// 0
        /// </summary>
        public double BeginP { get; set; } // BeginP

        /// <summary>
        /// 0
        /// </summary>
        public double InP { get; set; } // InP

        /// <summary>
        /// 0
        /// </summary>
        public double OutP { get; set; } // OutP

        /// <summary>
        /// 0
        /// </summary>
        public double CloseP { get; set; } // CloseP
        public string BillingDetailBreakdownRemark { get; set; } // BillingDetailBreakdownRemark (length: 1000)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public decimal? InCNofee { get; set; } // InCNofee
        public decimal? InWNofee { get; set; } // InWNofee
        public decimal? OutCNofee { get; set; } // OutCNofee
        public decimal? OutWNofee { get; set; } // OutWNofee
        public Guid CustomerId { get; set; } // CustomerID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public int BillingDateId { get; set; } // BillingDateID (Primary key)
        public int? BillingCustomerId { get; set; } // BillingCustomerID
        public decimal? OverW { get; set; } // OverW
        public decimal? StorageWNofee { get; set; } // StorageWNofee
        public double? StorageCNofee { get; set; } // StorageCNofee
        public double? StoragePNofee { get; set; } // StoragePNofee

        public TmpBillingReport()
        {
            BeginC = 0;
            BeginW = 0m;
            InC = 0;
            InW = 0m;
            OutC = 0;
            OutW = 0m;
            CloseC = 0;
            CloseW = 0m;
            BeginP = 0;
            InP = 0;
            OutP = 0;
            CloseP = 0;
            CreatedTime = DateTime.Now;
            OverW = 0m;
        }
    }

    // tmpBillingReportMain
    public class TmpBillingReportMain
    {
        public DateTime ReportDate { get; set; } // ReportDate
        public double BeginC { get; set; } // BeginC
        public decimal BeginW { get; set; } // BeginW
        public double InC { get; set; } // InC
        public decimal InW { get; set; } // InW
        public double OutC { get; set; } // OutC
        public decimal OutW { get; set; } // OutW
        public double CloseC { get; set; } // CloseC
        public decimal CloseW { get; set; } // CloseW
        public double BeginP { get; set; } // BeginP
        public double InP { get; set; } // InP
        public double OutP { get; set; } // OutP
        public double CloseP { get; set; } // CloseP
        public string BillingDetailBreakdownRemark { get; set; } // BillingDetailBreakdownRemark (length: 1000)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public decimal? InCNofee { get; set; } // InCNofee
        public decimal? InWNofee { get; set; } // InWNofee
        public decimal? OutCNofee { get; set; } // OutCNofee
        public decimal? OutWNofee { get; set; } // OutWNofee
        public Guid CustomerId { get; set; } // CustomerID
        public Guid? EmployeeId { get; set; } // EmployeeID
        public int BillingDateId { get; set; } // BillingDateID (Primary key)
        public int? BillingCustomerId { get; set; } // BillingCustomerID
        public decimal? OverW { get; set; } // OverW
        public decimal? StorageWNofee { get; set; } // StorageWNofee
        public double? StorageCNofee { get; set; } // StorageCNofee
        public double? StoragePNofee { get; set; } // StoragePNofee

        public TmpBillingReportMain()
        {
            BeginC = 0;
            BeginW = 0m;
            InC = 0;
            InW = 0m;
            OutC = 0;
            OutW = 0m;
            CloseC = 0;
            CloseW = 0m;
            BeginP = 0;
            InP = 0;
            OutP = 0;
            CloseP = 0;
            CreatedTime = DateTime.Now;
            OverW = 0m;
        }
    }

    // tmpBillingRunByDispatchingOrders
    public class TmpBillingRunByDispatchingOrder
    {
        /// <summary>
        /// 0
        /// </summary>
        public int RecordId { get; set; } // RecordID (Primary key)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string RoRemark { get; set; } // RORemark (length: 250)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public short? ReceivedQty { get; set; } // ReceivedQty
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string CustomerRef { get; set; } // CustomerRef (length: 65)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public short DispatchingOrderQty { get; set; } // DispatchingOrderQty
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public string CustomerName { get; set; } // CustomerName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ProductionDate { get; set; } // ProductionDate

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? UseByDate { get; set; } // UseByDate
        public int ReceivingOrderId { get; set; } // ReceivingOrderID
        public int DispatchingOrderId { get; set; } // DispatchingOrderID
        public int DispatchingProductId { get; set; } // DispatchingProductID
    }

    // tmpBillingRunByReceivingOrders
    public class TmpBillingRunByReceivingOrder
    {
        /// <summary>
        /// 0
        /// </summary>
        public int RecordId { get; set; } // RecordID (Primary key)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public DateTime? DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public short? DispatchedQty { get; set; } // DispatchedQty
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public short ReceivingOrderQty { get; set; } // ReceivingOrderQty
        public string CustomerNumber { get; set; } // CustomerNumber (length: 14)
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public string CustomerName { get; set; } // CustomerName (length: 100)
        public int? Total { get; set; } // Total
        public int? BillingDays { get; set; } // BillingDays
        public string DoCustomerRef { get; set; } // DOCustomerRef (length: 30)
        public string DoSpecialRequirement { get; set; } // DOSpecialRequirement (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string DoRemark { get; set; } // DORemark (length: 50)
        public Guid? ReceivingOrderId { get; set; } // ReceivingOrderID
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public decimal? TotalWeight { get; set; } // TotalWeight
        public decimal? DispatchWeight { get; set; } // DispatchWeight
    }

    // tmpBillingRunCustomerList
    public class TmpBillingRunCustomerList
    {
        public int CustomerId { get; set; } // CustomerID (Primary key)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string CustomerType { get; set; } // CustomerType (length: 50)
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime? ToDate { get; set; } // ToDate
    }

    // tmpChart
    public class TmpChart
    {
        public int? ProductLines { get; set; } // ProductLines
        public int? Pallets { get; set; } // Pallets
        public int? Weight { get; set; } // Weight
        public int? Cartons { get; set; } // Cartons
        public int CustomerMainId { get; set; } // CustomerMainID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int ReportId { get; set; } // ReportID (Primary key)
    }

    // tmpCheckSH03Daily
    public class TmpCheckSh03Daily
    {
        public string Ou { get; set; } // OU (length: 255)
        public string OrderNumber { get; set; } // Order Number (length: 255)
        public string OrderType { get; set; } // Order Type (length: 255)
        public string CustomerPo { get; set; } // Customer PO (length: 255)
        public string CustomerNumber { get; set; } // Customer Number (length: 255)
        public string CustomerName { get; set; } // Customer Name (length: 255)
        public string BillToLocation { get; set; } // Bill to Location (length: 255)
        public string ShipToLocation { get; set; } // Ship to Location (length: 255)
        public string BillToAddress { get; set; } // Bill to Address (length: 255)
        public string ShipToAdress { get; set; } // Ship to Adress (length: 255)
        public string Province { get; set; } // Province (length: 255)
        public DateTime? OrderDate { get; set; } // Order Date
        public DateTime? DeliveryDate { get; set; } // Delivery Date
        public DateTime? ScheduleDate { get; set; } // Schedule Date
        public string OrderItem { get; set; } // Order Item (length: 255)
        public string ItemDescription { get; set; } // Item Description (length: 255)
        public string Uom1 { get; set; } // Uom 1 (length: 255)
        public decimal? OrderQty1 { get; set; } // Order Qty 1
        public string Uom2 { get; set; } // Uom 2 (length: 255)
        public decimal? OrderQty2 { get; set; } // Order Qty 2
        public string DetailId { get; set; } // Detail ID (length: 255)
        public string Kho { get; set; } // Kho (length: 255)
        public string LinesStatus { get; set; } // Lines Status (length: 255)
        public string Hold { get; set; } // Hold (length: 255)
        public string CustomerClass { get; set; } // Customer Class (length: 255)
        public string Sub { get; set; } // Sub (length: 255)
        public string CustomerPo1 { get; set; } // Customer PO1 (length: 255)
        public string Po { get; set; } // PO (length: 255)
    }

    // tmpConsumables
    /// <summary>
    /// 2
    /// True
    /// 0
    /// 0
    /// </summary>
    public class TmpConsumable
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ConsumableId { get; set; } // ConsumableID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? ProductId { get; set; } // ProductID

        /// <summary>
        /// 0
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public string ProductName { get; set; } // ProductName (length: 100)

        /// <summary>
        /// 0
        /// </summary>
        public decimal? WeightPerpackage { get; set; } // WeightPerpackage

        /// <summary>
        /// 0
        /// </summary>
        public short? PackagesPerPallet { get; set; } // PackagesPerPallet

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 14)

        /// <summary>
        /// 0
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 16)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? OrderDate { get; set; } // OrderDate

        /// <summary>
        /// 0
        /// </summary>
        public short? BeginQty { get; set; } // BeginQty

        /// <summary>
        /// 0
        /// </summary>
        public short? RemainQty { get; set; } // RemainQty

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 200)
    }

    // tmpContainerChecking
    public class TmpContainerChecking
    {
        public Guid CheckingId { get; set; } // CheckingID (Primary key)
        public Guid ContInOutId { get; set; } // ContInOutID
        public Guid? CustomerId { get; set; } // CustomerID
        public string ContainerNum { get; set; } // ContainerNum (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public string ContainerType { get; set; } // ContainerType (length: 50)
        public DateTime? TimeIn { get; set; } // TimeIn
        public string Operation { get; set; } // Operation (length: 10)
        public string TemperatureShow { get; set; } // TemperatureShow (length: 30)
        public string TemperatureSetup { get; set; } // TemperatureSetup (length: 30)
        public bool? Running { get; set; } // Running
        public bool? Thawing { get; set; } // Thawing
        public bool? Stop { get; set; } // Stop
        public bool? Error { get; set; } // Error
        public bool? ProductEmpty { get; set; } // ProductEmpty
        public bool? Seal { get; set; } // Seal
        public bool? Lock { get; set; } // Lock
        public string Remark { get; set; } // Remark (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? Finished { get; set; } // Finished
        public bool? AttachmentFile { get; set; } // AttachmentFile
        public string LocationChecking { get; set; } // LocationChecking (length: 150)
        public string DockNumber { get; set; } // DockNumber (length: 5)
        public bool? NoOperation { get; set; } // NoOperation
        public bool? Electricity { get; set; } // Electricity
        public string VehicleType { get; set; } // VehicleType (length: 2)

        public TmpContainerChecking()
        {
            CheckingId = Guid.NewGuid();
            Running = false;
            Thawing = false;
            Stop = false;
            Error = false;
            ProductEmpty = false;
            Seal = false;
            Lock = false;
            CreatedTime = DateTime.Now;
            Finished = false;
            AttachmentFile = false;
            NoOperation = false;
            Electricity = false;
        }
    }

    // tmpContractImports
    public class TmpContractImport
    {
        public int Id { get; set; } // ID (Primary key)
        public int? CustomerId { get; set; } // CustomerID
        public string ContractNumber { get; set; } // ContractNumber (length: 20)
        public DateTime? StartDate { get; set; } // StartDate
        public DateTime? EndDate { get; set; } // EndDate
        public DateTime? ReviewDate { get; set; } // ReviewDate
    }

    // tmpContractServicePrices
    public class TmpContractServicePrice
    {
        public int? CustomerId { get; set; } // CustomerID
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ServiceNumber { get; set; } // ServiceNumber (Primary key) (length: 20)
        public string ServiceName { get; set; } // ServiceName (length: 4000)
        public double? MaxPrice { get; set; } // MaxPrice
    }

    // The table 'tmpCustomers' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpCustomers
    /// <summary>
    /// 0
    /// </summary>
    public class TmpCustomer
    {
        public int? CustomerId { get; set; } // CustomerID
    }

    // tmpCustomerPallets
    public class TmpCustomerPallet
    {
        public int? Pallets { get; set; } // Pallets
        public int? PalletLow { get; set; } // PalletLow
        public int? PalletVeryLow { get; set; } // PalletVeryLow
        public int? PalletVeryHigh { get; set; } // PalletVeryHigh
        public int? PalletHigh { get; set; } // PalletHigh
        public Guid CustomerId { get; set; } // CustomerID (Primary key)
    }

    // tmpCustomerSalesInvoiceReprt
    public class TmpCustomerSalesInvoiceReprt
    {
        public int Id { get; set; } // ID (Primary key)
        public int? CustomerSalesInvoiceId { get; set; } // CustomerSalesInvoiceID
        public int? CustomerClientCodeFbv { get; set; } // CustomerClientCodeFBV
        public string CustomerClientTaxCode { get; set; } // CustomerClientTaxCode (length: 20)
        public string CustomerClientTaxName { get; set; } // CustomerClientTaxName (length: 250)
        public string CustomerClientAddress { get; set; } // CustomerClientAddress (length: 250)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 250)
        public DateTime? CustomerSalesInvoiceDate { get; set; } // CustomerSalesInvoiceDate
        public decimal? DiscountAmount { get; set; } // DiscountAmount
        public string InvoiceOfficialNumber { get; set; } // InvoiceOfficialNumber (length: 20)
        public string InvoiceOfficialSerieName { get; set; } // InvoiceOfficialSerieName (length: 10)
        public string ProductName { get; set; } // ProductName (length: 200)
        public string InvoiceUnit { get; set; } // InvoiceUnit (length: 20)
        public decimal? InvoiceQuantity { get; set; } // InvoiceQuantity
        public string ProductCode { get; set; } // ProductCode (length: 30)
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string ProductCategoryDescription { get; set; } // ProductCategoryDescription (length: 100)
        public string CustomerSalesOrderNumber { get; set; } // CustomerSalesOrderNumber (length: 50)
        public string CustomerPurchasingOrderNumber { get; set; } // CustomerPurchasingOrderNumber (length: 50)
        public DateTime? CustomerClientCreditTerm { get; set; } // CustomerClientCreditTerm
        public string PageDescription { get; set; } // PageDescription (length: 100)
        public decimal? ProductDiscountPercentage { get; set; } // ProductDiscountPercentage
        public decimal? InvoicePrice { get; set; } // InvoicePrice
        public decimal? Amount { get; set; } // Amount
        public decimal? TotalAmount { get; set; } // TotalAmount
        public decimal? TotalDiscountAmount { get; set; } // TotalDiscountAmount
        public string CustomerClientBuyer { get; set; } // CustomerClientBuyer (length: 150)
        public double? DiscountAdditional { get; set; } // DiscountAdditional
    }

    // tmpCustomerSalesOrderUnitStandards
    public class TmpCustomerSalesOrderUnitStandard
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public string SalesProductName { get; set; } // SalesProductName (length: 500)
        public string SalesUnit { get; set; } // SalesUnit (Primary key) (length: 20)
        public int? SalesUnitPerPackage { get; set; } // SalesUnitPerPackage
    }

    // The table 'tmpDataDeliveryNoteFromWMS' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpDataDeliveryNoteFromWMS
    public class TmpDataDeliveryNoteFromWm
    {
        public string CustomerName { get; set; } // CustomerName (length: 255)
        public string CustomerFullName { get; set; } // CustomerFullName (length: 255)
        public string Address { get; set; } // Address (length: 255)
        public string Location { get; set; } // Location (length: 255)
        public DateTime? DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 255)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 255)
        public string ShipTo { get; set; } // ShipTo (length: 255)
        public int? PalletNumber { get; set; } // PalletNumber
        public string CustomerClientAddress { get; set; } // CustomerClientAddress (length: 255)
        public string TransporterName { get; set; } // TransporterName (length: 255)
        public string PoNumber { get; set; } // PONumber (length: 255)
        public DateTime? TimePrint { get; set; } // TimePrint
        public string TruckNumber { get; set; } // TruckNumber (length: 255)
        public string VietnamName { get; set; } // VietnamName (length: 255)
        public string Mobile { get; set; } // Mobile (length: 255)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 255)
        public string TripNumber { get; set; } // TripNumber (length: 255)
        public string ProductName { get; set; } // ProductName (length: 255)
        public string SalesProductCode2 { get; set; } // SalesProductCode2 (length: 255)
        public string CustPoNumber { get; set; } // CUST_PO_NUMBER (length: 255)
        public decimal? PoKgs { get; set; } // POKgs
        public int? TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? CountCarton { get; set; } // CountCarton
        public decimal? GrossWeight { get; set; } // GrossWeight
        public decimal? WeightSo { get; set; } // WeightSO
        public string DeliveryId { get; set; } // DeliveryID (length: 255)
        public string CustId { get; set; } // CustId (length: 255)
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 255)
        public string OtmShipTo { get; set; } // OTM_ShipTo (length: 255)
    }

    // The table 'tmpDataMasan0820' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpDataMasan0820
    public class TmpDataMasan0820
    {
        public DateTime? DeliveryDate { get; set; } // DeliveryDate
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 255)
        public string ProductNumber { get; set; } // ProductNumber (length: 255)
        public string CustomerNumberErp { get; set; } // CustomerNumberERP (length: 255)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 255)
        public string AtmOrderReleaseId { get; set; } // ATMOrderReleaseID (length: 255)
        public int? Qty { get; set; } // Qty
        public decimal? Weights { get; set; } // Weights
    }

    // tmpDataShipEBS
    public class TmpDataShipEb
    {
        public DateTime Date { get; set; } // Date
        public string So { get; set; } // SO (Primary key) (length: 255)
        public string ShipToLocation { get; set; } // ShipToLocation (length: 255)
        public string Item { get; set; } // Item (Primary key) (length: 255)
        public decimal WeightsTotal { get; set; } // WeightsTotal
        public string Tranporter { get; set; } // Tranporter (length: 255)
        public decimal SortWeightWms { get; set; } // SortWeightWMS
        public int SortQtyWms { get; set; } // SortQtyWMS
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string ShipToCode { get; set; } // ShipToCode (length: 255)
        public Guid CustomerId { get; set; } // CustomerID
    }

    // tmpDispatchingOrders
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class TmpDispatchingOrder
    {
        /// <summary>
        /// 0
        /// </summary>
        public int DispatchingOrderId { get; set; } // DispatchingOrderID (Primary key)
    }

    // tmpDispatchingOrderDetailsBreak
    public class TmpDispatchingOrderDetailsBreak
    {
        public int DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public int DispatchingLocationId { get; set; } // DispatchingLocationID
        public int PalletId { get; set; } // PalletID
        public short QuantityOfPackages { get; set; } // QuantityOfPackages
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 14)
        public bool? Status { get; set; } // Status
        public byte[] Ts { get; set; } // TS
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public string DispatchingOrderDetailRemark { get; set; } // DispatchingOrderDetailRemark (length: 500)
        public bool? Checked { get; set; } // Checked
        public int Id { get; set; } // ID (Primary key)
        public bool? CheckBreak { get; set; } // CheckBreak

        public TmpDispatchingOrderDetailsBreak()
        {
            UnitQuantity = 0;
            PalletWeight = 0f;
            Checked = false;
            CheckBreak = false;
        }
    }

    // The table 'tmpDispatchingPlans' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpDispatchingPlans
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class TmpDispatchingPlan
    {
        /// <summary>
        /// -1
        /// </summary>
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? DispatchingOrderDate { get; set; } // DispatchingOrderDate

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string Pp { get; set; } // PP (length: 26)

        /// <summary>
        /// -1
        /// </summary>
        public string ProductName { get; set; } // ProductName (length: 100)

        /// <summary>
        /// -1
        /// </summary>
        public int? RemainByProductLocation { get; set; } // RemainByProductLocation

        /// <summary>
        /// -1
        /// </summary>
        public int? QtyRemainAtLocation { get; set; } // QtyRemainAtLocation

        /// <summary>
        /// -1
        /// </summary>
        public string DispatchingLocationRemark { get; set; } // DispatchingLocationRemark (length: 150)

        /// <summary>
        /// -1
        /// </summary>
        public short? QuantityOfPackages { get; set; } // QuantityOfPackages

        /// <summary>
        /// -1
        /// </summary>
        public string Label { get; set; } // Label (length: 12)

        /// <summary>
        /// -1
        /// </summary>
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)

        /// <summary>
        /// 2460
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 30)

        /// <summary>
        /// -1
        /// </summary>
        public int? ManyProducts { get; set; } // ManyProducts

        /// <summary>
        /// -1
        /// </summary>
        public int? Remain { get; set; } // Remain

        /// <summary>
        /// -1
        /// </summary>
        public float? WeightPerPackage { get; set; } // WeightPerPackage

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ProductionDate { get; set; } // ProductionDate

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? UseByDate { get; set; } // UseByDate

        /// <summary>
        /// 0
        /// </summary>
        public string PalletRemark { get; set; } // Pallet_Remark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string RoDetailsRemark { get; set; } // RODetails_remark (length: 250)
        public short? Inners { get; set; } // Inners
        public float? TemperatureRequire { get; set; } // TemperatureRequire
        public Guid? DispatchingOrderId { get; set; } // DispatchingOrderID
        public Guid? LocationId { get; set; } // LocationID
        public Guid? PalletId { get; set; } // PalletID
        public int? DispatchingOrderLocalId { get; set; } // DispatchingOrderLocalID

        public TmpDispatchingPlan()
        {
            Inners = 1;
        }
    }

    // tmpDispatchingProducts
    public class TmpDispatchingProduct
    {
        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // ID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? DispatchingProductId { get; set; } // DispatchingProductID
        public int DispatchingOrderId { get; set; } // DispatchingOrderID
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int ProductId { get; set; } // ProductID
        public short? PackagesPerPallet { get; set; } // PackagesPerPallet
        public int? TotalPackages { get; set; } // TotalPackages
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public int? TransactionId { get; set; } // TransactionID
        public byte? Status { get; set; } // Status
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public string UserId { get; set; } // UserID (length: 50)
        public int? Plts { get; set; } // Plts
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// 0
        /// </summary>
        public int? ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID

        /// <summary>
        /// 0
        /// </summary>
        public int? LocationId { get; set; } // LocationID

        /// <summary>
        /// 0
        /// </summary>
        public string LocationNumber { get; set; } // LocationNumber (length: 20)
    }

    // tmpDispatchingProductExport
    public class TmpDispatchingProductExport
    {
        public int Id { get; set; } // ID (Primary key)
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
        public Guid ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int TotalPackages { get; set; } // TotalPackages
        public float WeightPerPackage { get; set; } // WeightPerPackage

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 50)
        public Guid NewProductId { get; set; } // NewProductID

        /// <summary>
        /// 0
        /// </summary>
        public string NewProductNumber { get; set; } // NewProductNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string NewProductName { get; set; } // NewProductName (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS
        public float? NewWeightPerPackage { get; set; } // NewWeightPerPackage
        public bool? CheckBreak { get; set; } // CheckBreak
        public int? NewTotalPackages { get; set; } // NewTotalPackages
        public int IsChecked { get; set; } // IsChecked

        public TmpDispatchingProductExport()
        {
            CheckBreak = false;
            IsChecked = 0;
        }
    }

    // tmpDispatchingProductFromRO
    public class TmpDispatchingProductFromRo
    {
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID (Primary key)
        public Guid? ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public int? DispatchingQuantity { get; set; } // DispatchingQuantity
        public int? ReceivedQuantity { get; set; } // ReceivedQuantity
        public bool? CheckDispatched { get; set; } // CheckDispatched
        public byte? Status { get; set; } // Status
        public string CustomerRef { get; set; } // CustomerRef (length: 50)
        public string UserName { get; set; } // UserName (length: 30)
        public Guid? ReceivingOrderId { get; set; } // ReceivingOrderID

        public TmpDispatchingProductFromRo()
        {
            DispatchingQuantity = 0;
            ReceivedQuantity = 0;
            CheckDispatched = true;
        }
    }

    // tmpDispatchingProductPacks
    public class TmpDispatchingProductPack
    {
        public long DispatchingProductPackId { get; set; } // DispatchingProductPackID (Primary key)
        public Guid? DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
    }

    // tmpDispatchingProductSelectLocation
    public class TmpDispatchingProductSelectLocation
    {
        public Guid PalletId { get; set; } // PalletID (Primary key)
        public long? PalletNumber { get; set; } // PalletNumber
        public string Location { get; set; } // Location (length: 15)
        public int? Qty { get; set; } // Qty
        public string Ref { get; set; } // Ref (length: 100)
        public string Remark { get; set; } // Remark (length: 255)
        public string Ro { get; set; } // RO (length: 20)
        public DateTime? Date { get; set; } // Date
        public Guid? ReceivingOrderId { get; set; } // ReceivingOrderID
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string RoDetailRemark { get; set; } // RODetailRemark (length: 255)
        public string Packages { get; set; } // Packages (length: 20)
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 30)
        public Guid? ProductId { get; set; } // ProductID
        public int? QtyDispatch { get; set; } // QtyDispatch
        public int? Remain { get; set; } // Remain
        public string ResquestFrom { get; set; } // ResquestFrom (length: 30)
        public bool? IsSelect { get; set; } // IsSelect
        public bool? IsNg { get; set; } // IsNG

        public TmpDispatchingProductSelectLocation()
        {
            RoDetailRemark = "";
            ProductId = null;
            IsSelect = false;
            IsNg = false;
        }
    }

    // tmpDispatchingProductUpsert
    public class TmpDispatchingProductUpsert
    {
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID (Primary key)
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID (Primary key)
        public Guid PalletId { get; set; } // PalletID (Primary key)
        public int? PackageQuantity { get; set; } // PackageQuantity
    }

    // tmpDistributionMovementByDateReport
    public class TmpDistributionMovementByDateReport
    {
        public DateTime ReportDate { get; set; } // ReportDate
        public double Begin { get; set; } // Begin
        public double In { get; set; } // In
        public double Out { get; set; } // Out
        public double Close { get; set; } // Close
        public string DetailBreakdownRemark { get; set; } // DetailBreakdownRemark (length: 1000)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public Guid? EmployeeId { get; set; } // EmployeeID
        public int ReportDateId { get; set; } // ReportDateID (Primary key)

        public TmpDistributionMovementByDateReport()
        {
            Begin = 0;
            In = 0;
            Out = 0;
            Close = 0;
            CreatedTime = DateTime.Now;
        }
    }

    // The table 'tmpEBSData' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpEBSData
    public class TmpEbsData
    {
        public string StoreId { get; set; } // StoreID (length: 255)
        public decimal? Weight { get; set; } // Weight
        public DateTime? ImportDate { get; set; } // ImportDate
        public string FileName { get; set; } // FileName (length: 255)
        public string SoNum { get; set; } // SoNum (length: 255)
    }

    // tmpEDIDispatchingProducts
    /// <summary>
    /// 0
    /// </summary>
    public class TmpEdiDispatchingProduct
    {
        public int DispatchingProductNewId { get; set; } // DispatchingProductNewID (Primary key)
        public int? CustomerId { get; set; } // CustomerID
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public DateTime? DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public int? DispatchingQuantity { get; set; } // DispatchingQuantity
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
        public string CustomerReference { get; set; } // CustomerReference (length: 50)
        public bool? Fifo { get; set; } // FIFO
    }

    // tmpEDIOnProcess
    public class TmpEdiOnProcess
    {
        public string EdiOrderNumber { get; set; } // EDIOrderNumber (Primary key) (length: 30)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public TmpEdiOnProcess()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // tmpElectrictyCost
    public class TmpElectrictyCost
    {
        public int OperatingCostMonthlyId { get; set; } // OperatingCostMonthlyID (Primary key)
        public string OperatingCostDescription { get; set; } // OperatingCostDescription (Primary key) (length: 250)
        public decimal? S1 { get; set; } // S1
        public decimal OperatingCostDriverRate { get; set; } // OperatingCostDriverRate (Primary key)
        public decimal? S2 { get; set; } // S2
        public int OperatingCostId { get; set; } // OperatingCostID (Primary key)
        public int CustomerMainId { get; set; } // CustomerMainID (Primary key)
    }

    // tmpEmployeeInOutFinger
    public class TmpEmployeeInOutFinger
    {
        public int EmployeeInOutId { get; set; } // EmployeeInOutID (Primary key)
        public int? EmployeeCode { get; set; } // EmployeeCode
        public DateTime? Time { get; set; } // Time
        public byte? Gate { get; set; } // Gate
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public bool? Checked { get; set; } // Checked
        public DateTime? CreatedDate { get; set; } // CreatedDate
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger

        public TmpEmployeeInOutFinger()
        {
            Gate = 1;
            Checked = false;
            CreatedDate = DateTime.Now;
        }
    }

    // tmpEmployeeInOutFinger20190320
    public class TmpEmployeeInOutFinger20190320
    {
        public int EmployeeInOutId { get; set; } // EmployeeInOutID (Primary key)
        public int? EmployeeCode { get; set; } // EmployeeCode
        public DateTime? Time { get; set; } // Time
        public byte? Gate { get; set; } // Gate
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public bool? Checked { get; set; } // Checked
        public DateTime? CreatedDate { get; set; } // CreatedDate
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
        public string Ip { get; set; } // IP (length: 50)
        public int? FingerMachineId { get; set; } // FingerMachineID

        public TmpEmployeeInOutFinger20190320()
        {
            CreatedDate = DateTime.Now;
        }
    }

    // tmpEmployeeInOutFingerNew
    public class TmpEmployeeInOutFingerNew
    {
        public int EmployeeInOutId { get; set; } // EmployeeInOutID (Primary key)
        public int? EmployeeCode { get; set; } // EmployeeCode
        public DateTime? Time { get; set; } // Time
        public byte? Gate { get; set; } // Gate
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public bool? Checked { get; set; } // Checked
        public DateTime? CreatedDate { get; set; } // CreatedDate
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
    }

    // tmpEmployeeLunch
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class TmpEmployeeLunch
    {
        /// <summary>
        /// 0
        /// </summary>
        public int EmployeeLunchId { get; set; } // EmployeeLunchID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? DepartmentId { get; set; } // DepartmentID

        /// <summary>
        /// 0
        /// </summary>
        public int? LunchLocation { get; set; } // LunchLocation

        /// <summary>
        /// 0
        /// </summary>
        public int? Quantity { get; set; } // Quantity
    }

    // tmpEmployeeOTSupervisors
    /// <summary>
    /// 2
    /// EmployeeOTSupervisorstmp.EmployeeID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class TmpEmployeeOtSupervisor
    {
        /// <summary>
        /// 2748
        /// </summary>
        public int EmployeeOtSupervisorId { get; set; } // EmployeeOTSupervisorID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int? EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// -1
        /// </summary>
        public string VietNamName { get; set; } // VietNamName (length: 30)

        /// <summary>
        /// -1
        /// </summary>
        public float? HourQuantity { get; set; } // HourQuantity

        /// <summary>
        /// -1
        /// </summary>
        public string DayStatus { get; set; } // DayStatus (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public byte? GateNumber { get; set; } // GateNumber

        /// <summary>
        /// -1
        /// </summary>
        public string Remarks { get; set; } // Remarks (length: 100)
        public string UserName { get; set; } // UserName (length: 30)
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut

        public TmpEmployeeOtSupervisor()
        {
            GateNumber = 0;
        }
    }

    // tmpEmployeeWorkings
    public class TmpEmployeeWorking
    {
        public Guid TmpEmployeeWorkingId { get; set; } // tmpEmployeeWorkingID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public int Percentage { get; set; } // Percentage
        public string Remark { get; set; } // Remark (length: 50)
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string TruckNo { get; set; } // TruckNo (length: 50)
        public string SealNo { get; set; } // SealNo (length: 20)
        public string Temperature { get; set; } // Temperature (length: 5)
        public int? TotalPackages { get; set; } // TotalPackages
        public bool? Confirmed { get; set; } // Confirmed
        public string Dock { get; set; } // Dock (length: 3)
        public string UserUpdate { get; set; } // UserUpdate (length: 400)
        public DateTime? TimeUpdate { get; set; } // TimeUpdate
        public bool? Approve { get; set; } // Approve
        public string SetupTemperature { get; set; } // SetupTemperature (length: 10)
        public Guid? GeneralHandId1 { get; set; } // GeneralHandID1
        public Guid? GeneralHandId2 { get; set; } // GeneralHandID2
        public Guid? GeneralHandId3 { get; set; } // GeneralHandID3
        public Guid? GeneralHandId4 { get; set; } // GeneralHandID4
        public Guid? GeneralHandId5 { get; set; } // GeneralHandID5
        public int? PercentGh1 { get; set; } // PercentGH1
        public int? PercentGh2 { get; set; } // PercentGH2
        public int? PercentGh3 { get; set; } // PercentGH3
        public int? PercentGh4 { get; set; } // PercentGH4
        public int? PercentGh5 { get; set; } // PercentGH5
        public int? TotalPercentGh { get; set; } // TotalPercentGH
        public Guid? WalkieId1 { get; set; } // WalkieID1
        public Guid? WalkieId2 { get; set; } // WalkieID2
        public Guid? WalkieId3 { get; set; } // WalkieID3
        public Guid? WalkieId4 { get; set; } // WalkieID4
        public int? PercentWalkieId1 { get; set; } // PercentWalkieID1
        public int? PercentWalkieId2 { get; set; } // PercentWalkieID2
        public int? PercentWalkieId3 { get; set; } // PercentWalkieID3
        public int? PercentWalkieId4 { get; set; } // PercentWalkieID4
        public Guid? ForkliftDriverId1 { get; set; } // ForkliftDriverID1
        public Guid? ForkliftDriverId2 { get; set; } // ForkliftDriverID2
        public int? PercentFd1 { get; set; } // PercentFD1
        public int? PercentFd2 { get; set; } // PercentFD2
        public Guid? SupervisorId { get; set; } // SupervisorID

        public TmpEmployeeWorking()
        {
            TmpEmployeeWorkingId = Guid.NewGuid();
            Percentage = 0;
            CreatedTime = DateTime.Now;
            Confirmed = false;
            Approve = false;
            PercentGh1 = 0;
            PercentGh2 = 0;
            PercentGh3 = 0;
            PercentGh4 = 0;
            PercentGh5 = 0;
            TotalPercentGh = 0;
            PercentWalkieId1 = 0;
            PercentWalkieId2 = 0;
            PercentWalkieId3 = 0;
            PercentWalkieId4 = 0;
            PercentFd1 = 0;
            PercentFd2 = 0;
        }
    }

    // tmpEmployeeWorkingDetails
    /// <summary>
    /// 2
    /// tmpEmployeeWorkingDetails.tmpEmployeeWorkingDetailID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class TmpEmployeeWorkingDetail
    {
        /// <summary>
        /// -1
        /// </summary>
        public int TmpEmployeeWorkingDetailId { get; set; } // tmpEmployeeWorkingDetailID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int? EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// -1
        /// </summary>
        public float? TotalWeight { get; set; } // TotalWeight

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? OrderDate { get; set; } // OrderDate

        /// <summary>
        /// -1
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime
    }

    // tmpEmployeeWorkingDetailCheck_TotalPerday
    public class TmpEmployeeWorkingDetailCheckTotalPerday
    {
        public int? EmployeeId { get; set; } // EmployeeID
        public DateTime? OrderDate { get; set; } // OrderDate
        public double? TotalWeightPerday { get; set; } // TotalWeightPerday
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string Position { get; set; } // Position (length: 50)
        public int? Cn { get; set; } // CN

        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // ID (Primary key)
    }

    // tmpEmployeeWorkingInvalid
    /// <summary>
    /// 2
    /// tmpEmployeeWorkingInvalid.OrderNumber
    /// True
    /// 0
    /// 0
    /// </summary>
    public class TmpEmployeeWorkingInvalid
    {
        /// <summary>
        /// -1
        /// </summary>
        public int EmployeeWorkingInvalidId { get; set; } // EmployeeWorkingInvalidID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (length: 16)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? OrderDate { get; set; } // OrderDate

        /// <summary>
        /// -1
        /// </summary>
        public int? EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 14)

        /// <summary>
        /// 0
        /// </summary>
        public float? TotalWeight { get; set; } // TotalWeight

        /// <summary>
        /// 0
        /// </summary>
        public float? TonOneHour { get; set; } // TonOneHour

        /// <summary>
        /// 0
        /// </summary>
        public float? Hours { get; set; } // Hours

        /// <summary>
        /// 0
        /// </summary>
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public string Owner { get; set; } // Owner (length: 10)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? StartTime { get; set; } // StartTime

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? EndTime { get; set; } // EndTime

        /// <summary>
        /// 0
        /// </summary>
        public bool? NightShift { get; set; } // NightShift

        public TmpEmployeeWorkingInvalid()
        {
            NightShift = false;
        }
    }

    // tmpEmployeeWorkingPercentage
    public class TmpEmployeeWorkingPercentage
    {
        public int EmployeeWorkingPercentageId { get; set; } // EmployeeWorkingPercentageID (Primary key)
        public short? Percentage { get; set; } // Percentage
    }

    // tmpFreeLocations
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class TmpFreeLocation
    {
        public Guid RoomId { get; set; } // RoomID (Primary key)
        public string RoomNumber { get; set; } // RoomNumber (length: 2)

        /// <summary>
        /// -1
        /// </summary>
        public int? QtyLocation { get; set; } // QtyLocation

        /// <summary>
        /// -1
        /// </summary>
        public int? QtyLow { get; set; } // QtyLow

        /// <summary>
        /// -1
        /// </summary>
        public int? QtyHigh { get; set; } // QtyHigh

        /// <summary>
        /// -1
        /// </summary>
        public int? QtyOfFree { get; set; } // QtyOfFree

        /// <summary>
        /// -1
        /// </summary>
        public int? QtyFreeAfterDp { get; set; } // QtyFreeAfterDP

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? UpdateTime { get; set; } // UpdateTime

        /// <summary>
        /// 0
        /// </summary>
        public int? QtyFreeLow { get; set; } // QtyFree_Low

        /// <summary>
        /// 0
        /// </summary>
        public int? QtyStandards { get; set; } // QtyStandards
        public string RoomRemark { get; set; } // RoomRemark (length: 250)
        public int? QtyFreeVeryLow { get; set; } // QtyFree_VeryLow
        public int? QtyFreeVeryHigh { get; set; } // QtyFree_VeryHigh
        public int? QtyFreeHigh { get; set; } // QtyFree_High
        public int? QtyOfPalletsOnHand { get; set; } // QtyOfPallets_OnHand
        public int StoreId { get; set; } // StoreID
        public int? QtyOnFloor { get; set; } // QtyOnFloor
        public float? TemperatureFrom { get; set; } // TemperatureFrom
        public float? TemperatureTo { get; set; } // TemperatureTo
        public float? HumidityFrom { get; set; } // HumidityFrom
        public float? HumidityTo { get; set; } // HumidityTo
        public int? QtyLocationOff { get; set; } // QtyLocationOff

        public TmpFreeLocation()
        {
            RoomId = Guid.NewGuid();
        }
    }

    // The table 'tmpHaNam0820' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpHaNam0820
    public class TmpHaNam0820
    {
        public DateTime? OrderDate { get; set; } // OrderDate
        public string So { get; set; } // SO (length: 255)
        public string ShipTo { get; set; } // ShipTo (length: 255)
        public string ProductNumber { get; set; } // ProductNumber (length: 255)
        public string Name { get; set; } // Name (length: 255)
        public decimal? Weight { get; set; } // Weight
        public string LocationId { get; set; } // LocationID (length: 30)
        public string OrderReleaseId { get; set; } // OrderReleaseID (length: 30)
        public string Edi { get; set; } // EDI (length: 255)
        public string Do { get; set; } // DO (length: 255)
        public string Region { get; set; } // Region (length: 255)
    }

    // tmpIDByUserName
    public class TmpIdByUserName
    {
        public Guid Id { get; set; } // ID (Primary key)
        public string Table { get; set; } // Table (Primary key) (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
    }

    // tmpImportRouting
    public class TmpImportRouting
    {
        public string ShipTo { get; set; } // SHIP_TO (Primary key) (length: 100)
        public string ShipTime { get; set; } // SHIP_TIME (length: 30)
        public string Vehicle { get; set; } // VEHICLE (Primary key) (length: 15)
        public string Driver { get; set; } // DRIVER (Primary key) (length: 150)
        public string Phone { get; set; } // PHONE (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 30)
        public string CustomerClientCode { get; set; } // CUSTOMER_CLIENT_CODE (Primary key) (length: 255)
        public string RouteCode { get; set; } // RouteCode (length: 255)
        public int? PalletNumber { get; set; } // PalletNumber
        public int? PalletNumber1 { get; set; } // PalletNumber1
        public int? PalletNumber2 { get; set; } // PalletNumber2
    }

    // tmpLabels
    public class TmpLabel
    {
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string RPallet { get; set; } // R_Pallet (length: 400)
        public string OriginalQuantity { get; set; } // OriginalQuantity (length: 5)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string Label { get; set; } // Label (Primary key) (length: 15)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public string RRo { get; set; } // R_RO (length: 50)
        public string CustomerName { get; set; } // CustomerName (Primary key) (length: 150)
        public float WeightPerPackage { get; set; } // WeightPerPackage (Primary key)
        public int? SumQuantity { get; set; } // SumQuantity
        public DateTime? UseByDate { get; set; } // UseByDate
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate

        /// <summary>
        /// 0
        /// </summary>
        public string Label1 { get; set; } // Label1 (length: 50)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 255)
        public decimal? GrossWeight { get; set; } // GrossWeight
        public int? UnitQuantity { get; set; } // UnitQuantity
        public Guid? PalletId { get; set; } // PalletID
        public Guid? LocationId { get; set; } // LocationID
        public Guid? ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public long? PalletNumber { get; set; } // PalletNumber
        public int? DispatchingOrderLocalId { get; set; } // DispatchingOrderLocalID

        public TmpLabel()
        {
            Label1 = "Remain Label";
        }
    }

    // tmpLocations
    public class TmpLocation
    {
        public int LocationId { get; set; } // LocationID (Primary key)
        public string LocationNumber { get; set; } // LocationNumber (length: 15)
    }

    // tmpLocationCodes
    /// <summary>
    /// 0
    /// </summary>
    public class TmpLocationCode
    {
        public double LocationId { get; set; } // LocationID (Primary key)
        public string RoomId { get; set; } // RoomID (length: 255)
        public string LocationNumber { get; set; } // LocationNumber (length: 255)
        public double? Code { get; set; } // Code
    }

    // The table 'tmpLocationNew' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpLocationNew
    public class TmpLocationNew
    {
        public int? OldLocationId { get; set; } // OldLocationID
        public int? NewLocationId { get; set; } // NewLocationID
        public string OldLocationNumber { get; set; } // OldLocationNumber (length: 50)
        public string NewLocationNumber { get; set; } // NewLocationNumber (length: 50)
    }

    // The table 'tmpLocationsCreated' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpLocationsCreated
    public class TmpLocationsCreated
    {
        public string Room { get; set; } // Room (length: 2)
        public short? Aisle { get; set; } // Aisle
        public short? BayId { get; set; } // BayID
        public short? HighId { get; set; } // HighID
        public short? DeepId { get; set; } // DeepID
    }

    // tmpLocForStockTake
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 100000
    /// </summary>
    public class TmpLocForStockTake
    {
        public Guid LocationId { get; set; } // LocationID (Primary key)
        public Guid RoomId { get; set; } // RoomID

        /// <summary>
        /// -1
        /// </summary>
        public string LocationNumber { get; set; } // LocationNumber (length: 12)

        /// <summary>
        /// -1
        /// </summary>
        public short Aisle { get; set; } // Aisle

        /// <summary>
        /// -1
        /// </summary>
        public short Bay { get; set; } // Bay

        /// <summary>
        /// -1
        /// </summary>
        public short High { get; set; } // High

        /// <summary>
        /// -1
        /// </summary>
        public short Deep { get; set; } // Deep

        /// <summary>
        /// -1
        /// </summary>
        public short Used { get; set; } // Used
    }

    // The table 'tmpMappingVCM' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpMappingVCM
    public class TmpMappingVcm
    {
        public string DetailId { get; set; } // DetailID (length: 255)
        public string CusLoc { get; set; } // CusLoc (length: 255)
        public string Vendercus { get; set; } // Vendercus (length: 255)
        public string CusItem { get; set; } // CusItem (length: 255)
    }

    // tmpMovementHistory
    public class TmpMovementHistory
    {
        public Guid PalletId { get; set; } // PalletID (Primary key)
        public Guid? ProductId { get; set; } // ProductID
        public string MovementHistory { get; set; } // MovementHistory (length: 5000)
    }

    // tmpNoteDispatchingOder
    public class TmpNoteDispatchingOder
    {
        public int NoteDispatchingOderId { get; set; } // NoteDispatchingOderID (Primary key)
        public int? DispatchingOderId { get; set; } // DispatchingOderID
        public string Note { get; set; } // Note (length: 1000)
        public bool? Status { get; set; } // Status
        public DateTime? NoteDate { get; set; } // NoteDate
        public string NoteBy { get; set; } // NoteBy (length: 50)
        public bool? Checked { get; set; } // Checked

        public TmpNoteDispatchingOder()
        {
            Status = false;
            NoteDate = DateTime.Now;
            Checked = false;
        }
    }

    // tmpNoteDispatchingOderDetail
    public class TmpNoteDispatchingOderDetail
    {
        public int NoteDispatchingOderDetailId { get; set; } // NoteDispatchingOderDetailID (Primary key)
        public int? NoteDispatchingOderId { get; set; } // NoteDispatchingOderID
        public string LinkImg { get; set; } // LinkImg (length: 500)
        public bool? Status { get; set; } // Status
        public DateTime? Date { get; set; } // Date
        public string UploadBy { get; set; } // UploadBy (length: 50)
        public bool? Checked { get; set; } // Checked
        public string Type { get; set; } // Type (length: 5)

        public TmpNoteDispatchingOderDetail()
        {
            Status = false;
            Date = DateTime.Now;
            Checked = false;
        }
    }

    // tmpOrders
    /// <summary>
    /// 0
    /// </summary>
    public class TmpOrder
    {
        /// <summary>
        /// 0
        /// </summary>
        public int OrderId { get; set; } // OrderID (Primary key)
    }

    // The table 'tmpOrderATM0280' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpOrderATM0280
    public class TmpOrderAtm0280
    {
        public string ShipTo { get; set; } // ShipTo (length: 255)
        public DateTime? Date { get; set; } // Date
        public string OrderReleaeId { get; set; } // OrderReleaeID (length: 255)
        public string LocationId { get; set; } // LocationID (length: 255)
        public string LocationPick { get; set; } // LocationPick (length: 255)
    }

    // The table 'tmpPallets' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpPallets
    /// <summary>
    /// 0
    /// </summary>
    public class TmpPallet
    {
        /// <summary>
        /// 0
        /// </summary>
        public int? PalletId { get; set; } // PalletID

        /// <summary>
        /// 0
        /// </summary>
        public string PalletNumber { get; set; } // PalletNumber (length: 50)
    }

    // tmpPayRollAnnual
    /// <summary>
    /// 2
    /// tmpPayRollAnnual.EmployeeID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class TmpPayRollAnnual
    {
        /// <summary>
        /// -1
        /// </summary>
        public int Id { get; set; } // ID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public int EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// -1
        /// </summary>
        public string VietnamName { get; set; } // VietnamName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public float? TimeWorkSum { get; set; } // TimeWorkSum

        /// <summary>
        /// -1
        /// </summary>
        public float? OtnSum { get; set; } // OTNSum

        /// <summary>
        /// OTS+OTH
        /// </summary>
        public float? OtsSum { get; set; } // OTSSum

        /// <summary>
        /// -1
        /// </summary>
        public float? WorkingDaySum { get; set; } // WorkingDaySum

        /// <summary>
        /// -1
        /// </summary>
        public float? LeaveSum { get; set; } // LeaveSum

        /// <summary>
        /// -1
        /// </summary>
        public float? OffSum { get; set; } // OffSum

        /// <summary>
        /// -1
        /// </summary>
        public float? SickSum { get; set; } // SickSum

        /// <summary>
        /// -1
        /// </summary>
        public float? HaftSum { get; set; } // HaftSum

        /// <summary>
        /// 0
        /// </summary>
        public float? PerformanceTotal { get; set; } // PerformanceTotal

        /// <summary>
        /// 0
        /// </summary>
        public short? PayRollYearId { get; set; } // PayRollYearID
        public float? OthSum { get; set; } // OTHSum
    }

    // tmpPayrollAnnualLeaveAll
    public class TmpPayrollAnnualLeaveAll
    {
        public Guid EmployeeId { get; set; } // EmployeeID (Primary key)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public int PositionId { get; set; } // PositionID
        public DateTime? ContractDateFirst { get; set; } // ContractDateFirst
        public int ManagementLevel { get; set; } // ManagementLevel
        public bool ContractPermanent { get; set; } // ContractPermanent
        public bool Active { get; set; } // Active
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public byte? Department { get; set; } // Department
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string IdCardNumber { get; set; } // IDCardNumber (length: 50)
        public string DepartmentName { get; set; } // DepartmentName (length: 50)
        public string Position { get; set; } // Position (length: 50)
        public int? Lea { get; set; } // LEA
        public DateTime? DateOfEntry { get; set; } // DateOfEntry
        public double? LeaveAllowance { get; set; } // LeaveAllowance
        public int? StoreId { get; set; } // StoreID
    }

    // tmpPayrollMonthlyDetails
    public class TmpPayrollMonthlyDetail
    {
        public int TmpPayRollMonthlyId { get; set; } // tmpPayRollMonthlyID (Primary key)
        public int PayRollMonthId { get; set; } // PayRollMonthID
        public int EmployeeId { get; set; } // EmployeeID
        public bool ContractPermanent { get; set; } // ContractPermanent
        public float? WorkingDays { get; set; } // WorkingDays
        public float? Ots { get; set; } // OTS
        public float? Otn { get; set; } // OTN
        public float? Oth { get; set; } // OTH
        public float? Sick { get; set; } // Sick
        public float? Leave { get; set; } // Leave
        public float? Haft { get; set; } // Haft
        public float? Off { get; set; } // Off
        public string Abc { get; set; } // ABC (length: 2)
        public float Performance { get; set; } // Performance
        public float PerformanceAverage { get; set; } // PerformanceAverage
        public bool PerformanceStatus { get; set; } // PerformanceStatus

        /// <summary>
        /// 0
        /// </summary>
        public string SupervisorAbc { get; set; } // SupervisorABC (length: 2)

        /// <summary>
        /// 0
        /// </summary>
        public string SupervisorRemark { get; set; } // SupervisorRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public bool PersonnelCheck { get; set; } // PersonnelCheck

        /// <summary>
        /// 0
        /// </summary>
        public string PersonnelRemark { get; set; } // PersonnelRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? PersonnelCheckTime { get; set; } // PersonnelCheckTime

        /// <summary>
        /// 0
        /// </summary>
        public bool SafetyCheck { get; set; } // SafetyCheck

        /// <summary>
        /// 0
        /// </summary>
        public string SafetyRemark { get; set; } // SafetyRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? SafetyCheckTime { get; set; } // SafetyCheckTime

        /// <summary>
        /// 0
        /// </summary>
        public bool ManagerCheck { get; set; } // ManagerCheck

        /// <summary>
        /// 0
        /// </summary>
        public string ManagerRemark { get; set; } // ManagerRemark (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ManagerCheckTime { get; set; } // ManagerCheckTime

        /// <summary>
        /// 0
        /// </summary>
        public bool MonthConfirm { get; set; } // MonthConfirm
        public byte[] Ts { get; set; } // TS

        public TmpPayrollMonthlyDetail()
        {
            PersonnelCheck = false;
            SafetyCheck = false;
            ManagerCheck = false;
            MonthConfirm = false;
        }
    }

    // tmpPerformanceCheck
    /// <summary>
    /// 2
    /// tmpPerformanceCheck.OrderNumber
    /// True
    /// 0
    /// 1000000
    /// </summary>
    public class TmpPerformanceCheck
    {
        /// <summary>
        /// -1
        /// </summary>
        public string OrderNumber { get; set; } // OrderNumber (Primary key) (length: 10)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public double? TotalWeight { get; set; } // TotalWeight

        /// <summary>
        /// -1
        /// </summary>
        public DateTime OrderDate { get; set; } // OrderDate
    }

    // tmpPickinglistSorting
    public class TmpPickinglistSorting
    {
        public string CustomerNumber { get; set; } // CustomerNumber (Primary key) (length: 30)
        public int PalletNumber { get; set; } // PalletNumber (Primary key)
        public string ShipToLocation { get; set; } // ShipToLocation (length: 30)
        public string Item { get; set; } // Item (Primary key) (length: 30)
        public int Qty { get; set; } // Qty
        public DateTime OrderDate { get; set; } // OrderDate
    }

    // The table 'tmpPickingSlips' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpPickingSlips
    /// <summary>
    /// 2
    /// tmpPickingSlips.Label
    /// True
    /// 0
    /// 1000000
    /// </summary>
    public class TmpPickingSlip
    {
        /// <summary>
        /// -1
        /// </summary>
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 30)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? DispatchingOrderDate { get; set; } // DispatchingOrderDate

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string Pp { get; set; } // PP (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string ProductName { get; set; } // ProductName (length: 100)

        /// <summary>
        /// -1
        /// </summary>
        public int? RemainByProductLocation { get; set; } // RemainByProductLocation

        /// <summary>
        /// -1
        /// </summary>
        public int? QtyRemainAtLocation { get; set; } // QtyRemainAtLocation

        /// <summary>
        /// -1
        /// </summary>
        public string DispatchingLocationRemark { get; set; } // DispatchingLocationRemark (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public short? QuantityOfPackages { get; set; } // QuantityOfPackages

        /// <summary>
        /// -1
        /// </summary>
        public string Label { get; set; } // Label (length: 12)

        /// <summary>
        /// -1
        /// </summary>
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)

        /// <summary>
        /// -1
        /// </summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 40)

        /// <summary>
        /// -1
        /// </summary>
        public int? ManyProducts { get; set; } // ManyProducts
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 250)
        public short? TotalPackages { get; set; } // TotalPackages
        public Guid? LocationId { get; set; } // LocationID
        public Guid? RoomId { get; set; } // RoomID
        public Guid? PalletId { get; set; } // PalletID
        public Guid? DispatchingOrderId { get; set; } // DispatchingOrderID
        public string Packages { get; set; } // Packages (length: 20)
        public string Packages2 { get; set; } // Packages2 (length: 20)

        public TmpPickingSlip()
        {
            Packages = "N'Ctns'";
            Packages2 = "N'Ctns'";
        }
    }

    // tmpProducts
    public class TmpProduct
    {
        public int ProductId { get; set; } // ProductID

        /// <summary>
        /// 0
        /// </summary>
        public int? EmployeeId { get; set; } // EmployeeID
        public int Id { get; set; } // ID (Primary key)

        public TmpProduct()
        {
            EmployeeId = 0;
        }
    }

    // tmpProductRemains
    /// <summary>
    /// 2
    /// tmpProductRemains.tmpUpdateTime DESC
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class TmpProductRemain
    {
        public Guid TmpProductRemainId { get; set; } // tmpProductRemainID (Primary key)
        public Guid? TmpCustomerId { get; set; } // tmpCustomerID

        /// <summary>
        /// 4605
        /// </summary>
        public string TmpProductRemainName { get; set; } // tmpProductRemainName (length: 100)

        /// <summary>
        /// 109
        /// </summary>
        public decimal? TmpWeightPerPackage { get; set; } // tmpWeightPerPackage

        /// <summary>
        /// -1
        /// </summary>
        public int? TmpRemainQuantity { get; set; } // tmpRemainQuantity

        /// <summary>
        /// 3315
        /// </summary>
        public string TmpProductRemainNumber { get; set; } // tmpProductRemainNumber (length: 30)

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? TmpUpdateTime { get; set; } // tmpUpdateTime
    }

    // tmpProductsSQL
    /// <summary>
    /// 0
    /// </summary>
    public class TmpProductsSql
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? EmployeeId { get; set; } // EmployeeID
    }

    // tmpPropertyI
    /// <summary>
    /// 0
    /// </summary>
    public class TmpPropertyI
    {
        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // id (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? PayRollMonthId { get; set; } // PayRollMonthID

        /// <summary>
        /// 0
        /// </summary>
        public int? PropertyId { get; set; } // PropertyID

        /// <summary>
        /// 0
        /// </summary>
        public int? InFdtd { get; set; } // InFDTD
    }

    // tmpPropertyID
    /// <summary>
    /// 2
    /// tmpPropertyID.PropertyID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class TmpPropertyId
    {
        /// <summary>
        /// 0
        /// </summary>
        public int PropertyId { get; set; } // PropertyID (Primary key)
    }

    // tmpPropertyMonthly
    /// <summary>
    /// 2
    /// ((PropertyID=3))
    /// tmpPropertyMonthly.PropertyID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class TmpPropertyMonthly
    {
        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // ID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? PayRollMonthId { get; set; } // PayRollMonthID

        /// <summary>
        /// 0
        /// </summary>
        public int? PropertyId { get; set; } // PropertyID

        /// <summary>
        /// 0
        /// </summary>
        public int? PropertyBegin { get; set; } // Property_Begin

        /// <summary>
        /// 0
        /// </summary>
        public int? PropertyIn { get; set; } // Property_In

        /// <summary>
        /// 0
        /// </summary>
        public int? PropertyUsed { get; set; } // Property_Used

        /// <summary>
        /// 0
        /// </summary>
        public int? PropertyClosing { get; set; } // Property_Closing

        public TmpPropertyMonthly()
        {
            PropertyBegin = 0;
            PropertyIn = 0;
            PropertyUsed = 0;
            PropertyClosing = 0;
        }
    }

    // tmpPropertyU
    public class TmpPropertyU
    {
        public int Id { get; set; } // id (Primary key)
        public int? PayRollMonthId { get; set; } // PayRollMonthID
        public int? PropertyId { get; set; } // PropertyID
        public int? UsedFdtd { get; set; } // UsedFDTD
    }

    // tmpReceivingAdvices
    public class TmpReceivingAdvice
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 14)
        public int ReceivingOrderId { get; set; } // ReceivingOrderID (Primary key)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public int ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID (Primary key)
        public int ProductId { get; set; } // ProductID (Primary key)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public short OriginalQuantity { get; set; } // OriginalQuantity (Primary key)
        public float WeightPerPackage { get; set; } // WeightPerPackage (Primary key)
        public int? TransactionId { get; set; } // TransactionID
        public string Packages { get; set; } // Packages (length: 50)
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string Label { get; set; } // Label (Primary key) (length: 15)
        public int PalletId { get; set; } // PalletID (Primary key)
        public string CustomerName { get; set; } // CustomerName (Primary key) (length: 50)
        public string Remark { get; set; } // Remark (length: 250)
        public int? Total { get; set; } // Total

        /// <summary>
        /// 0
        /// </summary>
        public string RoomId { get; set; } // RoomID (length: 1)

        /// <summary>
        /// 0
        /// </summary>
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 1000)
    }

    // tmpReceivingOrders
    public class TmpReceivingOrder
    {
        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // Id (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int ReceivingOrderId { get; set; } // ReceivingOrderID
    }

    // tmpReceivingOrderDetails
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class TmpReceivingOrderDetail
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID (Primary key)
    }

    // tmpReleaseSummary
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class TmpReleaseSummary
    {
        /// <summary>
        /// 0
        /// </summary>
        public int TmpReleaseSummaryId { get; set; } // tmpReleaseSummaryID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// 3330
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public int? CustomerId { get; set; } // CustomerID

        /// <summary>
        /// -1
        /// </summary>
        public int? ProductCategory { get; set; } // ProductCategory

        /// <summary>
        /// 3630
        /// </summary>
        public string ProductGroupDescription { get; set; } // ProductGroupDescription (length: 250)

        /// <summary>
        /// 2535
        /// </summary>
        public double? Rwfd { get; set; } // RWFD

        /// <summary>
        /// 3255
        /// </summary>
        public double? Dwfd { get; set; } // DWFD

        /// <summary>
        /// 2295
        /// </summary>
        public double? ReleaseWfd { get; set; } // ReleaseWFD

        /// <summary>
        /// 2325
        /// </summary>
        public double? Rwfdtd { get; set; } // RWFDTD

        /// <summary>
        /// 2475
        /// </summary>
        public double? Dwfdtd { get; set; } // DWFDTD

        /// <summary>
        /// 2280
        /// </summary>
        public double? ReleaseWfdtd { get; set; } // ReleaseWFDTD

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ReportDate { get; set; } // ReportDate
    }

    // tmpRepeatRows
    public class TmpRepeatRow
    {
        public int Id { get; set; } // Id (Primary key)
        public string RepeatText { get; set; } // RepeatText (length: 100)
        public int? RepeatCount { get; set; } // RepeatCount
        public int? QtyToCount { get; set; } // QtyToCount
        public string CartonNumber { get; set; } // CartonNumber (length: 50)
    }

    // tmpReportingServerMultiAttach
    public class TmpReportingServerMultiAttach
    {
        public int Id { get; set; } // ID (Primary key)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string Destination { get; set; } // Destination (length: 3000)
        public Guid? CustomerId { get; set; } // CustomerID
        public string StoreDescription { get; set; } // StoreDescription (length: 100)
    }

    // tmpResults
    /// <summary>
    /// 0
    /// </summary>
    public class TmpResult
    {
        /// <summary>
        /// 0
        /// </summary>
        public int ResultId { get; set; } // ResultID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? ResultName { get; set; } // ResultName
        public string ResultText { get; set; } // ResultText (length: 100)
    }

    // tmpRooms
    public class TmpRoom
    {
        public string RoomId { get; set; } // RoomID (length: 1)
        public int Id { get; set; } // ID (Primary key)
    }

    // tmpRoomOccupancies
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 1000000
    /// </summary>
    public class TmpRoomOccupancy
    {
        /// <summary>
        /// 0
        /// </summary>
        public string RoomId { get; set; } // RoomID (Primary key) (length: 1)

        /// <summary>
        /// 0
        /// </summary>
        public double? Temperature { get; set; } // Temperature

        /// <summary>
        /// 0
        /// </summary>
        public int? Capacity { get; set; } // Capacity

        /// <summary>
        /// 0
        /// </summary>
        public double? Occupancy { get; set; } // Occupancy

        /// <summary>
        /// 0
        /// </summary>
        public double? OccupancyLastYear { get; set; } // OccupancyLastYear

        /// <summary>
        /// 0
        /// </summary>
        public double? OccupancyLastMonth { get; set; } // OccupancyLastMonth

        /// <summary>
        /// 0
        /// </summary>
        public double? OccupancyPreviousMonth { get; set; } // OccupancyPreviousMonth

        /// <summary>
        /// 0
        /// </summary>
        public string RoomProductStorage { get; set; } // RoomProductStorage (length: 550)
    }

    // tmpScheduled_JobWeeks
    public class TmpScheduledJobWeek
    {
        public int Id { get; set; } // ID (Primary key)
        public float? Week { get; set; } // Week
        public DateTime? DateFirstOfWeek { get; set; } // DateFirstOfWeek
        public bool CheckForChange { get; set; } // CheckForChange
        public int? ScheduledJobDefinitionId { get; set; } // ScheduledJobDefinitionID

        /// <summary>
        /// 109
        /// </summary>
        public int? EquipmentId { get; set; } // EquipmentID
        public string Frequence { get; set; } // Frequence (length: 15)
        public float? Duration { get; set; } // Duration

        public TmpScheduledJobWeek()
        {
            CheckForChange = false;
        }
    }

    // tmpStockCorrectionProducts
    public class TmpStockCorrectionProduct
    {
        public int DispatchingProductNewId { get; set; } // DispatchingProductNewID (Primary key)
        public int? DispatchingQuantity { get; set; } // DispatchingQuantity
        public int? RemainQuantity { get; set; } // RemainQuantity
        public decimal? TotalUnitWeight { get; set; } // TotalUnitWeight
        public bool? CheckDispatched { get; set; } // CheckDispatched
        public string UserName { get; set; } // UserName (length: 30)
        public string SystemFeedback { get; set; } // SystemFeedback (length: 70)
        public byte[] Ts { get; set; } // ts
        public Guid? ProductId { get; set; } // ProductID

        public TmpStockCorrectionProduct()
        {
            CheckDispatched = false;
        }
    }

    // tmpStockOnHandByDate
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class TmpStockOnHandByDate
    {
        /// <summary>
        /// -1
        /// </summary>
        public int? CustomerId { get; set; } // CustomerID

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public int? BeginC { get; set; } // BeginC

        /// <summary>
        /// 1830
        /// </summary>
        public double? BeginW { get; set; } // BeginW

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? ReportDate { get; set; } // ReportDate

        /// <summary>
        /// 0
        /// </summary>
        public int? BeginP { get; set; } // BeginP

        /// <summary>
        /// 0
        /// </summary>
        public double? Wpp { get; set; } // WPP

        /// <summary>
        /// 0
        /// </summary>
        public int StockOnHandByDateId { get; set; } // StockOnHandByDateID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? ProductLines { get; set; } // ProductLines

        /// <summary>
        /// 0
        /// </summary>
        public int? PalletLowPercent { get; set; } // PalletLowPercent
    }

    // tmpStockOnHandWeekly
    public class TmpStockOnHandWeekly
    {
        public int? CustomerId { get; set; } // CustomerID
        public double TotalOrderWeight { get; set; } // TotalOrderWeight (Primary key)
        public double TotalWorkerWeight { get; set; } // TotalWorkerWeight (Primary key)
        public int? StockOnHandWeeklyId { get; set; } // StockOnHandWeeklyID
    }

    // tmpStockTakeByRequest
    public class TmpStockTakeByRequest
    {
        public int Id { get; set; } // ID (Primary key)
        public Guid? RoomId { get; set; } // RoomID
        public short? Aisle { get; set; } // Aisle
        public short? FromBay { get; set; } // FromBay
        public short? ToBay { get; set; } // ToBay
        public short? FromHigh { get; set; } // FromHigh
        public short? ToHigh { get; set; } // ToHigh
        public short? FromDeep { get; set; } // FromDeep
        public short? ToDeep { get; set; } // ToDeep
        public string UserName { get; set; } // UserName (length: 30)
    }

    // The table 'tmpSummaryInOut14Days' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpSummaryInOut14Days
    public class TmpSummaryInOut14Days
    {
        public DateTime? DateR { get; set; } // DateR
        public int? TotalR { get; set; } // TotalR
        public double? TotalRw { get; set; } // TotalRW
        public int? TotalD { get; set; } // TotalD
        public double? TotalDw { get; set; } // TotalDW
        public double? Rd { get; set; } // RD
        public double? Dr { get; set; } // DR
        public int? StoreId { get; set; } // StoreID

        public TmpSummaryInOut14Days()
        {
            StoreId = 1;
        }
    }

    // The table 'tmpTempPallet' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // tmpTempPallet
    public class TmpTempPallet
    {
        public string Pallet { get; set; } // Pallet (length: 255)
        public string RouteCode { get; set; } // RouteCode (length: 255)
        public DateTime? OrderDate { get; set; } // OrderDate
    }

    // tmpTrainingCourseImports
    public class TmpTrainingCourseImport
    {
        public int TmpTrainingCourseImportId { get; set; } // tmpTrainingCourseImportID (Primary key)
    }

    // tmpTrucks
    public class TmpTruck
    {
        public string TruckNumber { get; set; } // TruckNumber (length: 20)
        public string BaseLocation { get; set; } // BaseLocation (length: 50)
        public string YearOfProduction { get; set; } // YearOfProduction (length: 50)
        public string Ton { get; set; } // Ton (length: 50)
        public string Frame { get; set; } // Frame (length: 50)
        public int Id { get; set; } // id (Primary key)
    }

    // tmpUpdateRODO
    public class TmpUpdateRodo
    {
        public int Id { get; set; } // ID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 100)
        public string OldProductName { get; set; } // OldProductName (length: 300)
        public string OldProductNumber { get; set; } // OldProductNumber (length: 100)
        public decimal? OldWeightPerPackage { get; set; } // OldWeightPerPackage
        public bool? Updated { get; set; } // Updated
        public int? OrderDetailId { get; set; } // OrderDetailID
        public DateTime? OrderDate { get; set; } // OrderDate
        public string UserId { get; set; } // UserId (length: 50)
    }

    // Trainings
    /// <summary>
    /// 2
    /// Trainings.EmployeeID
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class Training
    {
        /// <summary>
        /// -1
        /// </summary>
        public int TrainingId { get; set; } // TrainingID (Primary key)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? TrainingDate { get; set; } // TrainingDate

        /// <summary>
        /// -1
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 255)

        /// <summary>
        /// -1
        /// </summary>
        public DateTime? CreatedTime { get; set; } // CreatedTime

        /// <summary>
        /// -1
        /// </summary>
        public string TrainingLocation { get; set; } // TrainingLocation (length: 255)

        /// <summary>
        /// 4560
        /// </summary>
        public string TrainingDescription { get; set; } // TrainingDescription (length: 2000)

        /// <summary>
        /// -1
        /// </summary>
        public int? TrainingCost { get; set; } // TrainingCost

        /// <summary>
        /// -1
        /// </summary>
        public string CurrencyUnit { get; set; } // CurrencyUnit (length: 255)

        /// <summary>
        /// -1
        /// </summary>
        public decimal? TrainingDuration { get; set; } // TrainingDuration

        /// <summary>
        /// -1
        /// </summary>
        public string TrainingConfirmedBy { get; set; } // TrainingConfirmedBy (length: 255)

        /// <summary>
        /// -1
        /// </summary>
        public bool TrainingConfirm { get; set; } // TrainingConfirm

        /// <summary>
        /// 3228
        /// </summary>
        public DateTime? ConfirmTime { get; set; } // ConfirmTime

        /// <summary>
        /// -1
        /// </summary>
        public int? Department { get; set; } // Department

        /// <summary>
        /// -1
        /// </summary>
        public string EmployeeFeedback { get; set; } // EmployeeFeedback (length: 50)

        /// <summary>
        /// -1
        /// </summary>
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 2000)

        /// <summary>
        /// -1
        /// </summary>
        public string CostCoverBy { get; set; } // CostCoverBy (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string DocumentFolder { get; set; } // DocumentFolder (length: 250)

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS
        public int? TrainingDefinitionId { get; set; } // TrainingDefinitionID
        public DateTime? TrainingExpiryDate { get; set; } // TrainingExpiryDate
        public string TrainingNumber { get; set; } // TrainingNumber (length: 10)
        public Guid? EmployeeId { get; set; } // EmployeeID

        public Training()
        {
            CreatedTime = DateTime.Now;
            TrainingConfirm = false;
        }
    }

    // TrainingDefinitions
    public class TrainingDefinition
    {
        public int TrainingDefinitionId { get; set; } // TrainingDefinitionID (Primary key)
        public string TrainingName { get; set; } // TrainingName (length: 250)
        public string TrainingRemark { get; set; } // TrainingRemark (length: 150)
        public string TrainingType { get; set; } // TrainingType (length: 30)
        public short? StandardFrequence { get; set; } // StandardFrequence
        public string DefaultTrainingLocation { get; set; } // DefaultTrainingLocation (length: 100)
    }

    // TrainingDetails
    public class TrainingDetail
    {
        public int TrainingDetailId { get; set; } // TrainingDetailID (Primary key)
        public int TrainingId { get; set; } // TrainingID
        public Guid EmployeeId { get; set; } // EmployeeID
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? TrainingDetailCost { get; set; } // TrainingDetailCost
        public bool? IsDeleted { get; set; } // IsDeleted
        public byte[] Ts { get; set; } // ts

        public TrainingDetail()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // Transaction
    public class Transaction
    {
        public int TransactionId { get; set; } // TransactionID (Primary key)
        public DateTime? CreateDate { get; set; } // CreateDate
        public string UserId { get; set; } // UserID (length: 50)
        public string TransactionType { get; set; } // TransactionType (length: 50)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 20)
    }

    // Transporters
    public class Transporter
    {
        public int TransporterId { get; set; } // TransporterID (Primary key)
        public string TransporterCode { get; set; } // TransporterCode (length: 100)
        public string TransporterName { get; set; } // TransporterName (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Moblie { get; set; } // Moblie (length: 100)
        public string Contract { get; set; } // Contract (length: 100)
        public string Email { get; set; } // Email (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public int? StoreId { get; set; } // StoreID
        public bool? Active { get; set; } // Active

        public Transporter()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // Trips
    public class Trip
    {
        public Guid TripId { get; set; } // TripID (Primary key)
        public string TripNumber { get; set; } // TripNumber (length: 20)
        public DateTime TripDate { get; set; } // TripDate
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? TripConfirmedTime { get; set; } // TripConfirmedTime
        public bool TripConfirmed { get; set; } // TripConfirmed
        public string TripRemark { get; set; } // TripRemark (length: 200)
        public string SealNumber { get; set; } // SealNumber (length: 20)
        public byte[] Ts { get; set; } // TS
        public DateTime? StartWorkingTime { get; set; } // StartWorkingTime
        public DateTime? EndWorkingTime { get; set; } // EndWorkingTime
        public string DockNumber { get; set; } // DockNumber (length: 5)
        public string Temperature { get; set; } // Temperature (length: 5)
        public string InternalRemark { get; set; } // InternalRemark (length: 300)
        public byte? DispatchingOrderProgress { get; set; } // DispatchingOrderProgress
        public bool? IsAttachment { get; set; } // IsAttachment
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 32)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 15)
        public int? TimeSlotId { get; set; } // TimeSlotID
        public int? DockDoorId { get; set; } // DockDoorID
        public Guid CustomerId { get; set; } // CustomerID
        public Guid? RouteId { get; set; } // RouteID
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public int? TransporterId { get; set; } // TransporterID
        public byte? TripStatusId { get; set; } // TripStatusID
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public string Routeno { get; set; } // ROUTENO (length: 50)
        public string AtmShipmentId { get; set; } // ATM_Shipment_ID (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child TripDetails where [TripDetails].[TripID] point to this entity (FK_TripDetails_Trips)
        /// </summary>
        public virtual ICollection<TripDetail> TripDetails { get; set; } // TripDetails.FK_TripDetails_Trips

        public Trip()
        {
            TripId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            TripConfirmed = false;
            DispatchingOrderProgress = 1;
            IsAttachment = false;
            TripStatusId = 1;
            TripDetails = new List<TripDetail>();
        }
    }

    // TripDetails
    public class TripDetail
    {
        public Guid TripDetailId { get; set; } // TripDetailID (Primary key)
        public bool CheckDelete { get; set; } // CheckDelete
        public int? TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
        public byte[] Ts { get; set; } // ts
        public string OrderNumber { get; set; } // OrderNumber (length: 30)
        public string TripDetailRemark { get; set; } // TripDetailRemark (length: 250)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 10)
        public int? TotalPallets { get; set; } // TotalPallets
        public string CreatedBy { get; set; } // CreatedBy (length: 100)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte? TripStatus { get; set; } // TripStatus
        public DateTime? ExpectedDeliveryTime { get; set; } // ExpectedDeliveryTime
        public decimal? CashCollectionAmount { get; set; } // CashCollectionAmount
        public bool? IsRejected { get; set; } // IsRejected
        public string RejectedOrderNumber { get; set; } // RejectedOrderNumber (length: 12)
        public string RejectedRemark { get; set; } // RejectedRemark (length: 250)
        public Guid TripId { get; set; } // TripID
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public int? TotalUnits { get; set; } // TotalUnits
        public string DeliveredBy { get; set; } // DeliveredBy (length: 30)
        public DateTime? DeliveredTime { get; set; } // DeliveredTime
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public string CustomerComments { get; set; } // CustomerComments (length: 250)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 32)
        public DateTime? EarlyDeliveryDate { get; set; } // EarlyDeliveryDate
        public DateTime? LateDeliveryDate { get; set; } // LateDeliveryDate

        // Foreign keys

        /// <summary>
        /// Parent Trip pointed by [TripDetails].([TripId]) (FK_TripDetails_Trips)
        /// </summary>
        public virtual Trip Trip { get; set; } // FK_TripDetails_Trips

        public TripDetail()
        {
            TripDetailId = Guid.NewGuid();
            CheckDelete = false;
            CreatedTime = DateTime.Now;
        }
    }

    // TripDetailCartons
    public class TripDetailCarton
    {
        public Guid TripDetailCartonId { get; set; } // TripDetailCartonID (Primary key)
        public int? TripDetailCartonLocalId { get; set; } // TripDetailCartonLocalID
        public string TripDetailCartonNumber { get; set; } // TripDetailCartonNumber (length: 20)
        public Guid TripDetailId { get; set; } // TripDetailID
        public short? CartonNumber { get; set; } // CartonNumber
        public string CartonDescription { get; set; } // CartonDescription (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public string Packages { get; set; } // Packages (length: 15)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public bool? Completed { get; set; } // Completed

        // Reverse navigation

        /// <summary>
        /// Child TripDetailCartonUnits where [TripDetailCartonUnits].[TripDetailCartonID] point to this entity (FK_TripDetailCartonUnits_TripDetailCartons)
        /// </summary>
        public virtual ICollection<TripDetailCartonUnit> TripDetailCartonUnits { get; set; } // TripDetailCartonUnits.FK_TripDetailCartonUnits_TripDetailCartons

        public TripDetailCarton()
        {
            TripDetailCartonId = Guid.NewGuid();
            TripDetailId = Guid.NewGuid();
            CartonNumber = 0;
            CreatedTime = DateTime.Now;
            WeightOfPackage = 0m;
            UpdatedTime = DateTime.Now;
            Completed = false;
            TripDetailCartonUnits = new List<TripDetailCartonUnit>();
        }
    }

    // TripDetailCartonUnits
    public class TripDetailCartonUnit
    {
        public Guid TripDetailCartonUnitId { get; set; } // TripDetailCartonUnitID (Primary key)
        public Guid TripDetailCartonId { get; set; } // TripDetailCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 50)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)

        // Foreign keys

        /// <summary>
        /// Parent TripDetailCarton pointed by [TripDetailCartonUnits].([TripDetailCartonId]) (FK_TripDetailCartonUnits_TripDetailCartons)
        /// </summary>
        public virtual TripDetailCarton TripDetailCarton { get; set; } // FK_TripDetailCartonUnits_TripDetailCartons

        public TripDetailCartonUnit()
        {
            TripDetailCartonUnitId = Guid.NewGuid();
            TripDetailCartonId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // TripDetailStatus
    public class TripDetailStatu
    {
        public byte TripStatus { get; set; } // TripStatus (Primary key)
        public string TripStatusDescriptions { get; set; } // TripStatusDescriptions (length: 100)
    }

    // The table 'TripPlanningOTM' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // TripPlanningOTM
    public class TripPlanningOtm
    {
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public Guid? DispatchingOrderId { get; set; } // DispatchingOrderID
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 255)
        public string OtmShipTo { get; set; } // OTM_ShipTo (length: 255)
        public string Routeno { get; set; } // ROUTENO (length: 255)
        public string PowerUnitGid { get; set; } // POWER_UNIT_GID (length: 255)
        public string DriverGidName { get; set; } // DRIVER_GID_NAME (length: 255)
        public string AtmShipmentId { get; set; } // ATM_SHIPMENT_ID (length: 255)
        public DateTime? DeliveryDate { get; set; } // DeliveryDate
    }

    // TripStatus
    public class TripStatu
    {
        public byte TripStatusId { get; set; } // TripStatusID (Primary key)
        public string TripStatusDescriptions { get; set; } // TripStatusDescriptions (length: 100)
    }

    // Trucks
    public class Truck
    {
        public int TruckId { get; set; } // TruckID
        public string TruckNumber { get; set; } // TruckNumber (Primary key via unique index IX_Trucks) (length: 20)
        public int? TruckTypeId { get; set; } // TruckTypeID
        public string OwnerName { get; set; } // OwnerName (length: 50)
        public string OwnerType { get; set; } // OwnerType (length: 50)
        public string ProductCode { get; set; } // ProductCode (length: 50)
        public string RegistrationNumber { get; set; } // RegistrationNumber (length: 50)
        public string RegistrationNumber2 { get; set; } // RegistrationNumber2 (length: 50)
        public string CompartmentType { get; set; } // CompartmentType (length: 50)
        public string Engine { get; set; } // Engine (length: 50)
        public string Frame { get; set; } // Frame (length: 50)
        public string Cbm { get; set; } // CBM (length: 50)
        public string YearOfProduction { get; set; } // YearOfProduction (length: 50)
        public string OperationArea { get; set; } // OperationArea (length: 50)

        /// <summary>
        /// Dedicated or Outsourcing
        /// </summary>
        public string OwnerShip { get; set; } // OwnerShip (length: 50)
        public string BaseLocation { get; set; } // BaseLocation (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string DistributionFuelType { get; set; } // DistributionFuelType (length: 50)
        public int? TruckLocationId { get; set; } // TruckLocationID
        public string TruckRemark { get; set; } // TruckRemark (length: 100)
        public byte[] Ts { get; set; } // ts
        public float? Capacity { get; set; } // Capacity
        public float? TankCapacity { get; set; } // TankCapacity
        public float? Norms { get; set; } // Norms
        public decimal? NormsWarning { get; set; } // NormsWarning

        public Truck()
        {
            CreatedTime = DateTime.Now;
            TruckLocationId = 1;
        }
    }

    // TruckBasketDefinition
    public class TruckBasketDefinition
    {
        public Guid TruckBasketId { get; set; } // TruckBasketID (Primary key)
        public string BasketId { get; set; } // BasketID (length: 30)
        public int Inner { get; set; } // Inner
        public decimal WeightOfPackage { get; set; } // WeightOfPackage
        public Guid CustomerId { get; set; } // CustomerID
        public string TruckNumber { get; set; } // TruckNumber (length: 30)
        public int? Vertical { get; set; } // Vertical
        public int? Horizontal { get; set; } // Horizontal
        public string Cbm { get; set; } // CBM (length: 255)

        public TruckBasketDefinition()
        {
            TruckBasketId = Guid.NewGuid();
            Inner = 1;
        }
    }

    // TruckDriverHistories
    public class TruckDriverHistory
    {
        public int TruckDriverHistoryId { get; set; } // TruckDriverHistoryID (Primary key)
        public int TruckId { get; set; } // TruckID
        public DateTime? TruckDriverDate { get; set; } // TruckDriverDate
        public string TruckDriverRemark { get; set; } // TruckDriverRemark (length: 200)
        public int DriverId { get; set; } // DriverID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts

        public TruckDriverHistory()
        {
            TruckDriverDate = DateTime.Now;
            CreatedTime = DateTime.Now;
        }
    }

    // TruckDriverHistoryOrders
    public class TruckDriverHistoryOrder
    {
        public int TruckDriverHistoryOrderId { get; set; } // TruckDriverHistoryOrderID (Primary key)
        public DateTime? OrderDate { get; set; } // OrderDate
        public string Remark { get; set; } // Remark (length: 200)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public string DocumentNumber { get; set; } // DocumentNumber (length: 50)
        public int? TruckDriverHistoryId { get; set; } // TruckDriverHistoryID
        public float? Quatity { get; set; } // Quatity
        public DateTime? ExpDate { get; set; } // ExpDate
        public float? Actual { get; set; } // Actual
        public DateTime? FillTime { get; set; } // FillTime
        public bool? Completed { get; set; } // Completed

        public TruckDriverHistoryOrder()
        {
            CreatedTime = DateTime.Now;
            Completed = false;
        }
    }

    // TruckLocations
    public class TruckLocation
    {
        public int TruckLocationId { get; set; } // TruckLocationID (Primary key)
        public string TruckLocation_ { get; set; } // TruckLocation (length: 100)
    }

    // TruckNorms
    public class TruckNorm
    {
        public int TruckNormId { get; set; } // TruckNormID (Primary key)
        public int? TruckId { get; set; } // TruckID
        public string Region { get; set; } // Region (length: 50)
        public byte? FromMonth { get; set; } // FromMonth
        public byte? ToMonth { get; set; } // ToMonth
        public float? Capacity { get; set; } // Capacity
        public decimal? NormsWarning { get; set; } // NormsWarning
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public TruckNorm()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // Trucks_Import
    public class TrucksImport
    {
        public int Id { get; set; } // id (Primary key)
        public string TruckNumber { get; set; } // TruckNumber (length: 20)
        public string Region { get; set; } // Region (length: 50)
        public float? NormsWarning { get; set; } // NormsWarning
        public float? Capacity { get; set; } // Capacity
        public float? TankCapacity { get; set; } // TankCapacity
        public string Norms { get; set; } // Norms (length: 50)
        public string CompartmentType { get; set; } // CompartmentType (length: 50)
    }

    // TruckType
    public class TruckType
    {
        public int TruckTypeId { get; set; } // TruckTypeID (Primary key)
        public string TruckTypeDescription { get; set; } // TruckTypeDescription (length: 200)
        public string Remark { get; set; } // Remark (length: 200)
        public decimal? WeightCapacity { get; set; } // WeightCapacity
        public decimal? VolumeCapacity { get; set; } // VolumeCapacity
        public bool? Reefer { get; set; } // Reefer
        public string TemperatureRange { get; set; } // TemperatureRange (length: 50)
        public decimal? Norm { get; set; } // Norm
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public TruckType()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // UOM_MAPPING
    public class UomMapping
    {
        public Guid Id { get; set; } // ID (Primary key)
        public string PrimaryUom { get; set; } // PRIMARY_UOM (Primary key) (length: 255)
        public string PrimaryUomMapping { get; set; } // PRIMARY_UOM_MAPPING (length: 255)

        public UomMapping()
        {
            Id = Guid.NewGuid();
        }
    }

    // UserAccounts
    /// <summary>
    /// 2
    /// UserAccounts.EmployeeID
    /// True
    /// 0
    /// 10000
    /// </summary>
    public class UserAccount
    {
        /// <summary>
        /// 0
        /// </summary>
        public string LoginName { get; set; } // LoginName (Primary key via unique index ) (length: 20)
        public string VietnamName { get; set; } // VietnamName (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public string LevelOfAuthorization { get; set; } // LevelOfAuthorization (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public int Gate { get; set; } // Gate

        /// <summary>
        /// 0
        /// </summary>
        public int? DefaultCustomer { get; set; } // DefaultCustomer

        /// <summary>
        /// 0
        /// </summary>
        public bool IsAllowEdi { get; set; } // IsAllowEDI

        /// <summary>
        /// 0
        /// </summary>
        public bool? UserActive { get; set; } // UserActive
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int StoreId { get; set; } // StoreID
        public string Password { get; set; } // Password (length: 128)
        public byte? WarehouseId { get; set; } // WarehouseID
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public bool? IsOnline { get; set; } // IsOnline
        public bool? IsAllowOutside { get; set; } // IsAllowOutside
        public bool? IsAllowChangeStore { get; set; } // IsAllowChangeStore
        public DateTime? LastActivityDate { get; set; } // LastActivityDate
        public byte[] Ts { get; set; } // TS
        public Guid EmployeeId { get; set; } // EmployeeID
        public string ApiCustomerServiceToken { get; set; } // APICustomerServiceToken (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child FeeBackForCulturals where [FeeBackForCultural].[CreatedBy] point to this entity (FK_FreeBackCultural_UserAccount)
        /// </summary>
        public virtual ICollection<FeeBackForCultural> FeeBackForCulturals { get; set; } // FeeBackForCultural.FK_FreeBackCultural_UserAccount

        /// <summary>
        /// Child OperationGroupUsers where [OperationGroupUser].[UserName] point to this entity (FK_UserName_AcountUser)
        /// </summary>
        public virtual ICollection<OperationGroupUser> OperationGroupUsers { get; set; } // OperationGroupUser.FK_UserName_AcountUser

        public UserAccount()
        {
            LevelOfAuthorization = "2";
            Gate = 0;
            DefaultCustomer = 0;
            IsAllowEdi = false;
            UserActive = true;
            CreatedTime = DateTime.Now;
            IsOnline = false;
            IsAllowOutside = false;
            IsAllowChangeStore = false;
            FeeBackForCulturals = new List<FeeBackForCultural>();
            OperationGroupUsers = new List<OperationGroupUser>();
        }
    }

    // UserAccountDeviceMapping
    public class UserAccountDeviceMapping
    {
        public string DeviceNumberId { get; set; } // DeviceNumberID (Primary key) (length: 30)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public string UserName { get; set; } // UserName (length: 30)
        public string DeviceNumberMapping { get; set; } // DeviceNumberMapping (length: 255)
    }

    // UserActionDefinitions
    public class UserActionDefinition
    {
        public int ActionId { get; set; } // ActionId (Primary key)
        public string ActionName { get; set; } // ActionName (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime

        // Reverse navigation

        /// <summary>
        /// Child UserApplicationRoleGroupFunctionActions where [UserApplicationRoleGroupFunctionActions].[ActionId] point to this entity (FK_UserApplicationRoleGroupFunctionActions_UserActionDefinitions)
        /// </summary>
        public virtual ICollection<UserApplicationRoleGroupFunctionAction> UserApplicationRoleGroupFunctionActions { get; set; } // UserApplicationRoleGroupFunctionActions.FK_UserApplicationRoleGroupFunctionActions_UserActionDefinitions

        public UserActionDefinition()
        {
            CreatedTime = DateTime.Now;
            UserApplicationRoleGroupFunctionActions = new List<UserApplicationRoleGroupFunctionAction>();
        }
    }

    // UserApplications
    public class UserApplication
    {
        public int UserApplicationId { get; set; } // UserApplicationId (Primary key)
        public string UserId { get; set; } // UserId (length: 20)
        public int ApplicationId { get; set; } // ApplicationId
        public bool? IsLockedOut { get; set; } // IsLockedOut
        public DateTime? CreateDate { get; set; } // CreateDate
        public DateTime? LastLoginDate { get; set; } // LastLoginDate
        public DateTime? LastPasswordChangedDate { get; set; } // LastPasswordChangedDate
        public DateTime? LastLockoutDate { get; set; } // LastLockoutDate
        public int? FailedPasswordAttemptCount { get; set; } // FailedPasswordAttemptCount
        public DateTime? FailedPasswordAttemptWindowStart { get; set; } // FailedPasswordAttemptWindowStart
        public int? FailedPasswordAnswerAttemptCount { get; set; } // FailedPasswordAnswerAttemptCount
        public DateTime? FailedPasswordAnswerAttemptWindowStart { get; set; } // FailedPasswordAnswerAttemptWindowStart
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime

        // Reverse navigation

        /// <summary>
        /// Child UserApplicationRoles where [UserApplicationRoles].[UserApplicationId] point to this entity (FK_UserApplicationRoles_UserApplications)
        /// </summary>
        public virtual ICollection<UserApplicationRole> UserApplicationRoles { get; set; } // UserApplicationRoles.FK_UserApplicationRoles_UserApplications

        // Foreign keys

        /// <summary>
        /// Parent UserApplicationDefinition pointed by [UserApplications].([ApplicationId]) (FK_WMS_UserApplications_WMS_Applications)
        /// </summary>
        public virtual UserApplicationDefinition UserApplicationDefinition { get; set; } // FK_WMS_UserApplications_WMS_Applications

        public UserApplication()
        {
            CreatedTime = DateTime.Now;
            UserApplicationRoles = new List<UserApplicationRole>();
        }
    }

    // UserApplicationDefinitions
    public class UserApplicationDefinition
    {
        public int ApplicationId { get; set; } // ApplicationId (Primary key)
        public string ApplicationName { get; set; } // ApplicationName (length: 256)
        public string Description { get; set; } // Description (length: 256)

        // Reverse navigation

        /// <summary>
        /// Child UserApplications where [UserApplications].[ApplicationId] point to this entity (FK_WMS_UserApplications_WMS_Applications)
        /// </summary>
        public virtual ICollection<UserApplication> UserApplications { get; set; } // UserApplications.FK_WMS_UserApplications_WMS_Applications

        public UserApplicationDefinition()
        {
            UserApplications = new List<UserApplication>();
        }
    }

    // UserApplicationRoles
    public class UserApplicationRole
    {
        public int UserApplicationRoleId { get; set; } // UserApplicationRoleId (Primary key)
        public int UserApplicationId { get; set; } // UserApplicationId
        public int RoleId { get; set; } // RoleId
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime

        // Foreign keys

        /// <summary>
        /// Parent UserApplication pointed by [UserApplicationRoles].([UserApplicationId]) (FK_UserApplicationRoles_UserApplications)
        /// </summary>
        public virtual UserApplication UserApplication { get; set; } // FK_UserApplicationRoles_UserApplications

        /// <summary>
        /// Parent UserRoleDefinition pointed by [UserApplicationRoles].([RoleId]) (FK_WMS_UserApplicationRoles_WMS_Roles)
        /// </summary>
        public virtual UserRoleDefinition UserRoleDefinition { get; set; } // FK_WMS_UserApplicationRoles_WMS_Roles

        public UserApplicationRole()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // UserApplicationRoleGroups
    public class UserApplicationRoleGroup
    {
        public int UserApplicationRoleGroupId { get; set; } // UserApplicationRoleGroupId (Primary key)
        public int? UserApplicationRoleIdDelete { get; set; } // UserApplicationRoleId_Delete
        public int GroupId { get; set; } // GroupId
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int? RoleId { get; set; } // RoleId

        // Reverse navigation

        /// <summary>
        /// Child UserApplicationRoleGroupFunctions where [UserApplicationRoleGroupFunctions].[UserApplicationRoleGroupId] point to this entity (FK_UserApplicationRoleGroupFunctions_UserApplicationRoleGroups)
        /// </summary>
        public virtual ICollection<UserApplicationRoleGroupFunction> UserApplicationRoleGroupFunctions { get; set; } // UserApplicationRoleGroupFunctions.FK_UserApplicationRoleGroupFunctions_UserApplicationRoleGroups

        // Foreign keys

        /// <summary>
        /// Parent UserGroupDefinition pointed by [UserApplicationRoleGroups].([GroupId]) (FK_UserApplicationRoleGroups_UserGroupDefinitions)
        /// </summary>
        public virtual UserGroupDefinition UserGroupDefinition { get; set; } // FK_UserApplicationRoleGroups_UserGroupDefinitions

        /// <summary>
        /// Parent UserRoleDefinition pointed by [UserApplicationRoleGroups].([RoleId]) (FK_UserApplicationRoleGroups_UserRoleDefinitions)
        /// </summary>
        public virtual UserRoleDefinition UserRoleDefinition { get; set; } // FK_UserApplicationRoleGroups_UserRoleDefinitions

        public UserApplicationRoleGroup()
        {
            CreatedTime = DateTime.Now;
            UserApplicationRoleGroupFunctions = new List<UserApplicationRoleGroupFunction>();
        }
    }

    // UserApplicationRoleGroupFunctions
    public class UserApplicationRoleGroupFunction
    {
        public int UserApplicationRoleGroupFunctionId { get; set; } // UserApplicationRoleGroupFunctionId (Primary key)
        public int UserApplicationRoleGroupId { get; set; } // UserApplicationRoleGroupId
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int FunctionId { get; set; } // FunctionId

        // Reverse navigation

        /// <summary>
        /// Child UserApplicationRoleGroupFunctionActions where [UserApplicationRoleGroupFunctionActions].[UserApplicationRoleGroupFunctionId] point to this entity (FK_UserApplicationRoleGroupFunctionActions_UserApplicationRoleGroupFunctions)
        /// </summary>
        public virtual ICollection<UserApplicationRoleGroupFunctionAction> UserApplicationRoleGroupFunctionActions { get; set; } // UserApplicationRoleGroupFunctionActions.FK_UserApplicationRoleGroupFunctionActions_UserApplicationRoleGroupFunctions

        // Foreign keys

        /// <summary>
        /// Parent UserApplicationRoleGroup pointed by [UserApplicationRoleGroupFunctions].([UserApplicationRoleGroupId]) (FK_UserApplicationRoleGroupFunctions_UserApplicationRoleGroups)
        /// </summary>
        public virtual UserApplicationRoleGroup UserApplicationRoleGroup { get; set; } // FK_UserApplicationRoleGroupFunctions_UserApplicationRoleGroups

        /// <summary>
        /// Parent UserFunctionDefinition pointed by [UserApplicationRoleGroupFunctions].([FunctionId]) (FK_UserApplicationRoleGroupFunctions_UserFunctionDefinitions)
        /// </summary>
        public virtual UserFunctionDefinition UserFunctionDefinition { get; set; } // FK_UserApplicationRoleGroupFunctions_UserFunctionDefinitions

        public UserApplicationRoleGroupFunction()
        {
            CreatedTime = DateTime.Now;
            UserApplicationRoleGroupFunctionActions = new List<UserApplicationRoleGroupFunctionAction>();
        }
    }

    // UserApplicationRoleGroupFunctionActions
    public class UserApplicationRoleGroupFunctionAction
    {
        public int UserApplicationRoleGroupFunctionActionId { get; set; } // UserApplicationRoleGroupFunctionActionId (Primary key)
        public int UserApplicationRoleGroupFunctionId { get; set; } // UserApplicationRoleGroupFunctionId
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public int ActionId { get; set; } // ActionId

        // Foreign keys

        /// <summary>
        /// Parent UserActionDefinition pointed by [UserApplicationRoleGroupFunctionActions].([ActionId]) (FK_UserApplicationRoleGroupFunctionActions_UserActionDefinitions)
        /// </summary>
        public virtual UserActionDefinition UserActionDefinition { get; set; } // FK_UserApplicationRoleGroupFunctionActions_UserActionDefinitions

        /// <summary>
        /// Parent UserApplicationRoleGroupFunction pointed by [UserApplicationRoleGroupFunctionActions].([UserApplicationRoleGroupFunctionId]) (FK_UserApplicationRoleGroupFunctionActions_UserApplicationRoleGroupFunctions)
        /// </summary>
        public virtual UserApplicationRoleGroupFunction UserApplicationRoleGroupFunction { get; set; } // FK_UserApplicationRoleGroupFunctionActions_UserApplicationRoleGroupFunctions

        public UserApplicationRoleGroupFunctionAction()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // UserDepartmentDefinitions
    public class UserDepartmentDefinition
    {
        public int UserDepartmentDefinitionId { get; set; } // UserDepartmentDefinitionID (Primary key)
        public string UserDepartmentDefinitionName { get; set; } // UserDepartmentDefinitionName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child UserRoleDefinitions where [UserRoleDefinitions].[UserDepartmentDefinitionID] point to this entity (FK_UserRoleDefinitions_UserDepartmentDefinitions)
        /// </summary>
        public virtual ICollection<UserRoleDefinition> UserRoleDefinitions { get; set; } // UserRoleDefinitions.FK_UserRoleDefinitions_UserDepartmentDefinitions

        public UserDepartmentDefinition()
        {
            UserRoleDefinitions = new List<UserRoleDefinition>();
        }
    }

    // UserFunctionDefinitions
    public class UserFunctionDefinition
    {
        public int FunctionId { get; set; } // FunctionId (Primary key)
        public string FunctionName { get; set; } // FunctionName (length: 70)
        public string FunctionGroup { get; set; } // FunctionGroup (length: 50)
        public int? GroupId { get; set; } // GroupId
        public string FormName { get; set; } // FormName (length: 70)
        public string Remark { get; set; } // Remark (length: 100)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public byte[] Ts { get; set; } // ts
        public string FunctionDescription { get; set; } // FunctionDescription (length: 100)
        public bool? IsShowReport { get; set; } // IsShowReport

        // Reverse navigation

        /// <summary>
        /// Child UserApplicationRoleGroupFunctions where [UserApplicationRoleGroupFunctions].[FunctionId] point to this entity (FK_UserApplicationRoleGroupFunctions_UserFunctionDefinitions)
        /// </summary>
        public virtual ICollection<UserApplicationRoleGroupFunction> UserApplicationRoleGroupFunctions { get; set; } // UserApplicationRoleGroupFunctions.FK_UserApplicationRoleGroupFunctions_UserFunctionDefinitions

        public UserFunctionDefinition()
        {
            CreatedTime = DateTime.Now;
            IsShowReport = true;
            UserApplicationRoleGroupFunctions = new List<UserApplicationRoleGroupFunction>();
        }
    }

    // UserGroups
    public class UserGroup
    {
        /// <summary>
        /// 0
        /// </summary>
        public int Id { get; set; } // ID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string LoginName { get; set; } // LoginName (length: 20)

        /// <summary>
        /// 0
        /// </summary>
        public byte UserGroupId { get; set; } // UserGroupID
    }

    // UserGroupDefinitions
    public class UserGroupDefinition
    {
        public int GroupId { get; set; } // GroupId (Primary key)
        public string GroupName { get; set; } // GroupName (length: 50)
        public string GroupDescription { get; set; } // GroupDescription (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child UserApplicationRoleGroups where [UserApplicationRoleGroups].[GroupId] point to this entity (FK_UserApplicationRoleGroups_UserGroupDefinitions)
        /// </summary>
        public virtual ICollection<UserApplicationRoleGroup> UserApplicationRoleGroups { get; set; } // UserApplicationRoleGroups.FK_UserApplicationRoleGroups_UserGroupDefinitions

        public UserGroupDefinition()
        {
            UserApplicationRoleGroups = new List<UserApplicationRoleGroup>();
        }
    }

    // UserRoleDefinitions
    public class UserRoleDefinition
    {
        public int RoleId { get; set; } // RoleId (Primary key)
        public string RoleName { get; set; } // RoleName (length: 256)
        public string Description { get; set; } // Description (length: 256)
        public int UserDepartmentDefinitionId { get; set; } // UserDepartmentDefinitionID

        // Reverse navigation

        /// <summary>
        /// Child UserApplicationRoles where [UserApplicationRoles].[RoleId] point to this entity (FK_WMS_UserApplicationRoles_WMS_Roles)
        /// </summary>
        public virtual ICollection<UserApplicationRole> UserApplicationRoles { get; set; } // UserApplicationRoles.FK_WMS_UserApplicationRoles_WMS_Roles

        /// <summary>
        /// Child UserApplicationRoleGroups where [UserApplicationRoleGroups].[RoleId] point to this entity (FK_UserApplicationRoleGroups_UserRoleDefinitions)
        /// </summary>
        public virtual ICollection<UserApplicationRoleGroup> UserApplicationRoleGroups { get; set; } // UserApplicationRoleGroups.FK_UserApplicationRoleGroups_UserRoleDefinitions

        // Foreign keys

        /// <summary>
        /// Parent UserDepartmentDefinition pointed by [UserRoleDefinitions].([UserDepartmentDefinitionId]) (FK_UserRoleDefinitions_UserDepartmentDefinitions)
        /// </summary>
        public virtual UserDepartmentDefinition UserDepartmentDefinition { get; set; } // FK_UserRoleDefinitions_UserDepartmentDefinitions

        public UserRoleDefinition()
        {
            UserApplicationRoleGroups = new List<UserApplicationRoleGroup>();
            UserApplicationRoles = new List<UserApplicationRole>();
        }
    }

    // VietnameseStringError
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 0
    /// </summary>
    public class VietnameseStringError
    {
        /// <summary>
        /// 0
        /// </summary>
        public int StringId { get; set; } // StringID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string StringDescription { get; set; } // StringDescription (length: 500)
    }

    // ViewAllCustomersInout
    public class ViewAllCustomersInout
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? OrderDate { get; set; } // OrderDate
        public int? Ctns { get; set; } // Ctns
        public decimal? Kgs { get; set; } // Kgs
        public string InternalRemark { get; set; } // InternalRemark (length: 300)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
    }

    // ViewAndroid_ContainerCheckingLast
    public class ViewAndroidContainerCheckingLast
    {
        public int ContInOutId { get; set; } // ContInOutID
        public DateTime? Time { get; set; } // Time
        public string UserCheck { get; set; } // UserCheck (length: 50)
    }

    // ViewAndroid_ContainerCheckingLatest
    public class ViewAndroidContainerCheckingLatest
    {
        public int ContInOutId { get; set; } // ContInOutID
        public int? ContainerCheckingId { get; set; } // ContainerCheckingID
    }

    // ViewAndroid_TruckCheckingLatest
    public class ViewAndroidTruckCheckingLatest
    {
        public int TruckInOutId { get; set; } // TruckInOutID
        public int? ContainerCheckingId { get; set; } // ContainerCheckingID
    }

    // ViewAnnualLeaveByEmployee
    public class ViewAnnualLeaveByEmployee
    {
        public int EmployeeId { get; set; } // EmployeeID
        public int? Lea { get; set; } // LEA
    }

    // ViewAttachments
    public class ViewAttachment
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
    }

    // ViewBarcodeScanDOnotDone
    public class ViewBarcodeScanDOnotDone
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string Remark { get; set; } // Remark (length: 50)
    }

    // ViewBarcodeScanWrong
    public class ViewBarcodeScanWrong
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 15)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ScannedBy { get; set; } // ScannedBy (length: 20)
        public string Result { get; set; } // Result (length: 5)
        public int? DataId { get; set; } // Data_ID
        public string Remark { get; set; } // Remark (length: 100)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string WorkingRemark { get; set; } // WorkingRemark (length: 50)
    }

    // ViewBigC_DeliveryInvoiceQtyByStore
    public class ViewBigCDeliveryInvoiceQtyByStore
    {
        public int StoreNumber { get; set; } // StoreNumber
        public DateTime DeliveryOrderDate { get; set; } // DeliveryOrderDate
        public int? InvoiceQty { get; set; } // InvoiceQty
    }

    // ViewBigC_DeliveryOrderID
    public class ViewBigCDeliveryOrderId
    {
        public int? DeliveryOrderId { get; set; } // DeliveryOrderID
        public DateTime DeliveryOrderDate { get; set; } // DeliveryOrderDate
        public int StoreNumber { get; set; } // StoreNumber
        public byte? OperationCategoryId { get; set; } // OperationCategoryID
    }

    // ViewBigC_DeliveryOrderInvoiceQty
    public class ViewBigCDeliveryOrderInvoiceQty
    {
        public int DeliveryOrderId { get; set; } // DeliveryOrderID
        public int? InvoiceQty { get; set; } // InvoiceQty
    }

    // ViewBigC_DispatchingSummaryByClients
    public class ViewBigCDispatchingSummaryByClient
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 50)
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public int? TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalUnits { get; set; } // TotalUnits
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public int? TotalPallets { get; set; } // TotalPallets
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 250)
    }

    // ViewBigC_InvoicesTotalMoney
    public class ViewBigCInvoicesTotalMoney
    {
        public int ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public decimal? TotalMoney { get; set; } // TotalMoney
    }

    // ViewBigCOutToday
    public class ViewBigCOutToday
    {
        public DateTime DeliveryOrderDate { get; set; } // DeliveryOrderDate
        public int StoreNumber { get; set; } // StoreNumber
        public string StoreName { get; set; } // StoreName (length: 50)
        public int? StoreOrdinalNumber { get; set; } // StoreOrdinalNumber
        public string SupplierName { get; set; } // SupplierName (length: 50)
        public string SupplierNumber { get; set; } // SupplierNumber (length: 7)
        public string Temperature { get; set; } // Temperature (length: 50)
        public int? BookingPackages { get; set; } // BookingPackages
        public decimal? BookingWeight { get; set; } // BookingWeight
        public int? ActualPackages { get; set; } // ActualPackages
        public decimal? ActualWeight { get; set; } // ActualWeight
        public bool? VeterinaryInspectionRequired { get; set; } // VeterinaryInspectionRequired
        public string SupplierNameShort { get; set; } // SupplierNameShort (length: 50)
        public string StructureCode { get; set; } // StructureCode (length: 20)
    }

    // ViewBookingViewAll
    public class ViewBookingViewAll
    {
        public string BookingDate { get; set; } // BookingDate (length: 5)
        public string NameDayOfWeek { get; set; } // NameDayOfWeek (length: 3)
        public DateTime? BookingDateFull { get; set; } // BookingDateFull
        public decimal? Weights { get; set; } // Weights
        public decimal? WeightsRo { get; set; } // Weights_RO
        public decimal? WeightsDo { get; set; } // Weights_DO
        public int? Pallets { get; set; } // Pallets
        public int? PalletsRo { get; set; } // Pallets_RO
        public int? PalletsDo { get; set; } // Pallets_DO
    }

    // VIEW_CHECK_OVER_ORDER
    public class ViewCheckOverOrder
    {
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public Guid EdiOrderId { get; set; } // EDI_OrderID
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 500)
        public int? StoreNumber { get; set; } // StoreNumber
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal? WMiss { get; set; } // WMiss
        public int? QtyMiss { get; set; } // QtyMiss
        public int? Quantity { get; set; } // Quantity
        public decimal? Weights { get; set; } // Weights
        public int? NetQuantity { get; set; } // NetQuantity
        public decimal? NetWeight { get; set; } // NetWeight
        public Guid EdiOrderDetailId { get; set; } // EDI_OrderDetailID
    }

    // ViewConfirmationAll
    public class ViewConfirmationAll
    {
        public DateTime? CreateDate { get; set; } // CreateDate
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public DateTime? Orderdate { get; set; } // orderdate
        public string Username { get; set; } // username (length: 50)
        public int Ordertype { get; set; } // ordertype
        public string Typename { get; set; } // typename (length: 17)
        public string Ordernumber { get; set; } // ordernumber (length: 16)
        public int Id { get; set; } // ID
        public byte? Status { get; set; } // Status
        public byte? Statusname { get; set; } // statusname
        public string Customerref { get; set; } // customerref (length: 15)
        public int DetailId { get; set; } // detailID
        public int? TransactionId { get; set; } // transactionID
    }

    // ViewConfirmationAllUnion
    public class ViewConfirmationAllUnion
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public DateTime? Orderdate { get; set; } // orderdate
        public string Username { get; set; } // username (length: 50)
        public int Ordertype { get; set; } // ordertype
        public string Typename { get; set; } // typename (length: 19)
        public string Ordernumber { get; set; } // ordernumber (length: 20)
        public Guid Id { get; set; } // ID
        public byte? Status { get; set; } // Status
        public byte? Statusname { get; set; } // statusname
        public string Customerref { get; set; } // customerref (length: 250)
        public Guid DetailId { get; set; } // detailID
        public int? TransactionId { get; set; } // transactionID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? EndTime { get; set; } // EndTime
    }

    // ViewContractMailMerge
    public class ViewContractMailMerge
    {
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public string CustomerInvoiceName { get; set; } // CustomerInvoiceName (length: 100)
        public string CustomerInvoiceAddress { get; set; } // CustomerInvoiceAddress (length: 150)
        public string CustomerInvoiceTaxCode { get; set; } // CustomerInvoiceTaxCode (length: 20)
        public DateTime? ContractDate { get; set; } // ContractDate
        public DateTime? StartDate { get; set; } // StartDate
        public DateTime? EndDate { get; set; } // EndDate
        public DateTime? ReviewDate { get; set; } // ReviewDate
        public string InsuranceUnit { get; set; } // InsuranceUnit (length: 50)
        public decimal? InsuranceUnitValue { get; set; } // InsuranceUnitValue
        public decimal? ProductMaxValue { get; set; } // ProductMaxValue
        public string AppendixNumber { get; set; } // AppendixNumber (length: 50)
        public DateTime? AppendixDate { get; set; } // AppendixDate
        public string CustomerSignGender { get; set; } // CustomerSignGender (length: 50)
        public string CustomerSignRepresentative { get; set; } // CustomerSignRepresentative (length: 150)
        public string CustomerSignPositionEnglish { get; set; } // CustomerSignPositionEnglish (length: 150)
        public string CustomerSignPositionVietnam { get; set; } // CustomerSignPositionVietnam (length: 150)
        public string CustomerSignEmail { get; set; } // CustomerSignEmail (length: 150)
        public string Phone1 { get; set; } // Phone1 (length: 50)
        public string Phone2 { get; set; } // Phone2 (length: 50)
        public string Mobile { get; set; } // Mobile (length: 20)
        public string Fax { get; set; } // Fax (length: 50)
        public string Fax2 { get; set; } // Fax2 (length: 50)
        public string Email { get; set; } // Email (length: 3000)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string StoreDescription { get; set; } // StoreDescription (length: 250)
    }

    // ViewContractsAllCustomers
    public class ViewContractsAllCustomer
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public DateTime ContractDate { get; set; } // ContractDate
        public DateTime? StartDate { get; set; } // StartDate
        public DateTime EndDate { get; set; } // EndDate
        public DateTime? ReviewDate { get; set; } // ReviewDate
        public string ContractRemark { get; set; } // ContractRemark (length: 1800)
        public string InsuranceUnit { get; set; } // InsuranceUnit (length: 50)
        public decimal? InsuranceUnitValue { get; set; } // InsuranceUnitValue
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte? BillingCycle { get; set; } // BillingCycle
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 50)
        public double? ContractServicePrice { get; set; } // ContractServicePrice
        public string ContractDetailRemark { get; set; } // ContractDetailRemark (length: 50)
        public string CurrencyUnit { get; set; } // CurrencyUnit (length: 3)
        public double? CheckingQuantity { get; set; } // CheckingQuantity
        public double? CheckingQuantity2 { get; set; } // CheckingQuantity2
    }

    // ViewCustomerContractOTCount
    public class ViewCustomerContractOtCount
    {
        public int? CustomerId { get; set; } // CustomerID
        public int? QtyOt { get; set; } // QtyOT
    }

    // ViewCustomerSaleContract
    public class ViewCustomerSaleContract
    {
        public Guid CustomerClientId { get; set; } // CustomerClientID
        public string BillToLocation { get; set; } // BILL_TO_LOCATION (length: 100)
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 255)
        public Guid ProductId { get; set; } // ProductID
        public string SalesProductCode { get; set; } // SalesProductCode (length: 30)
        public string SalesProductCode2 { get; set; } // SalesProductCode2 (length: 30)
        public string SalesProductName { get; set; } // SalesProductName (length: 150)
    }

    // ViewCustomerSalesInvoices
    public class ViewCustomerSalesInvoice
    {
        public int CustomerSalesInvoiceId { get; set; } // CustomerSalesInvoiceID
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public DateTime CustomerSalesInvoiceDate { get; set; } // CustomerSalesInvoiceDate
        public string CustomerSalesInvoiceRemark { get; set; } // CustomerSalesInvoiceRemark (length: 500)
        public float? TotalAmount { get; set; } // TotalAmount
        public float? DiscountAmount { get; set; } // DiscountAmount
        public string CustomerSalesOrderNumber { get; set; } // CustomerSalesOrderNumber (length: 50)
        public DateTime? CustomerSalesOrderDate { get; set; } // CustomerSalesOrderDate
        public string InvoiceOfficialNumber { get; set; } // InvoiceOfficialNumber (length: 20)
        public string InvoiceOfficialSerieName { get; set; } // InvoiceOfficialSerieName (length: 10)
        public string ProductName { get; set; } // ProductName (length: 250)
        public float? OrderQuantity { get; set; } // OrderQuantity
        public int? DispatchedQuantity { get; set; } // DispatchedQuantity
        public string InvoiceUnit { get; set; } // InvoiceUnit (length: 20)
        public float InvoicePrice { get; set; } // InvoicePrice
        public float InvoiceQuantity { get; set; } // InvoiceQuantity
        public string CustomerSalesInvoiceDetailRemark { get; set; } // CustomerSalesInvoiceDetailRemark (length: 150)
        public string CustomerPurchasingOrderNumber { get; set; } // CustomerPurchasingOrderNumber (length: 50)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductCategoryDescription { get; set; } // ProductCategoryDescription (length: 50)
        public string ProductNameVn { get; set; } // ProductNameVN (length: 100)
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 250)
    }

    // ViewCustomerSalesInvoices3PL
    public class ViewCustomerSalesInvoices3Pl
    {
        public int BatchNumber { get; set; } // Batch Number
        public long? EdiLineNumber { get; set; } // EDI Line Number
        public string Reference40Vr0141 { get; set; } // Reference (VR01) (length: 50)
        public string Reference40Vr0241 { get; set; } // Reference (VR02) (length: 20)
        public long? LineNumber40Lnid41 { get; set; } // Line Number (LNID)
        public string ShipToNumber { get; set; } // Ship To Number (length: 25)
        public DateTime? OrderDate40Trdj { get; set; } // Order Date (TRDJ
        public DateTime InvoiceDate40Ivd41 { get; set; } // Invoice Date (IVD)
        public string C2NdItemNumber { get; set; } // 2nd Item Number (length: 30)
        public float QuantityOrdered40Uorg41 { get; set; } // Quantity Ordered (UORG)
        public string Um40Uom41 { get; set; } // UM (UOM) (length: 20)
        public double? UnitPrice40Uprc41 { get; set; } // Unit Price (UPRC)
        public double? ExtendedPrice { get; set; } // Extended Price
        public DateTime? DateUpdated { get; set; } // Date Updated
        public string UserId { get; set; } // User ID (length: 10)
    }

    // ViewCustomerSalesInvoices3PL_Details
    public class ViewCustomerSalesInvoices3PlDetail
    {
        public int BatchNumber { get; set; } // Batch Number
        public int? EdiLineNumber { get; set; } // EDI Line Number
        public string Reference40Vr0141 { get; set; } // Reference (VR01) (length: 50)
        public string Reference40Vr0241 { get; set; } // Reference (VR02) (length: 20)
        public int? ShipToNumber { get; set; } // Ship To Number
        public DateTime? OrderDate40Trdj { get; set; } // Order Date (TRDJ
        public DateTime InvoiceDate40Ivd41 { get; set; } // Invoice Date (IVD)
        public string C2NdItemNumber { get; set; } // 2nd Item Number (length: 30)
        public float QuantityOrdered40Uorg41 { get; set; } // Quantity Ordered (UORG)
        public string Um40Uom41 { get; set; } // UM (UOM) (length: 20)
        public float? UnitPrice40Uprc41 { get; set; } // Unit Price (UPRC)
        public int? ExtendedPrice { get; set; } // Extended Price
        public DateTime? DateUpdated { get; set; } // Date Updated
        public string UserId { get; set; } // User ID (length: 10)
    }

    // ViewDataMasan_01012021
    public class ViewDataMasan01012021
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public Guid ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public Guid CustomerId { get; set; } // CustomerID
        public int? CustomerLocalId { get; set; } // CustomerLocalID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public decimal? Weight { get; set; } // Weight
        public int? Qty { get; set; } // Qty
    }

    // ViewDataMasan_DO
    public class ViewDataMasanDo
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public Guid CustomerId { get; set; } // CustomerID
        public Guid ProductId { get; set; } // ProductID
        public int? Qty { get; set; } // Qty
        public decimal? Weight { get; set; } // Weight
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public Guid? WorkDefinitionId { get; set; } // WorkDefinitionID
    }

    // ViewDataPickShipEBS
    public class ViewDataPickShipEb
    {
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 32)
        public Guid? WorkDefinitionId { get; set; } // WorkDefinitionID
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 255)
    }

    // ViewDispatchingMasan
    public class ViewDispatchingMasan
    {
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public Guid ProductId { get; set; } // ProductID
        public int? Qty { get; set; } // Qty
        public decimal? Weights { get; set; } // Weights
    }

    // ViewDispatchingOrderByCustomerRef2
    public class ViewDispatchingOrderByCustomerRef2
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalPackages { get; set; } // TotalPackages
        public Guid ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 100)
    }

    // ViewDispatchingOrderGroupByProduct
    public class ViewDispatchingOrderGroupByProduct
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalPackages { get; set; } // TotalPackages
        public Guid ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public decimal? Tolerance { get; set; } // Tolerance
        public string SoNumber { get; set; } // SONumber (length: 100)
    }

    // ViewDispatchingProduct
    public class ViewDispatchingProduct
    {
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
    }

    // ViewDispatchingProductsDelete
    public class ViewDispatchingProductsDelete
    {
        public int DispatchingProductId { get; set; } // DispatchingProductID
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short? QuantityOfPackages { get; set; } // QuantityOfPackages
        public short CurrentQuantity { get; set; } // CurrentQuantity
    }

    // ViewDispatchingQtyAverage30days
    public class ViewDispatchingQtyAverage30Days
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public short PackagesPerPallet { get; set; } // PackagesPerPallet
        public int? DDates { get; set; } // DDates
        public int? QtyTrans { get; set; } // QtyTrans
        public int? QtyCtns { get; set; } // QtyCtns
        public int? AvgDailyCtn { get; set; } // AvgDailyCtn
        public string RoomId { get; set; } // RoomID (length: 1)
    }

    // ViewEDICheckStockStatus
    public class ViewEdiCheckStockStatu
    {
        public Guid CustomerId { get; set; } // CustomerID
        public int? TotalOrderQuantity { get; set; } // TotalOrderQuantity
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int? TotalQty { get; set; } // TotalQty
        public Guid ProductId { get; set; } // ProductID
        public decimal? Rate { get; set; } // Rate
        public int? TotalQtyMissing { get; set; } // TotalQtyMissing
        public string Status { get; set; } // Status (length: 4)
        public decimal? PackingPercentage { get; set; } // PackingPercentage
        public DateTime OrderDate { get; set; } // OrderDate
    }

    // ViewEmployees
    public class ViewEmployee
    {
        public int EmployeeId { get; set; } // EmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
    }

    // ViewEmployeeEventLast30days
    public class ViewEmployeeEventLast30Days
    {
        public bool Leave { get; set; } // Leave
        public int EmployeeId { get; set; } // EmployeeID
        public int PayrollDetailId { get; set; } // PayrollDetailID
        public DateTime PayrollDate { get; set; } // PayrollDate
        public float Ots { get; set; } // OTS
        public float Otn { get; set; } // OTN
        public float Oth { get; set; } // OTH
        public bool Sick { get; set; } // Sick
        public bool Haft { get; set; } // Haft
        public string Name { get; set; } // Name (length: 50)
        public bool Off { get; set; } // Off
        public string PayrollRemark { get; set; } // PayrollRemark (length: 255)
        public string User { get; set; } // User (length: 300)
        public DateTime ReportDate { get; set; } // ReportDate
        public string TimeWork { get; set; } // TimeWork (length: 100)
        public bool SunHol { get; set; } // SunHol
        public byte? Noodles { get; set; } // Noodles
        public byte? Lunch { get; set; } // Lunch
        public byte? Milk { get; set; } // Milk
        public string BenefitUser { get; set; } // BenefitUser (length: 50)
        public bool LunchCompensate { get; set; } // LunchCompensate
        public string Position { get; set; } // Position (length: 50)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public byte? Department { get; set; } // Department
        public string DepartmentName { get; set; } // DepartmentName (length: 50)
        public string DepartmentNameShort { get; set; } // DepartmentNameShort (length: 10)
        public string SystemLeave { get; set; } // SystemLeave (length: 5)
        public string Shift { get; set; } // Shift (length: 3)
        public string ShiftGroup { get; set; } // ShiftGroup (length: 5)
        public bool? NightShift { get; set; } // NightShift
        public string Contract { get; set; } // Contract (length: 9)
        public string LunchPlace { get; set; } // LunchPlace (length: 2)
        public float Otnn { get; set; } // OTNN
        public float Otsn { get; set; } // OTSN
        public float Othn { get; set; } // OTHN
        public float Otnn43 { get; set; } // OTNN+
    }

    // ViewEmployeeInOutRemain
    public class ViewEmployeeInOutRemain
    {
        public Guid EmployeeInOutId { get; set; } // EmployeeInOutID
        public Guid EmployeeId { get; set; } // EmployeeID
        public DateTime? TimeOut { get; set; } // TimeOut
        public DateTime? TimeIn { get; set; } // TimeIn
        public bool? CheckOut { get; set; } // CheckOut
        public string Remark { get; set; } // Remark (length: 100)
        public string BikeNumber { get; set; } // BikeNumber (length: 30)
        public bool? CheckBike { get; set; } // CheckBike
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public byte? Gate { get; set; } // Gate
        public string DateIn { get; set; } // DateIn (length: 30)
        public DateTime? FromTime { get; set; } // FromTime
        public string CreatedBy { get; set; } // CreatedBy (length: 300)
        public int? StoreId { get; set; } // StoreID
        public int? EmployeeCode { get; set; } // EmployeeCode
        public int? EmployeeCodeFinger { get; set; } // EmployeeCodeFinger
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
    }

    // ViewEmployeeTrainingManagement
    public class ViewEmployeeTrainingManagement
    {
        public int TrainingId { get; set; } // TrainingID
        public DateTime? TrainingDate { get; set; } // TrainingDate
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string TrainingLocation { get; set; } // TrainingLocation (length: 255)
        public string TrainingDescription { get; set; } // TrainingDescription (length: 2000)
        public int? TrainingCost { get; set; } // TrainingCost
        public string CurrencyUnit { get; set; } // CurrencyUnit (length: 255)
        public decimal? TrainingDuration { get; set; } // TrainingDuration
        public string TrainingConfirmedBy { get; set; } // TrainingConfirmedBy (length: 255)
        public bool TrainingConfirm { get; set; } // TrainingConfirm
        public DateTime? ConfirmTime { get; set; } // ConfirmTime
        public int? EmployeeId { get; set; } // EmployeeID
        public int? Department { get; set; } // Department
        public string EmployeeFeedback { get; set; } // EmployeeFeedback (length: 50)
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 2000)
        public string CostCoverBy { get; set; } // CostCoverBy (length: 50)
        public string DocumentFolder { get; set; } // DocumentFolder (length: 250)
        public int? TrainingDefinitionId { get; set; } // TrainingDefinitionID
        public DateTime? TrainingExpiryDate { get; set; } // TrainingExpiryDate
        public string TrainingNumber { get; set; } // TrainingNumber (length: 10)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string TrainingName { get; set; } // TrainingName (length: 250)
        public DateTime? DateOfBirth { get; set; } // DateOfBirth
    }

    // ViewEmployeeWorkings
    public class ViewEmployeeWorking
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public int? TeamLeaderCode { get; set; } // TeamLeaderCode
        public string TeamLeaderName { get; set; } // TeamLeaderName (length: 50)
        public Guid EmployeeId { get; set; } // EmployeeID
        public double? ProductionQuantity { get; set; } // ProductionQuantity
        public int Percentage { get; set; } // Percentage
        public string Remark { get; set; } // Remark (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string OrderRemark { get; set; } // OrderRemark (length: 250)
        public DateTime? TimeWorking { get; set; } // TimeWorking
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? OrderDate { get; set; } // OrderDate
        public Guid? CustomerId { get; set; } // CustomerID
        public int? StoreId { get; set; } // StoreID
        public int? EmployeeCode { get; set; } // EmployeeCode
    }

    // ViewEmployeeWorkingDOTotal
    public class ViewEmployeeWorkingDoTotal
    {
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalPlts { get; set; } // TotalPlts
    }

    // ViewEmPloyeeWorkingGoupByPrice
    public class ViewEmPloyeeWorkingGoupByPrice
    {
        public int? StoreId { get; set; } // StoreID
        public Guid EmployeeId { get; set; } // EmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public decimal? ProductionQuantity1 { get; set; } // ProductionQuantity1
        public string Description1 { get; set; } // Description1 (length: 200)
        public double? Money1 { get; set; } // Money1
        public decimal? ProductionQuantity2 { get; set; } // ProductionQuantity2
        public string Description2 { get; set; } // Description2 (length: 200)
        public double? Money2 { get; set; } // Money2
        public decimal? ProductionQuantity3 { get; set; } // ProductionQuantity3
        public string Description3 { get; set; } // Description3 (length: 200)
        public double? Money3 { get; set; } // Money3
        public decimal? ProductionQuantity4 { get; set; } // ProductionQuantity4
        public string Description4 { get; set; } // Description4 (length: 200)
        public double? Money4 { get; set; } // Money4
        public decimal? ProductionQuantity5 { get; set; } // ProductionQuantity5
        public string Description5 { get; set; } // Description5 (length: 20)
        public double? Money5 { get; set; } // Money5
        public decimal? ProductionQuantity6 { get; set; } // ProductionQuantity6
        public string Description6 { get; set; } // Description6 (length: 200)
        public double? Money6 { get; set; } // Money6
        public decimal? ProductionQuantity7 { get; set; } // ProductionQuantity7
        public string Description7 { get; set; } // Description7 (length: 200)
        public double? Money7 { get; set; } // Money7
        public decimal? ProductionQuantity9 { get; set; } // ProductionQuantity9
        public string Description9 { get; set; } // Description9 (length: 9)
        public string Money9 { get; set; } // Money9 (length: 1)
        public double? Money { get; set; } // Money
    }

    // ViewEmployeeWorkingLast45days
    public class ViewEmployeeWorkingLast45Days
    {
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public int EmployeeId { get; set; } // EmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public byte? ShiftId { get; set; } // ShiftID
        public byte? Department { get; set; } // Department
        public DateTime? OrderDate { get; set; } // OrderDate
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public int Percentage { get; set; } // Percentage
        public string Remark { get; set; } // Remark (length: 50)
        public float? ProductionQuantity { get; set; } // ProductionQuantity
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
    }

    // ViewEmployeeWorkingNotTeam
    public class ViewEmployeeWorkingNotTeam
    {
        public int? EmployeeCode { get; set; } // EmployeeCode
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public int Percentage { get; set; } // Percentage
        public decimal? ProductionQuantity { get; set; } // ProductionQuantity
        public string Remark { get; set; } // Remark (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string OrderRemark { get; set; } // OrderRemark (length: 250)
        public DateTime? EmployeeWorkingCreatedTime { get; set; } // EmployeeWorkingCreatedTime
        public DateTime? TimeWorking { get; set; } // TimeWorking
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? OrderDate { get; set; } // OrderDate
        public Guid? CustomerId { get; set; } // CustomerID
        public int? StoreId { get; set; } // StoreID
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public bool IsProductivity { get; set; } // isProductivity
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string PositionVietnam { get; set; } // PositionVietnam (length: 50)
        public int PositionId { get; set; } // PositionID
        public Guid EmployeeId { get; set; } // EmployeeID
    }

    // ViewEmployeeWorkingNotTeam_BK20200205
    public class ViewEmployeeWorkingNotTeamBk20200205
    {
        public int? EmployeeCode { get; set; } // EmployeeCode
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public int Percentage { get; set; } // Percentage
        public double? ProductionQuantity { get; set; } // ProductionQuantity
        public string Remark { get; set; } // Remark (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string OrderRemark { get; set; } // OrderRemark (length: 250)
        public DateTime? EmployeeWorkingCreatedTime { get; set; } // EmployeeWorkingCreatedTime
        public DateTime? TimeWorking { get; set; } // TimeWorking
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? OrderDate { get; set; } // OrderDate
        public Guid? CustomerId { get; set; } // CustomerID
        public int? StoreId { get; set; } // StoreID
        public string EmployeeCodeFull { get; set; } // EmployeeCodeFull (length: 30)
        public bool IsProductivity { get; set; } // isProductivity
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string PositionVietnam { get; set; } // PositionVietnam (length: 50)
        public int PositionId { get; set; } // PositionID
        public Guid EmployeeId { get; set; } // EmployeeID
    }

    // ViewEmployeeWorkingROTotal
    public class ViewEmployeeWorkingRoTotal
    {
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalPlts { get; set; } // TotalPlts
    }

    // ViewEmployeeWorkingSupervisor
    public class ViewEmployeeWorkingSupervisor
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public int Supervisor { get; set; } // Supervisor
    }

    // ViewEmployeeWorkingTotal
    public class ViewEmployeeWorkingTotal
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public double? ProductionQuantity { get; set; } // ProductionQuantity
    }

    // ViewEmployeeWorkingTotalPercentage
    public class ViewEmployeeWorkingTotalPercentage
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public int? TotalPercentage { get; set; } // TotalPercentage
        public int? QtyOfEmployee { get; set; } // QtyOfEmployee
    }

    // ViewEmployeeWorkingTotalWeightDO
    public class ViewEmployeeWorkingTotalWeightDo
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public double? TotalWeight { get; set; } // TotalWeight
    }

    // ViewEmployeeWorkingTotalWeightRO
    public class ViewEmployeeWorkingTotalWeightRo
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public double? TotalWeight { get; set; } // TotalWeight
    }

    // ViewFonterraBigCDispatchingDetailsUsedByDate
    public class ViewFonterraBigCDispatchingDetailsUsedByDate
    {
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public DateTime? UseByDate { get; set; } // UseByDate
        public string Destination { get; set; } // Destination (length: 250)
    }

    // ViewFonterraCustomerClients
    public class ViewFonterraCustomerClient
    {
        public int CustomerId { get; set; } // CustomerID
        public int CustomerClientId { get; set; } // CustomerClientID
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 250)
        public int CustomerSalesContractId { get; set; } // CustomerSalesContractID
        public int? CustomerClientMainId { get; set; } // CustomerClientMainID
        public int? CustomerClientCodeFbv { get; set; } // CustomerClientCodeFBV
        public string MainClientName { get; set; } // MainClientName (length: 50)
    }

    // ViewFonterraDispatchingOrdersToday
    public class ViewFonterraDispatchingOrdersToday
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int? Qty { get; set; } // Qty
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public int CustomerId { get; set; } // CustomerID
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public string Label { get; set; } // Label (length: 15)
    }

    // ViewFonterraQA
    public class ViewFonterraQa
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 14)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public int QaReportId { get; set; } // QAReportID
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public string Original { get; set; } // Original (length: 50)
        public string Supplier { get; set; } // Supplier (length: 50)
        public string Manufactured { get; set; } // Manufactured (length: 50)
        public string DocumentFileScan { get; set; } // DocumentFileScan (length: 200)
        public string CustomNo { get; set; } // CustomNo (length: 200)
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public bool? RecorderConfirmed { get; set; } // RecorderConfirmed
        public byte[] Ts { get; set; } // ts
        public DateTime? RecorderOccurTime { get; set; } // RecorderOccurTime
        public string RecorderTransporterRepresentative { get; set; } // RecorderTransporterRepresentative (length: 40)
        public string RecorderTransporter { get; set; } // RecorderTransporter (length: 40)
        public string RecorderTruckNo { get; set; } // RecorderTruckNo (length: 40)
        public string RecorderPhoneNo { get; set; } // RecorderPhoneNo (length: 50)
        public string RecorderTemperature { get; set; } // RecorderTemperature (length: 30)
        public string RecorderDriver { get; set; } // RecorderDriver (length: 50)
        public string RecorderCode { get; set; } // RecorderCode (length: 50)
        public string RecorderProductBranch { get; set; } // RecorderProductBranch (length: 30)
        public string RecorderDescription { get; set; } // RecorderDescription (length: 1000)
        public string ContainerNo { get; set; } // ContainerNo (length: 50)
        public string Note { get; set; } // Note (length: 100)
        public int? SupplierId { get; set; } // SupplierID
        public int? StoreNumber { get; set; } // StoreNumber
        public int CustomerMainId { get; set; } // CustomerMainID
    }

    // ViewFonterraSales60days
    public class ViewFonterraSales60Days
    {
        public int CustomerSalesInvoiceId { get; set; } // CustomerSalesInvoiceID
        public DateTime CustomerSalesInvoiceDate { get; set; } // CustomerSalesInvoiceDate
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 250)
        public int? CustomerClientMainId { get; set; } // CustomerClientMainID
        public int? CustomerClientCodeFbv { get; set; } // CustomerClientCodeFBV
        public string ProductCode { get; set; } // ProductCode (length: 30)
        public string ProductName { get; set; } // ProductName (length: 250)
        public float? OrderQuantity { get; set; } // OrderQuantity
        public int? OrderUnitQuanity { get; set; } // OrderUnitQuanity
        public int? DispatchedQuantity { get; set; } // DispatchedQuantity
        public float InvoiceQuantity { get; set; } // InvoiceQuantity
        public DateTime? ConfirmedTime { get; set; } // ConfirmedTime
        public bool? CustomerSalesInvoiceConfirmed { get; set; } // CustomerSalesInvoiceConfirmed
        public string CustomerClientMain { get; set; } // CustomerClientMain (length: 50)
        public int CustomerSalesInvoiceDetailId { get; set; } // CustomerSalesInvoiceDetailID
        public int CustomerClientId { get; set; } // CustomerClientID
        public string MainClientName { get; set; } // MainClientName (length: 250)
    }

    // ViewFonterraSalesContractDetails
    public class ViewFonterraSalesContractDetail
    {
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 250)
        public string CustomerClientMain { get; set; } // CustomerClientMain (length: 50)
        public int? CustomerClientCodeFbv { get; set; } // CustomerClientCodeFBV
        public string CustomerSalesContractNumber { get; set; } // CustomerSalesContractNumber (length: 20)
        public DateTime? SalesContractToDate { get; set; } // SalesContractToDate
        public int ProductId { get; set; } // ProductID
        public string SalesProductCode { get; set; } // SalesProductCode (length: 30)
        public string SalesProductCode2 { get; set; } // SalesProductCode2 (length: 30)
        public string SalesProductName { get; set; } // SalesProductName (length: 150)
        public float SalesPrice { get; set; } // SalesPrice
        public string SalesUnit { get; set; } // SalesUnit (length: 20)
        public int? SalesUnitPerPackage { get; set; } // SalesUnitPerPackage
        public DateTime? SalesContractDate { get; set; } // SalesContractDate
        public float? DiscountPercentage { get; set; } // DiscountPercentage
        public string SalesContractRemark { get; set; } // SalesContractRemark (length: 500)
        public bool? CustomerSalesContractConfirmed { get; set; } // CustomerSalesContractConfirmed
        public int? CustomerClientMainId { get; set; } // CustomerClientMainID
        public int CustomerClientId { get; set; } // CustomerClientID
        public int CustomerSalesContractDetailId { get; set; } // CustomerSalesContractDetailID
        public int CustomerSalesContractId { get; set; } // CustomerSalesContractID
    }

    // ViewFonterraStockOnHandOnHold
    public class ViewFonterraStockOnHandOnHold
    {
        public int CustomerId { get; set; } // CustomerID
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public byte? PalletStatus { get; set; } // PalletStatus
        public string PalletStatusDescription { get; set; } // PalletStatusDescription (length: 200)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string Remark { get; set; } // Remark (length: 800)
    }

    // ViewFreeLocations
    public class ViewFreeLocation
    {
        public string X { get; set; } // X (length: 10)
        public int? Pairs { get; set; } // Pairs
        public string RoomId { get; set; } // RoomID (length: 1)
        public short Aisle { get; set; } // Aisle
        public short Bay { get; set; } // Bay
        public short High { get; set; } // High
        public short Deep { get; set; } // Deep
        public bool Top { get; set; } // Top
        public bool Low { get; set; } // Low
        public int LocationId { get; set; } // LocationID
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public int? StoreId { get; set; } // StoreID
    }

    // ViewFreeLocationsFloor
    public class ViewFreeLocationsFloor
    {
        public Guid LocationId { get; set; } // LocationID
        public int? Qty { get; set; } // Qty
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public Guid RoomId { get; set; } // RoomID
        public short Aisle { get; set; } // Aisle
        public short Bay { get; set; } // Bay
        public short High { get; set; } // High
        public short Deep { get; set; } // Deep
        public short Used { get; set; } // Used
        public bool Top { get; set; } // Top
        public bool Low { get; set; } // Low
        public int? StoreId { get; set; } // StoreID
    }

    // ViewfrmFreeLocations
    public class ViewfrmFreeLocation
    {
        public string RoomId { get; set; } // RoomID (length: 1)
        public int? QtyLocation { get; set; } // QtyLocation
        public int QtyLow { get; set; } // QtyLow
        public int QtyHigh { get; set; } // QtyHigh
        public int? QtyOfFree { get; set; } // QtyOfFree
        public int QtyFreeAfterDp { get; set; } // QtyFreeAfterDP
    }

    // ViewGate_WorkerLaborSafetyTraining
    public class ViewGateWorkerLaborSafetyTraining
    {
        public DateTime? LaborSafetyTrainDate { get; set; } // LaborSafetyTrainDate
        public int WorkerId { get; set; } // WorkerID
    }

    // ViewHaiNamProductList
    public class ViewHaiNamProductList
    {
        public string ProductNumberShort { get; set; } // ProductNumberShort (length: 20)
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public short PackagesPerPallet { get; set; } // PackagesPerPallet
        public decimal? GrossWeightPerPackage { get; set; } // GrossWeightPerPackage
        public int ProductId { get; set; } // ProductID
        public int CustomerId { get; set; } // CustomerID
    }

    // ViewHandlingOvertimeCheck
    public class ViewHandlingOvertimeCheck
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? OrderDate { get; set; } // OrderDate
        public int CustomerId { get; set; } // CustomerID
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public short? HandlingOvertimeCategoryId { get; set; } // HandlingOvertimeCategoryID
        public int VehicleInOutId { get; set; } // VehicleInOutID
        public string VehicleNumber { get; set; } // VehicleNumber (length: 20)
        public string ProductQty { get; set; } // ProductQty (length: 10)
        public DateTime? TimeIn { get; set; } // TimeIn
        public DateTime? TimeOut { get; set; } // TimeOut
        public byte? Gate { get; set; } // Gate
        public string UserOut { get; set; } // UserOut (length: 50)
        public bool? UserCheckOut { get; set; } // UserCheckOut
        public string VehicleType { get; set; } // VehicleType (length: 5)
        public string R { get; set; } // R (length: 50)
        public string DockNumber { get; set; } // DockNumber (length: 5)
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 50)
        public string ContractDetailRemark { get; set; } // ContractDetailRemark (length: 50)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
    }

    // ViewHomeLocationByRoom
    public class ViewHomeLocationByRoom
    {
        public int LocationId { get; set; } // LocationID
        public string RoomId { get; set; } // RoomID (length: 2)
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public short Bay { get; set; } // Bay
        public short Deep { get; set; } // Deep
    }

    // ViewInOutViewByCartons
    public class ViewInOutViewByCarton
    {
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public DateTime? OrderDate { get; set; } // OrderDate
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string CustomerRef { get; set; } // CustomerRef (length: 250)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string Type { get; set; } // Type (length: 1)
        public string OrderType { get; set; } // OrderType (length: 10)
        public string OrderTypeDescription { get; set; } // OrderTypeDescription (length: 100)
        public float? CartonWeight { get; set; } // CartonWeight
        public string Unit1 { get; set; } // Unit1 (length: 3)
        public int? CartonUnits { get; set; } // CartonUnits
        public string Unit2 { get; set; } // Unit2 (length: 7)
        public string BarcodeString { get; set; } // BarcodeString (length: 100)
        public long? PalletNumber { get; set; } // PalletNumber
        public byte? PalletStatus { get; set; } // PalletStatus
        public string PalletStatusDescription { get; set; } // PalletStatusDescription (length: 200)
        public bool? IsHold { get; set; } // IsHold
        public string Label { get; set; } // Label (length: 15)
        public string OrderRemark { get; set; } // OrderRemark (length: 250)
    }

    // ViewInternalAudit
    public class ViewInternalAudit
    {
        public double? TotalLost { get; set; } // TotalLost
        public string ProblemCategoryDescription { get; set; } // ProblemCategoryDescription (length: 100)
        public int InternalAuditId { get; set; } // InternalAuditID
        public string DepartmentNameShort { get; set; } // DepartmentNameShort (length: 10)
        public string ProblemDescription { get; set; } // ProblemDescription (length: 2000)
        public DateTime? InternalAuditDate { get; set; } // InternalAuditDate
        public bool? InternalAuditConfirmed { get; set; } // InternalAuditConfirmed
        public bool? Complained { get; set; } // Complained
        public byte? Severity { get; set; } // Severity
        public byte? Likehood { get; set; } // Likehood
        public string Remark { get; set; } // Remark (length: 100)
        public string Location { get; set; } // Location (length: 100)
    }

    // ViewLabelPalletList
    public class ViewLabelPalletList
    {
        public string PalletIdBarcode { get; set; } // PalletID_Barcode (length: 8000)
        public string ProductNumber { get; set; } // ProductNumber (length: 26)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string RPallet { get; set; } // R_Pallet (length: 800)
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public short OriginalQuantityPcs { get; set; } // OriginalQuantityPcs
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string Label { get; set; } // Label (length: 15)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public string RRo { get; set; } // R_RO (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 132)
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public Guid LocationId { get; set; } // LocationID
        public long? PalletId { get; set; } // PalletID
        public int? SumQuantity { get; set; } // SumQuantity
        public DateTime? UseByDate { get; set; } // UseByDate
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string Label1 { get; set; } // Label1 (length: 20)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public short Inners { get; set; } // Inners
        public string OldLabel { get; set; } // OldLabel (length: 1)
        public decimal? GrossWeight { get; set; } // GrossWeight
        public int? UnitQuantity { get; set; } // UnitQuantity
        public string LocationType { get; set; } // LocationType (length: 3)
        public string RemarkCombine { get; set; } // RemarkCombine (length: 1102)
        public string CustomerRefCombine { get; set; } // CustomerRefCombine (length: 1102)
        public string LocationHq { get; set; } // LocationHQ (length: 100)
    }

    // ViewLocationBarcode
    public class ViewLocationBarcode
    {
        public int LocationId { get; set; } // LocationID
        public string LocationBarcode { get; set; } // LocationBarcode (length: 11)
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public string LocationNumberShort { get; set; } // LocationNumberShort (length: 6)
        public int? StoreId { get; set; } // StoreID
    }

    // view_location_mapping_status
    public class ViewLocationMappingStatus
    {
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public string Wms { get; set; } // wms (length: 51)
        public string Type { get; set; } // Type (length: 11)
        public string LocationHq { get; set; } // LocationHQ (length: 60)
    }

    // ViewLotProductNumberOnHold
    public class ViewLotProductNumberOnHold
    {
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int StoreId { get; set; } // StoreID
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public Guid ProductId { get; set; } // ProductID
        public string ProductName { get; set; } // ProductName (length: 100)
        public int? TotalQty { get; set; } // TotalQty
    }

    // ViewMappingLocationWMS_OTM
    public class ViewMappingLocationWmsOtm
    {
        public string LocationOtm { get; set; } // LOCATION_OTM (length: 100)
        public string LocationWms { get; set; } // LOCATION_WMS (length: 150)
        public string ItemKey { get; set; } // item_key (length: 64)
    }

    // ViewMappingLocatorWithMasan
    public class ViewMappingLocatorWithMasan
    {
        public string WareHouse { get; set; } // WareHouse (length: 100)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 100)
        public string Locator { get; set; } // Locator (length: 150)
    }

    // ViewMappingSizeTruckAndCartonByCustomer
    public class ViewMappingSizeTruckAndCartonByCustomer
    {
        public Guid CustomerId { get; set; } // CustomerID
        public string TruckNumber { get; set; } // TruckNumber (length: 20)
        public string Cbm { get; set; } // CBM (length: 50)
        public string Frame { get; set; } // Frame (length: 50)
        public string CbmBasket { get; set; } // CBM_Basket (length: 255)
        public int? MaxQtyInTruck { get; set; } // MaxQtyInTruck
        public int? MaxQtyLenght { get; set; } // MaxQtyLenght
        public decimal? Lenght { get; set; } // Lenght
        public int? MaxQtyWidth { get; set; } // MaxQtyWidth
        public decimal? Width { get; set; } // Width
        public int? MaxQtyHight { get; set; } // MaxQtyHight
        public decimal? Hight { get; set; } // Hight
    }

    // ViewMappingSubWithMasan
    public class ViewMappingSubWithMasan
    {
        public string WareHouse { get; set; } // WareHouse (length: 100)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 100)
        public string SubVentory { get; set; } // SubVentory (length: 150)
    }

    // ViewMETPalletConsolidationOtherCustomers
    public class ViewMetPalletConsolidationOtherCustomer
    {
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string Label { get; set; } // Label (length: 15)
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public int CustomerMainId { get; set; } // CustomerMainID
        public int? TotalQtyAtLocation { get; set; } // TotalQtyAtLocation
        public int CustomerId { get; set; } // CustomerID
        public int PalletId { get; set; } // PalletID
    }

    // ViewMETROCalculateWeightAnnimalControl
    public class ViewMetroCalculateWeightAnnimalControl
    {
        public int CustomerId { get; set; } // CustomerID
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public int TripId { get; set; } // TripID
        public string TripRemarks { get; set; } // TripRemarks (length: 200)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 250)
        public string ProductGroupDescription { get; set; } // ProductGroupDescription (length: 250)
        public string MainGroup { get; set; } // MainGroup (length: 250)
        public string SubGroup { get; set; } // SubGroup (length: 30)
        public string Original { get; set; } // Original (length: 50)
        public short TotalCtns { get; set; } // TotalCtns
        public float? TotalWeight { get; set; } // TotalWeight
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string GroupOriginal { get; set; } // GroupOriginal (length: 303)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string Supplier { get; set; } // Supplier (length: 50)
        public string Manufactured { get; set; } // Manufactured (length: 50)
        public string DocumentFileScan { get; set; } // DocumentFileScan (length: 200)
        public string CustomNo { get; set; } // CustomNo (length: 200)
        public string CustomerRef { get; set; } // CustomerRef (length: 15)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string Label { get; set; } // Label (length: 15)
    }

    // ViewMETRODispatchingCartons
    public class ViewMetroDispatchingCarton
    {
        public int CustomerId { get; set; } // CustomerID
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int CustomerMainId { get; set; } // CustomerMainID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int PalletId { get; set; } // PalletID
        public int? DispatchingCartonId { get; set; } // DispatchingCartonID
        public float? CartonWeight { get; set; } // CartonWeight
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight1 { get; set; } // PalletWeight
        public short? QuantityOfPackages { get; set; } // QuantityOfPackages
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 15)
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? PalletUnitQty { get; set; } // Pallet_UnitQty
        public float? PalletWeight { get; set; } // Pallet_Weight
        public string DispatchingRemark { get; set; } // DispatchingRemark (length: 50)
        public short TotalPackages { get; set; } // TotalPackages
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public decimal? DispatchingTotalWeight { get; set; } // Dispatching_TotalWeight
        public int? DispatchingTotalUnits { get; set; } // Dispatching_TotalUnits
    }

    // ViewMETROLabelDispatchingOrders
    public class ViewMetroLabelDispatchingOrder
    {
        public int CustomerId { get; set; } // CustomerID
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 10)
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public short TotalCtns { get; set; } // TotalCtns
        public float? TotalWeight { get; set; } // TotalWeight
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public int CustomerMainId { get; set; } // CustomerMainID
        public string Label { get; set; } // Label (length: 12)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string CustomerClientCode { get; set; } // CustomerClientCode (length: 50)
        public int PalletId { get; set; } // PalletID
    }

    // ViewMETROOrderConfirmTime
    public class ViewMetroOrderConfirmTime
    {
        public int CustomerId { get; set; } // CustomerID
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public short TotalPackages { get; set; } // TotalPackages
        public short? Plts { get; set; } // Plts
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public DateTime? Orderdate { get; set; } // orderdate
    }

    // ViewMETROPalletConsolidation
    public class ViewMetroPalletConsolidation
    {
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string Label { get; set; } // Label (length: 15)
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public int LocationId { get; set; } // LocationID
        public int CustomerId { get; set; } // CustomerID
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public int? TotalQty { get; set; } // TotalQty
        public int PalletId { get; set; } // PalletID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
    }

    // ViewMETROPalletConsolidationOtherCustomers
    public class ViewMetroPalletConsolidationOtherCustomer
    {
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string Label { get; set; } // Label (length: 15)
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public int CustomerMainId { get; set; } // CustomerMainID
        public int? TotalQtyAtLocation { get; set; } // TotalQtyAtLocation
        public int CustomerId { get; set; } // CustomerID
    }

    // ViewMETROPalletOnHandDaily
    public class ViewMetroPalletOnHandDaily
    {
        public int CustomerMainId { get; set; } // CustomerMainID
        public int DateId { get; set; } // DateID
        public DateTime ReportDate { get; set; } // ReportDate
        public int PalletId { get; set; } // PalletID
        public string Label { get; set; } // Label (length: 15)
        public int LocationId { get; set; } // LocationID
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public int CustomerId { get; set; } // CustomerID
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public int? CountCustomerId { get; set; } // CountCustomerID
        public int? FirstPalletId { get; set; } // FirstPalletID
    }

    // ViewMETROPalletOnHandDailyBilling
    public class ViewMetroPalletOnHandDailyBilling
    {
        public int CustomerMainId { get; set; } // CustomerMainID
        public int DateId { get; set; } // DateID
        public DateTime ReportDate { get; set; } // ReportDate
        public int PalletId { get; set; } // PalletID
        public string Label { get; set; } // Label (length: 15)
        public int LocationId { get; set; } // LocationID
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public short QtyCtns { get; set; } // QtyCtns
        public long? Numb { get; set; } // Numb
    }

    // ViewMetroStockByLocationOnHand
    public class ViewMetroStockByLocationOnHand
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int CustomerMainId { get; set; } // CustomerMainID
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public byte? PalletStatus { get; set; } // PalletStatus
        public string Label { get; set; } // Label (length: 15)
        public DateTime UpdateTime { get; set; } // UpdateTime
        public int PalletId { get; set; } // PalletID
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public short? Inners { get; set; } // Inners
        public string Remark { get; set; } // Remark (length: 50)
        public string Packages { get; set; } // Packages (length: 50)
    }

    // ViewMETROStockOnHandForQA
    public class ViewMetroStockOnHandForQa
    {
        public string ProductGroupDescription { get; set; } // ProductGroupDescription (length: 250)
        public string MainGroup { get; set; } // MainGroup (length: 250)
        public string SubGroup { get; set; } // SubGroup (length: 30)
        public string Original { get; set; } // Original (length: 50)
        public string GroupOriginal { get; set; } // GroupOriginal (length: 303)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string Supplier { get; set; } // Supplier (length: 50)
        public string Manufactured { get; set; } // Manufactured (length: 50)
        public string DocumentFileScan { get; set; } // DocumentFileScan (length: 200)
        public string CustomNo { get; set; } // CustomNo (length: 200)
        public int? QtyCtns { get; set; } // QtyCtns
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public byte RoStatus { get; set; } // ROStatus
        public int? TotalUnits { get; set; } // TotalUnits
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public int CustomerMainId { get; set; } // CustomerMainID
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public short? Inners { get; set; } // Inners
        public decimal? TotalWeight { get; set; } // TotalWeight
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int? QtyRemainCtns { get; set; } // QtyRemainCtns
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
    }

    // ViewOrderIsLock
    public class ViewOrderIsLock
    {
        public string OrderType { get; set; } // OrderType (length: 2)
        public Guid OrderId { get; set; } // OrderID
        public string OrderNumber { get; set; } // OrderNumber (length: 20)
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public DateTime? OrderDate { get; set; } // OrderDate
        public string Remark { get; set; } // Remark (length: 250)
        public bool Status { get; set; } // Status
        public int StoreId { get; set; } // StoreID
    }

    // ViewOutsourcedJob60days
    public class ViewOutsourcedJob60Days
    {
        public DateTime MhlWorkDate { get; set; } // MHLWorkDate
        public int MhlWorkId { get; set; } // MHLWorkID
        public int? PayRollMonthId { get; set; } // PayRollMonthID
        public string CreatedBy { get; set; } // CreatedBy (length: 250)
        public int Received { get; set; } // Received
        public int Damaged { get; set; } // Damaged
        public bool MhlWorkConfirm { get; set; } // MHLWorkConfirm
        public string Remark { get; set; } // Remark (length: 300)
        public int MhlWorkDefinitionId { get; set; } // MHLWorkDefinitionID
        public string JobName { get; set; } // JobName (length: 200)
        public string Description { get; set; } // Description (length: 200)
        public float? UnitPrice { get; set; } // UnitPrice
        public string UpdatedBy { get; set; } // UpdatedBy (length: 40)
        public string Unit { get; set; } // Unit (length: 10)
        public string MhlWorkDefinitionNumber { get; set; } // MHLWorkDefinitionNumber (length: 10)
        public int? OtherServiceDetailId { get; set; } // OtherServiceDetailID
        public DateTime? FromTime { get; set; } // FromTime
        public DateTime? ToTime { get; set; } // ToTime
        public bool Accepted { get; set; } // Accepted
        public string AcceptedBy { get; set; } // AcceptedBy (length: 20)
        public bool Rejected { get; set; } // Rejected
        public string RejectedBy { get; set; } // RejectedBy (length: 20)
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 150)
        public string WorkNumber { get; set; } // WorkNumber (length: 12)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public int EmployeeId { get; set; } // EmployeeID
        public float Quantity { get; set; } // Quantity
        public string DetailRemark { get; set; } // DetailRemark (length: 200)
        public int? CustomerMainId { get; set; } // CustomerMainID
    }

    // ViewPackingStatus
    public class ViewPackingStatu
    {
        public DateTime OrderDate { get; set; } // OrderDate
        public int? StoreNumber { get; set; } // StoreNumber
        public string RouteCode { get; set; } // RouteCode (length: 10)
        public int? Quantity { get; set; } // Quantity
        public decimal? Weights { get; set; } // Weights
        public int? NetQuantity { get; set; } // NetQuantity
        public decimal? NetWeight { get; set; } // NetWeight
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string So { get; set; } // SO (length: 32)
        public string CustomerRef { get; set; } // CustomerRef (length: 32)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 522)
        public Guid CustomerClientId { get; set; } // CustomerClientID
        public Guid XdocPickingListId { get; set; } // XdocPickingListID
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public int StoreId { get; set; } // StoreID
        public string TripNumber { get; set; } // TripNumber (length: 20)
        public string VehicleNo { get; set; } // VehicleNo (length: 30)
        public string DriverName { get; set; } // DriverName (length: 255)
        public bool? IsDispatch { get; set; } // IsDispatch
        public string WareHouseCustomerInterface { get; set; } // WareHouseCustomerInterface (length: 255)
        public string StatusProcess { get; set; } // StatusProcess (length: 255)
        public int? PalletNumber { get; set; } // PalletNumber
    }

    // ViewPalletAllocationFree
    public class ViewPalletAllocationFree
    {
        public int LocationId { get; set; } // LocationID
        public string X { get; set; } // X (length: 4)
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public int? Qty { get; set; } // Qty
        public string RoomId { get; set; } // RoomID (length: 1)
        public bool Low { get; set; } // Low
    }

    // ViewPallet_DoulicateTest
    public class ViewPalletDoulicateTest
    {
        public int PalletId { get; set; } // PalletID
    }

    // ViewPalletMovementHistory
    public class ViewPalletMovementHistory
    {
        public long? PalletNumber { get; set; } // PalletNumber
        public Guid StockMovementId { get; set; } // StockMovementID
        public Guid SourceLocation { get; set; } // SourceLocation
        public Guid? DestinationLocation { get; set; } // DestinationLocation
        public DateTime? DateMovement { get; set; } // DateMovement
        public int Automatic { get; set; } // Automatic
        public string ReasonMovement { get; set; } // ReasonMovement (length: 250)
        public string AuthorisedBy { get; set; } // AuthorisedBy (length: 50)
        public string Name { get; set; } // Name (length: 50)
        public string FromLocation { get; set; } // FromLocation (length: 15)
        public string ToLocation { get; set; } // ToLocation (length: 15)
        public Guid? PalletId { get; set; } // PalletID
        public int? Quantity { get; set; } // quantity
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string Remark { get; set; } // Remark (length: 800)
        public Guid? ProductId { get; set; } // ProductID
        public Guid? CustomerId { get; set; } // CustomerID
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public int? StoreId { get; set; } // StoreID
    }

    // ViewPalletRemainWeightInners
    public class ViewPalletRemainWeightInner
    {
        public int PalletId { get; set; } // PalletID
        public int? RemainUnits { get; set; } // RemainUnits
        public double? RemainWeight { get; set; } // RemainWeight
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
    }

    // ViewPalletsOnHold
    public class ViewPalletsOnHold
    {
        public int StoreId { get; set; } // StoreID
        public Guid PalletId { get; set; } // PalletID
        public long? PalletNumber { get; set; } // PalletNumber
        public short Qty { get; set; } // Qty
        public Guid LocationId { get; set; } // LocationID
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid ProductId { get; set; } // ProductID
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public bool OnHold { get; set; } // OnHold
        public byte PalletStatus { get; set; } // PalletStatus
        public string PalletStatusDescription { get; set; } // PalletStatusDescription (length: 200)
        public string PalletStatusDescriptionVietnam { get; set; } // PalletStatusDescriptionVietnam (length: 250)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string Reason { get; set; } // Reason (length: 250)
        public bool PalletHoldingOnHold { get; set; } // PalletHoldingOnHold
        public string Status { get; set; } // status (length: 7)
        public string PalletHoldingBy { get; set; } // PalletHoldingBy (length: 50)
    }

    // ViewPalletUnHold
    public class ViewPalletUnHold
    {
        public int StoreId { get; set; } // StoreID
        public Guid PalletId { get; set; } // PalletID
        public long? PalletNumber { get; set; } // PalletNumber
        public short Qty { get; set; } // Qty
        public Guid LocationId { get; set; } // LocationID
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid ProductId { get; set; } // ProductID
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public bool OnHold { get; set; } // OnHold
        public byte PalletStatus { get; set; } // PalletStatus
        public string PalletStatusDescription { get; set; } // PalletStatusDescription (length: 200)
        public string PalletStatusDescriptionVietnam { get; set; } // PalletStatusDescriptionVietnam (length: 250)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public Guid CustomerId { get; set; } // CustomerID
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string Reason { get; set; } // Reason (length: 250)
        public bool? PalletHoldingOnHold { get; set; } // PalletHoldingOnHold
        public string Status { get; set; } // status (length: 7)
        public string PalletHoldingBy { get; set; } // PalletHoldingBy (length: 50)
    }

    // ViewPayrollMonthlyDetails
    public class ViewPayrollMonthlyDetail
    {
        public string PayRollMonth { get; set; } // PayRollMonth (length: 25)
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string Position { get; set; } // Position (length: 50)
        public string VietnamPosition { get; set; } // VietnamPosition (length: 50)
        public string LunchPlace { get; set; } // LunchPlace (length: 2)
        public float? Ots { get; set; } // OTS
        public float? Otn { get; set; } // OTN
        public float? Oth { get; set; } // OTH
        public float? Sick { get; set; } // Sick
        public float? Leave { get; set; } // Leave
        public float? Haft { get; set; } // Haft
        public float? Off { get; set; } // Off
        public float? WorkingDays { get; set; } // WorkingDays
        public float? WorkingDayNightShift { get; set; } // WorkingDayNightShift
        public float Performance { get; set; } // Performance
        public float? PerformancePercent { get; set; } // PerformancePercent
        public float PerformanceAverage { get; set; } // PerformanceAverage
        public byte? DepartmentId { get; set; } // DepartmentID
        public byte? ShiftId { get; set; } // ShiftID
        public string PayRollMonthlyRemark { get; set; } // PayRollMonthlyRemark (length: 50)
        public int EmployeeId { get; set; } // EmployeeID
        public string DepartmentName { get; set; } // DepartmentName (length: 50)
        public string DepartmentNameShort { get; set; } // DepartmentNameShort (length: 10)
    }

    // ViewPayrollMonthlyReview
    public class ViewPayrollMonthlyReview
    {
        public int? PayRollMonthId { get; set; } // PayRollMonthID
        public int EmployeeId { get; set; } // EmployeeID
        public string VietnamName { get; set; } // VietnamName (length: 50)
        public bool? ContractPermanent { get; set; } // ContractPermanent
        public float? WorkingDays { get; set; } // WorkingDays
        public float? Ots { get; set; } // OTS
        public float? Otn { get; set; } // OTN
        public float? Oth { get; set; } // OTH
        public float? Sick { get; set; } // Sick
        public float? Leave { get; set; } // Leave
        public float? Haft { get; set; } // Haft
        public float? Off { get; set; } // Off
        public string User { get; set; } // User (length: 50)
        public string Abc { get; set; } // ABC (length: 2)
        public float Performance { get; set; } // Performance
        public float PerformanceAverage { get; set; } // PerformanceAverage
        public float? PerformancePercent { get; set; } // PerformancePercent
        public bool PerformanceStatus { get; set; } // PerformanceStatus
        public int? PositionId { get; set; } // PositionID
        public string Position { get; set; } // Position (length: 50)
        public byte? DepartmentId { get; set; } // DepartmentID
        public byte? ShiftId { get; set; } // ShiftID
        public string PayRollMonthlyRemark { get; set; } // PayRollMonthlyRemark (length: 50)
        public bool? Active { get; set; } // Active
        public bool? PersonnelCheck { get; set; } // PersonnelCheck
        public bool? SafetyCheck { get; set; } // SafetyCheck
        public bool? ManagerCheck { get; set; } // ManagerCheck
        public string DepartmentNameShort { get; set; } // DepartmentNameShort (length: 10)
        public int PayRollMonthlyId { get; set; } // PayRollMonthlyID
        public string AbCtemp { get; set; } // ABCtemp (length: 5)
        public string DepartmentName { get; set; } // DepartmentName (length: 50)
        public string PositionVietnam { get; set; } // PositionVietnam (length: 50)
        public string SupervisorUser { get; set; } // SupervisorUser (length: 40)
        public string SupervisorRemark { get; set; } // SupervisorRemark (length: 250)
        public string PersonnelRemark { get; set; } // PersonnelRemark (length: 250)
        public string SafetyRemark { get; set; } // SafetyRemark (length: 250)
        public string ManagerRemark { get; set; } // ManagerRemark (length: 250)
        public float? Tt { get; set; } // TT
        public string EvaluationSafety { get; set; } // EvaluationSafety (length: 2)
        public string EvaluationPerformance { get; set; } // EvaluationPerformance (length: 2)
        public string EvaluationTime { get; set; } // EvaluationTime (length: 2)
        public string EvaluationAttitude { get; set; } // EvaluationAttitude (length: 2)
        public float? WorkingDayNightShift { get; set; } // WorkingDayNightShift
        public DateTime? FromDate { get; set; } // FromDate
        public DateTime? ToDate { get; set; } // ToDate
        public string PayRollMonth { get; set; } // PayRollMonth (length: 25)
    }

    // ViewPickPackShip_Month
    public class ViewPickPackShipMonth
    {
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 32)
        public int? Qty { get; set; } // Qty
        public decimal? Weights { get; set; } // Weights
        public int? CustomerLocalId { get; set; } // CustomerLocalID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 500)
        public string StatusProcess { get; set; } // StatusProcess (length: 255)
        public int TransporterId { get; set; } // TransporterID
        public Guid CustomerId { get; set; } // CustomerID
        public Guid CustomerClientId { get; set; } // CustomerClientID
        public DateTime TripDate { get; set; } // TripDate
        public string TripNumber { get; set; } // TripNumber (length: 20)
        public string AtmOrderReleaseId { get; set; } // ATM_OrderReleaseID (length: 30)
    }

    // ViewProductionQtyMasan
    public class ViewProductionQtyMasan
    {
        public DateTime? DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string Chanel { get; set; } // Chanel (length: 50)
        public string ChanelName { get; set; } // ChanelName (length: 80)
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 500)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public decimal? NetWeight { get; set; } // NetWeight
        public int? Quantity { get; set; } // Quantity
        public string Type { get; set; } // Type (length: 13)
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
    }

    // ViewProductMain
    public class ViewProductMain
    {
        public Guid ProductId { get; set; } // ProductID
        public string ProductNumberMain { get; set; } // ProductNumberMain (length: 26)
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid CustomerId { get; set; } // CustomerID
        public short? Inners { get; set; } // Inners
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
    }

    // ViewProductMainGroup
    public class ViewProductMainGroup
    {
        public string ProductNumberMain { get; set; } // ProductNumberMain (length: 26)
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid CustomerId { get; set; } // CustomerID
        public short? Inners { get; set; } // Inners
        public decimal? WeightPerPackage { get; set; } // WeightPerPackage
    }

    // ViewProductNameMain_MSN
    public class ViewProductNameMainMsn
    {
        public string ProductNameMain { get; set; } // ProductNameMain (length: 100)
        public string ProductNumberMain { get; set; } // ProductNumberMain (length: 26)
        public string ProductNumberSub { get; set; } // ProductNumberSub (length: 40)
        public string ProductNameSub { get; set; } // ProductNameSub (length: 100)
    }

    // ViewPropertyMovements
    public class ViewPropertyMovement
    {
        public string PropertyName { get; set; } // PropertyName (length: 100)
        public string AuthorizedBy { get; set; } // AuthorizedBy (length: 50)
        public byte Gate { get; set; } // Gate
        public string Remark { get; set; } // Remark (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 200)
        public double Quantity { get; set; } // Quantity
        public DateTime? PropertyMovementDate { get; set; } // PropertyMovementDate
    }

    // ViewQAChecking
    public class ViewQaChecking
    {
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string OrderNumber { get; set; } // OrderNumber (length: 10)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 14)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int? Qty { get; set; } // Qty
        public decimal? TotalWeight { get; set; } // TotalWeight
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string Original { get; set; } // Original (length: 50)
        public string Supplier { get; set; } // Supplier (length: 50)
        public string Manufactured { get; set; } // Manufactured (length: 50)
        public string DocumentFileScan { get; set; } // DocumentFileScan (length: 200)
        public string CustomNo { get; set; } // CustomNo (length: 200)
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ContainerNo { get; set; } // ContainerNo (length: 50)
        public string Note { get; set; } // Note (length: 100)
        public int? SupplierId { get; set; } // SupplierID
        public int? StoreNumber { get; set; } // StoreNumber
    }

    // ViewQHSELatestComment
    public class ViewQhseLatestComment
    {
        public int Qhseid { get; set; } // QHSEID
        public string LatestCommentBy { get; set; } // LatestCommentBy (length: 83)
        public string LatestComment { get; set; } // LatestComment (length: 250)
        public int? CommentQty { get; set; } // CommentQty
    }

    // ViewqryComboCustomerID
    public class ViewqryComboCustomerId
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 50)
        public string CustomerType { get; set; } // CustomerType (length: 50)
        public bool CustomerDiscontinued { get; set; } // CustomerDiscontinued
    }

    // ViewRandomWeightPallets
    public class ViewRandomWeightPallet
    {
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public int PalletId { get; set; } // PalletID
    }

    // ViewReceivingMasan
    public class ViewReceivingMasan
    {
        public Guid ProductId { get; set; } // ProductID
        public Guid CustomerId { get; set; } // CustomerID
        public int? Qty { get; set; } // Qty
        public decimal? Weight { get; set; } // Weight
    }

    // ViewRoutingDayBefor
    public class ViewRoutingDayBefor
    {
        public DateTime? DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public string RouteCode { get; set; } // RouteCode (length: 255)
        public int PalletNumber { get; set; } // PalletNumber
        public string ShipTo { get; set; } // ShipTo (length: 255)
    }

    // ViewSafetyStockReason
    public class ViewSafetyStockReason
    {
        public int? ProductId6 { get; set; } // ProductID6
        public string Reason { get; set; } // Reason (length: 150)
        public DateTime? ReasonTime { get; set; } // ReasonTime
        public string Owner { get; set; } // Owner (length: 30)
        public int? ProductId6Stock { get; set; } // ProductID6_Stock
        public int? ProductIdPackStock { get; set; } // ProductIDPack_Stock
        public int? ProductId2Stock { get; set; } // ProductID2_Stock
        public int SafetyStockReasonId { get; set; } // SafetyStockReasonID
        public bool? IsCurrent { get; set; } // IsCurrent
    }

    // ViewScanCheckStockByLot
    public class ViewScanCheckStockByLot
    {
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? CurrentQuantity { get; set; } // CurrentQuantity
        public int? StockAfterScan { get; set; } // StockAfterScan
        public decimal? WeightAfterScan { get; set; } // WeightAfterScan
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public Guid ProductId { get; set; } // ProductID
        public string ProductName { get; set; } // ProductName (length: 100)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public int StoreId { get; set; } // StoreID
        public Guid CustomerId { get; set; } // CustomerID
    }

    // ViewStockDispatchByLot
    public class ViewStockDispatchByLot
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public byte? SendStatus { get; set; } // SendStatus
        public string SoNumber { get; set; } // SONumber (length: 50)
        public int? StoreNumber { get; set; } // StoreNumber
        public string ShipToLocation { get; set; } // SHIP_TO_LOCATION (length: 100)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public string ItemNumber { get; set; } // ItemNumber (length: 26)
        public string Uom1 { get; set; } // Uom1 (length: 20)
        public decimal? ShipQty1 { get; set; } // ShipQty1
        public string Uom2 { get; set; } // Uom2 (length: 3)
        public int? ShipQty2 { get; set; } // ShipQty2
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string VehicleNumber { get; set; } // VehicleNumber (length: 20)
        public string StartWorkingTime { get; set; } // StartWorkingTime (length: 30)
        public string EndWorkingTime { get; set; } // EndWorkingTime (length: 30)
        public string DriverName { get; set; } // DriverName (length: 200)
        public string DriverMobile { get; set; } // DriverMobile (length: 50)
        public string Transporter { get; set; } // Transporter (length: 100)
        public string TripDate { get; set; } // TripDate (length: 30)
        public string TripConfirmedTime { get; set; } // TripConfirmedTime (length: 30)
        public string TripNumber { get; set; } // TripNumber (length: 20)
        public int? Status { get; set; } // Status
        public long DetailId { get; set; } // DetailID
        public string Sub { get; set; } // Sub (length: 150)
        public string Location { get; set; } // Location (length: 150)
        public string Message { get; set; } // Message (length: 1)
        public string PalletStatus { get; set; } // PalletStatus (length: 4)
    }

    // ViewStockDispatchByLotSumary
    public class ViewStockDispatchByLotSumary
    {
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string ItemNumber { get; set; } // ItemNumber (length: 26)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public decimal? ShipQty1 { get; set; } // ShipQty1
        public int? ShipQty2 { get; set; } // ShipQty2
        public string PalletStatus { get; set; } // PalletStatus (length: 4)
        public string ProductName { get; set; } // ProductName (length: 100)
    }

    // ViewStockMovement
    public class ViewStockMovement
    {
        public string PalletIdBarcode { get; set; } // PalletID_Barcode (length: 8000)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string OldLabel { get; set; } // OldLabel (length: 12)
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public int? Total { get; set; } // Total
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public string RPallet { get; set; } // R_Pallet (length: 800)
        public string RRo { get; set; } // R_RO (length: 50)
        public Guid PalletId { get; set; } // PalletID
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public decimal? GrossWeight { get; set; } // GrossWeight
        public string Label1 { get; set; } // Label1 (length: 20)
        public string ReceivingOrderRemark { get; set; } // ReceivingOrderRemark (length: 250)
        public int? SumQuantity { get; set; } // SumQuantity
        public string LocationType { get; set; } // LocationType (length: 3)
        public Guid LocationId { get; set; } // LocationID
        public int? UnitQuantity { get; set; } // UnitQuantity
        public string RemarkCombine { get; set; } // RemarkCombine (length: 1102)
        public Guid? StockMovementMassId { get; set; } // StockMovementMassID
        public string StockMovementMassNumber { get; set; } // StockMovementMassNumber (length: 1)
        public long? PalletNumber { get; set; } // PalletNumber
        public string Label { get; set; } // Label (length: 12)
        public decimal? PalletWeights { get; set; } // PalletWeights
    }

    // ViewStockOnHandByLotAllCustomers
    public class ViewStockOnHandByLotAllCustomer
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public bool OnHold { get; set; } // OnHold
        public byte? PalletStatus { get; set; } // PalletStatus
        public int? OriginalQty { get; set; } // OriginalQty
        public int? CurrentQty { get; set; } // CurrentQty
    }

    // ViewStockOnHandByWarehouse
    public class ViewStockOnHandByWarehouse
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string WarehouseDescription { get; set; } // WarehouseDescription (length: 50)
        public int? Qty { get; set; } // Qty
        public double? TotalWeight { get; set; } // TotalWeight
    }

    // ViewStockOnHandDailyRoomB
    public class ViewStockOnHandDailyRoomB
    {
        public string RoomId { get; set; } // RoomID (length: 1)
        public DateTime? ReportDate { get; set; } // ReportDate
        public long? TotalPallets { get; set; } // TotalPallets
        public long? TotalWeight { get; set; } // TotalWeight
        public double? Occupancy { get; set; } // Occupancy
        public int? QuantityOfPallets { get; set; } // QuantityOfPallets
    }

    // ViewStockOnHandInPalletUnitWeight
    public class ViewStockOnHandInPalletUnitWeight
    {
        public int? RemainUnits { get; set; } // RemainUnits
        public double? RemainWeight { get; set; } // RemainWeight
        public int PalletId { get; set; } // PalletID
    }

    // ViewStockTakeByRequestData
    public class ViewStockTakeByRequestData
    {
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public string RoDetailRemark { get; set; } // RODetailRemark (length: 50)
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public string RoomId { get; set; } // RoomID (length: 1)
        public short Aisle { get; set; } // Aisle
        public short Bay { get; set; } // Bay
        public short High { get; set; } // High
        public short Deep { get; set; } // Deep
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public bool OnHold { get; set; } // OnHold
        public string PalletRemark { get; set; } // PalletRemark (length: 800)
        public int? StoreId { get; set; } // StoreID
    }

    // ViewStocProductByCustomer
    public class ViewStocProductByCustomer
    {
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid ProductId { get; set; } // ProductID
        public int? CustomerLocalId { get; set; } // CustomerLocalID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public Guid CustomerId { get; set; } // CustomerID
        public int? TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
    }

    // ViewSuppliers
    public class ViewSupplier
    {
        public int SupplierId { get; set; } // SupplierID
        public string SupplierName { get; set; } // SupplierName (length: 250)
        public string SupplierAddress { get; set; } // SupplierAddress (length: 250)
        public string SupplierContactName { get; set; } // SupplierContactName (length: 50)
        public string SupplierTitle { get; set; } // SupplierTitle (length: 50)
        public string SupplierPhone { get; set; } // SupplierPhone (length: 50)
        public string SupplierFax { get; set; } // SupplierFax (length: 50)
        public string SupplierEmail { get; set; } // SupplierEmail (length: 250)
        public string SupplierRemark { get; set; } // SupplierRemark (length: 300)
        public string SupplierFullName { get; set; } // SupplierFullName (length: 250)
        public bool? StrategicSupplier { get; set; } // StrategicSupplier
        public byte[] Ts { get; set; } // ts
        public string CreatedBy { get; set; } // CreatedBy (length: 20)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 150)
        public string SupplierTaxCode { get; set; } // SupplierTaxCode (length: 25)
        public string SupplierBankAccountNumber { get; set; } // SupplierBankAccountNumber (length: 25)
        public string SupplierBankAccountName { get; set; } // SupplierBankAccountName (length: 100)
        public int? SupplierOldId { get; set; } // SupplierOldID
        public string SupplierMobile { get; set; } // SupplierMobile (length: 50)
        public string SupplierWebsite { get; set; } // SupplierWebsite (length: 70)
    }

    // ViewTotalByLocation
    public class ViewTotalByLocation
    {
        public Guid LocationId { get; set; } // LocationID
        public int? Total { get; set; } // Total
        public Guid RoomId { get; set; } // RoomID
        public int? TotalCurrentQuantity { get; set; } // TotalCurrentQuantity
    }

    // ViewTotalDispatchingCartons
    public class ViewTotalDispatchingCarton
    {
        public int DispatchingCartonId { get; set; } // DispatchingCartonID
        public int DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public float? CartonWeight { get; set; } // CartonWeight
        public string DispatchingRemark { get; set; } // DispatchingRemark (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public int? PalletCartonId { get; set; } // PalletCartonID
        public int? CartonUnit { get; set; } // CartonUnit
    }

    // ViewTotalDispatchingLocations
    public class ViewTotalDispatchingLocation
    {
        public int DispatchingLocationId { get; set; } // DispatchingLocationID
        public int DispatchingProductId { get; set; } // DispatchingProductID
        public int LocationId { get; set; } // LocationID
        public string Label { get; set; } // Label (length: 12)
        public short? QuantityOfPackages { get; set; } // QuantityOfPackages
        public string DispatchingLocationRemark { get; set; } // DispatchingLocationRemark (length: 150)
        public bool DispatchingLocationStatus { get; set; } // DispatchingLocationStatus
    }

    // ViewTotalDispatchingOrders
    public class ViewTotalDispatchingOrder
    {
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 20)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public Guid CustomerId { get; set; } // CustomerID
        public DateTime DispatchingOrderDate { get; set; } // DispatchingOrderDate
        public bool Status { get; set; } // Status
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
        public decimal? Temperature { get; set; } // Temperature
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public string DispatchingOrderRemark { get; set; } // DispatchingOrderRemark (length: 250)
    }

    // ViewTotalDispatchingOrderDetails
    public class ViewTotalDispatchingOrderDetail
    {
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public Guid PalletId { get; set; } // PalletID
        public int? PackageQuantity { get; set; } // PackageQuantity
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public string DispatchingOrderDetailRemark { get; set; } // DispatchingOrderDetailRemark (length: 500)
        public bool? Checked { get; set; } // Checked
        public bool? CheckBreak { get; set; } // CheckBreak
        public string DispatchingScannedBy { get; set; } // DispatchingScannedBy (length: 50)
        public DateTime? DispatchingScannedTime { get; set; } // DispatchingScannedTime
        public string PickingScannedBy { get; set; } // PickingScannedBy (length: 50)
        public DateTime? PickingScannedTime { get; set; } // PickingScannedTime
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
    }

    // ViewTotalDispatchingOrderDetailsConfirmed
    public class ViewTotalDispatchingOrderDetailsConfirmed
    {
        public Guid DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public Guid PalletId { get; set; } // PalletID
        public int? PackageQuantity { get; set; } // PackageQuantity
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public string DispatchingOrderDetailRemark { get; set; } // DispatchingOrderDetailRemark (length: 500)
        public bool? Checked { get; set; } // Checked
        public bool? CheckBreak { get; set; } // CheckBreak
        public string DispatchingScannedBy { get; set; } // DispatchingScannedBy (length: 50)
        public DateTime? DispatchingScannedTime { get; set; } // DispatchingScannedTime
        public string PickingScannedBy { get; set; } // PickingScannedBy (length: 50)
        public DateTime? PickingScannedTime { get; set; } // PickingScannedTime
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
    }

    // ViewTotalDispatchingProducts
    public class ViewTotalDispatchingProduct
    {
        public Guid DispatchingProductId { get; set; } // DispatchingProductID
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public Guid ProductId { get; set; } // ProductID
        public short? PackagesPerPallet { get; set; } // PackagesPerPallet
        public int TotalPackages { get; set; } // TotalPackages
        public float? WeightPerPackage { get; set; } // WeightPerPackage
        public int? TransactionId { get; set; } // TransactionID
        public byte? Status { get; set; } // Status
        public string Remark { get; set; } // Remark (length: 50)
        public string UserId { get; set; } // UserID (length: 50)
        public short? Plts { get; set; } // Plts
        public string CustomerRef { get; set; } // CustomerRef (length: 100)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalUnits { get; set; } // TotalUnits
    }

    // ViewTotalDispatchingProductCartons
    public class ViewTotalDispatchingProductCarton
    {
        public long DispatchingProductCartonId { get; set; } // DispatchingProductCartonID
        public Guid? DispatchingOrderId { get; set; } // DispatchingOrderID
        public short? CartonNumber { get; set; } // CartonNumber
        public string CartonDescription { get; set; } // CartonDescription (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte[] Ts { get; set; } // ts
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public string PackageType { get; set; } // PackageType (length: 15)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime? UpdatedTime { get; set; } // UpdatedTime
        public bool? Completed { get; set; } // Completed
        public Guid? CustomerClientId { get; set; } // CustomerClientID
        public DateTime? DispatchingProductCartonDate { get; set; } // DispatchingProductCartonDate
        public bool? Confirmed { get; set; } // Confirmed
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? IsDispatch { get; set; } // IsDispatch
        public string BarcodeString { get; set; } // BarcodeString (length: 255)
        public string UserDispatch { get; set; } // UserDispatch (length: 255)
        public string DeviceNumberDispatch { get; set; } // DeviceNumberDispatch (length: 255)
        public DateTime? DispatchTime { get; set; } // DispatchTime
        public int? InnerQty { get; set; } // InnerQty
        public string Remark { get; set; } // Remark
    }

    // ViewTotalDispatchingProductPacks
    public class ViewTotalDispatchingProductPack
    {
        public long DispatchingProductPackId { get; set; } // DispatchingProductPackID
        public long? DispatchingProductCartonId { get; set; } // DispatchingProductCartonID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 8)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int? PackNumber { get; set; } // PackNumber
        public Guid? DispatchingOrderDetailId { get; set; } // DispatchingOrderDetailID
        public int StoreId { get; set; } // StoreID
        public string StoreDescription { get; set; } // StoreDescription (length: 250)
        public byte ProductCategoryId { get; set; } // ProductCategoryID
        public string ProductCategoryDescription { get; set; } // ProductCategoryDescription (length: 50)
    }

    // ViewTotalPallets
    public class ViewTotalPallet
    {
        public Guid PalletId { get; set; } // PalletID
        public long? PalletNumber { get; set; } // PalletNumber
        public string Label { get; set; } // Label (length: 15)
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public short AfterDpQuantity { get; set; } // AfterDPQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public bool OnHold { get; set; } // OnHold
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid LocationId { get; set; } // LocationID
        public byte Status { get; set; } // status
        public bool CanMove { get; set; } // CanMove
        public string Remark { get; set; } // Remark (length: 800)
        public bool CanNotAdd { get; set; } // CanNotAdd
        public int? UnitQuantity { get; set; } // UnitQuantity
        public float? PalletWeight { get; set; } // PalletWeight
        public byte? PalletStatus { get; set; } // PalletStatus
        public string ReceivingScannedBy { get; set; } // ReceivingScannedBy (length: 50)
        public DateTime? ReceivingScannedTime { get; set; } // ReceivingScannedTime
        public string PutAwayScannedBy { get; set; } // PutAwayScannedBy (length: 50)
        public DateTime? PutAwayScannedTime { get; set; } // PutAwayScannedTime
    }

    // ViewTotalReceivingOrders
    public class ViewTotalReceivingOrder
    {
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 20)
        public Guid CustomerId { get; set; } // CustomerID
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public bool Status { get; set; } // Status
        public float? Temperature { get; set; } // Temperature
        public string ReceivingOrderRemark { get; set; } // ReceivingOrderRemark (length: 250)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 10)
    }

    // ViewTotalReceivingOrderDetails
    public class ViewTotalReceivingOrderDetail
    {
        public Guid ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID
        public Guid ReceivingOrderId { get; set; } // ReceivingOrderID
        public Guid ProductId { get; set; } // ProductID
        public short PackagesPerPallet { get; set; } // PackagesPerPallet
        public int TotalPackages { get; set; } // TotalPackages
        public float WeightPerPackage { get; set; } // WeightPerPackage
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public string Remark { get; set; } // Remark (length: 200)
        public int? TransactionId { get; set; } // TransactionID
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public byte Status { get; set; } // Status
        public float? PalletHeight { get; set; } // PalletHeight
        public string UserName { get; set; } // UserName (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public short? Plts { get; set; } // Plts
        public int? TotalUnits { get; set; } // TotalUnits
        public decimal? TotalWeight { get; set; } // TotalWeight
        public short? PackingListQuantity { get; set; } // PackingListQuantity
        public short? UnitPerPackage { get; set; } // UnitPerPackage
        public string CreatedBy { get; set; } // CreatedBy (length: 25)
        public decimal? RejectPercentage { get; set; } // RejectPercentage
        public decimal? PackagingWeight { get; set; } // PackagingWeight
    }

    // ViewTotalStockRemain
    public class ViewTotalStockRemain
    {
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public decimal? GrossWeightPerPackage { get; set; } // GrossWeightPerPackage
        public string ReceivingOrderNumber { get; set; } // ReceivingOrderNumber (length: 16)
        public DateTime? ReceivingOrderDate { get; set; } // ReceivingOrderDate
        public string SpecialRequirement { get; set; } // SpecialRequirement (length: 250)
        public short TotalPackages { get; set; } // TotalPackages
        public string Label { get; set; } // Label (length: 15)
        public short OriginalQuantity { get; set; } // OriginalQuantity
        public short CurrentQuantity { get; set; } // CurrentQuantity
        public string CustomerRef { get; set; } // CustomerRef (length: 30)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public DateTime? UseByDate { get; set; } // UseByDate
        public bool OnHold { get; set; } // OnHold
    }

    // ViewTotalUnit_Out
    public class ViewTotalUnitOut
    {
        public int PalletId { get; set; } // PalletID
        public int? OutUnit { get; set; } // Out_Unit
    }

    // ViewTripDispatchingPlan
    public class ViewTripDispatchingPlan
    {
        public string TripNumber { get; set; } // TripNumber (length: 15)
        public DateTime TripDate { get; set; } // TripDate
        public string ProductNumber { get; set; } // ProductNumber (length: 30)
        public string ProductName { get; set; } // ProductName (length: 100)
        public short TotalPackages { get; set; } // TotalPackages
        public decimal? TotalWeight { get; set; } // TotalWeight
        public int? TotalUnits { get; set; } // TotalUnits
        public string OrderNumber { get; set; } // OrderNumber (length: 12)
        public string CustomerNumber { get; set; } // CustomerNumber (length: 10)
        public int? TripTotalCtns { get; set; } // TripTotalCtns
    }

    // Warehouses
    /// <summary>
    /// 2
    /// False
    /// 0
    /// 10000
    /// </summary>
    public class Warehouse
    {
        /// <summary>
        /// 0
        /// </summary>
        public byte WarehouseId { get; set; } // WarehouseID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public string WarehouseDescription { get; set; } // WarehouseDescription (length: 150)
        public int StoreId { get; set; } // StoreID
    }

    // Warnings
    /// <summary>
    /// 0
    /// </summary>
    public class Warning
    {
        public int WarningId { get; set; } // WarningID (Primary key)
        public DateTime? WarningDate { get; set; } // WarningDate
        public DateTime? CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public int? Department { get; set; } // Department
        public string WrongDoingDescription { get; set; } // WrongDoingDescription (length: 500)
        public DateTime? OccuringTime { get; set; } // OccuringTime
        public string OccurringLocation { get; set; } // OccurringLocation (length: 255)
        public string EmployeeFeedback { get; set; } // EmployeeFeedback (length: 255)
        public string ConfirmedBy { get; set; } // ConfirmedBy (length: 255)
        public DateTime? ConfirmTime { get; set; } // ConfirmTime
        public bool Confirmed { get; set; } // Confirmed
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 255)

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // TS

        /// <summary>
        /// 0
        /// </summary>
        public bool Official { get; set; } // Official
        public string WarningNumber { get; set; } // WarningNumber (length: 10)
        public int? EmployeeKpiDefinitionId { get; set; } // EmployeeKPIDefinitionID
        public Guid? EmployeeId { get; set; } // EmployeeID

        public Warning()
        {
            Confirmed = false;
            Official = false;
        }
    }

    // WavePickings
    public class WavePicking
    {
        public string WavePickingNumber { get; set; } // WavePickingNumber (length: 16)
        public DateTime WavePickingDate { get; set; } // WavePickingDate
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string WavePickingRemark { get; set; } // WavePickingRemark (length: 150)
        public bool? WaveConfirmed { get; set; } // WaveConfirmed
        public DateTime? StartWorkingTime { get; set; } // StartWorkingTime
        public DateTime? EndWorkingTime { get; set; } // EndWorkingTime
        public byte[] Ts { get; set; } // ts
        public Guid WavePickingId { get; set; } // WavePickingID (Primary key)
        public Guid? CustomerId { get; set; } // CustomerID
        public int? WavePickingLocalId { get; set; } // WavePickingLocalID
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public string VehicleNumber { get; set; } // VehicleNumber (length: 15)
        public int? DockDoorId { get; set; } // DockDoorID

        /// <summary>
        /// 1-DO, 2-RO
        /// </summary>
        public byte? WavePickingType { get; set; } // WavePickingType

        public WavePicking()
        {
            CreatedTime = DateTime.Now;
            WaveConfirmed = false;
            WavePickingId = Guid.NewGuid();
            WavePickingType = 1;
        }
    }

    // WavePickingDetails
    public class WavePickingDetail
    {
        public string OrderNumber { get; set; } // OrderNumber (length: 16)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public string Remark { get; set; } // Remark (length: 150)
        public bool? CheckDelete { get; set; } // CheckDelete
        public byte[] Ts { get; set; } // ts
        public int? TotalPackages { get; set; } // TotalPackages
        public int? TotalPallets { get; set; } // TotalPallets
        public decimal? TotalWeight { get; set; } // TotalWeight
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public int? TotalUnits { get; set; } // TotalUnits
        public Guid WavePickingDetailId { get; set; } // WavePickingDetailID (Primary key)
        public Guid? WavePickingId { get; set; } // WavePickingID

        public WavePickingDetail()
        {
            CreatedTime = DateTime.Now;
            CheckDelete = false;
            WavePickingDetailId = Guid.NewGuid();
        }
    }

    // WebBillingDetailBreakdown
    public class WebBillingDetailBreakdown
    {
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int BillingId { get; set; } // BillingID
        public DateTime BillingDate { get; set; } // BillingDate
        public DateTime BillingFromDate { get; set; } // BillingFromDate
        public DateTime BillingToDate { get; set; } // BillingToDate
        public DateTime? ReportDate { get; set; } // ReportDate
        public float? BeginW { get; set; } // BeginW
        public float? InW { get; set; } // InW
        public float? OutW { get; set; } // OutW
        public float? CloseW { get; set; } // CloseW
    }

    // WebBillingOneCustomers
    public class WebBillingOneCustomer
    {
        public int BillingId { get; set; } // BillingID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public int CustomerId { get; set; } // CustomerID
        public DateTime BillingDate { get; set; } // BillingDate
        public DateTime BillingFromDate { get; set; } // BillingFromDate
        public DateTime BillingToDate { get; set; } // BillingToDate
    }

    // WebBillingReportDetails
    public class WebBillingReportDetail
    {
        public string ServiceNumber { get; set; } // ServiceNumber (length: 14)
        public string ServiceName { get; set; } // ServiceName (length: 50)
        public string Measure { get; set; } // Measure (length: 15)
        public decimal? ServiceQuantity { get; set; } // ServiceQuantity
        public int BillingId { get; set; } // BillingID
        public DateTime BillingDate { get; set; } // BillingDate
        public DateTime BillingFromDate { get; set; } // BillingFromDate
        public DateTime BillingToDate { get; set; } // BillingToDate
        public int CustomerId { get; set; } // CustomerID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public bool IsDeleted { get; set; } // IsDeleted
    }

    // WebEDIOrderReview
    public class WebEdiOrderReview
    {
        public int EdiOrderId { get; set; } // EDI_OrderID
        public int CustomerId { get; set; } // CustomerID
        public DateTime OrderDate { get; set; } // OrderDate
        public string CustomerOrderNumber { get; set; } // CustomerOrderNumber (length: 50)
        public string CustomerReference { get; set; } // CustomerReference (length: 300)
        public DateTime? ProcessingTime { get; set; } // ProcessingTime
        public int? ProcessingStatus { get; set; } // ProcessingStatus
        public int OrderType { get; set; } // OrderType
        public string ProcessingOrderNumber { get; set; } // ProcessingOrderNumber (length: 50)
        public string ProcessedBy { get; set; } // ProcessedBy (length: 50)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public bool FileUploaded { get; set; } // FileUploaded
        public string FileUploadedCode { get; set; } // FileUploadedCode (length: 250)
        public int TotalQuantity { get; set; } // TotalQuantity
        public byte[] Ts { get; set; } // TS
        public int CustomerMainId { get; set; } // CustomerMainID
    }

    // WebUsers
    /// <summary>
    /// 2
    /// WebUsers.CustomerID
    /// True
    /// 0
    /// 0
    /// </summary>
    public class WebUser
    {
        /// <summary>
        /// 2304
        /// </summary>
        public string UserName { get; set; } // UserName (Primary key) (length: 50)

        /// <summary>
        /// 2736
        /// </summary>
        public string Password { get; set; } // Password (length: 50)

        /// <summary>
        /// 0
        /// </summary>
        public bool AllowEdi { get; set; } // AllowEDI

        /// <summary>
        /// 0
        /// </summary>
        public bool? Active { get; set; } // Active

        /// <summary>
        /// 0
        /// </summary>
        public DateTime? LastAccessed { get; set; } // LastAccessed
        public string CustomerStore { get; set; } // CustomerStore (length: 10)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public Guid CustomerId { get; set; } // CustomerID

        public WebUser()
        {
            AllowEdi = false;
            Active = false;
            CreatedTime = DateTime.Now;
        }
    }

    // WMSDB_Customers
    public class WmsdbCustomer
    {
        public Guid CustomerId { get; set; } // CustomerID
        public int? CustomerLocalId { get; set; } // CustomerLocalID
        public string CustomerNumber { get; set; } // CustomerNumber (length: 50)
        public string CustomerName { get; set; } // CustomerName (length: 80)
        public string CustomerFullName { get; set; } // CustomerFullName (length: 150)
        public string Initial { get; set; } // Initial (length: 3)
        public Guid? CustomerMainId { get; set; } // CustomerMainID
        public string Address { get; set; } // Address (length: 150)
        public string CustomerType { get; set; } // CustomerType (length: 50)
        public string PrimaryContact { get; set; } // PrimaryContact (length: 150)
        public string Phone1 { get; set; } // Phone1 (length: 50)
        public string Phone2 { get; set; } // Phone2 (length: 50)
        public string Mobile { get; set; } // Mobile (length: 20)
        public string Fax { get; set; } // Fax (length: 50)
        public string Email { get; set; } // Email (length: 3000)
        public string OtherContacts { get; set; } // OtherContacts (length: 150)
        public string MarketingInfor { get; set; } // MarketingInfor (length: 4000)
        public string CustomerInvoiceName { get; set; } // CustomerInvoiceName (length: 150)
        public string CustomerInvoiceAddress { get; set; } // CustomerInvoiceAddress (length: 150)
        public string CustomerInvoiceTaxCode { get; set; } // CustomerInvoiceTaxCode (length: 20)
        public bool CustomerDiscontinued { get; set; } // CustomerDiscontinued
        public byte CustomerCategory { get; set; } // CustomerCategory
        public byte? CustomerGroup { get; set; } // CustomerGroup
        public bool? SendNote { get; set; } // SendNote
        public int? CustomerSubId { get; set; } // CustomerSubID
        public bool? Hold { get; set; } // Hold
        public string HoldMessage { get; set; } // HoldMessage (length: 500)
        public int? HoldLimitWeight { get; set; } // HoldLimitWeight
        public byte[] Ts { get; set; } // ts
        public bool? HomeLocationChange { get; set; } // HomeLocationChange
        public bool? DispatchingByClient { get; set; } // DispatchingByClient
        public string CustomerPalletType { get; set; } // CustomerPalletType (length: 4)
        public string Website { get; set; } // Website (length: 100)
        public string EmailBilling { get; set; } // EmailBilling (length: 500)
        public byte? CustomerDispatchType { get; set; } // CustomerDispatchType
        public bool? IsAllowEdi { get; set; } // IsAllowEDI
        public string CustomerTaxGroup { get; set; } // CustomerTaxGroup (length: 100)
        public bool? BarcodeScanRequire { get; set; } // BarcodeScanRequire
        public bool? PrintLabelRemainRequire { get; set; } // PrintLabelRemainRequire
        public short? DefaultProcessTime { get; set; } // DefaultProcessTime
        public int StoreId { get; set; } // StoreID
        public byte? CustomerPotentialCategoryId { get; set; } // CustomerPotentialCategoryID
        public bool? IsAllowOnlineReport { get; set; } // IsAllowOnlineReport
        public Guid HomeLocation1 { get; set; } // HomeLocation1
        public Guid HomeLocation2 { get; set; } // HomeLocation2
        public string CustId { get; set; } // CustId (length: 250)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public byte? CustomerStatus { get; set; } // CustomerStatus
        public string OpportunityType { get; set; } // OpportunityType (length: 255)
        public decimal? OpportunityProbability { get; set; } // OpportunityProbability
        public string OpportunityAssignedToUser { get; set; } // OpportunityAssignedToUser (length: 100)
        public string CustomerNumberAccounting { get; set; } // CustomerNumberAccounting (length: 50)
        public bool? IsCustomerTest { get; set; } // IsCustomerTest
        public Guid? CustomerAssignedTo { get; set; } // CustomerAssignedTo
        public int? CustomerAssignedTo0 { get; set; } // CustomerAssignedTo0
        public int? IsCheckOutRequire { get; set; } // IsCheckOutRequire
        public float? TemperatureFrom { get; set; } // TemperatureFrom
        public float? TemperatureTo { get; set; } // TemperatureTo
        public float? HumidityFrom { get; set; } // HumidityFrom
        public float? HumidityTo { get; set; } // HumidityTo
        public string CustomerNumberErp { get; set; } // CustomerNumberERP (length: 50)
    }

    // WMSDB_Locations
    public class WmsdbLocation
    {
        public Guid LocationId { get; set; } // LocationID
        public string LocationNumber { get; set; } // LocationNumber (length: 12)
        public Guid RoomId { get; set; } // RoomID
        public short Aisle { get; set; } // Aisle
        public short Bay { get; set; } // Bay
        public short High { get; set; } // High
        public short Deep { get; set; } // Deep
        public short Used { get; set; } // Used
        public string Remark { get; set; } // Remark (length: 50)
        public bool Top { get; set; } // Top
        public bool Low { get; set; } // Low
        public string LocationNumberShort { get; set; } // LocationNumberShort (length: 6)
        public byte? IsBusy { get; set; } // isBusy
        public long? ProductQuantity { get; set; } // ProductQuantity
        public int? PalletQuantity { get; set; } // PalletQuantity
        public byte LocationCode { get; set; } // LocationCode
        public bool VeryLowHigh { get; set; } // VeryLowHigh
        public decimal? MaxWeight { get; set; } // MaxWeight
        public int? StoreId { get; set; } // StoreID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
    }

    // WMSDB_Products
    public class WmsdbProduct
    {
        public Guid ProductId { get; set; } // ProductID
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public Guid CustomerId { get; set; } // CustomerID
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public bool Discontinue { get; set; } // Discontinue
        public float? TemperatureRequire { get; set; } // TemperatureRequire
        public short PackagesPerPallet { get; set; } // PackagesPerPallet
        public short? PackagesPerPallet2 { get; set; } // PackagesPerPallet2
        public string Remark { get; set; } // Remark (length: 125)
        public string Packages { get; set; } // Packages (length: 20)
        public int? PickingLocation { get; set; } // PickingLocation
        public short Inners { get; set; } // Inners
        public bool PickingMethod { get; set; } // PickingMethod
        public int ProductCategory { get; set; } // ProductCategory
        public byte[] Ts { get; set; } // TS
        public int? WarehouseNo { get; set; } // WAREHOUSE_NO
        public decimal? GrossWeightPerPackage { get; set; } // GrossWeightPerPackage
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 100)
        public string ProductNameVn { get; set; } // ProductNameVN (length: 100)
        public byte? ProductCategoryId { get; set; } // ProductCategoryID
        public short? WarningDaysBeforeExpiry { get; set; } // WarningDaysBeforeExpiry
        public bool? IsWeightingRequire { get; set; } // IsWeightingRequire
        public bool? IsAllowLocationChange { get; set; } // IsAllowLocationChange
        public string Origin { get; set; } // Origin (length: 50)
        public decimal? Cbm { get; set; } // CBM
        public int? SafetyStock { get; set; } // SafetyStock
        public short? Pcs { get; set; } // Pcs
        public Guid? HomeRoom1 { get; set; } // HomeRoom1
        public Guid? HomeRoom2 { get; set; } // HomeRoom2
        public Guid? HomeLocation1 { get; set; } // HomeLocation1
        public Guid? HomeLocation2 { get; set; } // HomeLocation2
        public int? ProductMainId { get; set; } // ProductMainID
        public string Packages2 { get; set; } // Packages2 (length: 20)
        public decimal? WeightOfPackage { get; set; } // WeightOfPackage
        public short? Shelfdate { get; set; } // Shelfdate
        public string InvtId { get; set; } // InvtID (length: 30)
        public Guid? MainProductId { get; set; } // MainProductID
        public int? CustomerProductGroupId { get; set; } // CustomerProductGroupID
        public string BarcodeString { get; set; } // BarcodeString (length: 255)
        public bool? IsExpDateRequire { get; set; } // IsExpDateRequire
        public bool? IsProDateRequire { get; set; } // IsProDateRequire
    }

    // WMSDB_Rooms
    public class WmsdbRoom
    {
        public Guid RoomId { get; set; } // RoomID
        public string RoomNumber { get; set; } // RoomNumber (length: 2)
        public float Temperature { get; set; } // Temperature
        public DateTime? DateRoom { get; set; } // DateRoom
        public byte Warehouse { get; set; } // Warehouse
        public string RoomDescription { get; set; } // RoomDescription (length: 250)
        public int? RoomArea { get; set; } // RoomArea
        public int? QuantityOfPallets { get; set; } // QuantityOfPallets
        public int? RoomVolume { get; set; } // RoomVolume
        public string RoomProductStorage { get; set; } // RoomProductStorage (length: 250)
        public float? TemperatureFrom { get; set; } // TemperatureFrom
        public float? TemperatureTo { get; set; } // TemperatureTo
        public float? HumidityFrom { get; set; } // HumidityFrom
        public float? HumidityTo { get; set; } // HumidityTo
        public string UpdatedBy { get; set; } // UpdatedBy (length: 200)
        public int StoreId { get; set; } // StoreID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid? LostProductLocationId { get; set; } // LostProductLocationID
    }

    // WMSVersions
    public class WmsVersion
    {
        public int VersionId { get; set; } // VersionID (Primary key)
        public string VersionDescription { get; set; } // VersionDescription (length: 50)
        public DateTime? VersionDate { get; set; } // VersionDate
        public string VersionRemark { get; set; } // VersionRemark (length: 50)
        public string VersionUpdateBy { get; set; } // VersionUpdateBy (length: 50)
        public string Application { get; set; } // Application (length: 12)
    }

    // Works
    /// <summary>
    /// 2
    /// ((MHLWorks.PayRollMonthID=100))
    /// MHLWorks.MHLWorkID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class Work
    {
        public Guid WorkId { get; set; } // WorkID (Primary key)

        /// <summary>
        /// 0
        /// </summary>
        public int? PayRollMonthId { get; set; } // PayRollMonthID

        /// <summary>
        /// 0
        /// </summary>
        public DateTime WorkDate { get; set; } // WorkDate

        /// <summary>
        /// 0
        /// </summary>
        public string CreatedBy { get; set; } // CreatedBy (length: 300)

        /// <summary>
        /// 0
        /// </summary>
        public int Received { get; set; } // Received

        /// <summary>
        /// 0
        /// </summary>
        public int Damaged { get; set; } // Damaged

        /// <summary>
        /// 0
        /// </summary>
        public bool WorkConfirmed { get; set; } // WorkConfirmed

        /// <summary>
        /// 0
        /// </summary>
        public string Remark { get; set; } // Remark (length: 300)

        /// <summary>
        /// 0
        /// </summary>
        public float? UnitPrice { get; set; } // UnitPrice
        public DateTime? FromTime { get; set; } // FromTime
        public DateTime? ToTime { get; set; } // ToTime
        public bool Accepted { get; set; } // Accepted
        public string AcceptedBy { get; set; } // AcceptedBy (length: 20)
        public bool Rejected { get; set; } // Rejected
        public string RejectedBy { get; set; } // RejectedBy (length: 20)
        public string ManagerFeedback { get; set; } // ManagerFeedback (length: 150)
        public string WorkNumber { get; set; } // WorkNumber (length: 12)
        public byte[] Ts { get; set; } // ts
        public DateTime CreatedTime { get; set; } // CreatedTime
        public Guid WorkDefinitionId { get; set; } // WorkDefinitionID
        public Guid? OtherServiceDetailId { get; set; } // OtherServiceDetailID
        public Guid? CustomerMainId { get; set; } // CustomerMainID

        public Work()
        {
            WorkId = Guid.NewGuid();
            Received = 0;
            Damaged = 0;
            WorkConfirmed = false;
            UnitPrice = 0f;
            Accepted = false;
            Rejected = false;
            CreatedTime = DateTime.Now;
        }
    }

    // WorkDefinitions
    /// <summary>
    /// 2
    /// MHLWorkDefinitions.JobName
    /// True
    /// 0
    /// 0
    /// </summary>
    public class WorkDefinition
    {
        /// <summary>
        /// 0
        /// </summary>
        public string JobName { get; set; } // JobName (length: 200)

        /// <summary>
        /// 0
        /// </summary>
        public string Description { get; set; } // Description (length: 200)

        /// <summary>
        /// 0
        /// </summary>
        public float? UnitPrice { get; set; } // UnitPrice

        /// <summary>
        /// 0
        /// </summary>
        public string Unit { get; set; } // Unit (length: 10)

        /// <summary>
        /// 0
        /// </summary>
        public string UpdatedBy { get; set; } // UpdatedBy (length: 40)

        /// <summary>
        /// 0
        /// </summary>
        public bool? Discontinued { get; set; } // Discontinued
        public string WorkDefinitionNumber { get; set; } // WorkDefinitionNumber (length: 10)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public Guid? CustomerMainId { get; set; } // CustomerMainID
        public Guid? ServicesDefinitionId { get; set; } // ServicesDefinitionID
        public Guid WorkDefinitionId { get; set; } // WorkDefinitionID (Primary key)

        public WorkDefinition()
        {
            Discontinued = false;
            CreatedTime = DateTime.Now;
            ServicesDefinitionId = Guid.NewGuid();
            WorkDefinitionId = Guid.NewGuid();
        }
    }

    // WorkDetails
    /// <summary>
    /// 2
    /// ((MHLWorkDetails.MHLWorkID=200))
    /// MHLWorkDetails.MHLWorkID DESC
    /// True
    /// 0
    /// 0
    /// </summary>
    public class WorkDetail
    {
        public Guid WorkDetailId { get; set; } // WorkDetailID (Primary key)
        public Guid WorkId { get; set; } // WorkID
        public Guid EmployeeId { get; set; } // EmployeeID

        /// <summary>
        /// 0
        /// </summary>
        public float Quantity { get; set; } // Quantity

        /// <summary>
        /// 0
        /// </summary>
        public string DetailRemark { get; set; } // DetailRemark (length: 200)

        /// <summary>
        /// 0
        /// </summary>
        public bool CheckDelete { get; set; } // CheckDelete

        /// <summary>
        /// 0
        /// </summary>
        public byte[] Ts { get; set; } // ts
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime

        public WorkDetail()
        {
            WorkDetailId = Guid.NewGuid();
            Quantity = 0f;
            CheckDelete = false;
            CreatedTime = DateTime.Now;
        }
    }

    // XDoc_PickingList
    public class XDocPickingList
    {
        public DateTime OrderDate { get; set; } // OrderDate
        public string ProductNumber { get; set; } // ProductNumber (length: 255)
        public string ProductName { get; set; } // ProductName (length: 255)
        public int StoreNumber { get; set; } // StoreNumber
        public int Quantity { get; set; } // Quantity
        public string CustomerNumber { get; set; } // CustomerNumber (length: 255)
        public string CustomerName { get; set; } // CustomerName (length: 255)
        public string CustomerRef2 { get; set; } // CustomerRef2 (length: 255)
        public string CustomerRef { get; set; } // CustomerRef (length: 255)
        public string CustomerClientName { get; set; } // CustomerClientName (length: 255)
        public string DispatchingOrderNumber { get; set; } // DispatchingOrderNumber (length: 255)
        public decimal Weights { get; set; } // Weights
        public string RouteCode { get; set; } // RouteCode (length: 255)
        public int NetQty { get; set; } // NetQty
        public decimal NetWeight { get; set; } // NetWeight
        public int Complete { get; set; } // Complete
        public Guid XdocPickingListId { get; set; } // XdocPickingListID (Primary key)
        public Guid CustomerClientId { get; set; } // CustomerClientID
        public Guid ProductId { get; set; } // ProductID
        public Guid CustomerId { get; set; } // CustomerID
        public int PalletNumber { get; set; } // PalletNumber
        public Guid DispatchingOrderId { get; set; } // DispatchingOrderID
        public int? Confirm { get; set; } // Confirm

        /// <summary>
        /// Thung moi nhat
        /// </summary>
        public Guid? XdocPickingListCartonId { get; set; } // XdocPickingListCartonID
        public Guid? EdiOrderId { get; set; } // EDI_OrderID
        public long? CustomerRefDetailId { get; set; } // CustomerRef_DetailID
        public int? Version { get; set; } // Version

        /// <summary>
        /// 0: Default, 1: Đủ hàng; 2: Hàng mới; 3: Đủ hàng-Hàng mới
        /// </summary>
        public int? Priority { get; set; } // Priority
        public string Lot { get; set; } // Lot (length: 255)
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public int? SortingQty { get; set; } // SortingQty
        public Guid? ReceivingOrderDetailId { get; set; } // ReceivingOrderDetailID

        // Reverse navigation

        /// <summary>
        /// Child XDocPickingListCartons where [XDoc_PickingListCarton].[XDoc_PickingListID] point to this entity (FK_XDoc_PickingListID)
        /// </summary>
        public virtual ICollection<XDocPickingListCarton> XDocPickingListCartons { get; set; } // XDoc_PickingListCarton.FK_XDoc_PickingListID

        /// <summary>
        /// Child XDocPickingListDetails where [XDoc_PickingListDetails].[XdocPickingListID] point to this entity (FK_XdocPcikingList)
        /// </summary>
        public virtual ICollection<XDocPickingListDetail> XDocPickingListDetails { get; set; } // XDoc_PickingListDetails.FK_XdocPcikingList

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [XDoc_PickingList].([CustomerId]) (FK_CustomerID)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_CustomerID

        /// <summary>
        /// Parent CustomerClient pointed by [XDoc_PickingList].([CustomerClientId]) (FK_CustomerClientID)
        /// </summary>
        public virtual CustomerClient CustomerClient { get; set; } // FK_CustomerClientID

        /// <summary>
        /// Parent DispatchingOrder pointed by [XDoc_PickingList].([DispatchingOrderId]) (FK_DispatchingOrderID)
        /// </summary>
        public virtual DispatchingOrder DispatchingOrder { get; set; } // FK_DispatchingOrderID

        /// <summary>
        /// Parent Product pointed by [XDoc_PickingList].([ProductId]) (FK_Products)
        /// </summary>
        public virtual Product Product { get; set; } // FK_Products

        public XDocPickingList()
        {
            Quantity = 1;
            Complete = 0;
            XdocPickingListId = Guid.NewGuid();
            PalletNumber = 0;
            Confirm = 0;
            Priority = 0;
            XDocPickingListCartons = new List<XDocPickingListCarton>();
            XDocPickingListDetails = new List<XDocPickingListDetail>();
        }
    }

    // XDoc_PickingListCarton
    public class XDocPickingListCarton
    {
        public Guid XDocPickingListCartonId { get; set; } // XDoc_PickingListCartonID (Primary key)
        public string PackageType { get; set; } // PackageType (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string BarcodeString { get; set; } // BarcodeString (length: 255)
        public Guid XDocPickingListId { get; set; } // XDoc_PickingListID
        public int CartonNumber { get; set; } // CartonNumber
        public bool IsComplete { get; set; } // IsComplete

        // Foreign keys

        /// <summary>
        /// Parent XDocPickingList pointed by [XDoc_PickingListCarton].([XDocPickingListId]) (FK_XDoc_PickingListID)
        /// </summary>
        public virtual XDocPickingList XDocPickingList { get; set; } // FK_XDoc_PickingListID

        public XDocPickingListCarton()
        {
            XDocPickingListCartonId = Guid.NewGuid();
            CartonNumber = 1;
            IsComplete = false;
        }
    }

    // XDoc_PickingListDetails
    public class XDocPickingListDetail
    {
        public Guid XDocPickingListDetailId { get; set; } // XDoc_PickingListDetailID (Primary key)
        public Guid XdocPickingListId { get; set; } // XdocPickingListID
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string ProductBarcode { get; set; } // ProductBarcode (length: 100)
        public string ProductNumber { get; set; } // ProductNumber (length: 40)
        public byte[] Ts { get; set; } // ts
        public int? Quantity { get; set; } // Quantity
        public decimal? NetWeight { get; set; } // NetWeight
        public DateTime? ProductionDate { get; set; } // ProductionDate
        public string LotNumber { get; set; } // LotNumber (length: 30)
        public string DeviceNumber { get; set; } // DeviceNumber (length: 50)
        public int PackNumber { get; set; } // PackNumber
        public Guid? XdocPickingListCartonId { get; set; } // XdocPickingListCartonID
        public Guid? PalletId { get; set; } // PalletID

        // Foreign keys

        /// <summary>
        /// Parent XDocPickingList pointed by [XDoc_PickingListDetails].([XdocPickingListId]) (FK_XdocPcikingList)
        /// </summary>
        public virtual XDocPickingList XDocPickingList { get; set; } // FK_XdocPcikingList

        public XDocPickingListDetail()
        {
            XDocPickingListDetailId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Quantity = 1;
        }
    }

    // xxx_OrderNumber_Unlock
    public class XxxOrderNumberUnlock
    {
        public DateTime? OrderDate { get; set; } // OrderDate
        public string OrderNumber { get; set; } // OrderNumber (Primary key) (length: 50)
    }

    // XXX_Products_LaCusina
    public class XxxProductsLaCusina
    {
        public string ProductNumber { get; set; } // ProductNumber (Primary key) (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public short Inners { get; set; } // Inners

        public XxxProductsLaCusina()
        {
            Inners = 1;
        }
    }

    // XXX_Products_SIMBA
    public class XxxProductsSimba
    {
        public string ProductNumber { get; set; } // ProductNumber (Primary key) (length: 40)
        public string ProductName { get; set; } // ProductName (length: 100)
        public decimal WeightPerPackageSimba { get; set; } // WeightPerPackage_SIMBA
        public decimal? GrossWeightPerPackageSimba { get; set; } // GrossWeightPerPackage_SIMBA
        public decimal WeightPerPackage { get; set; } // WeightPerPackage
        public decimal? GrossWeightPerPackage { get; set; } // GrossWeightPerPackage
        public string Remark { get; set; } // Remark (length: 125)
        public string Packages { get; set; } // Packages (length: 50)

        public XxxProductsSimba()
        {
            Packages = "Ctns";
        }
    }

    // ZNSRatings
    public class ZnsRating
    {
        public long ZnsRatingId { get; set; } // ZNSRatingID (Primary key)
        public string OrderNumber { get; set; } // OrderNumber (length: 50)
        public short? ZnsRatingValue { get; set; } // ZNSRatingValue
        public string ZnsRatingSetOfCriteria { get; set; } // ZNSRatingSetOfCriteria (length: 100)
        public string ZnsRatingComment { get; set; } // ZNSRatingComment (length: 300)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public string DriverCode { get; set; } // DriverCode (length: 50)
        public string DriverName { get; set; } // DriverName (length: 50)
        public DateTime? ZnsRatingDate { get; set; } // ZNSRatingDate

        public ZnsRating()
        {
            CreatedTime = DateTime.Now;
        }
    }


    #endregion

    #region POCO Configuration

    // Accounting_BillingCheck
    public class AccountingBillingCheckConfiguration : IEntityTypeConfiguration<AccountingBillingCheck>
    {
        public void Configure(EntityTypeBuilder<AccountingBillingCheck> builder)
        {
            builder.ToView("Accounting_BillingCheck", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StoreDescription).HasColumnName(@"StoreDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BillingFromDate).HasColumnName(@"BillingFromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingToDate).HasColumnName(@"BillingToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BeginC).HasColumnName(@"BeginC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InC).HasColumnName(@"InC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutC).HasColumnName(@"OutC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CloseC).HasColumnName(@"CloseC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BeginW).HasColumnName(@"BeginW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.InW).HasColumnName(@"InW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OutW).HasColumnName(@"OutW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CloseW).HasColumnName(@"CloseW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.BeginP).HasColumnName(@"BeginP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InP).HasColumnName(@"InP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutP).HasColumnName(@"OutP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CloseP).HasColumnName(@"CloseP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BillingDate).HasColumnName(@"BillingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingDetailBreakdownRemark).HasColumnName(@"BillingDetailBreakdownRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // Accounting_BillingContractDetails
    public class AccountingBillingContractDetailConfiguration : IEntityTypeConfiguration<AccountingBillingContractDetail>
    {
        public void Configure(EntityTypeBuilder<AccountingBillingContractDetail> builder)
        {
            builder.ToView("Accounting_BillingContractDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ContractNbr).HasColumnName(@"contractNbr").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ContractDate).HasColumnName(@"contractDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustId).HasColumnName(@"CustID").HasColumnType("char(15)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("char(30)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ServiceId).HasColumnName(@"ServiceID").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CustomerWms).HasColumnName(@"Customer_WMS").HasColumnType("int").IsRequired();
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("char(60)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(60);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
        }
    }

    // Accounting_BillingLast30days
    public class AccountingBillingLast30DaysConfiguration : IEntityTypeConfiguration<AccountingBillingLast30Days>
    {
        public void Configure(EntityTypeBuilder<AccountingBillingLast30Days> builder)
        {
            builder.ToView("Accounting_BillingLast30days", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.BillingToDate).HasColumnName(@"BillingToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BillingFromDate).HasColumnName(@"BillingFromDate").HasColumnType("smalldatetime").IsRequired();
        }
    }

    // Accounting_CheckEmployeePayroll
    public class AccountingCheckEmployeePayrollConfiguration : IEntityTypeConfiguration<AccountingCheckEmployeePayroll>
    {
        public void Configure(EntityTypeBuilder<AccountingCheckEmployeePayroll> builder)
        {
            builder.ToView("Accounting_CheckEmployeePayroll", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PayrollDate).HasColumnName(@"PayrollDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TimeWork).HasColumnName(@"TimeWork").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Noodles).HasColumnName(@"Noodles").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PayrollRemark).HasColumnName(@"PayrollRemark").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Ctns).HasColumnName(@"Ctns").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired();
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired();
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("bit").IsRequired();
            builder.Property(x => x.SunHol).HasColumnName(@"SunHol").HasColumnType("bit").IsRequired();
            builder.Property(x => x.GuardRemark).HasColumnName(@"GuardRemark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Milk).HasColumnName(@"Milk").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.LunchCompensate).HasColumnName(@"LunchCompensate").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BenefitUser).HasColumnName(@"BenefitUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NightShift).HasColumnName(@"NightShift").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HolidayDay).HasColumnName(@"HolidayDay").HasColumnType("bit").IsRequired(false);
        }
    }

    // Accounting_Contracts
    public class AccountingContractConfiguration : IEntityTypeConfiguration<AccountingContract>
    {
        public void Configure(EntityTypeBuilder<AccountingContract> builder)
        {
            builder.ToView("Accounting_Contracts", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ContractNbr).HasColumnName(@"ContractNbr").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustId).HasColumnName(@"CustID").HasColumnType("char(15)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServiceId).HasColumnName(@"ServiceID").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ServiceName).HasColumnName(@"serviceName").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServiceNameVn).HasColumnName(@"serviceNameVN").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.Uom).HasColumnName(@"UOM").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.FrQty).HasColumnName(@"FrQty").HasColumnType("float").IsRequired();
            builder.Property(x => x.ToQty).HasColumnName(@"ToQty").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryId).HasColumnName(@"CuryID").HasColumnType("char(10)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LupdUser).HasColumnName(@"Lupd_User").HasColumnType("char(10)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").HasColumnType("datetime").IsRequired(false);
        }
    }

    // Accounting_CustomerList
    public class AccountingCustomerListConfiguration : IEntityTypeConfiguration<AccountingCustomerList>
    {
        public void Configure(EntityTypeBuilder<AccountingCustomerList> builder)
        {
            builder.ToView("Accounting_CustomerList", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerMainNumber).HasColumnName(@"CustomerMainNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerMainName).HasColumnName(@"CustomerMainName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // Accounting_CustomerOverTimeCheck
    public class AccountingCustomerOverTimeCheckConfiguration : IEntityTypeConfiguration<AccountingCustomerOverTimeCheck>
    {
        public void Configure(EntityTypeBuilder<AccountingCustomerOverTimeCheck> builder)
        {
            builder.ToView("Accounting_CustomerOverTimeCheck", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.InternalRemark).HasColumnName(@"InternalRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DayOfWeek).HasColumnName(@"DayOfWeek").HasColumnType("varchar(9)").IsRequired(false).IsUnicode(false).HasMaxLength(9);
            builder.Property(x => x.TimeType).HasColumnName(@"TimeType").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.ContractDetailRemark).HasColumnName(@"ContractDetailRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StoreDescription).HasColumnName(@"StoreDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // Accounting_Employees
    public class AccountingEmployeeConfiguration : IEntityTypeConfiguration<AccountingEmployee>
    {
        public void Configure(EntityTypeBuilder<AccountingEmployee> builder)
        {
            builder.ToView("Accounting_Employees", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Education).HasColumnName(@"Education").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateOfEntry).HasColumnName(@"DateOfEntry").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IdCardNumber).HasColumnName(@"IDCardNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Photograph).HasColumnName(@"Photograph").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ManagementLevel).HasColumnName(@"ManagementLevel").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BikeNumber).HasColumnName(@"BikeNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BikeUse).HasColumnName(@"BikeUse").HasColumnType("bit").IsRequired();
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InOutCardNumber).HasColumnName(@"InOutCardNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Grade).HasColumnName(@"Grade").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.AddressNow).HasColumnName(@"AddressNow").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PerformanceStatus).HasColumnName(@"PerformanceStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IdCardIssueDate).HasColumnName(@"IDCardIssueDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Sex).HasColumnName(@"Sex").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.IdCardIssuePlace).HasColumnName(@"IDCardIssuePlace").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MonthlyAdvanceRequired).HasColumnName(@"MonthlyAdvanceRequired").HasColumnType("bit").IsRequired();
            builder.Property(x => x.MonthlyAdvanceAmount).HasColumnName(@"MonthlyAdvanceAmount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PersonnalTaxCode).HasColumnName(@"PersonnalTaxCode").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.BankAccountNumber).HasColumnName(@"BankAccountNumber").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.ContractDateFirst).HasColumnName(@"ContractDateFirst").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.LunchPlace).HasColumnName(@"LunchPlace").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.ReportTo).HasColumnName(@"ReportTo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.LeaveDate).HasColumnName(@"LeaveDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.IsLeave).HasColumnName(@"IsLeave").HasColumnType("bit").IsRequired(false);
        }
    }

    // Accounting_EmployeeWorkingCheckers
    public class AccountingEmployeeWorkingCheckerConfiguration : IEntityTypeConfiguration<AccountingEmployeeWorkingChecker>
    {
        public void Configure(EntityTypeBuilder<AccountingEmployeeWorkingChecker> builder)
        {
            builder.ToView("Accounting_EmployeeWorkingCheckers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TotalPallets).HasColumnName(@"TotalPallets").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.QtyOfSizes).HasColumnName(@"QtyOfSizes").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OriginalWeight).HasColumnName(@"OriginalWeight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.Ctns).HasColumnName(@"Ctns").HasColumnType("int").IsRequired(false);
        }
    }

    // Accounting_EmployeeWorkingMonthly
    public class AccountingEmployeeWorkingMonthlyConfiguration : IEntityTypeConfiguration<AccountingEmployeeWorkingMonthly>
    {
        public void Configure(EntityTypeBuilder<AccountingEmployeeWorkingMonthly> builder)
        {
            builder.ToView("Accounting_EmployeeWorkingMonthly", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.WorkDate).HasColumnName(@"WorkDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkDefinitionNumber).HasColumnName(@"WorkDefinitionNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.JobName).HasColumnName(@"JobName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("real").IsRequired(false);
        }
    }

    // Accounting_GoodsReceived
    public class AccountingGoodsReceivedConfiguration : IEntityTypeConfiguration<AccountingGoodsReceived>
    {
        public void Configure(EntityTypeBuilder<AccountingGoodsReceived> builder)
        {
            builder.ToView("Accounting_GoodsReceived", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PurchasingOrderId).HasColumnName(@"PurchasingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PurchasingOrderNumber).HasColumnName(@"PurchasingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivedPartId).HasColumnName(@"ReceivedPartID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReceivedPartNumber).HasColumnName(@"ReceivedPartNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.PurchasingRemark).HasColumnName(@"PurchasingRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("varchar(9)").IsRequired(false).IsUnicode(false).HasMaxLength(9);
            builder.Property(x => x.DeliveryQuantity).HasColumnName(@"DeliveryQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UnitPriceVnd).HasColumnName(@"UnitPriceVND").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ItemRemark).HasColumnName(@"ItemRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.OrderConfirmed).HasColumnName(@"OrderConfirmed").HasColumnType("bit").IsRequired();
        }
    }

    // Accounting_OrderDetails
    public class AccountingOrderDetailConfiguration : IEntityTypeConfiguration<AccountingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<AccountingOrderDetail> builder)
        {
            builder.ToView("Accounting_OrderDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ctns).HasColumnName(@"Ctns").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
        }
    }

    // Accounting_PalletInventory
    public class AccountingPalletInventoryConfiguration : IEntityTypeConfiguration<AccountingPalletInventory>
    {
        public void Configure(EntityTypeBuilder<AccountingPalletInventory> builder)
        {
            builder.ToView("Accounting_PalletInventory", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.QtyLocations).HasColumnName(@"QtyLocations").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaxHigh).HasColumnName(@"MaxHigh").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Used).HasColumnName(@"Used").HasColumnType("smallint").IsRequired();
        }
    }

    // Accounting_PayrollMonthlyDetailFull
    public class AccountingPayrollMonthlyDetailFullConfiguration : IEntityTypeConfiguration<AccountingPayrollMonthlyDetailFull>
    {
        public void Configure(EntityTypeBuilder<AccountingPayrollMonthlyDetailFull> builder)
        {
            builder.ToView("Accounting_PayrollMonthlyDetailFull", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PayRollMonthlyId).HasColumnName(@"PayRollMonthlyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.WorkingDays).HasColumnName(@"WorkingDays").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WorkingDayNightShift).HasColumnName(@"WorkingDayNightShift").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.User).HasColumnName(@"User").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Abc).HasColumnName(@"ABC").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Performance).HasColumnName(@"Performance").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformanceAverage).HasColumnName(@"PerformanceAverage").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformancePercent).HasColumnName(@"PerformancePercent").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PerformanceStatus).HasColumnName(@"PerformanceStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PayRollMonthlyRemark).HasColumnName(@"PayRollMonthlyRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Advance).HasColumnName(@"Advance").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SupervisorRemark).HasColumnName(@"SupervisorRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SupervisorUser).HasColumnName(@"SupervisorUser").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.PersonnelCheck).HasColumnName(@"PersonnelCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PersonnelRemark).HasColumnName(@"PersonnelRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PersonnelCheckTime).HasColumnName(@"PersonnelCheckTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SafetyCheck).HasColumnName(@"SafetyCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SafetyRemark).HasColumnName(@"SafetyRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SafetyCheckTime).HasColumnName(@"SafetyCheckTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ManagerCheck).HasColumnName(@"ManagerCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ManagerRemark).HasColumnName(@"ManagerRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ManagerCheckUser).HasColumnName(@"ManagerCheckUser").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.AbCtemp).HasColumnName(@"ABCtemp").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.EvaluationSafety).HasColumnName(@"EvaluationSafety").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationPerformance).HasColumnName(@"EvaluationPerformance").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationTime).HasColumnName(@"EvaluationTime").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationAttitude).HasColumnName(@"EvaluationAttitude").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.WorkingDayHoliday).HasColumnName(@"WorkingDayHoliday").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Oth43).HasColumnName(@"OTH+").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.IsProductivity).HasColumnName(@"isProductivity").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Productivity).HasColumnName(@"Productivity").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.IsBirthday).HasColumnName(@"IsBirthday").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Otnn).HasColumnName(@"OTNN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otsn).HasColumnName(@"OTSN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Othn).HasColumnName(@"OTHN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otnn43).HasColumnName(@"OTNN+").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Abc1).HasColumnName(@"ABC1").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationCreative).HasColumnName(@"EvaluationCreative").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PersonnelUser).HasColumnName(@"PersonnelUser").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Accounting_PettyCash
    public class AccountingPettyCashConfiguration : IEntityTypeConfiguration<AccountingPettyCash>
    {
        public void Configure(EntityTypeBuilder<AccountingPettyCash> builder)
        {
            builder.ToView("Accounting_PettyCash", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PettyCashId).HasColumnName(@"PettyCashID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ActionDate).HasColumnName(@"ActionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ClearStatus).HasColumnName(@"ClearStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ClearBy).HasColumnName(@"ClearBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.AdvanceDate).HasColumnName(@"AdvanceDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.AdvanceAmount).HasColumnName(@"AdvanceAmount").HasColumnType("int").IsRequired();
            builder.Property(x => x.AdvanceRemark).HasColumnName(@"AdvanceRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Currency).HasColumnName(@"Currency").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ExpenseAmount).HasColumnName(@"ExpenseAmount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
        }
    }

    // Accounting_PurchasingOrders
    public class AccountingPurchasingOrderConfiguration : IEntityTypeConfiguration<AccountingPurchasingOrder>
    {
        public void Configure(EntityTypeBuilder<AccountingPurchasingOrder> builder)
        {
            builder.ToView("Accounting_PurchasingOrders", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PurchasingOrderId).HasColumnName(@"PurchasingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.PuchasingDate).HasColumnName(@"PuchasingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderConfirmed).HasColumnName(@"OrderConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.PurchasingRemark).HasColumnName(@"PurchasingRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.OrderBy).HasColumnName(@"OrderBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Currency).HasColumnName(@"Currency").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.OrderEmployeeId).HasColumnName(@"OrderEmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,5)").IsRequired();
            builder.Property(x => x.MoneyTotal).HasColumnName(@"MoneyTotal").HasColumnType("decimal(37,10)").IsRequired(false);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContractExpiredDate).HasColumnName(@"ContractExpiredDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UnitPriceVnd).HasColumnName(@"UnitPriceVND").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.ItemRemark).HasColumnName(@"ItemRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("varchar(9)").IsRequired(false).IsUnicode(false).HasMaxLength(9);
            builder.Property(x => x.SupplierCode).HasColumnName(@"SupplierCode").HasColumnType("varchar(9)").IsRequired(false).IsUnicode(false).HasMaxLength(9);
            builder.Property(x => x.SupplierTaxCode).HasColumnName(@"SupplierTaxCode").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.DeliveryQuantity).HasColumnName(@"DeliveryQuantity").HasColumnType("decimal(18,5)").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
        }
    }

    // Accounting_Revenues
    public class AccountingRevenueConfiguration : IEntityTypeConfiguration<AccountingRevenue>
    {
        public void Configure(EntityTypeBuilder<AccountingRevenue> builder)
        {
            builder.ToView("Accounting_Revenues", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.InvoiceNo).HasColumnName(@"InvoiceNo").HasColumnType("char(30)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.InvoiceDate).HasColumnName(@"InvoiceDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceFromDate).HasColumnName(@"InvoiceFromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceToDate).HasColumnName(@"InvoiceToDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BillingNo).HasColumnName(@"BillingNo").HasColumnType("char(10)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.Uom).HasColumnName(@"UOM").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryPrice).HasColumnName(@"CuryPrice").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryId).HasColumnName(@"curyID").HasColumnType("char(10)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerNameTotal).HasColumnName(@"CustomerNameTotal").HasColumnType("nvarchar(138)").IsRequired(false).HasMaxLength(138);
            builder.Property(x => x.ExtendedAmount).HasColumnName(@"ExtendedAmount").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ServiceType).HasColumnName(@"ServiceType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // Accounting_Revenues_AllCustomers
    public class AccountingRevenuesAllCustomerConfiguration : IEntityTypeConfiguration<AccountingRevenuesAllCustomer>
    {
        public void Configure(EntityTypeBuilder<AccountingRevenuesAllCustomer> builder)
        {
            builder.ToView("Accounting_Revenues_AllCustomers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.TotalRevenue).HasColumnName(@"TotalRevenue").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
        }
    }

    // Accounting_RevenuesLastMonth
    public class AccountingRevenuesLastMonthConfiguration : IEntityTypeConfiguration<AccountingRevenuesLastMonth>
    {
        public void Configure(EntityTypeBuilder<AccountingRevenuesLastMonth> builder)
        {
            builder.ToView("Accounting_RevenuesLastMonth", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.InvoiceNo).HasColumnName(@"InvoiceNo").HasColumnType("char(30)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.InvoiceDate).HasColumnName(@"InvoiceDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceFromDate).HasColumnName(@"InvoiceFromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceToDate).HasColumnName(@"InvoiceToDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BillingNo).HasColumnName(@"BillingNo").HasColumnType("char(10)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("char(15)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.Uom).HasColumnName(@"UOM").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryPrice).HasColumnName(@"CuryPrice").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryId).HasColumnName(@"curyID").HasColumnType("char(10)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
        }
    }

    // Accounting_Revenues_ServicePrice_AllCustomers
    public class AccountingRevenuesServicePriceAllCustomerConfiguration : IEntityTypeConfiguration<AccountingRevenuesServicePriceAllCustomer>
    {
        public void Configure(EntityTypeBuilder<AccountingRevenuesServicePriceAllCustomer> builder)
        {
            builder.ToView("Accounting_Revenues_ServicePrice_AllCustomers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CusId).HasColumnName(@"CusID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.InvoiceNo).HasColumnName(@"InvoiceNo").HasColumnType("char(30)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.InvoiceDate).HasColumnName(@"InvoiceDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceFromDate).HasColumnName(@"InvoiceFromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceToDate).HasColumnName(@"InvoiceToDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BillingNo).HasColumnName(@"BillingNo").HasColumnType("char(10)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.Uom).HasColumnName(@"UOM").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryPrice).HasColumnName(@"CuryPrice").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryId).HasColumnName(@"curyID").HasColumnType("char(10)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30);
        }
    }

    // Accounting_Revenues_Top10
    public class AccountingRevenuesTop10Configuration : IEntityTypeConfiguration<AccountingRevenuesTop10>
    {
        public void Configure(EntityTypeBuilder<AccountingRevenuesTop10> builder)
        {
            builder.ToView("Accounting_Revenues_Top10", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.TotalRevenue).HasColumnName(@"TotalRevenue").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
        }
    }

    // Accounting_Revenues_Top10_Weight
    public class AccountingRevenuesTop10WeightConfiguration : IEntityTypeConfiguration<AccountingRevenuesTop10Weight>
    {
        public void Configure(EntityTypeBuilder<AccountingRevenuesTop10Weight> builder)
        {
            builder.ToView("Accounting_Revenues_Top10_Weight", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.TotalRevenue).HasColumnName(@"TotalRevenue").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TotalWpp).HasColumnName(@"TotalWPP").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
        }
    }

    // Admin_Difference_AD_Current
    public class AdminDifferenceAdCurrentConfiguration : IEntityTypeConfiguration<AdminDifferenceAdCurrent>
    {
        public void Configure(EntityTypeBuilder<AdminDifferenceAdCurrent> builder)
        {
            builder.ToView("Admin_Difference_AD_Current", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
        }
    }

    // AirTemperature
    public class AirTemperatureConfiguration : IEntityTypeConfiguration<AirTemperature>
    {
        public void Configure(EntityTypeBuilder<AirTemperature> builder)
        {
            builder.ToView("AirTemperature", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.AirTempRecordId).HasColumnName(@"AirTempRecordID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RoomName).HasColumnName(@"RoomName").HasColumnType("nvarchar(2)").IsRequired().HasMaxLength(2);
            builder.Property(x => x.RecordTime).HasColumnName(@"RecordTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AirTemperature_).HasColumnName(@"AirTemperature").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.SetPoint).HasColumnName(@"SetPoint").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TemperatureSetPointTo).HasColumnName(@"TemperatureSetPointTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Humidity).HasColumnName(@"Humidity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumiditySetPointFrom).HasColumnName(@"HumiditySetPointFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumiditySetPointTo).HasColumnName(@"HumiditySetPointTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // Aisles
    public class AisleConfiguration : IEntityTypeConfiguration<Aisle>
    {
        public void Configure(EntityTypeBuilder<Aisle> builder)
        {
            builder.ToTable("Aisles", "dbo");
            builder.HasKey(x => x.AisleRoomId).HasName("PK_Aisles").IsClustered();

            builder.Property(x => x.AisleRoomId).HasColumnName(@"AisleRoomID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Aisle_).HasColumnName(@"Aisle").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.NumberOfBays).HasColumnName(@"NumberOfBays").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.NumberOfDeeps).HasColumnName(@"NumberOfDeeps").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.NumberOfHighs).HasColumnName(@"NumberOfHighs").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AisleRemark).HasColumnName(@"AisleRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // Analysis_StockOnHandWeekly
    public class AnalysisStockOnHandWeeklyConfiguration : IEntityTypeConfiguration<AnalysisStockOnHandWeekly>
    {
        public void Configure(EntityTypeBuilder<AnalysisStockOnHandWeekly> builder)
        {
            builder.ToView("Analysis_StockOnHandWeekly", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.OccupiedPallets).HasColumnName(@"OccupiedPallets").HasColumnType("int").IsRequired(false);
        }
    }

    // AR_Customer
    public class ArCustomerConfiguration : IEntityTypeConfiguration<ArCustomer>
    {
        public void Configure(EntityTypeBuilder<ArCustomer> builder)
        {
            builder.ToView("AR_Customer", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustId).HasColumnName(@"CustId").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.CustName).HasColumnName(@"CustName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.AccrRevAcct).HasColumnName(@"AccrRevAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.AccrRevSub).HasColumnName(@"AccrRevSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.Addr1).HasColumnName(@"Addr1").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Addr2).HasColumnName(@"Addr2").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ArAcct).HasColumnName(@"ArAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ArSub).HasColumnName(@"ArSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.Attn).HasColumnName(@"Attn").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.BillAddr1).HasColumnName(@"BillAddr1").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.BillAddr2).HasColumnName(@"BillAddr2").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.BillAttn).HasColumnName(@"BillAttn").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.BillCity).HasColumnName(@"BillCity").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.BillCountry).HasColumnName(@"BillCountry").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.BillFax).HasColumnName(@"BillFax").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.BillName).HasColumnName(@"BillName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.BillPhone).HasColumnName(@"BillPhone").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.BillSalut).HasColumnName(@"BillSalut").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.BillState).HasColumnName(@"BillState").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.BillZip).HasColumnName(@"BillZip").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ClassId).HasColumnName(@"ClassId").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CogsAcct).HasColumnName(@"COGSAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CogsSub).HasColumnName(@"COGSSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.MiscAcct).HasColumnName(@"MiscAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MiscSub).HasColumnName(@"MiscSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.CrLmt).HasColumnName(@"CrLmt").HasColumnType("float").IsRequired();
            builder.Property(x => x.CrRule).HasColumnName(@"CrRule").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.CuryId).HasColumnName(@"CuryId").HasColumnType("varchar(4)").IsRequired().IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.CuryPrcLvlRtTp).HasColumnName(@"CuryPrcLvlRtTp").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.CuryRateType).HasColumnName(@"CuryRateType").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.CustFillPriority).HasColumnName(@"CustFillPriority").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.DfltShipToId).HasColumnName(@"DfltShipToId").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DiscAcct).HasColumnName(@"DiscAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DiscSub).HasColumnName(@"DiscSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.EMailAddr).HasColumnName(@"EMailAddr").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Exported).HasColumnName(@"Exported").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.FrtAcct).HasColumnName(@"FrtAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.FrtSub).HasColumnName(@"FrtSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.GracePer).HasColumnName(@"GracePer").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.LineDiscAcct).HasColumnName(@"LineDiscAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LineDiscSub).HasColumnName(@"LineDiscSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.NodeId).HasColumnName(@"NodeID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.NodeLevel).HasColumnName(@"NodeLevel").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ParentRecordId).HasColumnName(@"ParentRecordID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PerNbr).HasColumnName(@"PerNbr").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.PrePayAcct).HasColumnName(@"PrePayAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.PrePaySub).HasColumnName(@"PrePaySub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.PriceClassId).HasColumnName(@"PriceClassID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Salut).HasColumnName(@"Salut").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.ShipCmplt).HasColumnName(@"ShipCmplt").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SlsAcct).HasColumnName(@"SlsAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SlsperId).HasColumnName(@"SlsperId").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SlsSub).HasColumnName(@"SlsSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.StmtCycleId).HasColumnName(@"StmtCycleId").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.TaxDflt).HasColumnName(@"TaxDflt").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.TaxId00).HasColumnName(@"TaxID00").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TaxId01).HasColumnName(@"TaxID01").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TaxId02).HasColumnName(@"TaxID02").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TaxId03).HasColumnName(@"TaxID03").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TaxLocId).HasColumnName(@"TaxLocId").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.TaxRegNbr).HasColumnName(@"TaxRegNbr").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Terms).HasColumnName(@"Terms").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Territory).HasColumnName(@"Territory").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TradeDisc).HasColumnName(@"TradeDisc").HasColumnType("float").IsRequired();
            builder.Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SupId).HasColumnName(@"SupID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProExpAcct).HasColumnName(@"ProExpAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProExpSub).HasColumnName(@"ProExpSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.ProIncomeAcct).HasColumnName(@"ProIncomeAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProIncomeSub).HasColumnName(@"ProIncomeSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.DeliveryId).HasColumnName(@"DeliveryID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LUpdProg).HasColumnName(@"LUpd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LUpdUser).HasColumnName(@"LUpd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CrtdDateTime).HasColumnName(@"Crtd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CrtdProg).HasColumnName(@"Crtd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.CrtdUser).HasColumnName(@"Crtd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Tstamp).HasColumnName(@"tstamp").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
            builder.Property(x => x.ShopType).HasColumnName(@"ShopType").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Channel).HasColumnName(@"Channel").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Area).HasColumnName(@"Area").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Territory2).HasColumnName(@"Territory2").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.District).HasColumnName(@"District").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.CoverageType).HasColumnName(@"CoverageType").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CustomerGroup).HasColumnName(@"CustomerGroup").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DfltWhseLoc).HasColumnName(@"DfltWhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Hamlet).HasColumnName(@"Hamlet").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.Street).HasColumnName(@"Street").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.HouseNbr).HasColumnName(@"HouseNbr").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.BillHamlet).HasColumnName(@"BillHamlet").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.BillStreet).HasColumnName(@"BillStreet").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.BillHouseNbr).HasColumnName(@"BillHouseNbr").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.BillDistrict).HasColumnName(@"BillDistrict").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.DfltBillToId).HasColumnName(@"DfltBillToId").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
        }
    }

    // Assignments
    public class AssignmentConfiguration : IEntityTypeConfiguration<Assignment>
    {
        public void Configure(EntityTypeBuilder<Assignment> builder)
        {
            builder.ToTable("Assignments", "dbo");
            builder.HasKey(x => x.AssignmentId).HasName("PK_Assigments").IsClustered();

            builder.Property(x => x.AssignmentId).HasColumnName(@"AssignmentID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AssigmentDate).HasColumnName(@"AssigmentDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.AssignedTo).HasColumnName(@"AssignedTo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OtherJobDefinitionId).HasColumnName(@"OtherJobDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AssignmentDescription).HasColumnName(@"AssignmentDescription").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.DueDate).HasColumnName(@"DueDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EmployeeFeedback).HasColumnName(@"EmployeeFeedback").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.CompleteDate).HasColumnName(@"CompleteDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AssigmentReject).HasColumnName(@"AssigmentReject").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ConfirmBy).HasColumnName(@"ConfirmBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TaskProgress).HasColumnName(@"TaskProgress").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AssignedTo2).HasColumnName(@"AssignedTo2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AssignedTo3).HasColumnName(@"AssignedTo3").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AssignmentRead).HasColumnName(@"AssignmentRead").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AssignmentReadTime).HasColumnName(@"AssignmentReadTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.ConfidentialLevel).HasColumnName(@"ConfidentialLevel").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.AssignmentNumber).HasColumnName(@"AssignmentNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
        }
    }

    // AssignmentDetails
    public class AssignmentDetailConfiguration : IEntityTypeConfiguration<AssignmentDetail>
    {
        public void Configure(EntityTypeBuilder<AssignmentDetail> builder)
        {
            builder.ToTable("AssignmentDetails", "dbo");
            builder.HasKey(x => x.NoNameJobId).HasName("PK__AssignmentDetail__7BC6FD4D").IsClustered();

            builder.Property(x => x.NoNameJobId).HasColumnName(@"NoNameJobID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NoNameHobNumber).HasColumnName(@"NoNameHobNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.NoNameJobDate).HasColumnName(@"NoNameJobDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.NoNameJobRemark).HasColumnName(@"NoNameJobRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.NoNameJobDuration).HasColumnName(@"NoNameJobDuration").HasColumnType("real").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
        }
    }

    // AssignmentEmployees
    public class AssignmentEmployeeConfiguration : IEntityTypeConfiguration<AssignmentEmployee>
    {
        public void Configure(EntityTypeBuilder<AssignmentEmployee> builder)
        {
            builder.ToTable("AssignmentEmployees", "dbo");
            builder.HasKey(x => x.AssignmentEmployeeId).HasName("PK_AssignmentEmployees");

            builder.Property(x => x.AssignmentEmployeeId).HasColumnName(@"AssignmentEmployeeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Qhseid).HasColumnName(@"QHSEID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.AssignToUser).HasColumnName(@"AssignToUser").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);

            builder.HasIndex(x => new { x.Qhseid, x.EmployeeId, x.OrderNumber, x.CreatedBy }).HasName("IX_AssignmentEmployees_1");
        }
    }

    // ATM_SHIPMENT_STOP
    public class AtmShipmentStopConfiguration : IEntityTypeConfiguration<AtmShipmentStop>
    {
        public void Configure(EntityTypeBuilder<AtmShipmentStop> builder)
        {
            builder.ToTable("ATM_SHIPMENT_STOP", "dbo");
            builder.HasKey(x => x.RowPointer);

            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RecordDate).HasColumnName(@"RecordDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RowPointer).HasColumnName(@"RowPointer").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.NoteExistsFlag).HasColumnName(@"NoteExistsFlag").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.InWorkflow).HasColumnName(@"InWorkflow").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.ShipmentGid).HasColumnName(@"SHIPMENT_GID").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101);
            builder.Property(x => x.StopNum).HasColumnName(@"STOP_NUM").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PlannedArrival).HasColumnName(@"PLANNED_ARRIVAL").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PlannedDeparture).HasColumnName(@"PLANNED_DEPARTURE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StopType).HasColumnName(@"STOP_TYPE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LocationGid).HasColumnName(@"LOCATION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.LocationName).HasColumnName(@"LOCATION_NAME").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.AddressLine).HasColumnName(@"ADDRESS_LINE").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.AtmShipmentGid).HasColumnName(@"ATM_SHIPMENT_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.AtmShipmentId).HasColumnName(@"ATM_SHIPMENT_ID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Cdcd).HasColumnName(@"CDCD").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.GiaoLau).HasColumnName(@"GIAO_LAU").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CamGio).HasColumnName(@"CAM_GIO").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CamTai).HasColumnName(@"CAM_TAI").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.KiemDem).HasColumnName(@"KIEM_DEM").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.DiemKho).HasColumnName(@"DIEM_KHO").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.OrderreleaseId).HasColumnName(@"Orderrelease_id").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.OrderreleaseGid).HasColumnName(@"Orderrelease_gid").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);

            builder.HasIndex(x => x.RowPointer).HasName("IX_ATM_SHIPMENT_STOP_RowPointer").IsUnique();
        }
    }

    // Attachments
    public class AttachmentConfiguration : IEntityTypeConfiguration<Attachment>
    {
        public void Configure(EntityTypeBuilder<Attachment> builder)
        {
            builder.ToTable("Attachments", "dbo");
            builder.HasKey(x => x.AttachmentId).HasName("PK_Attachments");

            builder.Property(x => x.AttachmentId).HasColumnName(@"AttachmentID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.AttachmentDescription).HasColumnName(@"AttachmentDescription").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.AttachmentFile).HasColumnName(@"AttachmentFile").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.AttachmentDate).HasColumnName(@"AttachmentDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.AttachmentUser).HasColumnName(@"AttachmentUser").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AttachmentFileSize).HasColumnName(@"AttachmentFileSize").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ConfidentialLevel).HasColumnName(@"ConfidentialLevel").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OriginalFileName).HasColumnName(@"OriginalFileName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.PrintStatus).HasColumnName(@"PrintStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.FileData).HasColumnName(@"FileData").HasColumnType("binary(7900)").IsRequired(false).HasMaxLength(7900);

            builder.HasIndex(x => x.OrderNumber).HasName("IX_Attachments");
        }
    }

    // Authorizations
    public class AuthorizationConfiguration : IEntityTypeConfiguration<Authorization>
    {
        public void Configure(EntityTypeBuilder<Authorization> builder)
        {
            builder.ToTable("Authorizations", "dbo");
            builder.HasKey(x => x.LevelOfAuthorization).HasName("PK_Authorizations").IsClustered();

            builder.Property(x => x.LevelOfAuthorization).HasColumnName(@"LevelOfAuthorization").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
        }
    }

    // BarcodeScanDetailID
    public class BarcodeScanDetailIdConfiguration : IEntityTypeConfiguration<BarcodeScanDetailId>
    {
        public void Configure(EntityTypeBuilder<BarcodeScanDetailId> builder)
        {
            builder.ToView("BarcodeScanDetailID", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ScannedBy).HasColumnName(@"ScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // BarcodeScanDetailID2
    public class BarcodeScanDetailId2Configuration : IEntityTypeConfiguration<BarcodeScanDetailId2>
    {
        public void Configure(EntityTypeBuilder<BarcodeScanDetailId2> builder)
        {
            builder.ToView("BarcodeScanDetailID2", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ScannedBy).HasColumnName(@"ScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // BarcodeScan_OrderDetails
    public class BarcodeScanOrderDetailConfiguration : IEntityTypeConfiguration<BarcodeScanOrderDetail>
    {
        public void Configure(EntityTypeBuilder<BarcodeScanOrderDetail> builder)
        {
            builder.ToTable("BarcodeScan_OrderDetails", "dbo");
            builder.HasKey(x => x.BarcodeScanDetailId).HasName("PK_BarcodeScan_OrderDetails");

            builder.Property(x => x.BarcodeScanDetailId).HasColumnName(@"BarcodeScanDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("nvarchar(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.BarcodeDataScanned).HasColumnName(@"BarcodeDataScanned").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ScannedBy).HasColumnName(@"ScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Result).HasColumnName(@"Result").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IsRecordNew).HasColumnName(@"IsRecordNew").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ManualChecked).HasColumnName(@"ManualChecked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ScannedType).HasColumnName(@"ScannedType").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DataId).HasColumnName(@"Data_ID").HasColumnType("uniqueidentifier").IsRequired(false);

            builder.HasIndex(x => x.OrderNumber).HasName("IX_BarcodeScan_OrderDetails");
            builder.HasIndex(x => x.OrderType).HasName("IX_BarcodeScan_OrderDetails_2");
        }
    }

    // BarcodeScan_Prefix
    public class BarcodeScanPrefixConfiguration : IEntityTypeConfiguration<BarcodeScanPrefix>
    {
        public void Configure(EntityTypeBuilder<BarcodeScanPrefix> builder)
        {
            builder.ToTable("BarcodeScan_Prefix", "dbo");
            builder.HasKey(x => x.PrefixBarcodeId).HasName("PK_Prefix_Barcode").IsClustered();

            builder.Property(x => x.PrefixBarcodeId).HasColumnName(@"Prefix_BarcodeID").HasColumnType("nvarchar(2)").IsRequired().HasMaxLength(2).ValueGeneratedNever();
            builder.Property(x => x.PrefixBarcodeDescription).HasColumnName(@"Prefix_Barcode_Description").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // Bays
    public class BayConfiguration : IEntityTypeConfiguration<Bay>
    {
        public void Configure(EntityTypeBuilder<Bay> builder)
        {
            builder.ToTable("Bays", "dbo");
            builder.HasKey(x => x.BayId).HasName("PK_Bays").IsClustered();

            builder.Property(x => x.BayId).HasColumnName(@"BayID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Bay_).HasColumnName(@"Bay").HasColumnType("int").IsRequired();
            builder.Property(x => x.BayDescription).HasColumnName(@"BayDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.NextBayId).HasColumnName(@"NextBayID").HasColumnType("int").IsRequired(false);
        }
    }

    // Billings
    public class BillingConfiguration : IEntityTypeConfiguration<Billing>
    {
        public void Configure(EntityTypeBuilder<Billing> builder)
        {
            builder.ToTable("Billings", "dbo");
            builder.HasKey(x => x.BillingId).HasName("PK_Billings");

            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BillingDate).HasColumnName(@"BillingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingFromDate).HasColumnName(@"BillingFromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingToDate).HasColumnName(@"BillingToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BillingRemark).HasColumnName(@"BillingRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Selected).HasColumnName(@"Selected").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Invoiced).HasColumnName(@"Invoiced").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InvoiceRemark).HasColumnName(@"InvoiceRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.InvoiceDate).HasColumnName(@"InvoiceDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.InvoiceInputBy).HasColumnName(@"InvoiceInputBy").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.InvoiceInputDate).HasColumnName(@"InvoiceInputDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BillingCreatedTime).HasColumnName(@"BillingCreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BillingCreatedBy).HasColumnName(@"BillingCreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.BillingNumber).HasColumnName(@"BillingNumber").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.BillingLocalId).HasColumnName(@"BillingLocalID").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.CustomerId).HasName("IX_Billings");
        }
    }

    // BillingByOvertimeDetails
    public class BillingByOvertimeDetailConfiguration : IEntityTypeConfiguration<BillingByOvertimeDetail>
    {
        public void Configure(EntityTypeBuilder<BillingByOvertimeDetail> builder)
        {
            builder.ToTable("BillingByOvertimeDetails", "dbo");
            builder.HasKey(x => x.BillingByOverTimeId).HasName("PK_BillingByOvertimeDetails").IsClustered();

            builder.Property(x => x.BillingByOverTimeId).HasColumnName(@"BillingByOverTimeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OtherServiceId).HasColumnName(@"OtherServiceID").HasColumnType("int").IsRequired(false);
        }
    }

    // BillingDaily
    public class BillingDailyConfiguration : IEntityTypeConfiguration<BillingDaily>
    {
        public void Configure(EntityTypeBuilder<BillingDaily> builder)
        {
            builder.ToTable("BillingDaily", "dbo");
            builder.HasKey(x => x.BillingDailyId).HasName("PK_BillingDaily").IsClustered();

            builder.Property(x => x.BillingDailyId).HasColumnName(@"BillingDailyID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BillingDailyNumber).HasColumnName(@"BillingDailyNumber").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.BillingDailyLocalId).HasColumnName(@"BillingDailyLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BillingDailyDate).HasColumnName(@"BillingDailyDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.BillingDailyRemark).HasColumnName(@"BillingDailyRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // BillingDailyDetails
    public class BillingDailyDetailConfiguration : IEntityTypeConfiguration<BillingDailyDetail>
    {
        public void Configure(EntityTypeBuilder<BillingDailyDetail> builder)
        {
            builder.ToTable("BillingDailyDetails", "dbo");
            builder.HasKey(x => x.BillingDailyDetailId).HasName("PK_BillingDailyDetails").IsClustered();

            builder.Property(x => x.BillingDailyDetailId).HasColumnName(@"BillingDailyDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BillingDailyId).HasColumnName(@"BillingDailyID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BillingDailyDetailRemark).HasColumnName(@"BillingDailyDetailRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Cartons).HasColumnName(@"Cartons").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.Vat).HasColumnName(@"VAT").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.AdjustmentQuantity).HasColumnName(@"AdjustmentQuantity").HasColumnType("decimal(13,3)").IsRequired(false);
        }
    }

    // BillingDetails
    public class BillingDetailConfiguration : IEntityTypeConfiguration<BillingDetail>
    {
        public void Configure(EntityTypeBuilder<BillingDetail> builder)
        {
            builder.ToTable("BillingDetails", "dbo");
            builder.HasKey(x => x.BillingDetailId).HasName("PK_BillingDetails");

            builder.Property(x => x.BillingDetailId).HasColumnName(@"BillingDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ManualUpdate).HasColumnName(@"ManualUpdate").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Vat).HasColumnName(@"VAT").HasColumnType("tinyint").IsRequired();

            builder.HasIndex(x => new { x.BillingId, x.ServicesDefinitionId }).HasName("IX_BillingDetails");
        }
    }

    // BillingDetailAdjectments
    public class BillingDetailAdjectmentConfiguration : IEntityTypeConfiguration<BillingDetailAdjectment>
    {
        public void Configure(EntityTypeBuilder<BillingDetailAdjectment> builder)
        {
            builder.ToTable("BillingDetailAdjectments", "dbo");
            builder.HasKey(x => new { x.So, x.Item }).HasName("PK__BillingD__DBDEA5C19322CB77").IsClustered();

            builder.Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired();
            builder.Property(x => x.So).HasColumnName(@"SO").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.Item).HasColumnName(@"Item").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired();
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.WeightsTotal).HasColumnName(@"WeightsTotal").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.ActW).HasColumnName(@"ActW").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.ActQty).HasColumnName(@"ActQty").HasColumnType("int").IsRequired();
            builder.Property(x => x.StatusConfirm).HasColumnName(@"StatusConfirm").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReasonCode).HasColumnName(@"ReasonCode").HasColumnType("int").IsRequired();
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Tranporter).HasColumnName(@"Tranporter").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.AtmOrderReleaseId).HasColumnName(@"ATM_OrderReleaseID").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Do).HasColumnName(@"DO").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.QtyConfirm).HasColumnName(@"QtyConfirm").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightConfirm).HasColumnName(@"WeightConfirm").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.UpdateBy).HasColumnName(@"UpdateBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ConfirmBy).HasColumnName(@"ConfirmBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // BillingDetailBreakDown
    public class BillingDetailBreakDownConfiguration : IEntityTypeConfiguration<BillingDetailBreakDown>
    {
        public void Configure(EntityTypeBuilder<BillingDetailBreakDown> builder)
        {
            builder.ToView("BillingDetailBreakDown", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.BillingDetailBreakdownId).HasColumnName(@"BillingDetailBreakdownID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BeginC).HasColumnName(@"BeginC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InC).HasColumnName(@"InC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutC).HasColumnName(@"OutC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CloseC).HasColumnName(@"CloseC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BeginW).HasColumnName(@"BeginW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.InW).HasColumnName(@"InW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.OutW).HasColumnName(@"OutW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CloseW).HasColumnName(@"CloseW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BeginP).HasColumnName(@"BeginP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InP).HasColumnName(@"InP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutP).HasColumnName(@"OutP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CloseP).HasColumnName(@"CloseP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BillingDetailBreakdownRemark).HasColumnName(@"BillingDetailBreakdownRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.InCNofee).HasColumnName(@"InCNofee").HasColumnType("decimal(10,0)").IsRequired(false);
            builder.Property(x => x.InWNofee).HasColumnName(@"InWNofee").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.OutCNofee).HasColumnName(@"OutCNofee").HasColumnType("decimal(10,0)").IsRequired(false);
            builder.Property(x => x.OutWNofee).HasColumnName(@"OutWNofee").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.StorageWNofee).HasColumnName(@"StorageWNofee").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.StorageCNofee).HasColumnName(@"StorageCNofee").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.StoragePNofee).HasColumnName(@"StoragePNofee").HasColumnType("float").IsRequired(false);
        }
    }

    // BillingSummary
    public class BillingSummaryConfiguration : IEntityTypeConfiguration<BillingSummary>
    {
        public void Configure(EntityTypeBuilder<BillingSummary> builder)
        {
            builder.ToTable("BillingSummary", "dbo");
            builder.HasKey(x => x.BillingSummaryId).HasName("PK_BillingSUmmary").IsClustered();

            builder.Property(x => x.BillingSummaryId).HasColumnName(@"BillingSummaryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Period).HasColumnName(@"Period").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TotalCustomerCount).HasColumnName(@"TotalCustomerCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NonBilledCustomerCount).HasColumnName(@"NonBilledCustomerCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();

            builder.HasIndex(x => x.BillingSummaryId).HasName("IX_BillingSummary");
        }
    }

    // BillingSummaryDetails
    public class BillingSummaryDetailConfiguration : IEntityTypeConfiguration<BillingSummaryDetail>
    {
        public void Configure(EntityTypeBuilder<BillingSummaryDetail> builder)
        {
            builder.ToTable("BillingSummaryDetails", "dbo");
            builder.HasKey(x => x.BillingSummaryDetailId).HasName("PK_tmpBillingSummary").IsClustered();

            builder.Property(x => x.BillingSummaryDetailId).HasColumnName(@"BillingSummaryDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BillingRemark).HasColumnName(@"BillingRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.BillingSummaryId).HasColumnName(@"BillingSummaryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerCategory).HasColumnName(@"CustomerCategory").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.LastBillingId).HasColumnName(@"LastBillingID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.BillingSummary).WithMany(b => b.BillingSummaryDetails).HasForeignKey(c => c.BillingSummaryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BillingSummaryDetails_BillingSummary");

            builder.HasIndex(x => x.BillingSummaryId).HasName("IX_BillingSummaryDetails");
        }
    }

    // BillOfMaterials
    public class BillOfMaterialConfiguration : IEntityTypeConfiguration<BillOfMaterial>
    {
        public void Configure(EntityTypeBuilder<BillOfMaterial> builder)
        {
            builder.ToTable("BillOfMaterials", "dbo");
            builder.HasKey(x => x.BillOfMaterialId).HasName("PK_BillOfMaterials").IsClustered();

            builder.Property(x => x.BillOfMaterialId).HasColumnName(@"BillOfMaterialID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.FinishProductId).HasColumnName(@"Finish_ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.FinishQuantity).HasColumnName(@"Finish_Quantity").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.BomDescription).HasColumnName(@"BOMDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.BomType).HasColumnName(@"BOMType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductionStdCost).HasColumnName(@"Production_Std_Cost").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.PlannedAverageProductionSize).HasColumnName(@"Planned_Average_Production_Size").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.ProjectName).HasColumnName(@"ProjectName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BillOfMaterialLocalId).HasColumnName(@"BillOfMaterialLocalID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.BillOfMaterialNumber).HasColumnName(@"BillOfMaterialNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
        }
    }

    // BillOfMaterialDetails
    public class BillOfMaterialDetailConfiguration : IEntityTypeConfiguration<BillOfMaterialDetail>
    {
        public void Configure(EntityTypeBuilder<BillOfMaterialDetail> builder)
        {
            builder.ToTable("BillOfMaterialDetails", "dbo");
            builder.HasKey(x => x.BillOfMaterialDetailId).HasName("PK_BillOfMaterialDetails").IsClustered();

            builder.Property(x => x.BillOfMaterialDetailId).HasColumnName(@"BillOfMaterialDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BillOfMaterialId).HasColumnName(@"BillOfMaterialID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.MaterialProductId).HasColumnName(@"Material_ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.MaterialQuantity).HasColumnName(@"Material_Quantity").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // BlastFreezers
    public class BlastFreezerConfiguration : IEntityTypeConfiguration<BlastFreezer>
    {
        public void Configure(EntityTypeBuilder<BlastFreezer> builder)
        {
            builder.ToTable("BlastFreezers", "dbo");
            builder.HasKey(x => x.BlastFreezerId).HasName("PK_BlastFreezersTemperature").IsClustered();

            builder.Property(x => x.BlastFreezerId).HasColumnName(@"BlastFreezerID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BlastFreezerRecordNumber).HasColumnName(@"BlastFreezerRecordNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateIn).HasColumnName(@"DateIn").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.BlastFreezerRoomId).HasColumnName(@"BlastFreezerRoomID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BlastFreezerCreateTime).HasColumnName(@"BlastFreezerCreateTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StartLoadingTime).HasColumnName(@"StartLoadingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndLoadingTime).HasColumnName(@"EndLoadingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BlastFreezerUloadingTime).HasColumnName(@"BlastFreezerUloadingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BlastFreezerLoadingBy).HasColumnName(@"BlastFreezerLoadingBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductDetailsRemark).HasColumnName(@"ProductDetailsRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TempIn).HasColumnName(@"TempIn").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.TempOut).HasColumnName(@"TempOut").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BlastFreezerConfirm).HasColumnName(@"BlastFreezerConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.StartRunTime).HasColumnName(@"StartRunTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndRunTime).HasColumnName(@"EndRunTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StartRunUser).HasColumnName(@"StartRunUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EndRunUser).HasColumnName(@"EndRunUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BlastFreezerRunningRemark).HasColumnName(@"BlastFreezerRunningRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
        }
    }

    // BlastFreezerDetails
    public class BlastFreezerDetailConfiguration : IEntityTypeConfiguration<BlastFreezerDetail>
    {
        public void Configure(EntityTypeBuilder<BlastFreezerDetail> builder)
        {
            builder.ToTable("BlastFreezerDetails", "dbo");
            builder.HasKey(x => x.BlastFreezerDetailsId).HasName("PK_BlastFreezerTemperatureDetails").IsClustered();

            builder.Property(x => x.BlastFreezerDetailsId).HasColumnName(@"BlastFreezerDetailsID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BlastFreezerId).HasColumnName(@"BlastFreezerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.RecordTime).HasColumnName(@"RecordTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.SampleNumber).HasColumnName(@"SampleNumber").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.SampleTemp).HasColumnName(@"SampleTemp").HasColumnType("float").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.BlastFreezer).WithMany(b => b.BlastFreezerDetails).HasForeignKey(c => c.BlastFreezerId).HasConstraintName("FK_BlastFreezerDetails_BlastFreezers");
        }
    }

    // BusinessTrips
    public class BusinessTripConfiguration : IEntityTypeConfiguration<BusinessTrip>
    {
        public void Configure(EntityTypeBuilder<BusinessTrip> builder)
        {
            builder.ToTable("BusinessTrips", "dbo");
            builder.HasKey(x => x.BusinessTripId).HasName("PK_BusinessTrips").IsClustered();

            builder.Property(x => x.BusinessTripId).HasColumnName(@"BusinessTripID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BusinessTripNumber).HasColumnName(@"BusinessTripNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeName).HasColumnName(@"EmployeeName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Endtime).HasColumnName(@"Endtime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BikeUse).HasColumnName(@"BikeUse").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BikeMilage).HasColumnName(@"BikeMilage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BikeParking).HasColumnName(@"BikeParking").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ParkingPrice).HasColumnName(@"ParkingPrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WhereTo).HasColumnName(@"WhereTo").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Purpose).HasColumnName(@"Purpose").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.LunchRequired).HasColumnName(@"LunchRequired").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AuthorisedNameBy).HasColumnName(@"AuthorisedNameBy").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.AuthorisedTime).HasColumnName(@"AuthorisedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TripConfirmed).HasColumnName(@"TripConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.GuardConfirmed).HasColumnName(@"GuardConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.GuardTime).HasColumnName(@"GuardTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AuthorisedCreated).HasColumnName(@"AuthorisedCreated").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.BusinessTripCategory).HasColumnName(@"BusinessTripCategory").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PhoneUsed).HasColumnName(@"PhoneUsed").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // BusinessTripPrices
    public class BusinessTripPriceConfiguration : IEntityTypeConfiguration<BusinessTripPrice>
    {
        public void Configure(EntityTypeBuilder<BusinessTripPrice> builder)
        {
            builder.ToTable("BusinessTripPrices", "dbo");
            builder.HasKey(x => x.BusinessTripPriceId).HasName("PK_PetrolPrices").IsClustered();

            builder.Property(x => x.BusinessTripPriceId).HasColumnName(@"BusinessTripPriceID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BusinessTripPriceDate).HasColumnName(@"BusinessTripPriceDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.PetrolPrice).HasColumnName(@"PetrolPrice").HasColumnType("real").IsRequired();
            builder.Property(x => x.LunchPrice).HasColumnName(@"LunchPrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ParkPrice).HasColumnName(@"ParkPrice").HasColumnType("real").IsRequired();
            builder.Property(x => x.RequiredDescription).HasColumnName(@"RequiredDescription").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Locked).HasColumnName(@"Locked").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => x.BusinessTripPriceDate).HasName("IX_BusinessTripPrices").IsUnique();
        }
    }

    // CalendarDates
    public class CalendarDateConfiguration : IEntityTypeConfiguration<CalendarDate>
    {
        public void Configure(EntityTypeBuilder<CalendarDate> builder)
        {
            builder.ToTable("CalendarDates", "dbo");
            builder.HasKey(x => x.CalendarDateId).HasName("PK_CustomerBookingDates").IsClustered();

            builder.Property(x => x.CalendarDateId).HasColumnName(@"CalendarDateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CalendarDate_).HasColumnName(@"CalendarDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Week).HasColumnName(@"Week").HasColumnType("tinyint").IsRequired(false);
        }
    }

    // CarBookings
    public class CarBookingConfiguration : IEntityTypeConfiguration<CarBooking>
    {
        public void Configure(EntityTypeBuilder<CarBooking> builder)
        {
            builder.ToTable("CarBookings", "dbo");
            builder.HasKey(x => x.CarBookingId).HasName("PK_BookingCars").IsClustered();

            builder.Property(x => x.CarBookingId).HasColumnName(@"CarBookingID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Departure).HasColumnName(@"Departure").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Destination).HasColumnName(@"Destination").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OtherProvince).HasColumnName(@"OtherProvince").HasColumnType("bit").IsRequired(false);
        }
    }

    // Categories
    public class CategoryConfiguration : IEntityTypeConfiguration<Category>
    {
        public void Configure(EntityTypeBuilder<Category> builder)
        {
            builder.ToTable("Categories", "dbo");
            builder.HasKey(x => x.CategoryId).HasName("PK__Categories__56D56FC0").IsClustered();

            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CategoryDescription).HasColumnName(@"CategoryDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // CheckInOut
    public class CheckInOutConfiguration : IEntityTypeConfiguration<CheckInOut>
    {
        public void Configure(EntityTypeBuilder<CheckInOut> builder)
        {
            builder.ToTable("CheckInOut", "dbo");
            builder.HasKey(x => x.CheckInOutId).HasName("PK_CheckInOut").IsClustered();

            builder.Property(x => x.CheckInOutId).HasColumnName(@"CheckInOutID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserFullCode).HasColumnName(@"UserFullCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserEnrollNumber).HasColumnName(@"UserEnrollNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TimeDate).HasColumnName(@"TimeDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TimeStr).HasColumnName(@"TimeStr").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TimeType).HasColumnName(@"TimeType").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.TimeSource).HasColumnName(@"TimeSource").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.MachineNo).HasColumnName(@"MachineNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CardNo).HasColumnName(@"CardNo").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TimeInOut).HasColumnName(@"TimeInOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MachineNameNo).HasColumnName(@"MachineNameNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            builder.HasIndex(x => x.UserFullCode).HasName("IX_CheckInOut");
        }
    }

    // Classified_Categories
    public class ClassifiedCategoryConfiguration : IEntityTypeConfiguration<ClassifiedCategory>
    {
        public void Configure(EntityTypeBuilder<ClassifiedCategory> builder)
        {
            builder.ToTable("Classified_Categories", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Classified_Categories").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int").IsRequired(false);
        }
    }

    // ClosedPeriods
    public class ClosedPeriodConfiguration : IEntityTypeConfiguration<ClosedPeriod>
    {
        public void Configure(EntityTypeBuilder<ClosedPeriod> builder)
        {
            builder.ToTable("ClosedPeriods", "dbo");
            builder.HasKey(x => x.PeriodId).HasName("PK_ClosedPeriods").IsClustered();

            builder.Property(x => x.PeriodId).HasColumnName(@"PeriodID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CloseDate).HasColumnName(@"CloseDate").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // Combos
    public class ComboConfiguration : IEntityTypeConfiguration<Combo>
    {
        public void Configure(EntityTypeBuilder<Combo> builder)
        {
            builder.ToTable("Combos", "dbo");
            builder.HasKey(x => x.ComboId).HasName("PK__Combos__DD42580EF2152AFB").IsClustered();

            builder.Property(x => x.ComboId).HasColumnName(@"ComboID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Discontinute).HasColumnName(@"Discontinute").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
        }
    }

    // ComboDetails
    public class ComboDetailConfiguration : IEntityTypeConfiguration<ComboDetail>
    {
        public void Configure(EntityTypeBuilder<ComboDetail> builder)
        {
            builder.ToTable("ComboDetails", "dbo");
            builder.HasKey(x => x.ComboDetailId).HasName("PK__ComboDet__7C0A2CD90849CA92").IsClustered();

            builder.Property(x => x.ComboId).HasColumnName(@"ComboID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductWeight).HasColumnName(@"ProductWeight").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Discontinute).HasColumnName(@"Discontinute").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ComboDetailId).HasColumnName(@"ComboDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
        }
    }

    // Comments
    public class CommentConfiguration : IEntityTypeConfiguration<Comment>
    {
        public void Configure(EntityTypeBuilder<Comment> builder)
        {
            builder.ToTable("Comments", "dbo");
            builder.HasKey(x => x.CommentId).HasName("PK_Comments");

            builder.Property(x => x.CommentId).HasColumnName(@"CommentID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Qhseid).HasColumnName(@"QHSEID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CommentTime).HasColumnName(@"CommentTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CommentBy).HasColumnName(@"CommentBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.Comment_).HasColumnName(@"Comment").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);

            builder.HasIndex(x => x.Qhseid).HasName("IX_Comments");
        }
    }

    // CommentRead
    public class CommentReadConfiguration : IEntityTypeConfiguration<CommentRead>
    {
        public void Configure(EntityTypeBuilder<CommentRead> builder)
        {
            builder.ToTable("CommentRead", "dbo");
            builder.HasKey(x => x.CommentReadId).HasName("PK_CommentRead").IsClustered();

            builder.Property(x => x.CommentReadId).HasColumnName(@"CommentReadID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CommentReadTime).HasColumnName(@"CommentReadTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CommentId).HasColumnName(@"CommentID").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.CommentId).HasName("IX_CommentRead");
            builder.HasIndex(x => x.UserName).HasName("IX_CommentRead_1");
        }
    }

    // CommonColums
    public class CommonColumConfiguration : IEntityTypeConfiguration<CommonColum>
    {
        public void Configure(EntityTypeBuilder<CommonColum> builder)
        {
            builder.ToTable("CommonColums", "dbo");
            builder.HasKey(x => x.CommonColumId).HasName("PK__CommonCo__29C073D78EC249A8").IsClustered();

            builder.Property(x => x.CommonColumId).HasColumnName(@"CommonColumID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varbinary(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // ContainerChecking
    public class ContainerCheckingConfiguration : IEntityTypeConfiguration<ContainerChecking>
    {
        public void Configure(EntityTypeBuilder<ContainerChecking> builder)
        {
            builder.ToTable("ContainerChecking", "dbo");
            builder.HasKey(x => x.ContainerCheckingId).HasName("PK_ContainerChecking");

            builder.Property(x => x.ContainerCheckingId).HasColumnName(@"ContainerCheckingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TemperatureShow).HasColumnName(@"TemperatureShow").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TemperatureSetup).HasColumnName(@"TemperatureSetup").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Running).HasColumnName(@"Running").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Thawing).HasColumnName(@"Thawing").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Stop).HasColumnName(@"Stop").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Error).HasColumnName(@"Error").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ProductEmpty).HasColumnName(@"ProductEmpty").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Seal).HasColumnName(@"Seal").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Lock).HasColumnName(@"Lock").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AttachmentFile).HasColumnName(@"AttachmentFile").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LocationChecking).HasColumnName(@"LocationChecking").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.NoOperation).HasColumnName(@"NoOperation").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ContainerCheckingNumber).HasColumnName(@"ContainerCheckingNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Electricity).HasColumnName(@"Electricity").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nchar(2)").IsRequired(false).IsFixedLength().HasMaxLength(2);
            builder.Property(x => x.ContainerCheckingLocalId).HasColumnName(@"ContainerCheckingLocalID").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.ContainerCheckingNumber).HasName("IX_ContainerChecking");
        }
    }

    // Contracts
    public class ContractConfiguration : IEntityTypeConfiguration<Contract>
    {
        public void Configure(EntityTypeBuilder<Contract> builder)
        {
            builder.ToTable("Contracts", "dbo");
            builder.HasKey(x => x.ContractId).HasName("PK_Contracts");

            builder.Property(x => x.ContractId).HasColumnName(@"ContractID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ContractMainId).HasColumnName(@"ContractMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ContractRemark).HasColumnName(@"ContractRemark").HasColumnType("nvarchar(1800)").IsRequired(false).HasMaxLength(1800);
            builder.Property(x => x.ContractType).HasColumnName(@"ContractType").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdateBy).HasColumnName(@"UpdateBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContractAccountingNumber).HasColumnName(@"ContractAccountingNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.BillingCycle).HasColumnName(@"BillingCycle").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.InsuranceUnit).HasColumnName(@"InsuranceUnit").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.InsuranceUnitValue).HasColumnName(@"InsuranceUnitValue").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.ProductMaxValue).HasColumnName(@"ProductMaxValue").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.ContractProgressStatus).HasColumnName(@"ContractProgressStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReturnedDate).HasColumnName(@"ReturnedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AppendixNumber).HasColumnName(@"AppendixNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.AppendixDate).HasColumnName(@"AppendixDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AccountingSystemUpdated).HasColumnName(@"AccountingSystemUpdated").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AccountingSystemUpdatedTime).HasColumnName(@"AccountingSystemUpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerSignGender).HasColumnName(@"CustomerSignGender").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerSignRepresentative).HasColumnName(@"CustomerSignRepresentative").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerSignPositionEnglish).HasColumnName(@"CustomerSignPositionEnglish").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerSignPositionVietnam).HasColumnName(@"CustomerSignPositionVietnam").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerSignEmail).HasColumnName(@"CustomerSignEmail").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.PaymentTerms).HasColumnName(@"PaymentTerms").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuotationId0).HasColumnName(@"QuotationID0").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ContractEmail).HasColumnName(@"ContractEmail").HasColumnType("varchar(3000)").IsRequired(false).IsUnicode(false).HasMaxLength(3000);
            builder.Property(x => x.QuotationId).HasColumnName(@"QuotationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsAttachment).HasColumnName(@"IsAttachment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.BillingEndDate).HasColumnName(@"BillingEndDate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SystemUpdatedBy).HasColumnName(@"SystemUpdatedBy").HasColumnType("varchar(25)").IsRequired(false).IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.SystemUpdatedTime).HasColumnName(@"SystemUpdatedTime").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => new { x.ContractNumber, x.CustomerId }).HasName("IX_Contracts_1");
        }
    }

    // ContractAdjustments
    public class ContractAdjustmentConfiguration : IEntityTypeConfiguration<ContractAdjustment>
    {
        public void Configure(EntityTypeBuilder<ContractAdjustment> builder)
        {
            builder.ToTable("ContractAdjustments", "dbo");
            builder.HasKey(x => x.ContractAdjustmentId).HasName("PK_ContractAdjustments").IsClustered();

            builder.Property(x => x.ContractAdjustmentId).HasColumnName(@"ContractAdjustmentID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ContractAdjustmentDate).HasColumnName(@"ContractAdjustmentDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Adjustedby).HasColumnName(@"Adjustedby").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.AdjustedTime).HasColumnName(@"AdjustedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.AdjustmentDescriptions).HasColumnName(@"AdjustmentDescriptions").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.AdjustmentField).HasColumnName(@"AdjustmentField").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
        }
    }

    // ContractDetails
    public class ContractDetailConfiguration : IEntityTypeConfiguration<ContractDetail>
    {
        public void Configure(EntityTypeBuilder<ContractDetail> builder)
        {
            builder.ToTable("ContractDetails", "dbo");
            builder.HasKey(x => x.ContractDetailId).HasName("PK_ContractDetails");

            builder.Property(x => x.ContractDetailId).HasColumnName(@"ContractDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ContractId).HasColumnName(@"ContractID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ContractDetailRemark).HasColumnName(@"ContractDetailRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CurrencyUnit).HasColumnName(@"CurrencyUnit").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CheckingQuantity).HasColumnName(@"CheckingQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CheckingQuantity2).HasColumnName(@"CheckingQuantity2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ScopeOfWork).HasColumnName(@"ScopeOfWork").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ScopeOfWorkVietnam).HasColumnName(@"ScopeOfWorkVietnam").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Vat).HasColumnName(@"VAT").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.StartWorkingTime).HasColumnName(@"StartWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndWorkingTime).HasColumnName(@"EndWorkingTime").HasColumnType("smalldatetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Contract).WithMany(b => b.ContractDetails).HasForeignKey(c => c.ContractId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ContractDetails_Contracts");
            builder.HasOne(a => a.ServicesDefinition).WithMany(b => b.ContractDetails).HasForeignKey(c => c.ServicesDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ContractDetails_ServicesDefinition");

            builder.HasIndex(x => new { x.ContractId, x.ServicesDefinitionId }).HasName("IX_ContractDetails");
        }
    }

    // ContractEmployeeServices
    public class ContractEmployeeServiceConfiguration : IEntityTypeConfiguration<ContractEmployeeService>
    {
        public void Configure(EntityTypeBuilder<ContractEmployeeService> builder)
        {
            builder.ToTable("ContractEmployeeServices", "dbo");
            builder.HasKey(x => x.ContractEmployeeServiceId).HasName("PK_EmployeeServices").IsClustered();

            builder.Property(x => x.ContractEmployeeServiceId).HasColumnName(@"ContractEmployeeServiceID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SupervisorPercentage).HasColumnName(@"SupervisorPercentage").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ContractDetailId).HasColumnName(@"ContractDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // ContractLocations
    public class ContractLocationConfiguration : IEntityTypeConfiguration<ContractLocation>
    {
        public void Configure(EntityTypeBuilder<ContractLocation> builder)
        {
            builder.ToTable("ContractLocations", "dbo");
            builder.HasKey(x => x.ContractLocationId).HasName("PK_ContractLocations").IsClustered();

            builder.Property(x => x.ContractLocationId).HasColumnName(@"ContractLocationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContractId).HasColumnName(@"ContractID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // ContractStatus
    public class ContractStatuConfiguration : IEntityTypeConfiguration<ContractStatu>
    {
        public void Configure(EntityTypeBuilder<ContractStatu> builder)
        {
            builder.ToTable("ContractStatus", "dbo");
            builder.HasKey(x => x.ContractStatusId).HasName("PK_ContractStatus").IsClustered();

            builder.Property(x => x.ContractStatusId).HasColumnName(@"ContractStatusID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ConstractStatusDescriptions).HasColumnName(@"ConstractStatusDescriptions").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
        }
    }

    // CoreValueDefinitions
    public class CoreValueDefinitionConfiguration : IEntityTypeConfiguration<CoreValueDefinition>
    {
        public void Configure(EntityTypeBuilder<CoreValueDefinition> builder)
        {
            builder.ToTable("CoreValueDefinitions", "dbo");
            builder.HasKey(x => x.CoreValueId).HasName("PK_CoreValues").IsClustered();

            builder.Property(x => x.CoreValueId).HasColumnName(@"CoreValueID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CoreValueName).HasColumnName(@"CoreValueName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // CoreValueEmployeeEvaluations
    public class CoreValueEmployeeEvaluationConfiguration : IEntityTypeConfiguration<CoreValueEmployeeEvaluation>
    {
        public void Configure(EntityTypeBuilder<CoreValueEmployeeEvaluation> builder)
        {
            builder.ToTable("CoreValueEmployeeEvaluations", "dbo");
            builder.HasKey(x => x.CoreValueEmployeeEvaluationId).HasName("PK_CoreValueEmployeeEvaluations").IsClustered();

            builder.Property(x => x.CoreValueEmployeeEvaluationId).HasColumnName(@"CoreValueEmployeeEvaluationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Evaluator).HasColumnName(@"Evaluator").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.PeriodDate).HasColumnName(@"PeriodDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // CoreValueEmployeeEvaluationDetails
    public class CoreValueEmployeeEvaluationDetailConfiguration : IEntityTypeConfiguration<CoreValueEmployeeEvaluationDetail>
    {
        public void Configure(EntityTypeBuilder<CoreValueEmployeeEvaluationDetail> builder)
        {
            builder.ToTable("CoreValueEmployeeEvaluationDetails", "dbo");
            builder.HasKey(x => x.CoreValueEmployeeEvaluationDetailId).HasName("PK_CoreValueEmployeeEvaluationDetails").IsClustered();

            builder.Property(x => x.CoreValueEmployeeEvaluationDetailId).HasColumnName(@"CoreValueEmployeeEvaluationDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CoreValueEmployeeEvaluationId).HasColumnName(@"CoreValueEmployeeEvaluationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CoreValueId).HasColumnName(@"CoreValueID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Score).HasColumnName(@"Score").HasColumnType("real").IsRequired();
            builder.Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Comment1).HasColumnName(@"Comment1").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
        }
    }

    // CoreValuesDishonestBehaviors
    public class CoreValuesDishonestBehaviorConfiguration : IEntityTypeConfiguration<CoreValuesDishonestBehavior>
    {
        public void Configure(EntityTypeBuilder<CoreValuesDishonestBehavior> builder)
        {
            builder.ToTable("CoreValuesDishonestBehaviors", "dbo");
            builder.HasKey(x => x.CoreValuesDishonestBehaviorId).HasName("PK_CoreValuesDishonestBehaviors").IsClustered();

            builder.Property(x => x.CoreValuesDishonestBehaviorId).HasColumnName(@"CoreValuesDishonestBehaviorID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.EmployeeName).HasColumnName(@"EmployeeName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // CoreValueVotes
    public class CoreValueVoteConfiguration : IEntityTypeConfiguration<CoreValueVote>
    {
        public void Configure(EntityTypeBuilder<CoreValueVote> builder)
        {
            builder.ToTable("CoreValueVotes", "dbo");
            builder.HasKey(x => x.CoreValueVoteId).HasName("PK_CoreValueVotes").IsClustered();

            builder.Property(x => x.CoreValueVoteId).HasColumnName(@"CoreValueVoteID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EmployeeName).HasColumnName(@"EmployeeName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeDepartment).HasColumnName(@"EmployeeDepartment").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CoreValueId).HasColumnName(@"CoreValueID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ActionDescription).HasColumnName(@"ActionDescription").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.NominatorName).HasColumnName(@"NominatorName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NominatorDepartment).HasColumnName(@"NominatorDepartment").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // CRM_Meetings
    public class CrmMeetingConfiguration : IEntityTypeConfiguration<CrmMeeting>
    {
        public void Configure(EntityTypeBuilder<CrmMeeting> builder)
        {
            builder.ToTable("CRM_Meetings", "dbo");
            builder.HasKey(x => x.MeetingId).HasName("PK_MEETINGS").IsClustered();

            builder.Property(x => x.MeetingId).HasColumnName(@"MeetingID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SubjectName).HasColumnName(@"SubjectName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(700)").IsRequired(false).HasMaxLength(700);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.AllDayEvent).HasColumnName(@"AllDayEvent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.MeetingLocalId).HasColumnName(@"MeetingLocalID").HasColumnType("int").IsRequired(false);
        }
    }

    // CRM_Meetings_Users
    public class CrmMeetingsUserConfiguration : IEntityTypeConfiguration<CrmMeetingsUser>
    {
        public void Configure(EntityTypeBuilder<CrmMeetingsUser> builder)
        {
            builder.ToTable("CRM_Meetings_Users", "dbo");
            builder.HasKey(x => x.MeetingUserId).HasName("PK_CRM_MEETINGS_USERS").IsClustered();

            builder.Property(x => x.MeetingUserId).HasColumnName(@"MeetingUserID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.MeetingId).HasColumnName(@"MeetingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Required).HasColumnName(@"Required").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ReminderDismissed).HasColumnName(@"ReminderDismissed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.MeetingLocalId).HasColumnName(@"MeetingLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AcceptStatus).HasColumnName(@"AcceptStatus").HasColumnType("tinyint").IsRequired(false);
        }
    }

    // CRM_Opportunities
    public class CrmOpportunityConfiguration : IEntityTypeConfiguration<CrmOpportunity>
    {
        public void Configure(EntityTypeBuilder<CrmOpportunity> builder)
        {
            builder.ToTable("CRM_Opportunities", "dbo");
            builder.HasKey(x => new { x.OpportunityId, x.CreatedTime, x.Deleted });

            builder.Property(x => x.OpportunityId).HasColumnName(@"OpportunityID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OpportunityNumber).HasColumnName(@"OpportunityNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OpportunityName).HasColumnName(@"OpportunityName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Deleted).HasColumnName(@"Deleted").HasColumnType("bit").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(700)").IsRequired(false).HasMaxLength(700);
            builder.Property(x => x.Probability).HasColumnName(@"Probability").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.AssignedToUser).HasColumnName(@"AssignedToUser").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.OpportunityType).HasColumnName(@"OpportunityType").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.SalesStage).HasColumnName(@"SalesStage").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.ForecastingPallets).HasColumnName(@"ForecastingPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ForecastingCartons).HasColumnName(@"ForecastingCartons").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ForecastingUnits).HasColumnName(@"ForecastingUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ForecastingWeights).HasColumnName(@"ForecastingWeights").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.ClosedDate).HasColumnName(@"ClosedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Emails).HasColumnName(@"Emails").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Contacts).HasColumnName(@"Contacts").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Website).HasColumnName(@"Website").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.CustomerCategory).HasColumnName(@"CustomerCategory").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerType).HasColumnName(@"CustomerType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);

            builder.HasIndex(x => x.OpportunityId).HasName("IX_CRM_Opportunities");
            builder.HasIndex(x => x.OpportunityNumber).HasName("IX_CRM_Opportunities_1").IsUnique();
        }
    }

    // CRM_OpportunityDetails
    public class CrmOpportunityDetailConfiguration : IEntityTypeConfiguration<CrmOpportunityDetail>
    {
        public void Configure(EntityTypeBuilder<CrmOpportunityDetail> builder)
        {
            builder.ToTable("CRM_OpportunityDetails", "dbo");
            builder.HasKey(x => x.OpportunitieDetailId).HasName("PK_CRM_OpportunityDetails").IsClustered();

            builder.Property(x => x.OpportunitieDetailId).HasColumnName(@"OpportunitieDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.PlanningDate).HasColumnName(@"PlanningDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.Cartons).HasColumnName(@"Cartons").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Units).HasColumnName(@"Units").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.OpportunityId).HasColumnName(@"OpportunityID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CategoryDetails).HasColumnName(@"CategoryDetails").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // CRM_OpportunityServices
    public class CrmOpportunityServiceConfiguration : IEntityTypeConfiguration<CrmOpportunityService>
    {
        public void Configure(EntityTypeBuilder<CrmOpportunityService> builder)
        {
            builder.ToTable("CRM_OpportunityServices", "dbo");
            builder.HasKey(x => x.OpportunityServiceId).HasName("PK_CRM_OpportunityServices").IsClustered();

            builder.Property(x => x.OpportunityServiceId).HasColumnName(@"OpportunityServiceID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OpportunityId).HasColumnName(@"OpportunityID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServiceId).HasColumnName(@"ServiceID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ServicePrice).HasColumnName(@"ServicePrice").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // Customers
    public class CustomerConfiguration : IEntityTypeConfiguration<Customer>
    {
        public void Configure(EntityTypeBuilder<Customer> builder)
        {
            builder.ToTable("Customers", "dbo");
            builder.HasKey(x => x.CustomerId).HasName("PK_Customers").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerLocalId).HasColumnName(@"CustomerLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerFullName).HasColumnName(@"CustomerFullName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Initial).HasColumnName(@"Initial").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerType).HasColumnName(@"CustomerType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.PrimaryContact).HasColumnName(@"PrimaryContact").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Phone1).HasColumnName(@"Phone1").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Phone2).HasColumnName(@"Phone2").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(3000)").IsRequired(false).IsUnicode(false).HasMaxLength(3000);
            builder.Property(x => x.OtherContacts).HasColumnName(@"OtherContacts").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.MarketingInfor).HasColumnName(@"MarketingInfor").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.CustomerInvoiceName).HasColumnName(@"CustomerInvoiceName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerInvoiceAddress).HasColumnName(@"CustomerInvoiceAddress").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerInvoiceTaxCode).HasColumnName(@"CustomerInvoiceTaxCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerDiscontinued).HasColumnName(@"CustomerDiscontinued").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerCategory).HasColumnName(@"CustomerCategory").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CustomerGroup).HasColumnName(@"CustomerGroup").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SendNote).HasColumnName(@"SendNote").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerSubId).HasColumnName(@"CustomerSubID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Hold).HasColumnName(@"Hold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HoldMessage).HasColumnName(@"HoldMessage").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.HoldLimitWeight).HasColumnName(@"HoldLimitWeight").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.HomeLocationChange).HasColumnName(@"HomeLocationChange").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingByClient).HasColumnName(@"DispatchingByClient").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerPalletType).HasColumnName(@"CustomerPalletType").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.Website).HasColumnName(@"Website").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.EmailBilling).HasColumnName(@"EmailBilling").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CustomerDispatchType).HasColumnName(@"CustomerDispatchType").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsAllowEdi).HasColumnName(@"IsAllowEDI").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerTaxGroup).HasColumnName(@"CustomerTaxGroup").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BarcodeScanRequire).HasColumnName(@"BarcodeScanRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PrintLabelRemainRequire).HasColumnName(@"PrintLabelRemainRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DefaultProcessTime).HasColumnName(@"DefaultProcessTime").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerPotentialCategoryId).HasColumnName(@"CustomerPotentialCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsAllowOnlineReport).HasColumnName(@"IsAllowOnlineReport").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HomeLocation1).HasColumnName(@"HomeLocation1").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.HomeLocation2).HasColumnName(@"HomeLocation2").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustId).HasColumnName(@"CustId").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerStatus).HasColumnName(@"CustomerStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OpportunityType).HasColumnName(@"OpportunityType").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OpportunityProbability).HasColumnName(@"OpportunityProbability").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.OpportunityAssignedToUser).HasColumnName(@"OpportunityAssignedToUser").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerNumberAccounting).HasColumnName(@"CustomerNumberAccounting").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.IsCustomerTest).HasColumnName(@"IsCustomerTest").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerAssignedTo).HasColumnName(@"CustomerAssignedTo").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerAssignedTo0).HasColumnName(@"CustomerAssignedTo0").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsCheckOutRequire).HasColumnName(@"IsCheckOutRequire").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TemperatureFrom).HasColumnName(@"TemperatureFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TemperatureTo).HasColumnName(@"TemperatureTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityFrom).HasColumnName(@"HumidityFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityTo).HasColumnName(@"HumidityTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CustomerNumberErp).HasColumnName(@"CustomerNumberERP").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // CustomerAccounting
    public class CustomerAccountingConfiguration : IEntityTypeConfiguration<CustomerAccounting>
    {
        public void Configure(EntityTypeBuilder<CustomerAccounting> builder)
        {
            builder.ToTable("CustomerAccounting", "dbo");
            builder.HasKey(x => x.AccountingCustomerCode).HasName("PK_CustomerAccounting").IsClustered();

            builder.Property(x => x.AccountingCustomerCode).HasColumnName(@"AccountingCustomerCode").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
        }
    }

    // CustomerAssignedTo
    public class CustomerAssignedToConfiguration : IEntityTypeConfiguration<CustomerAssignedTo>
    {
        public void Configure(EntityTypeBuilder<CustomerAssignedTo> builder)
        {
            builder.ToTable("CustomerAssignedTo", "dbo");
            builder.HasKey(x => x.CustomerAssignedToId).HasName("PK_CustomerAssignedTo").IsClustered();

            builder.Property(x => x.CustomerAssignedToId).HasColumnName(@"CustomerAssignedToID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerAssignedTo_).HasColumnName(@"CustomerAssignedTo").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.AssignedBy).HasColumnName(@"AssignedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // CustomerBookings
    public class CustomerBookingConfiguration : IEntityTypeConfiguration<CustomerBooking>
    {
        public void Configure(EntityTypeBuilder<CustomerBooking> builder)
        {
            builder.ToTable("CustomerBookings", "dbo");
            builder.HasKey(x => x.CustomerBookingId).HasName("PK_Bookings");

            builder.Property(x => x.CustomerBookingId).HasColumnName(@"CustomerBookingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerBookingNumber).HasColumnName(@"CustomerBookingNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RequestDescription).HasColumnName(@"RequestDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ResponsedDescription).HasColumnName(@"ResponsedDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ResponsedBy).HasColumnName(@"ResponsedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.ResponsedTime).HasColumnName(@"ResponsedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BookingDate).HasColumnName(@"BookingDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.TotalPallets).HasColumnName(@"TotalPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeights).HasColumnName(@"TotalWeights").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.WhConfirmedTime).HasColumnName(@"WHConfirmedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WarehouseId).HasColumnName(@"WarehouseID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.BookingDate).HasName("IX_CustomerBookings");
            builder.HasIndex(x => x.CustomerBookingNumber).HasName("IX_CustomerBookings_2");
        }
    }

    // CustomerBookingDetails
    public class CustomerBookingDetailConfiguration : IEntityTypeConfiguration<CustomerBookingDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerBookingDetail> builder)
        {
            builder.ToTable("CustomerBookingDetails", "dbo");
            builder.HasKey(x => x.CustomerBookingDetailId).HasName("PK_CustomerBookingDetails").IsClustered();

            builder.Property(x => x.CustomerBookingDetailId).HasColumnName(@"CustomerBookingDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerBookingId).HasColumnName(@"CustomerBookingID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Cartons).HasColumnName(@"Cartons").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.Units).HasColumnName(@"Units").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // CustomerBookingTimeSlots
    public class CustomerBookingTimeSlotConfiguration : IEntityTypeConfiguration<CustomerBookingTimeSlot>
    {
        public void Configure(EntityTypeBuilder<CustomerBookingTimeSlot> builder)
        {
            builder.ToTable("CustomerBookingTimeSlots", "dbo");
            builder.HasKey(x => x.TimeSlotId).HasName("PK_tmpHOurs").IsClustered();

            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TimeSlot).HasColumnName(@"TimeSlot").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SlotStartTime).HasColumnName(@"SlotStartTime").HasColumnType("time").IsRequired(false);
            builder.Property(x => x.SlotEndTime).HasColumnName(@"SlotEndTime").HasColumnType("time").IsRequired(false);
        }
    }

    // CustomerCategories
    public class CustomerCategoryConfiguration : IEntityTypeConfiguration<CustomerCategory>
    {
        public void Configure(EntityTypeBuilder<CustomerCategory> builder)
        {
            builder.ToTable("CustomerCategories", "dbo");
            builder.HasKey(x => x.CustomerCategoryId).HasName("PK__CustomerCategori__26716430").IsClustered();

            builder.Property(x => x.CustomerCategoryId).HasColumnName(@"CustomerCategoryID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CustomerCategoryDescription).HasColumnName(@"CustomerCategoryDescription").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.DefaultProductCategory).HasColumnName(@"DefaultProductCategory").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.StorageRoom).HasColumnName(@"StorageRoom").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.TemperatureRange).HasColumnName(@"TemperatureRange").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.HumidityRange).HasColumnName(@"HumidityRange").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.OtherRequirement).HasColumnName(@"OtherRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // CustomerClients
    public class CustomerClientConfiguration : IEntityTypeConfiguration<CustomerClient>
    {
        public void Configure(EntityTypeBuilder<CustomerClient> builder)
        {
            builder.ToTable("CustomerClients", "dbo");
            builder.HasKey(x => x.CustomerClientId).HasName("PK_CustomerClients");

            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientDescriptions).HasColumnName(@"CustomerClientDescriptions").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CustomerClientAddress).HasColumnName(@"CustomerClientAddress").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CustomerClientDeliveryAddress).HasColumnName(@"CustomerClientDeliveryAddress").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.BillToLocation).HasColumnName(@"BILL_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ShipToAddress).HasColumnName(@"SHIP_TO_ADDRESS").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.AddressProvince).HasColumnName(@"AddressProvince").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.AddressDistrict).HasColumnName(@"AddressDistrict").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.AddressWard).HasColumnName(@"AddressWard").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientContacts).HasColumnName(@"CustomerClientContacts").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientPhone).HasColumnName(@"CustomerClientPhone").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientMainId).HasColumnName(@"CustomerClientMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerClientEmail).HasColumnName(@"CustomerClientEmail").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientTaxName).HasColumnName(@"CustomerClientTaxName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientTaxCode).HasColumnName(@"CustomerClientTaxCode").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientCodeFbv).HasColumnName(@"CustomerClientCodeFBV").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientMain).HasColumnName(@"CustomerClientMain").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.DiscountAmountPercentage).HasColumnName(@"DiscountAmountPercentage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CustomerClientCreditTerm).HasColumnName(@"CustomerClientCreditTerm").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientBuyer).HasColumnName(@"CustomerClientBuyer").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Shelflife).HasColumnName(@"Shelflife").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.AddressMapCoordinates).HasColumnName(@"AddressMapCoordinates").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.DefaultRoute).HasColumnName(@"DefaultRoute").HasColumnType("varchar(70)").IsRequired(false).IsUnicode(false).HasMaxLength(70);
            builder.Property(x => x.DeadlineNumber).HasColumnName(@"DeadlineNumber").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.SaleChannel).HasColumnName(@"SaleChannel").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerClass).HasColumnName(@"CustomerClass").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustomeClientActive).HasColumnName(@"CustomeClientActive").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerDeliveryRouteId).HasColumnName(@"CustomerDeliveryRouteID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PriorityLot).HasColumnName(@"PriorityLot").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ShipTime).HasColumnName(@"ShipTime").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.PriorityLotOld).HasColumnName(@"PriorityLotOld").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LocationGid).HasColumnName(@"LOCATION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CheckWeightOrder).HasColumnName(@"CheckWeightOrder").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OtmShipTo).HasColumnName(@"OTM_ShipTo").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Lat).HasColumnName(@"Lat").HasColumnType("decimal(20,8)").IsRequired(false);
            builder.Property(x => x.Long).HasColumnName(@"Long").HasColumnType("decimal(20,8)").IsRequired(false);
            builder.Property(x => x.RouteIndex).HasColumnName(@"RouteIndex").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PriorityFull).HasColumnName(@"PriorityFull").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => new { x.LocationGid, x.CustomerClass }).HasName("IX_CustomerClients");
        }
    }

    // CustomerClientAddressDistricts
    public class CustomerClientAddressDistrictConfiguration : IEntityTypeConfiguration<CustomerClientAddressDistrict>
    {
        public void Configure(EntityTypeBuilder<CustomerClientAddressDistrict> builder)
        {
            builder.ToTable("CustomerClientAddressDistricts", "dbo");
            builder.HasKey(x => x.CustomerClientAddressDistrictId).HasName("PK_CustomerClientAddressDistricts").IsClustered();

            builder.Property(x => x.CustomerClientAddressDistrictId).HasColumnName(@"CustomerClientAddressDistrictID").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100).ValueGeneratedNever();
            builder.Property(x => x.DistrictName).HasColumnName(@"DistrictName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.CustomerClientAddressProvinceId).HasColumnName(@"CustomerClientAddressProvinceID").HasColumnType("int").IsRequired();
        }
    }

    // CustomerClientAddressProvinces
    public class CustomerClientAddressProvinceConfiguration : IEntityTypeConfiguration<CustomerClientAddressProvince>
    {
        public void Configure(EntityTypeBuilder<CustomerClientAddressProvince> builder)
        {
            builder.ToTable("CustomerClientAddressProvinces", "dbo");
            builder.HasKey(x => x.CustomerClientAddressProvinceId).HasName("PK_CustomerClientAddressProvinces").IsClustered();

            builder.Property(x => x.CustomerClientAddressProvinceId).HasColumnName(@"CustomerClientAddressProvinceID").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100).ValueGeneratedNever();
            builder.Property(x => x.ProvinceName).HasColumnName(@"ProvinceName").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
        }
    }

    // CustomerClientProductsImport
    public class CustomerClientProductsImportConfiguration : IEntityTypeConfiguration<CustomerClientProductsImport>
    {
        public void Configure(EntityTypeBuilder<CustomerClientProductsImport> builder)
        {
            builder.ToTable("CustomerClientProductsImport", "dbo");
            builder.HasKey(x => x.CustomerClientProductsImportId).HasName("PK__Customer__58E872C5A35548E8").IsClustered();

            builder.Property(x => x.CustomerClientProductsImportId).HasColumnName(@"CustomerClientProductsImportID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CUSTOMER_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CUSTOMER_NAME").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.CustomerItemNumber).HasColumnName(@"CUSTOMER_ITEM_NUMBER").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CustomerItemDesc).HasColumnName(@"CUSTOMER_ITEM_DESC").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ItemNumber).HasColumnName(@"ITEM_NUMBER").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ItemDescription).HasColumnName(@"ITEM_DESCRIPTION").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.CustomerStatus).HasColumnName(@"CUSTOMER_STATUS").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // CustomerClientsImport
    public class CustomerClientsImportConfiguration : IEntityTypeConfiguration<CustomerClientsImport>
    {
        public void Configure(EntityTypeBuilder<CustomerClientsImport> builder)
        {
            builder.ToTable("CustomerClientsImport", "dbo");
            builder.HasKey(x => new { x.CustomerClientsImportId, x.DistrictDesc });

            builder.Property(x => x.CustomerClientsImportId).HasColumnName(@"CustomerClientsImportID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CUSTOMER_NUMBER").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CustomerName).HasColumnName(@"CUSTOMER_NAME").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.AliasName).HasColumnName(@"ALIAS_NAME").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.SaleChannel).HasColumnName(@"SALE_CHANNEL").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClass).HasColumnName(@"CUSTOMER_CLASS").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerStatus).HasColumnName(@"CUSTOMER_STATUS").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Address).HasColumnName(@"ADDRESS").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Province).HasColumnName(@"PROVINCE").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ProvinceDesc).HasColumnName(@"PROVINCE_DESC").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Address3).HasColumnName(@"ADDRESS3").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.DistrictDesc).HasColumnName(@"DISTRICT_DESC").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.Address4).HasColumnName(@"ADDRESS4").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.WardDesc).HasColumnName(@"WARD_DESC").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerSiteStatus).HasColumnName(@"CUSTOMER_SITE_STATUS").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.SiteUseCode).HasColumnName(@"SITE_USE_CODE").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Location).HasColumnName(@"LOCATION").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.BillToLocation).HasColumnName(@"BILL_TO_LOCATION").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ContactName).HasColumnName(@"CONTACT_NAME").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.EmailAddress).HasColumnName(@"EMAIL_ADDRESS").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.PhoneNumberAlt).HasColumnName(@"PHONE_NUMBER_ALT").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ShipToAddress).HasColumnName(@"SHIP_TO_ADDRESS").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.StoreNumber).HasColumnName(@"STORE_NUMBER").HasColumnType("int").IsRequired(false);
        }
    }

    // CustomerContacts
    public class CustomerContactConfiguration : IEntityTypeConfiguration<CustomerContact>
    {
        public void Configure(EntityTypeBuilder<CustomerContact> builder)
        {
            builder.ToTable("CustomerContacts", "dbo");
            builder.HasKey(x => x.CustomerContactId).HasName("PK_CustomerContacts").IsClustered();

            builder.Property(x => x.CustomerContactId).HasColumnName(@"CustomerContactID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ContactRemark).HasColumnName(@"ContactRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.JobDescription).HasColumnName(@"JobDescription").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);
        }
    }

    // CustomerContractAmendments
    public class CustomerContractAmendmentConfiguration : IEntityTypeConfiguration<CustomerContractAmendment>
    {
        public void Configure(EntityTypeBuilder<CustomerContractAmendment> builder)
        {
            builder.ToTable("CustomerContractAmendments", "dbo");
            builder.HasKey(x => x.CustomerContractAmendmentId).HasName("PK_CustomerContractAmendments").IsClustered();

            builder.Property(x => x.CustomerContractAmendmentId).HasColumnName(@"CustomerContractAmendmentID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.BeforeAmendment).HasColumnName(@"BeforeAmendment").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.AfterAmendment).HasColumnName(@"AfterAmendment").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CustomerContractId).HasColumnName(@"CustomerContractID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AmendmentReason).HasColumnName(@"AmendmentReason").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
        }
    }

    // CustomerDeliveryRoutes
    public class CustomerDeliveryRouteConfiguration : IEntityTypeConfiguration<CustomerDeliveryRoute>
    {
        public void Configure(EntityTypeBuilder<CustomerDeliveryRoute> builder)
        {
            builder.ToTable("CustomerDeliveryRoutes", "dbo");
            builder.HasKey(x => x.CustomerDeliveryRouteId).HasName("PK_CustomerDeliveryRoutes").IsClustered();

            builder.Property(x => x.CustomerDeliveryRouteId).HasColumnName(@"CustomerDeliveryRouteID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.RouteCode).HasColumnName(@"RouteCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.RouteDescriptions).HasColumnName(@"RouteDescriptions").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.RouteDistrictFirst).HasColumnName(@"RouteDistrictFirst").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RouteDistrictLast).HasColumnName(@"RouteDistrictLast").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RouteProvinceFirst).HasColumnName(@"RouteProvinceFirst").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RouteProvinceLast).HasColumnName(@"RouteProvinceLast").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VehicleNo).HasColumnName(@"VehicleNo").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TransporterId).HasColumnName(@"TransporterID").HasColumnType("int").IsRequired(false);
        }
    }

    // CustomerDispatchMethod
    public class CustomerDispatchMethodConfiguration : IEntityTypeConfiguration<CustomerDispatchMethod>
    {
        public void Configure(EntityTypeBuilder<CustomerDispatchMethod> builder)
        {
            builder.ToTable("CustomerDispatchMethod", "dbo");
            builder.HasKey(x => x.CustomerDispatchMethodId).HasName("PK_CustomerDispatchType").IsClustered();

            builder.Property(x => x.CustomerDispatchMethodId).HasColumnName(@"CustomerDispatchMethodID").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerDispatchMethod_).HasColumnName(@"CustomerDispatchMethod").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // CustomerEvents
    public class CustomerEventConfiguration : IEntityTypeConfiguration<CustomerEvent>
    {
        public void Configure(EntityTypeBuilder<CustomerEvent> builder)
        {
            builder.ToTable("CustomerEvents", "dbo");
            builder.HasKey(x => x.CustomerEventId).HasName("PK_CustomerEvents").IsClustered();

            builder.Property(x => x.CustomerEventId).HasColumnName(@"CustomerEventID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerEventNumber).HasColumnName(@"CustomerEventNumber").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.EventDescription).HasColumnName(@"EventDescription").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ReminderRequired).HasColumnName(@"ReminderRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ReminderTime).HasColumnName(@"ReminderTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReminderText).HasColumnName(@"ReminderText").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DocumentFolder).HasColumnName(@"DocumentFolder").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ConfidentialLevel).HasColumnName(@"ConfidentialLevel").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.EventCategory).HasColumnName(@"EventCategory").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CustomerEventCategories
    public class CustomerEventCategoryConfiguration : IEntityTypeConfiguration<CustomerEventCategory>
    {
        public void Configure(EntityTypeBuilder<CustomerEventCategory> builder)
        {
            builder.ToTable("CustomerEventCategories", "dbo");
            builder.HasKey(x => x.CustomerEventCategoryId);

            builder.Property(x => x.CustomerEventCategoryId).HasColumnName(@"CustomerEventCategoryID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CategoryDescriptions).HasColumnName(@"CategoryDescriptions").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
        }
    }

    // CustomerGroups
    public class CustomerGroupConfiguration : IEntityTypeConfiguration<CustomerGroup>
    {
        public void Configure(EntityTypeBuilder<CustomerGroup> builder)
        {
            builder.ToTable("CustomerGroups", "dbo");
            builder.HasKey(x => x.CustomerGroupId).HasName("PK_CustomerGroups").IsClustered();

            builder.Property(x => x.CustomerGroupId).HasColumnName(@"CustomerGroupID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CustomerGroupDescription).HasColumnName(@"CustomerGroupDescription").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
        }
    }

    // CustomerHoldHistories
    public class CustomerHoldHistoryConfiguration : IEntityTypeConfiguration<CustomerHoldHistory>
    {
        public void Configure(EntityTypeBuilder<CustomerHoldHistory> builder)
        {
            builder.ToTable("CustomerHoldHistories", "dbo");
            builder.HasKey(x => x.CustomerHoldHistoryId).HasName("PK_CustomerHoldHistories").IsClustered();

            builder.Property(x => x.CustomerHoldHistoryId).HasColumnName(@"CustomerHoldHistoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Hold).HasColumnName(@"Hold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HoldTime).HasColumnName(@"HoldTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.HoldBy).HasColumnName(@"HoldBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.HoldDescription).HasColumnName(@"HoldDescription").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);

            builder.HasIndex(x => x.CustomerHoldHistoryId).HasName("IX_CustomerHoldHistories");
        }
    }

    // customerIDTest
    public class CustomerIdTestConfiguration : IEntityTypeConfiguration<CustomerIdTest>
    {
        public void Configure(EntityTypeBuilder<CustomerIdTest> builder)
        {
            builder.ToTable("customerIDTest", "dbo");
            builder.HasKey(x => x.CustomerId).HasName("PK__customer__A4AE64B8DBA76DBB").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
        }
    }

    // CustomerInquiries
    public class CustomerInquiryConfiguration : IEntityTypeConfiguration<CustomerInquiry>
    {
        public void Configure(EntityTypeBuilder<CustomerInquiry> builder)
        {
            builder.ToTable("CustomerInquiries", "dbo");
            builder.HasKey(x => x.CustomerInquiryId).HasName("PK_CustomerInquiries").IsClustered();

            builder.Property(x => x.CustomerInquiryId).HasColumnName(@"CustomerInquiryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerInquiryNumber).HasColumnName(@"CustomerInquiryNumber").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerInquiryDate).HasColumnName(@"CustomerInquiryDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerInquiryRemark).HasColumnName(@"CustomerInquiryRemark").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CustomerInquiryStatus).HasColumnName(@"CustomerInquiryStatus").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CustomerCategoryId).HasColumnName(@"CustomerCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // CustomerInquiryDetails
    public class CustomerInquiryDetailConfiguration : IEntityTypeConfiguration<CustomerInquiryDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerInquiryDetail> builder)
        {
            builder.ToTable("CustomerInquiryDetails", "dbo");
            builder.HasKey(x => x.CustomerInquiryDetailId).HasName("PK_CustomerInquiryDetails").IsClustered();

            builder.Property(x => x.CustomerInquiryDetailId).HasColumnName(@"CustomerInquiryDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerInquiryId).HasColumnName(@"CustomerInquiryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerInquiryProductDefinitionId).HasColumnName(@"CustomerInquiryProductDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerInquiryQuantity).HasColumnName(@"CustomerInquiryQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerInquiryDetailRemark).HasColumnName(@"CustomerInquiryDetailRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TemperatureRange).HasColumnName(@"TemperatureRange").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.HumidityRange).HasColumnName(@"HumidityRange").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.StorageRoom).HasColumnName(@"StorageRoom").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.CustomerInquiryProductDefinition).WithMany(b => b.CustomerInquiryDetails).HasForeignKey(c => c.CustomerInquiryProductDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerInquiryDetails_CustomerInquiryProductDefinitions");
        }
    }

    // CustomerInquiryProductDefinitions
    public class CustomerInquiryProductDefinitionConfiguration : IEntityTypeConfiguration<CustomerInquiryProductDefinition>
    {
        public void Configure(EntityTypeBuilder<CustomerInquiryProductDefinition> builder)
        {
            builder.ToTable("CustomerInquiryProductDefinitions", "dbo");
            builder.HasKey(x => x.CustomerInquiryProductDefinitionId).HasName("PK_CustomerInquiryProductDefinitions").IsClustered();

            builder.Property(x => x.CustomerInquiryProductDefinitionId).HasColumnName(@"CustomerInquiryProductDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductDescriptions).HasColumnName(@"ProductDescriptions").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.ProductDescriptionVn).HasColumnName(@"ProductDescriptionVN").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.StorageRoom).HasColumnName(@"StorageRoom").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.StorageRoomVn).HasColumnName(@"StorageRoomVN").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TemperatureRange).HasColumnName(@"TemperatureRange").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.HumidityRange).HasColumnName(@"HumidityRange").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OtherRequirement).HasColumnName(@"OtherRequirement").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OtherRequirementVn).HasColumnName(@"OtherRequirementVN").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
        }
    }

    // CustomerInquiryServices
    public class CustomerInquiryServiceConfiguration : IEntityTypeConfiguration<CustomerInquiryService>
    {
        public void Configure(EntityTypeBuilder<CustomerInquiryService> builder)
        {
            builder.ToTable("CustomerInquiryServices", "dbo");
            builder.HasKey(x => x.CustomerInquiryServiceId).HasName("PK_CustomerInquiryServices").IsClustered();

            builder.Property(x => x.CustomerInquiryServiceId).HasColumnName(@"CustomerInquiryServiceID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerInquiryDetailId).HasColumnName(@"CustomerInquiryDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerInquiryServiceRemark).HasColumnName(@"CustomerInquiryServiceRemark").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ServiceScopeOfWork).HasColumnName(@"ServiceScopeOfWork").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ServiceScopeOfWorkVietnam).HasColumnName(@"ServiceScopeOfWorkVietnam").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ServiceId).HasColumnName(@"ServiceID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CustomerInquiryDetail).WithMany(b => b.CustomerInquiryServices).HasForeignKey(c => c.CustomerInquiryDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerInquiryServices_CustomerInquiryDetails");
        }
    }

    // CustomerListBillings
    public class CustomerListBillingConfiguration : IEntityTypeConfiguration<CustomerListBilling>
    {
        public void Configure(EntityTypeBuilder<CustomerListBilling> builder)
        {
            builder.ToView("CustomerListBillings", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // CustomerPotentialCategories
    public class CustomerPotentialCategoryConfiguration : IEntityTypeConfiguration<CustomerPotentialCategory>
    {
        public void Configure(EntityTypeBuilder<CustomerPotentialCategory> builder)
        {
            builder.ToTable("CustomerPotentialCategories", "dbo");
            builder.HasKey(x => x.CustomerPotentialCategoryId).HasName("PK_CustomerPotentialCategories").IsClustered();

            builder.Property(x => x.CustomerPotentialCategoryId).HasColumnName(@"CustomerPotentialCategoryID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CustomerPotentialCategoryDescription).HasColumnName(@"CustomerPotentialCategoryDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // CustomerProductGroups
    public class CustomerProductGroupConfiguration : IEntityTypeConfiguration<CustomerProductGroup>
    {
        public void Configure(EntityTypeBuilder<CustomerProductGroup> builder)
        {
            builder.ToTable("CustomerProductGroups", "dbo");
            builder.HasKey(x => x.ProductGroupId).HasName("PK_CustomerProductGroups").IsClustered();

            builder.Property(x => x.ProductGroupId).HasColumnName(@"ProductGroupID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductGroupDescription).HasColumnName(@"ProductGroupDescription").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.IsDefault).HasColumnName(@"ISDefault").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // CustomerProductMapping
    public class CustomerProductMappingConfiguration : IEntityTypeConfiguration<CustomerProductMapping>
    {
        public void Configure(EntityTypeBuilder<CustomerProductMapping> builder)
        {
            builder.ToTable("CustomerProductMapping", "dbo");
            builder.HasKey(x => new { x.Customer, x.ProductNumber }).HasName("PK__Customer__78F59D220954F4C9").IsClustered();

            builder.Property(x => x.Customer).HasColumnName(@"Customer").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CustomerProductName).HasColumnName(@"CustomerProductName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CustomerBarcode).HasColumnName(@"CustomerBarcode").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerProductNumber).HasColumnName(@"CustomerProductNumber").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
        }
    }

    // CustomerProductsImport
    public class CustomerProductsImportConfiguration : IEntityTypeConfiguration<CustomerProductsImport>
    {
        public void Configure(EntityTypeBuilder<CustomerProductsImport> builder)
        {
            builder.ToTable("CustomerProductsImport", "dbo");
            builder.HasKey(x => x.CustomerProductsImportId);

            builder.Property(x => x.CustomerProductsImportId).HasColumnName(@"CustomerProductsImportID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ItemNumber).HasColumnName(@"ITEM_NUMBER").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ItemType).HasColumnName(@"ITEM_TYPE").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ItemDesc).HasColumnName(@"ITEM_DESC").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PrimaryUom).HasColumnName(@"PRIMARY_UOM").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.SecondaryOum).HasColumnName(@"SECONDARY_OUM").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DefaultLotStatus).HasColumnName(@"DEFAULT_LOT_STATUS").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ShelfLifeDays).HasColumnName(@"SHELF_LIFE_DAYS").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.PackSizeDesc).HasColumnName(@"PACK_SIZE_DESC").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StandardSkuDesc).HasColumnName(@"STANDARD_SKU_DESC").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ItemStatus).HasColumnName(@"ITEM_STATUS").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.SizeGram).HasColumnName(@"SIZE_GRAM").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.PackageKg).HasColumnName(@"PACKAGE_KG").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CategoryDesc).HasColumnName(@"CATEGORY_DESC").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // CustomerProperties
    public class CustomerPropertyConfiguration : IEntityTypeConfiguration<CustomerProperty>
    {
        public void Configure(EntityTypeBuilder<CustomerProperty> builder)
        {
            builder.ToTable("CustomerProperties", "dbo");
            builder.HasKey(x => x.CustomerId).HasName("PK_CustomerProperties").IsClustered();

            builder.Property(x => x.Basket).HasColumnName(@"Basket").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Pallet).HasColumnName(@"Pallet").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
        }
    }

    // CustomerQuotations
    public class CustomerQuotationConfiguration : IEntityTypeConfiguration<CustomerQuotation>
    {
        public void Configure(EntityTypeBuilder<CustomerQuotation> builder)
        {
            builder.ToTable("CustomerQuotations", "dbo");
            builder.HasKey(x => x.QuotationId).HasName("PK_CustomerQuotations").IsClustered();

            builder.Property(x => x.QuotationId).HasColumnName(@"QuotationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QuotationNumber).HasColumnName(@"QuotationNumber").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.QuotationDate).HasColumnName(@"QuotationDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.QuotationRemark).HasColumnName(@"QuotationRemark").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ReviewedBy).HasColumnName(@"ReviewedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ReviewTime).HasColumnName(@"ReviewTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ApprovedBy).HasColumnName(@"ApprovedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ApprovedTime).HasColumnName(@"ApprovedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReviewRemark).HasColumnName(@"ReviewRemark").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerInquiryId).HasColumnName(@"CustomerInquiryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuotationStatus).HasColumnName(@"QuotationStatus").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerResponse).HasColumnName(@"CustomerResponse").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.BdQuotationNumber).HasColumnName(@"BDQuotationNumber").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ValidPeriod).HasColumnName(@"ValidPeriod").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerRepresentative).HasColumnName(@"CustomerRepresentative").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerRepresentativePosition).HasColumnName(@"CustomerRepresentativePosition").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.VatDescriptionVietnam).HasColumnName(@"VATDescriptionVietnam").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.VatDescription).HasColumnName(@"VATDescription").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PreviousContractId).HasColumnName(@"PreviousContractID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CustomerQuotationStatu).WithMany(b => b.CustomerQuotations).HasForeignKey(c => c.QuotationStatus).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerQuotations_CustomerQuotationStatus");
        }
    }

    // CustomerQuotationDetails
    public class CustomerQuotationDetailConfiguration : IEntityTypeConfiguration<CustomerQuotationDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerQuotationDetail> builder)
        {
            builder.ToTable("CustomerQuotationDetails", "dbo");
            builder.HasKey(x => x.QuotationDetailId).HasName("PK_CustomerQuotationDetails").IsClustered();

            builder.Property(x => x.QuotationDetailId).HasColumnName(@"QuotationDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QuotationId).HasColumnName(@"QuotationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerInquiryServiceId).HasColumnName(@"CustomerInquiryServiceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UnitMeasurement).HasColumnName(@"UnitMeasurement").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ServiceDescription).HasColumnName(@"ServiceDescription").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.QuotationDetailRemark).HasColumnName(@"QuotationDetailRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.UnitRate).HasColumnName(@"UnitRate").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.CustomerComments).HasColumnName(@"CustomerComments").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ServiceScopeOfWork).HasColumnName(@"ServiceScopeOfWork").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ServiceScopeOfWorkVietnam).HasColumnName(@"ServiceScopeOfWorkVietnam").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EstimatedMonthlyVolume).HasColumnName(@"EstimatedMonthlyVolume").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.CustomerQuotation).WithMany(b => b.CustomerQuotationDetails).HasForeignKey(c => c.QuotationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerQuotationDetails_CustomerQuotations");

            builder.HasIndex(x => x.CustomerInquiryServiceId).HasName("IX_CustomerQuotationDetails_1");
        }
    }

    // CustomerQuotationStatus
    public class CustomerQuotationStatuConfiguration : IEntityTypeConfiguration<CustomerQuotationStatu>
    {
        public void Configure(EntityTypeBuilder<CustomerQuotationStatu> builder)
        {
            builder.ToTable("CustomerQuotationStatus", "dbo");
            builder.HasKey(x => x.QuotationStatusId).HasName("PK_CustomerQuotationStatus").IsClustered();

            builder.Property(x => x.QuotationStatusId).HasColumnName(@"QuotationStatusID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QuotationStatusDescriptions).HasColumnName(@"QuotationStatusDescriptions").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // CustomerRequirements
    public class CustomerRequirementConfiguration : IEntityTypeConfiguration<CustomerRequirement>
    {
        public void Configure(EntityTypeBuilder<CustomerRequirement> builder)
        {
            builder.ToTable("CustomerRequirements", "dbo");
            builder.HasKey(x => x.CustomerRequirementId).HasName("PK_CustomerRequirements").IsClustered();

            builder.Property(x => x.CustomerRequirementId).HasColumnName(@"CustomerRequirementID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RequirementDetails).HasColumnName(@"RequirementDetails").HasColumnType("nvarchar(3000)").IsRequired().HasMaxLength(3000);
            builder.Property(x => x.UpdateBy).HasColumnName(@"UpdateBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.RequirementConfirmed).HasColumnName(@"RequirementConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.ApprovedBy).HasColumnName(@"ApprovedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.RequirementCategory).HasColumnName(@"RequirementCategory").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerRequirementNumber).HasColumnName(@"CustomerRequirementNumber").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
        }
    }

    // CustomerRequirementProfiles
    public class CustomerRequirementProfileConfiguration : IEntityTypeConfiguration<CustomerRequirementProfile>
    {
        public void Configure(EntityTypeBuilder<CustomerRequirementProfile> builder)
        {
            builder.ToTable("CustomerRequirementProfiles", "dbo");
            builder.HasKey(x => x.CustomerRequirementProfileId).HasName("PK_CustomerRequirementProfiles").IsClustered();

            builder.Property(x => x.CustomerRequirementProfileId).HasColumnName(@"CustomerRequirementProfileID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerRequirementId).HasColumnName(@"CustomerRequirementID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProfileDate).HasColumnName(@"ProfileDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // CustomerSalesContracts
    public class CustomerSalesContractConfiguration : IEntityTypeConfiguration<CustomerSalesContract>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesContract> builder)
        {
            builder.ToTable("CustomerSalesContracts", "dbo");
            builder.HasKey(x => x.CustomerSalesContractId).HasName("PK_CustomerSalesContracts").IsClustered();

            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerSalesContractNumber).HasColumnName(@"CustomerSalesContractNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.SalesContractDate).HasColumnName(@"SalesContractDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SalesContractFromDate).HasColumnName(@"SalesContractFromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SalesContractToDate).HasColumnName(@"SalesContractToDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SalesContractRemark).HasColumnName(@"SalesContractRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.DiscountPercentage).HasColumnName(@"DiscountPercentage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CustomerSalesContractConfirmed).HasColumnName(@"CustomerSalesContractConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Stamp).HasColumnName(@"Stamp").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerSalesContractLocalId).HasColumnName(@"CustomerSalesContractLocalID").HasColumnType("int").IsRequired(false);
        }
    }

    // CustomerSalesContractDetails
    public class CustomerSalesContractDetailConfiguration : IEntityTypeConfiguration<CustomerSalesContractDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesContractDetail> builder)
        {
            builder.ToTable("CustomerSalesContractDetails", "dbo");
            builder.HasKey(x => x.CustomerSalesContractDetailId).HasName("PK_CustomerSalesContractDetails").IsClustered();

            builder.Property(x => x.CustomerSalesContractDetailId).HasColumnName(@"CustomerSalesContractDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.SalesProductCode).HasColumnName(@"SalesProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SalesProductCode2).HasColumnName(@"SalesProductCode2").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SalesProductName).HasColumnName(@"SalesProductName").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.SalesPrice).HasColumnName(@"SalesPrice").HasColumnType("real").IsRequired();
            builder.Property(x => x.SalesUnit).HasColumnName(@"SalesUnit").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.SalesUnitPerPackage).HasColumnName(@"SalesUnitPerPackage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CurrencyId).HasColumnName(@"CurrencyID").HasColumnType("nchar(10)").IsRequired().IsFixedLength().HasMaxLength(10);
            builder.Property(x => x.CustomerSalesContractDetailRemark).HasColumnName(@"CustomerSalesContractDetailRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // CustomerSalesContractHistory
    public class CustomerSalesContractHistoryConfiguration : IEntityTypeConfiguration<CustomerSalesContractHistory>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesContractHistory> builder)
        {
            builder.ToTable("CustomerSalesContractHistory", "dbo");
            builder.HasKey(x => x.ChangeContractId).HasName("PK_CustomerSalesContractHistory").IsClustered();

            builder.Property(x => x.ChangeContractId).HasColumnName(@"ChangeContractID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SalesProductCode).HasColumnName(@"SalesProductCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SalesPriceOld).HasColumnName(@"SalesPriceOld").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.SalesPriceNew).HasColumnName(@"SalesPriceNew").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ChangeContractDate).HasColumnName(@"ChangeContractDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ChangeContractBy).HasColumnName(@"ChangeContractBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // CustomerSalesInvoices
    public class CustomerSalesInvoiceConfiguration : IEntityTypeConfiguration<CustomerSalesInvoice>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesInvoice> builder)
        {
            builder.ToTable("CustomerSalesInvoices", "dbo");
            builder.HasKey(x => x.CustomerSalesInvoiceId).HasName("PK_CustomerSalesInvoices");

            builder.Property(x => x.CustomerSalesInvoiceId).HasColumnName(@"CustomerSalesInvoiceID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerSalesInvoiceDate).HasColumnName(@"CustomerSalesInvoiceDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerSalesInvoiceRemark).HasColumnName(@"CustomerSalesInvoiceRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.TotalAmount).HasColumnName(@"TotalAmount").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DiscountAmount).HasColumnName(@"DiscountAmount").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CurrencyId).HasColumnName(@"CurrencyID").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientRepresentative).HasColumnName(@"CustomerClientRepresentative").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerSalesOrderNumber).HasColumnName(@"CustomerSalesOrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerSalesOrderDate).HasColumnName(@"CustomerSalesOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.InvoiceOfficialNumber).HasColumnName(@"InvoiceOfficialNumber").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.InvoiceOfficialSerieName).HasColumnName(@"InvoiceOfficialSerieName").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerSalesInvoiceConfirmed).HasColumnName(@"CustomerSalesInvoiceConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CustomerPurchasingOrderNumber).HasColumnName(@"CustomerPurchasingOrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerSalesOrderReturn).HasColumnName(@"CustomerSalesOrderReturn").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.OrderReference).HasColumnName(@"OrderReference").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DriverPhoneNumber).HasColumnName(@"DriverPhoneNumber").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.PlanDate).HasColumnName(@"PlanDate").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TransporterId).HasColumnName(@"TransporterID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TransferName).HasColumnName(@"TransferName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Logger).HasColumnName(@"Logger").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ApprovalStatus).HasColumnName(@"ApprovalStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ApprovalComment).HasColumnName(@"ApprovalComment").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ApprovedBy).HasColumnName(@"ApprovedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ApprovalTime).HasColumnName(@"ApprovalTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DiscountAdditional).HasColumnName(@"DiscountAdditional").HasColumnType("float").IsRequired(false);

            builder.HasIndex(x => x.OrderNumber).HasName("IX_CustomerSalesInvoices");
            builder.HasIndex(x => x.CustomerSalesContractId).HasName("IX_CustomerSalesInvoices_1");
            builder.HasIndex(x => x.CustomerClientId).HasName("IX_CustomerSalesInvoices_2");
            builder.HasIndex(x => x.CustomerSalesOrderDate).HasName("IX_CustomerSalesInvoices_3");
        }
    }

    // CustomerSalesInvoiceDetails
    public class CustomerSalesInvoiceDetailConfiguration : IEntityTypeConfiguration<CustomerSalesInvoiceDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesInvoiceDetail> builder)
        {
            builder.ToTable("CustomerSalesInvoiceDetails", "dbo");
            builder.HasKey(x => x.CustomerSalesInvoiceDetailId).HasName("PK_CustomerSalesInvoiceDetails").IsClustered();

            builder.Property(x => x.CustomerSalesInvoiceDetailId).HasColumnName(@"CustomerSalesInvoiceDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesInvoiceId).HasColumnName(@"CustomerSalesInvoiceID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.OrderQuantity).HasColumnName(@"OrderQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OrderUnitQuanity).HasColumnName(@"OrderUnitQuanity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedQuantity).HasColumnName(@"DispatchedQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvoiceUnit).HasColumnName(@"InvoiceUnit").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.InvoicePrice).HasColumnName(@"InvoicePrice").HasColumnType("real").IsRequired();
            builder.Property(x => x.InvoiceQuantity).HasColumnName(@"InvoiceQuantity").HasColumnType("real").IsRequired();
            builder.Property(x => x.CustomerSalesInvoiceDetailRemark).HasColumnName(@"CustomerSalesInvoiceDetailRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.UpdateBy).HasColumnName(@"UpdateBy").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CustomerDispatchType).HasColumnName(@"CustomerDispatchType").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OddPieceQuanity).HasColumnName(@"OddPieceQuanity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Promotion).HasColumnName(@"Promotion").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductDiscountPercentage).HasColumnName(@"ProductDiscountPercentage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OrderUnitQuanityCheck).HasColumnName(@"OrderUnitQuanityCheck").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerSalesContractDetailId).HasColumnName(@"CustomerSalesContractDetailID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Unfreeze).HasColumnName(@"Unfreeze").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OrderQuantityBook).HasColumnName(@"OrderQuantityBook").HasColumnType("float").IsRequired(false);

            builder.HasIndex(x => x.CustomerSalesInvoiceId).HasName("IX_CustomerSalesInvoiceDetails");
        }
    }

    // CustomerSalesInvoicePallets
    public class CustomerSalesInvoicePalletConfiguration : IEntityTypeConfiguration<CustomerSalesInvoicePallet>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesInvoicePallet> builder)
        {
            builder.ToTable("CustomerSalesInvoicePallets", "dbo");
            builder.HasKey(x => x.CustomerSalesInvoicePalletId).HasName("PK_CustomerSalesInvoicePallets").IsClustered();

            builder.Property(x => x.CustomerSalesInvoicePalletId).HasColumnName(@"CustomerSalesInvoicePalletID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesInvoiceDetailId).HasColumnName(@"CustomerSalesInvoiceDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PlanQuantity).HasColumnName(@"PlanQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PalletRemark).HasColumnName(@"PalletRemark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.SelfLifePercentage).HasColumnName(@"SelfLifePercentage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderUnitQuantity).HasColumnName(@"OrderUnitQuantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.OrderUnitQuantityBook).HasColumnName(@"OrderUnitQuantityBook").HasColumnType("int").IsRequired();

            builder.HasIndex(x => x.PalletId).HasName("IX_CustomerSalesInvoicePallets");
            builder.HasIndex(x => x.CustomerSalesInvoiceDetailId).HasName("IX_CustomerSalesInvoicePallets_1");
        }
    }

    // CustomerSalesOrders
    public class CustomerSalesOrderConfiguration : IEntityTypeConfiguration<CustomerSalesOrder>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesOrder> builder)
        {
            builder.ToTable("CustomerSalesOrders", "dbo");
            builder.HasKey(x => x.CustomerSalesOrderId).HasName("PK_CustomerSaleOrders").IsClustered();

            builder.Property(x => x.CustomerSalesOrderId).HasColumnName(@"CustomerSalesOrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SaleOrderNumber).HasColumnName(@"SaleOrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Uom1).HasColumnName(@"Uom1").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderQty1).HasColumnName(@"OrderQty1").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Uom2).HasColumnName(@"Uom2").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderQty2).HasColumnName(@"OrderQty2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // CustomerSalesOrdersImport
    public class CustomerSalesOrdersImportConfiguration : IEntityTypeConfiguration<CustomerSalesOrdersImport>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesOrdersImport> builder)
        {
            builder.ToTable("CustomerSalesOrdersImport", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_CustomerSalesOrderImport").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OuName).HasColumnName(@"OU_NAME").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.OrderNumber).HasColumnName(@"ORDER_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Name).HasColumnName(@"NAME").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustPoNumber).HasColumnName(@"CUST_PO_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CUSTOMER_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CUSTOMER_NAME").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BillToLocation).HasColumnName(@"BILL_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BillToAddress).HasColumnName(@"BILL_TO_ADDRESS").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ShipToAddress).HasColumnName(@"SHIP_TO_ADDRESS").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.OrderedDate).HasColumnName(@"ORDERED_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DeliveryDate).HasColumnName(@"Delivery_Date").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ScheduleShipDate).HasColumnName(@"SCHEDULE_SHIP_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderedItem).HasColumnName(@"ORDERED_ITEM").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ItemDescription).HasColumnName(@"ITEM_DESCRIPTION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Uom1).HasColumnName(@"UOM1").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderedQty1).HasColumnName(@"ORDERED_QTY1").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Uom2).HasColumnName(@"UOM2").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderedQty2).HasColumnName(@"ORDERED_QTY2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DetailId).HasColumnName(@"DETAIL_ID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Hold).HasColumnName(@"HOLD").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.PoWeight).HasColumnName(@"PO_WEIGHT").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Tolerance).HasColumnName(@"TOLERANCE").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // CustomerSalesPromotions
    public class CustomerSalesPromotionConfiguration : IEntityTypeConfiguration<CustomerSalesPromotion>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesPromotion> builder)
        {
            builder.ToTable("CustomerSalesPromotions", "dbo");
            builder.HasKey(x => x.CustomerSalesPromotionId).HasName("PK_CustomerSalesPromotions").IsClustered();

            builder.Property(x => x.CustomerSalesPromotionId).HasColumnName(@"CustomerSalesPromotionID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerSalesPromotionDate).HasColumnName(@"CustomerSalesPromotionDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesPromotionFromDate).HasColumnName(@"CustomerSalesPromotionFromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesPromotionToDate).HasColumnName(@"CustomerSalesPromotionToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesPromotionRemark).HasColumnName(@"CustomerSalesPromotionRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CustomerSalesPromotionName).HasColumnName(@"CustomerSalesPromotionName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // CustomerSalesPromotionDetails
    public class CustomerSalesPromotionDetailConfiguration : IEntityTypeConfiguration<CustomerSalesPromotionDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesPromotionDetail> builder)
        {
            builder.ToTable("CustomerSalesPromotionDetails", "dbo");
            builder.HasKey(x => x.CustomerSalesPromotionDetailId).HasName("PK_CustomerSalesPromotionDetails").IsClustered();

            builder.Property(x => x.CustomerSalesPromotionDetailId).HasColumnName(@"CustomerSalesPromotionDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesPromotionId).HasColumnName(@"CustomerSalesPromotionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SalesProductName).HasColumnName(@"SalesProductName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerSalesPromotionDetailRemark).HasColumnName(@"CustomerSalesPromotionDetailRemark").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // CustomerSalesPromotionProducts
    public class CustomerSalesPromotionProductConfiguration : IEntityTypeConfiguration<CustomerSalesPromotionProduct>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesPromotionProduct> builder)
        {
            builder.ToTable("CustomerSalesPromotionProducts", "dbo");
            builder.HasKey(x => x.CustomerSalesPromotionProductId).HasName("PK_CustomerSalesPromotionProducts").IsClustered();

            builder.Property(x => x.CustomerSalesPromotionProductId).HasColumnName(@"CustomerSalesPromotionProductID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesPromotionDetailId).HasColumnName(@"CustomerSalesPromotionDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerSalesPromotionProductRemark).HasColumnName(@"CustomerSalesPromotionProductRemark").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.ProductDiscountPercentage).HasColumnName(@"ProductDiscountPercentage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.BuyingUnitQuantity).HasColumnName(@"BuyingUnitQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.PromotionUnitQuantity).HasColumnName(@"PromotionUnitQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.SalesProductName).HasColumnName(@"SalesProductName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustomerSalesContractDetailId).HasColumnName(@"CustomerSalesContractDetailID").HasColumnType("int").IsRequired(false);
        }
    }

    // CustomerSalesTargets
    public class CustomerSalesTargetConfiguration : IEntityTypeConfiguration<CustomerSalesTarget>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesTarget> builder)
        {
            builder.ToTable("CustomerSalesTargets", "dbo");
            builder.HasKey(x => x.CustomerSalesTargetId).HasName("PK_CustomerSalesTargets").IsClustered();

            builder.Property(x => x.CustomerSalesTargetId).HasColumnName(@"CustomerSalesTargetID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerSalesTargetDate).HasColumnName(@"CustomerSalesTargetDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesTargetFromDate).HasColumnName(@"CustomerSalesTargetFromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesTargetToDate).HasColumnName(@"CustomerSalesTargetToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesTargetRemark).HasColumnName(@"CustomerSalesTargetRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CustomerSalesTargetName).HasColumnName(@"CustomerSalesTargetName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // CustomerSalesTargetDetails
    public class CustomerSalesTargetDetailConfiguration : IEntityTypeConfiguration<CustomerSalesTargetDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerSalesTargetDetail> builder)
        {
            builder.ToTable("CustomerSalesTargetDetails", "dbo");
            builder.HasKey(x => x.CustomerSalesTargetDetailId).HasName("PK_CustomerSalesTargetDetails").IsClustered();

            builder.Property(x => x.CustomerSalesTargetDetailId).HasColumnName(@"CustomerSalesTargetDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesTargetId).HasColumnName(@"CustomerSalesTargetID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SalesProductName).HasColumnName(@"SalesProductName").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesTargetDetailRemark).HasColumnName(@"CustomerSalesTargetDetailRemark").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // CustomerServices
    public class CustomerServiceConfiguration : IEntityTypeConfiguration<CustomerService>
    {
        public void Configure(EntityTypeBuilder<CustomerService> builder)
        {
            builder.ToTable("CustomerServices", "dbo");
            builder.HasKey(x => x.CustomerId).HasName("PK_CustomerServices").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Sw).HasColumnName(@"SW").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Sc).HasColumnName(@"SC").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Sp).HasColumnName(@"SP").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Hw).HasColumnName(@"HW").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Hc).HasColumnName(@"HC").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Hp).HasColumnName(@"HP").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Dsc).HasColumnName(@"DSC").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Mff).HasColumnName(@"MFF").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Dff).HasColumnName(@"DFF").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Gsf).HasColumnName(@"GSF").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ManualBill).HasColumnName(@"ManualBill").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BillingSpecialRequirement).HasColumnName(@"BillingSpecialRequirement").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.BillingCycle).HasColumnName(@"BillingCycle").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.LimitedWeight).HasColumnName(@"LimitedWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.LimitedPallet).HasColumnName(@"LimitedPallet").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.LimitedWeight2).HasColumnName(@"LimitedWeight2").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.LimitedPallet2).HasColumnName(@"LimitedPallet2").HasColumnType("real").IsRequired(false);
        }
    }

    // CustomerServiceCosting
    public class CustomerServiceCostingConfiguration : IEntityTypeConfiguration<CustomerServiceCosting>
    {
        public void Configure(EntityTypeBuilder<CustomerServiceCosting> builder)
        {
            builder.ToTable("CustomerServiceCosting", "dbo");
            builder.HasKey(x => x.CustomerServiceCostingId).HasName("PK_CustomerServiceCosting").IsClustered();

            builder.Property(x => x.CustomerServiceCostingId).HasColumnName(@"CustomerServiceCostingID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CostingDate).HasColumnName(@"CostingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerServiceCostingRemark).HasColumnName(@"CustomerServiceCostingRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ApprovedBy).HasColumnName(@"ApprovedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ApprovedTime).HasColumnName(@"ApprovedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Approved).HasColumnName(@"Approved").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ServiceDetailDescription).HasColumnName(@"ServiceDetailDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ServiceProvidedDate).HasColumnName(@"ServiceProvidedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TotalServiceQuantity).HasColumnName(@"TotalServiceQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TotalCalculatedCost).HasColumnName(@"TotalCalculatedCost").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UnitCost).HasColumnName(@"UnitCost").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WorkerDailyProductivity).HasColumnName(@"WorkerDailyProductivity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProposedWorkerRate).HasColumnName(@"ProposedWorkerRate").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProposedOverheadMargin).HasColumnName(@"ProposedOverheadMargin").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProposedServicePrice).HasColumnName(@"ProposedServicePrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ActualProposedWorkerRate).HasColumnName(@"ActualProposedWorkerRate").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CustomerServiceCostingProcess).HasColumnName(@"CustomerServiceCostingProcess").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.CustomerServiceCostNumber).HasColumnName(@"CustomerServiceCostNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.IsoFormNumber).HasColumnName(@"ISOFormNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CustomerServiceCostingDetails
    public class CustomerServiceCostingDetailConfiguration : IEntityTypeConfiguration<CustomerServiceCostingDetail>
    {
        public void Configure(EntityTypeBuilder<CustomerServiceCostingDetail> builder)
        {
            builder.ToTable("CustomerServiceCostingDetails", "dbo");
            builder.HasKey(x => x.CustomerServiceCostingDetailId).HasName("PK_CustomerServiceCostingDetails").IsClustered();

            builder.Property(x => x.CustomerServiceCostingDetailId).HasColumnName(@"CustomerServiceCostingDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerServiceCostingId).HasColumnName(@"CustomerServiceCostingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ItemDescription).HasColumnName(@"ItemDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ItemQuantity).HasColumnName(@"ItemQuantity").HasColumnType("real").IsRequired();
            builder.Property(x => x.ItemUnitOfMeasure).HasColumnName(@"ItemUnitOfMeasure").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.ItemUnitRate).HasColumnName(@"ItemUnitRate").HasColumnType("real").IsRequired();
            builder.Property(x => x.ItemRemark).HasColumnName(@"ItemRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);

            builder.HasIndex(x => x.CustomerServiceCostingId).HasName("IX_CustomerServiceCostingDetails");
        }
    }

    // CustomerStatus
    public class CustomerStatuConfiguration : IEntityTypeConfiguration<CustomerStatu>
    {
        public void Configure(EntityTypeBuilder<CustomerStatu> builder)
        {
            builder.ToTable("CustomerStatus", "dbo");
            builder.HasKey(x => x.CustomerStatus).HasName("PK_CustomerStatus").IsClustered();

            builder.Property(x => x.CustomerStatus).HasColumnName(@"CustomerStatus").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Customers_tmp
    public class CustomersTmpConfiguration : IEntityTypeConfiguration<CustomersTmp>
    {
        public void Configure(EntityTypeBuilder<CustomersTmp> builder)
        {
            builder.ToTable("Customers_tmp", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Customers_tmp").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerNumberAccounting).HasColumnName(@"CustomerNumberAccounting").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerNumberErp).HasColumnName(@"CustomerNumberERP").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // CustomerSuppliers
    public class CustomerSupplierConfiguration : IEntityTypeConfiguration<CustomerSupplier>
    {
        public void Configure(EntityTypeBuilder<CustomerSupplier> builder)
        {
            builder.ToTable("CustomerSuppliers", "dbo");
            builder.HasKey(x => x.CustomerSupplierId).HasName("PK_CustomerSuppliers").IsClustered();

            builder.Property(x => x.CustomerSupplierId).HasColumnName(@"CustomerSupplierID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerSupplierMainId).HasColumnName(@"CustomerSupplierMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerSupplierCode).HasColumnName(@"CustomerSupplierCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerSupplierName).HasColumnName(@"CustomerSupplierName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerSupplierAddress).HasColumnName(@"CustomerSupplierAddress").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerSupplierPhone).HasColumnName(@"CustomerSupplierPhone").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerSupplierEmail).HasColumnName(@"CustomerSupplierEmail").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerSupplierContacts).HasColumnName(@"CustomerSupplierContacts").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerSupplierDescriptions).HasColumnName(@"CustomerSupplierDescriptions").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CustomerSupplierTaxName).HasColumnName(@"CustomerSupplierTaxName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerSupplierTaxCode).HasColumnName(@"CustomerSupplierTaxCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CustomerSupplierDeliveryAddress).HasColumnName(@"CustomerSupplierDeliveryAddress").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // CustomerTaxGroups
    public class CustomerTaxGroupConfiguration : IEntityTypeConfiguration<CustomerTaxGroup>
    {
        public void Configure(EntityTypeBuilder<CustomerTaxGroup> builder)
        {
            builder.ToTable("CustomerTaxGroups", "dbo");
            builder.HasKey(x => x.CustomerTaxGroup_).HasName("PK_CustomerTaxGroups").IsClustered();

            builder.Property(x => x.CustomerTaxGroup_).HasColumnName(@"CustomerTaxGroup").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100).ValueGeneratedNever();
        }
    }

    // CustomerType
    public class CustomerTypeConfiguration : IEntityTypeConfiguration<CustomerType>
    {
        public void Configure(EntityTypeBuilder<CustomerType> builder)
        {
            builder.ToTable("CustomerType", "dbo");
            builder.HasKey(x => x.CustomerType_).HasName("PK_CustomerType").IsClustered();

            builder.Property(x => x.CustomerType_).HasColumnName(@"CustomerType").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // DailyChecks
    public class DailyCheckConfiguration : IEntityTypeConfiguration<DailyCheck>
    {
        public void Configure(EntityTypeBuilder<DailyCheck> builder)
        {
            builder.ToTable("DailyChecks", "dbo");
            builder.HasKey(x => x.DailyCheckId).HasName("PK_DailyChecks").IsClustered();

            builder.Property(x => x.DailyCheckId).HasColumnName(@"DailyCheckID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SupervisorId).HasColumnName(@"SupervisorID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DailyCheckRemark).HasColumnName(@"DailyCheckRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DailyCheckDate).HasColumnName(@"DailyCheckDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DailyCheckCreateDate).HasColumnName(@"DailyCheckCreateDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ColdRooms).HasColumnName(@"ColdRooms").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ColdRoomRemark).HasColumnName(@"ColdRoomRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Doors).HasColumnName(@"Doors").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DoorRemark).HasColumnName(@"DoorRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.AmenitiesRooms).HasColumnName(@"AmenitiesRooms").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AmenitiesRoomsRemark).HasColumnName(@"AmenitiesRoomsRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.RepackingRooms).HasColumnName(@"RepackingRooms").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RepackingRoomsRemark).HasColumnName(@"RepackingRoomsRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Annex).HasColumnName(@"Annex").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AnnexRemark).HasColumnName(@"AnnexRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Mhe).HasColumnName(@"MHE").HasColumnType("bit").IsRequired();
            builder.Property(x => x.MheRemark).HasColumnName(@"MHERemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Products).HasColumnName(@"Products").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ProductRemark).HasColumnName(@"ProductRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Yard).HasColumnName(@"Yard").HasColumnType("bit").IsRequired();
            builder.Property(x => x.YardRemark).HasColumnName(@"YardRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ReadStatus).HasColumnName(@"ReadStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ReadBy).HasColumnName(@"ReadBy").HasColumnType("char(100)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ReadComment).HasColumnName(@"ReadComment").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DailyCheckConfirmed).HasColumnName(@"DailyCheckConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.SupervisorId).HasName("IX_DailyChecks");
        }
    }

    // DailyCheckDetails
    public class DailyCheckDetailConfiguration : IEntityTypeConfiguration<DailyCheckDetail>
    {
        public void Configure(EntityTypeBuilder<DailyCheckDetail> builder)
        {
            builder.ToTable("DailyCheckDetails", "dbo");
            builder.HasKey(x => x.DailyCheckDetailId).HasName("PK_DailyCheckDetails").IsClustered();

            builder.Property(x => x.DailyCheckDetailId).HasColumnName(@"DailyCheckDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DailyCheckId).HasColumnName(@"DailyCheckID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ColdRooms).HasColumnName(@"ColdRooms").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ColdRoomRemark).HasColumnName(@"ColdRoomRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Doors).HasColumnName(@"Doors").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DoorRemark).HasColumnName(@"DoorRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.AmenitiesRooms).HasColumnName(@"AmenitiesRooms").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AmenitiesRoomsRemark).HasColumnName(@"AmenitiesRoomsRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.RepackingRooms).HasColumnName(@"RepackingRooms").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RepackingRoomsRemark).HasColumnName(@"RepackingRoomsRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Annex).HasColumnName(@"Annex").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AnnexRemark).HasColumnName(@"AnnexRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);

            builder.HasIndex(x => x.DailyCheckId).HasName("IX_DailyCheckDetails");
        }
    }

    // DailyPrintedLunch
    public class DailyPrintedLunchConfiguration : IEntityTypeConfiguration<DailyPrintedLunch>
    {
        public void Configure(EntityTypeBuilder<DailyPrintedLunch> builder)
        {
            builder.ToTable("DailyPrintedLunch", "dbo");
            builder.HasKey(x => x.LunchId).HasName("PK_Lunch").IsClustered();

            builder.Property(x => x.LunchId).HasColumnName(@"LunchID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PrintedDate).HasColumnName(@"PrintedDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Shift).HasColumnName(@"Shift").HasColumnType("tinyint").IsRequired();
        }
    }

    // DailyTask
    public class DailyTaskConfiguration : IEntityTypeConfiguration<DailyTask>
    {
        public void Configure(EntityTypeBuilder<DailyTask> builder)
        {
            builder.ToTable("DailyTask", "dbo");
            builder.HasKey(x => x.TaskId).HasName("PK_DailyTask").IsClustered();

            builder.Property(x => x.TaskId).HasColumnName(@"TaskID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TaskDescription).HasColumnName(@"TaskDescription").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.TaskCreatedTime).HasColumnName(@"TaskCreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TaskDone).HasColumnName(@"TaskDone").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DoneBy).HasColumnName(@"DoneBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DoneTime).HasColumnName(@"DoneTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Sticky).HasColumnName(@"Sticky").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Forguard).HasColumnName(@"Forguard").HasColumnType("bit").IsRequired();
        }
    }

    // DailyWorks
    public class DailyWorkConfiguration : IEntityTypeConfiguration<DailyWork>
    {
        public void Configure(EntityTypeBuilder<DailyWork> builder)
        {
            builder.ToTable("DailyWorks", "dbo");
            builder.HasKey(x => x.DailyWorkId).HasName("PK_DailyWorks").IsClustered();

            builder.Property(x => x.DailyWorkId).HasColumnName(@"DailyWorkID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Deadline).HasColumnName(@"Deadline").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WorkDescription).HasColumnName(@"WorkDescription").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ApplicationId).HasColumnName(@"ApplicationID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ImplementationStatus).HasColumnName(@"ImplementationStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ImplementationBy).HasColumnName(@"ImplementationBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.AssignedTo).HasColumnName(@"AssignedTo").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.RequestBy).HasColumnName(@"RequestBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkCategory).HasColumnName(@"WorkCategory").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // DeletedDispatchingProducts
    public class DeletedDispatchingProductConfiguration : IEntityTypeConfiguration<DeletedDispatchingProduct>
    {
        public void Configure(EntityTypeBuilder<DeletedDispatchingProduct> builder)
        {
            builder.ToTable("DeletedDispatchingProducts", "dbo");
            builder.HasKey(x => new { x.DispatchingOrderDetailId, x.DispatchingOrderId, x.DispatchingProductId });

            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingQuantity).HasColumnName(@"DispatchingQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingDeletedBy).HasColumnName(@"DispatchingDeletedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingDeleteDate).HasColumnName(@"DispatchingDeleteDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SendStatus).HasColumnName(@"SendStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SendTime).HasColumnName(@"SendTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRefDetailId).HasColumnName(@"CustomerRef_DetailID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PackingPercentage).HasColumnName(@"PackingPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CustomerRef2).HasColumnName(@"CustomerRef2").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DeliveryActual).HasColumnName(@"DeliveryActual").HasColumnType("int").IsRequired(false);
        }
    }

    // DeletedQuarantines
    public class DeletedQuarantineConfiguration : IEntityTypeConfiguration<DeletedQuarantine>
    {
        public void Configure(EntityTypeBuilder<DeletedQuarantine> builder)
        {
            builder.ToTable("DeletedQuarantines", "dbo");
            builder.HasKey(x => x.QuarantineId).HasName("PK_DeletedQuarantines").IsClustered();

            builder.Property(x => x.QuarantineId).HasColumnName(@"QuarantineID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.QuarantineDate).HasColumnName(@"QuarantineDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.QuarantineRemark).HasColumnName(@"QuarantineRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.QuarantineConfirm).HasColumnName(@"QuarantineConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.QuarantineType).HasColumnName(@"QuarantineType").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.QuarantineNumber).HasColumnName(@"QuarantineNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // DeletedQuarantineDetails
    public class DeletedQuarantineDetailConfiguration : IEntityTypeConfiguration<DeletedQuarantineDetail>
    {
        public void Configure(EntityTypeBuilder<DeletedQuarantineDetail> builder)
        {
            builder.ToTable("DeletedQuarantineDetails", "dbo");
            builder.HasKey(x => x.QuarantineDetailId).HasName("PK_DeletedQuarantineDetails").IsClustered();

            builder.Property(x => x.QuarantineDetailId).HasColumnName(@"QuarantineDetailID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.QuarantineId).HasColumnName(@"QuarantineID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(18,5)").IsRequired();
            builder.Property(x => x.QuarantineDetailRemark).HasColumnName(@"QuarantineDetailRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.IcUser).HasColumnName(@"ICUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // DeletedReceivingOrderDetails
    public class DeletedReceivingOrderDetailConfiguration : IEntityTypeConfiguration<DeletedReceivingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<DeletedReceivingOrderDetail> builder)
        {
            builder.ToTable("DeletedReceivingOrderDetails", "dbo");
            builder.HasKey(x => x.ReceivingOrderDetailId).HasName("PK_DeletedReceivingOrderDetails").IsClustered();

            builder.Property(x => x.ReceivingQuantity).HasColumnName(@"ReceivingQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingDeletedBy).HasColumnName(@"ReceivingDeletedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReceivingDeleteDate).HasColumnName(@"ReceivingDeleteDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingProductId).HasColumnName(@"ReceivingProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerRef2).HasColumnName(@"CustomerRef2").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PalletHeight).HasColumnName(@"PalletHeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.PackingListQuantity).HasColumnName(@"PackingListQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Origin).HasColumnName(@"Origin").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RejectPercentage).HasColumnName(@"RejectPercentage").HasColumnType("decimal(10,4)").IsRequired(false);
            builder.Property(x => x.PackagingWeight).HasColumnName(@"PackagingWeight").HasColumnType("decimal(10,4)").IsRequired(false);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // DeliveryOrders
    public class DeliveryOrderConfiguration : IEntityTypeConfiguration<DeliveryOrder>
    {
        public void Configure(EntityTypeBuilder<DeliveryOrder> builder)
        {
            builder.ToTable("DeliveryOrders", "dbo");
            builder.HasKey(x => x.DeliveryOrderId).HasName("PK_DeliveryOrders").IsClustered();

            builder.Property(x => x.DeliveryOrderId).HasColumnName(@"DeliveryOrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DeliveryOrderNumber).HasColumnName(@"DeliveryOrderNumber").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.DeliveryOrderDate).HasColumnName(@"DeliveryOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Deadline).HasColumnName(@"Deadline").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(12)").IsRequired().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeliveryOrderRemark).HasColumnName(@"DeliveryOrderRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nchar(25)").IsRequired(false).IsFixedLength().HasMaxLength(25);
            builder.Property(x => x.DeliveryStatus).HasColumnName(@"DeliveryStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DeliveryType).HasColumnName(@"DeliveryType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PaymentMethod).HasColumnName(@"PaymentMethod").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Money).HasColumnName(@"Money").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.RejectReason).HasColumnName(@"RejectReason").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // DeliveryOrderDetails
    public class DeliveryOrderDetailConfiguration : IEntityTypeConfiguration<DeliveryOrderDetail>
    {
        public void Configure(EntityTypeBuilder<DeliveryOrderDetail> builder)
        {
            builder.ToTable("DeliveryOrderDetails", "dbo");
            builder.HasKey(x => x.DeliveryOrderDetailId).HasName("PK_DeliveryOrderDetails").IsClustered();

            builder.Property(x => x.DeliveryOrderDetailId).HasColumnName(@"DeliveryOrderDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DeliveryOrderId).HasColumnName(@"DeliveryOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(12)").IsRequired().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.DeliveryStatus).HasColumnName(@"DeliveryStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalPackagesActual).HasColumnName(@"TotalPackagesActual").HasColumnType("int").IsRequired(false);
        }
    }

    // DeliveryStatusDefinitions
    public class DeliveryStatusDefinitionConfiguration : IEntityTypeConfiguration<DeliveryStatusDefinition>
    {
        public void Configure(EntityTypeBuilder<DeliveryStatusDefinition> builder)
        {
            builder.ToTable("DeliveryStatusDefinitions", "dbo");
            builder.HasKey(x => x.DeliveryStatusDefinitionId).HasName("PK_DeliveryStatusDefinitions").IsClustered();

            builder.Property(x => x.DeliveryStatusDefinitionId).HasColumnName(@"DeliveryStatusDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DeliveryStatusDescription).HasColumnName(@"DeliveryStatusDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // Departments
    public class DepartmentConfiguration : IEntityTypeConfiguration<Department>
    {
        public void Configure(EntityTypeBuilder<Department> builder)
        {
            builder.ToTable("Departments", "dbo");
            builder.HasKey(x => x.DepartmentId).HasName("PK_Departments").IsClustered();

            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentNameShort).HasColumnName(@"DepartmentNameShort").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.DepartmentNameVietnam).HasColumnName(@"DepartmentNameVietnam").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.UserDepartmentDefinitionId).HasColumnName(@"UserDepartmentDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SlackChannel).HasColumnName(@"SlackChannel").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.SlackToken).HasColumnName(@"SlackToken").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.WarehouseId).HasColumnName(@"WarehouseID").HasColumnType("int").IsRequired(false);
        }
    }

    // DestinationPorts
    public class DestinationPortConfiguration : IEntityTypeConfiguration<DestinationPort>
    {
        public void Configure(EntityTypeBuilder<DestinationPort> builder)
        {
            builder.ToTable("DestinationPorts", "dbo");
            builder.HasKey(x => x.DestinationPortId).HasName("PK_DestinationPorts").IsClustered();

            builder.Property(x => x.DestinationPortId).HasColumnName(@"DestinationPortID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DestinationPortName).HasColumnName(@"DestinationPortName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // DispatchingCartons
    public class DispatchingCartonConfiguration : IEntityTypeConfiguration<DispatchingCarton>
    {
        public void Configure(EntityTypeBuilder<DispatchingCarton> builder)
        {
            builder.ToTable("DispatchingCartons", "dbo");
            builder.HasKey(x => x.DispatchingCartonId).HasName("PK_DispatchingCartons").IsClustered();

            builder.Property(x => x.DispatchingCartonId).HasColumnName(@"DispatchingCartonID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletCartonId).HasColumnName(@"PalletCartonID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CartonWeight).HasColumnName(@"CartonWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingRemark).HasColumnName(@"DispatchingRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CartonUnit).HasColumnName(@"CartonUnit").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);

            // Foreign keys
            builder.HasOne(a => a.DispatchingOrderDetail).WithMany(b => b.DispatchingCartons).HasForeignKey(c => c.DispatchingOrderDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingCartons_DispatchingOrderDetails");
        }
    }

    // DispatchingCartons_temp
    public class DispatchingCartonsTempConfiguration : IEntityTypeConfiguration<DispatchingCartonsTemp>
    {
        public void Configure(EntityTypeBuilder<DispatchingCartonsTemp> builder)
        {
            builder.ToTable("DispatchingCartons_temp", "dbo");
            builder.HasKey(x => x.DispatchingCartonId).HasName("PK_DispatchingCartons_copy1").IsClustered();

            builder.Property(x => x.DispatchingCartonId).HasColumnName(@"DispatchingCartonID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletCartonId).HasColumnName(@"PalletCartonID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CartonWeight).HasColumnName(@"CartonWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingRemark).HasColumnName(@"DispatchingRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CartonUnit).HasColumnName(@"CartonUnit").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // DispatchingOrders
    public class DispatchingOrderConfiguration : IEntityTypeConfiguration<DispatchingOrder>
    {
        public void Configure(EntityTypeBuilder<DispatchingOrder> builder)
        {
            builder.ToTable("DispatchingOrders", "dbo");
            builder.HasKey(x => x.DispatchingOrderId).HasName("PK_DispatchingOrders");

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.DispatchingOrderLocalId).HasColumnName(@"DispatchingOrderLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingOrderRemark).HasColumnName(@"DispatchingOrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.InternalRemark).HasColumnName(@"InternalRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DispatchingOrderProgress).HasColumnName(@"DispatchingOrderProgress").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Electricity).HasColumnName(@"Electricity").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ProgressPercentage).HasColumnName(@"ProgressPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.IsAttachment).HasColumnName(@"IsAttachment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DockDoorId).HasColumnName(@"DockDoorID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PickingPercentage).HasColumnName(@"PickingPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustPoNumber).HasColumnName(@"CUST_PO_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RouteId).HasColumnName(@"RouteID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TransporterId).HasColumnName(@"TransporterID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PackingPercentage).HasColumnName(@"PackingPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PerformanceCategoryId).HasColumnName(@"PerformanceCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DeliveryId).HasColumnName(@"DeliveryID").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.OrderTypeId).HasColumnName(@"OrderTypeID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.TotalCarton).HasColumnName(@"TotalCarton").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AtmOrderReleaseId).HasColumnName(@"ATM_OrderReleaseID").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.DispatchingOrders).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingOrders_Customers");

            builder.HasIndex(x => new { x.DispatchingOrderNumber, x.CustomerId, x.CustomerClientId }).HasName("IX_DispatchingOrders_2");
        }
    }

    // DispatchingOrderDetails
    public class DispatchingOrderDetailConfiguration : IEntityTypeConfiguration<DispatchingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<DispatchingOrderDetail> builder)
        {
            builder.ToTable("DispatchingOrderDetails", "dbo");
            builder.HasKey(x => x.DispatchingOrderDetailId).HasName("PK_DispatchingOrderDetails");

            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.PackageQuantity).HasColumnName(@"PackageQuantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailRemark).HasColumnName(@"DispatchingOrderDetailRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CheckBreak).HasColumnName(@"CheckBreak").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingScannedBy).HasColumnName(@"DispatchingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingScannedTime).HasColumnName(@"DispatchingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PickingScannedBy).HasColumnName(@"PickingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PickingScannedTime).HasColumnName(@"PickingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PrintedTime).HasColumnName(@"PrintedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PrintedPickingList).HasColumnName(@"PrintedPickingList").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ActualQuantity).HasColumnName(@"ActualQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedBy).HasColumnName(@"DispatchedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.QtyRemainAtPallet).HasColumnName(@"QtyRemainAtPallet").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.DispatchingProduct).WithMany(b => b.DispatchingOrderDetails).HasForeignKey(c => c.DispatchingProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingOrderDetails_DispatchingProducts");
            builder.HasOne(a => a.Pallet).WithMany(b => b.DispatchingOrderDetails).HasForeignKey(c => c.PalletId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingOrderDetails_Pallets");

            builder.HasIndex(x => new { x.DispatchingProductId, x.PalletId }).HasName("IX_DispatchingOrderDetails");
        }
    }

    // DispatchingOrderIsPrintedPikingList
    public class DispatchingOrderIsPrintedPikingListConfiguration : IEntityTypeConfiguration<DispatchingOrderIsPrintedPikingList>
    {
        public void Configure(EntityTypeBuilder<DispatchingOrderIsPrintedPikingList> builder)
        {
            builder.ToTable("DispatchingOrderIsPrintedPikingList", "dbo");
            builder.HasKey(x => x.DispatchingOrderId).HasName("PK__Dispatch__26CC7AFC22249B99").IsClustered();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
        }
    }

    // DispatchingPallets
    public class DispatchingPalletConfiguration : IEntityTypeConfiguration<DispatchingPallet>
    {
        public void Configure(EntityTypeBuilder<DispatchingPallet> builder)
        {
            builder.ToTable("DispatchingPallets", "dbo");
            builder.HasKey(x => x.DispatchingPalletId).HasName("PK_DispatchingPallets_1");

            builder.Property(x => x.DispatchingPalletId).HasColumnName(@"DispatchingPalletID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingPalletNumber).HasColumnName(@"DispatchingPalletNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.PalletNo).HasColumnName(@"PalletNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.DispatchingPalletRemark).HasColumnName(@"DispatchingPalletRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);

            builder.HasIndex(x => x.OrderNumber).HasName("IX_DispatchingPallets");
        }
    }

    // DispatchingProducts
    public class DispatchingProductConfiguration : IEntityTypeConfiguration<DispatchingProduct>
    {
        public void Configure(EntityTypeBuilder<DispatchingProduct> builder)
        {
            builder.ToTable("DispatchingProducts", "dbo");
            builder.HasKey(x => x.DispatchingProductId).HasName("PK_DispatchingProducts");

            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SendStatus).HasColumnName(@"SendStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SendTime).HasColumnName(@"SendTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRefDetailId).HasColumnName(@"CustomerRef_DetailID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PackingPercentage).HasColumnName(@"PackingPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CustomerRef2).HasColumnName(@"CustomerRef2").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DeliveryActual).HasColumnName(@"DeliveryActual").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.DispatchingOrder).WithMany(b => b.DispatchingProducts).HasForeignKey(c => c.DispatchingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingProducts_DispatchingOrders");
            builder.HasOne(a => a.Product).WithMany(b => b.DispatchingProducts).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingProducts_Products");

            builder.HasIndex(x => new { x.DispatchingOrderId, x.ProductId }).HasName("IX_DispatchingProducts_3");
        }
    }

    // DispatchingProductCartons
    public class DispatchingProductCartonConfiguration : IEntityTypeConfiguration<DispatchingProductCarton>
    {
        public void Configure(EntityTypeBuilder<DispatchingProductCarton> builder)
        {
            builder.ToTable("DispatchingProductCartons", "dbo");
            builder.HasKey(x => x.DispatchingProductCartonId).HasName("PK_DispatchingProductCartons").IsClustered();

            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.PackageType).HasColumnName(@"PackageType").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingProductCartonDate).HasColumnName(@"DispatchingProductCartonDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.IsDispatch).HasColumnName(@"IsDispatch").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.UserDispatch).HasColumnName(@"UserDispatch").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DeviceNumberDispatch).HasColumnName(@"DeviceNumberDispatch").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DispatchTime).HasColumnName(@"DispatchTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InnerQty).HasColumnName(@"InnerQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.DispatchingOrder).WithMany(b => b.DispatchingProductCartons).HasForeignKey(c => c.DispatchingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingProductCartons_DispatchingOrders");

            builder.HasIndex(x => new { x.DispatchingOrderId, x.CustomerClientId }).HasName("DispatchingProductCartonID");
        }
    }

    // DispatchingProductCartons_History
    public class DispatchingProductCartonsHistoryConfiguration : IEntityTypeConfiguration<DispatchingProductCartonsHistory>
    {
        public void Configure(EntityTypeBuilder<DispatchingProductCartonsHistory> builder)
        {
            builder.ToTable("DispatchingProductCartons_History", "dbo");
            builder.HasKey(x => x.DispatchingProductCartonId).HasName("PK_DispatchingProductCartons_copy1").IsClustered();

            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.PackageType).HasColumnName(@"PackageType").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingProductCartonDate).HasColumnName(@"DispatchingProductCartonDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingProductCartonIdOld).HasColumnName(@"DispatchingProductCartonID_Old").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.IsDispatch).HasColumnName(@"IsDispatch").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserDispatch).HasColumnName(@"UserDispatch").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DispatchTime).HasColumnName(@"DispatchTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DeviceNumberDispatch).HasColumnName(@"DeviceNumberDispatch").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.InnerQty).HasColumnName(@"InnerQty").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.DispatchingOrder).WithMany(b => b.DispatchingProductCartonsHistories).HasForeignKey(c => c.DispatchingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Dispatchi__Dispa__25CDB372");

            builder.HasIndex(x => new { x.DispatchingProductCartonId, x.CreatedTime }).HasName("DispatchingProductCartonID_copy1");
        }
    }

    // DispatchingProductPacks
    public class DispatchingProductPackConfiguration : IEntityTypeConfiguration<DispatchingProductPack>
    {
        public void Configure(EntityTypeBuilder<DispatchingProductPack> builder)
        {
            builder.ToTable("DispatchingProductPacks", "dbo");
            builder.HasKey(x => x.DispatchingProductPackId).HasName("PK_DispatchingProductPacks_1");

            builder.Property(x => x.DispatchingProductPackId).HasColumnName(@"DispatchingProductPackID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.DispatchingOrderDetail).WithMany(b => b.DispatchingProductPacks).HasForeignKey(c => c.DispatchingOrderDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingProductPacks_DispatchingOrderDetails");
            builder.HasOne(a => a.DispatchingProductCarton).WithMany(b => b.DispatchingProductPacks).HasForeignKey(c => c.DispatchingProductCartonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingProductPacks_DispatchingProductCartons");

            builder.HasIndex(x => new { x.CreatedTime, x.DispatchingOrderDetailId, x.DispatchingProductCartonId, x.ProductNumber }).HasName("CreatedTime");
        }
    }

    // DispatchingProductPacksDelete
    public class DispatchingProductPacksDeleteConfiguration : IEntityTypeConfiguration<DispatchingProductPacksDelete>
    {
        public void Configure(EntityTypeBuilder<DispatchingProductPacksDelete> builder)
        {
            builder.ToTable("DispatchingProductPacksDelete", "dbo");
            builder.HasKey(x => x.DispatchingProductPackId);

            builder.Property(x => x.DispatchingProductPackId).HasColumnName(@"DispatchingProductPackID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // DispatchingProductPacks_History
    public class DispatchingProductPacksHistoryConfiguration : IEntityTypeConfiguration<DispatchingProductPacksHistory>
    {
        public void Configure(EntityTypeBuilder<DispatchingProductPacksHistory> builder)
        {
            builder.ToTable("DispatchingProductPacks_History", "dbo");
            builder.HasKey(x => x.DispatchingProductPackId).HasName("PK_DispatchingProductPacks_1_copy1").IsClustered();

            builder.Property(x => x.DispatchingProductPackId).HasColumnName(@"DispatchingProductPackID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingProductPackIdold).HasColumnName(@"DispatchingProductPackIDOLD").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsDispatch).HasColumnName(@"IsDispatch").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserDispatch).HasColumnName(@"UserDispatch").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DispatchTime).HasColumnName(@"DispatchTime").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.CreatedTime).HasName("CreatedTimeIndex");
            builder.HasIndex(x => x.LotNumber).HasName("LotIndex");
            builder.HasIndex(x => x.ProductionDate).HasName("ProductDateIndex");
        }
    }

    // DispatchingUnits
    public class DispatchingUnitConfiguration : IEntityTypeConfiguration<DispatchingUnit>
    {
        public void Configure(EntityTypeBuilder<DispatchingUnit> builder)
        {
            builder.ToTable("DispatchingUnits", "dbo");
            builder.HasKey(x => x.DispatchingUnitId).HasName("PK_DispatchingUnits");

            builder.Property(x => x.DispatchingUnitId).HasColumnName(@"DispatchingUnitID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingCartonId).HasColumnName(@"DispatchingCartonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReceivingUnitId).HasColumnName(@"ReceivingUnitID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => x.DispatchingCartonId).HasName("IX_DispatchingUnits");
        }
    }

    // DistributionOrders
    public class DistributionOrderConfiguration : IEntityTypeConfiguration<DistributionOrder>
    {
        public void Configure(EntityTypeBuilder<DistributionOrder> builder)
        {
            builder.ToTable("DistributionOrders", "dbo");
            builder.HasKey(x => x.DistributionOrderId).HasName("PK_FuelDeliveries");

            builder.Property(x => x.DistributionOrderId).HasColumnName(@"DistributionOrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DistributionOrderNumber).HasColumnName(@"DistributionOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Kilometer).HasColumnName(@"Kilometer").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DistributionRemark).HasColumnName(@"DistributionRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PartId).HasColumnName(@"PartID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserCheckOut).HasColumnName(@"UserCheckOut").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TruckDriverHistoryId).HasColumnName(@"TruckDriverHistoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsCheckOut).HasColumnName(@"IsCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.PumpTrigger).HasColumnName(@"PumpTrigger").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ChipQty).HasColumnName(@"ChipQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.KeyQty).HasColumnName(@"KeyQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FillTime).HasColumnName(@"FillTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.GasStationId).HasColumnName(@"GasStationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DocumentNumber).HasColumnName(@"DocumentNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Outside).HasColumnName(@"Outside").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ZaloSent).HasColumnName(@"ZaloSent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DistributionOrderMainId).HasColumnName(@"DistributionOrderMainID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NormsActual).HasColumnName(@"NormsActual").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.QtyOfKilometer).HasColumnName(@"QtyOfKilometer").HasColumnType("decimal(18,3)").IsRequired(false);

            builder.HasIndex(x => new { x.TruckDriverHistoryId, x.TruckId, x.GasStationId, x.TimeIn, x.FillTime, x.TimeOut, x.DocumentNumber }).HasName("IX_DistributionOrders");
        }
    }

    // DockDoors
    public class DockDoorConfiguration : IEntityTypeConfiguration<DockDoor>
    {
        public void Configure(EntityTypeBuilder<DockDoor> builder)
        {
            builder.ToTable("DockDoors", "dbo");
            builder.HasKey(x => x.DockDoorId).HasName("PK_DockDoors").IsClustered();

            builder.Property(x => x.DockDoorId).HasColumnName(@"DockDoorID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.WarehouseId).HasColumnName(@"WarehouseID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DockDoorRemark).HasColumnName(@"DockDoorRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // Drivers
    public class DriverConfiguration : IEntityTypeConfiguration<Driver>
    {
        public void Configure(EntityTypeBuilder<Driver> builder)
        {
            builder.ToTable("Drivers", "dbo");
            builder.HasKey(x => x.DriverId).HasName("PK_Drivers").IsClustered();

            builder.Property(x => x.DriverId).HasColumnName(@"DriverID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DriverCode).HasColumnName(@"DriverCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DriverTeamId).HasColumnName(@"DriverTeamID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IdCard).HasColumnName(@"IDCard").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BankAccount).HasColumnName(@"BankAccount").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MobileNo).HasColumnName(@"MobileNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // Drivers_HRM
    public class DriversHrmConfiguration : IEntityTypeConfiguration<DriversHrm>
    {
        public void Configure(EntityTypeBuilder<DriversHrm> builder)
        {
            builder.ToTable("Drivers_HRM", "dbo");
            builder.HasKey(x => x.Msnv).HasName("PK_Drivers_HRM").IsClustered();

            builder.Property(x => x.Msnv).HasColumnName(@"MSNV").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.TenNv).HasColumnName(@"TenNV").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ViTri).HasColumnName(@"ViTri").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Site).HasColumnName(@"Site").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // DSCartonStockOnHandDaily
    public class DsCartonStockOnHandDailyConfiguration : IEntityTypeConfiguration<DsCartonStockOnHandDaily>
    {
        public void Configure(EntityTypeBuilder<DsCartonStockOnHandDaily> builder)
        {
            builder.ToView("DSCartonStockOnHandDaily", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReportDateId).HasColumnName(@"ReportDateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
        }
    }

    // dtproperties
    public class DtpropertyConfiguration : IEntityTypeConfiguration<Dtproperty>
    {
        public void Configure(EntityTypeBuilder<Dtproperty> builder)
        {
            builder.ToTable("dtproperties", "dbo");
            builder.HasKey(x => new { x.Id, x.Property });

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Objectid).HasColumnName(@"objectid").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Property).HasColumnName(@"property").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64).ValueGeneratedNever();
            builder.Property(x => x.Value).HasColumnName(@"value").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Lvalue).HasColumnName(@"lvalue").HasColumnType("image(2147483647)").IsRequired(false).HasMaxLength(2147483647);
            builder.Property(x => x.Version).HasColumnName(@"version").HasColumnType("int").IsRequired();
            builder.Property(x => x.Uvalue).HasColumnName(@"uvalue").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
        }
    }

    // EDIBookingBigC
    public class EdiBookingBigCConfiguration : IEntityTypeConfiguration<EdiBookingBigC>
    {
        public void Configure(EntityTypeBuilder<EdiBookingBigC> builder)
        {
            builder.ToTable("EDIBookingBigC", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EDIBookingBigC").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.C1PoDetail40StoresOrder41).HasColumnName(@"1- PO_DETAIL (STORES ORDER)").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.C2LineNo).HasColumnName(@"2-LINE NO").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.C3PoMain40PoSupplier41).HasColumnName(@"3-PO_MAIN (PO SUPPLIER)").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.C4WhCode).HasColumnName(@"4-WH CODE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C5TillCode).HasColumnName(@"5-TILL CODE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C6GoldCode).HasColumnName(@"6-GOLD CODE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C7Discription).HasColumnName(@"7-DISCRIPTION").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.C8Lv).HasColumnName(@"8-LV").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C9Lu).HasColumnName(@"9-LU").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C10SupplierCode).HasColumnName(@"10-SUPPLIER CODE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C11SupplierName).HasColumnName(@"11-SUPPLIER NAME").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.C12Comm46Contract).HasColumnName(@"12-COMM.CONTRACT").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C13Dept).HasColumnName(@"13-DEPT").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C14DeliveryDate).HasColumnName(@"14-DELIVERY DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.C15Store).HasColumnName(@"15-STORE").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.C16StoresName).HasColumnName(@"16-STORES NAME").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.C17OrderQty).HasColumnName(@"17-ORDER QTY").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.C18StockUnit).HasColumnName(@"18-STOCK UNIT").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C19XDocking47Storage).HasColumnName(@"19-X-DOCKING/ STORAGE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C20Region).HasColumnName(@"20-REGION").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.C21UnitPckSize).HasColumnName(@"21-UNIT PCK SIZE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // EDIDataSorting
    public class EdiDataSortingConfiguration : IEntityTypeConfiguration<EdiDataSorting>
    {
        public void Configure(EntityTypeBuilder<EdiDataSorting> builder)
        {
            builder.ToTable("EDIDataSorting", "dbo");
            builder.HasKey(x => new { x.TransDate, x.PoNo, x.DocDate, x.Site, x.Sku, x.QtyOrder, x.QtyDeliver, x.UomDeliver, x.Pack, x.UomWeight, x.TotalBox, x.DeliveryNo, x.Id, x.FileName, x.FileType, x.CreatedTime, x.IsDeleted });

            builder.Property(x => x.TransDate).HasColumnName(@"TRANS_DATE").HasColumnType("date").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PoNo).HasColumnName(@"PO_NO").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.DocDate).HasColumnName(@"DOC_DATE").HasColumnType("date").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Site).HasColumnName(@"SITE").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.Vendor).HasColumnName(@"VENDOR").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Sku).HasColumnName(@"SKU").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.QtyOrder).HasColumnName(@"QTY_ORDER").HasColumnType("decimal(10,3)").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.QtyDeliver).HasColumnName(@"QTY_DELIVER").HasColumnType("decimal(10,3)").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UomDeliver).HasColumnName(@"UOM_DELIVER").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.Pack).HasColumnName(@"PACK").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UomWeight).HasColumnName(@"UOM_WEIGHT").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.TotalBox).HasColumnName(@"TOTAL_BOX").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DeliveryNo).HasColumnName(@"DELIVERY_NO").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.FileType).HasColumnName(@"FileType").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // EDI_DetailBreakdowns
    public class EdiDetailBreakdownConfiguration : IEntityTypeConfiguration<EdiDetailBreakdown>
    {
        public void Configure(EntityTypeBuilder<EdiDetailBreakdown> builder)
        {
            builder.ToTable("EDI_DetailBreakdowns", "dbo");
            builder.HasKey(x => x.EdiDetailBreakDownId).HasName("PK_EDI_DetailBreakdowns").IsClustered();

            builder.Property(x => x.EdiDetailBreakDownId).HasColumnName(@"EDI_DetailBreakDownID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.QuantityMax).HasColumnName(@"QuantityMax").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EdiOrderDetailId).HasColumnName(@"EDI_OrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EDI_Orders
    public class EdiOrderConfiguration : IEntityTypeConfiguration<EdiOrder>
    {
        public void Configure(EntityTypeBuilder<EdiOrder> builder)
        {
            builder.ToTable("EDI_Orders", "dbo");
            builder.HasKey(x => x.EdiOrderId).HasName("PK_EDI_Orders");

            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerReference).HasColumnName(@"CustomerReference").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ProcessingTime).HasColumnName(@"ProcessingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ProcessingStatus).HasColumnName(@"ProcessingStatus").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProcessingOrderNumber).HasColumnName(@"ProcessingOrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProcessedBy).HasColumnName(@"ProcessedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FileUploaded).HasColumnName(@"FileUploaded").HasColumnType("bit").IsRequired();
            builder.Property(x => x.FileUploadedCode).HasColumnName(@"FileUploadedCode").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TotalQuantity).HasColumnName(@"TotalQuantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CustomerDispatchType).HasColumnName(@"CustomerDispatchType").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.EdiOrderRemark).HasColumnName(@"EDIOrderRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.EdiOrderLocalId).HasColumnName(@"EDI_OrderLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EdiOrderNumber).HasColumnName(@"EDI_OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.RouteId).HasColumnName(@"RouteID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TransporterId).HasColumnName(@"TransporterID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustPoNumber).HasColumnName(@"CUST_PO_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CommonColumId).HasColumnName(@"CommonColumID").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StatusProcess).HasColumnName(@"StatusProcess").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.AtmOrderReleaseId).HasColumnName(@"ATM_OrderReleaseID").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.WareHouseCustomerInterface).HasColumnName(@"WareHouseCustomerInterface").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.SubventoryCustomerInterface).HasColumnName(@"SubventoryCustomerInterface").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.LocatorCustomerInterface).HasColumnName(@"LocatorCustomerInterface").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerLocation).HasColumnName(@"CustomerLocation").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.VendorCustomerCode).HasColumnName(@"VendorCustomerCode").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeights).HasColumnName(@"TotalWeights").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.StatusDescription).HasColumnName(@"StatusDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.RatingValue).HasColumnName(@"RatingValue").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.DockDoorId).HasColumnName(@"DockDoorID").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.CreatedBy).HasName("CreatedBy");
            builder.HasIndex(x => x.CustomerOrderNumber).HasName("CustomerOrderNumbe");
            builder.HasIndex(x => x.EdiOrderLocalId).HasName("EDI_OrderLocalID");
            builder.HasIndex(x => x.OrderDate).HasName("OrderDate");
            builder.HasIndex(x => x.ProcessingOrderNumber).HasName("ProcessingOrderNumber");
        }
    }

    // EDI_OrderDetails
    public class EdiOrderDetailConfiguration : IEntityTypeConfiguration<EdiOrderDetail>
    {
        public void Configure(EntityTypeBuilder<EdiOrderDetail> builder)
        {
            builder.ToTable("EDI_OrderDetails", "dbo");
            builder.HasKey(x => x.EdiOrderDetailId).HasName("PK_EDI_OrderDetails");

            builder.Property(x => x.EdiOrderDetailId).HasColumnName(@"EDI_OrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Fifo).HasColumnName(@"FIFO").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuantityMax).HasColumnName(@"QuantityMax").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ExpiryDate).HasColumnName(@"ExpiryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProductRemark).HasColumnName(@"ProductRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Units).HasColumnName(@"Units").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerRefDetailId).HasColumnName(@"CustomerRef_DetailID").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.CommonColumId).HasColumnName(@"CommonColumID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Version).HasColumnName(@"version").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsHold).HasColumnName(@"IsHold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PoWeight).HasColumnName(@"PO_WEIGHT").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Tolerance).HasColumnName(@"Tolerance").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.QtyMiss).HasColumnName(@"QtyMiss").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WeightMiss).HasColumnName(@"WeightMiss").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.QtyPicked).HasColumnName(@"QtyPicked").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Package1).HasColumnName(@"Package1").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Package2).HasColumnName(@"Package2").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.SubInterface).HasColumnName(@"SubInterface").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.LocatorInterface).HasColumnName(@"LocatorInterface").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.XdocId).HasColumnName(@"XdocID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.XdocGetTime).HasColumnName(@"XdocGetTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerItem).HasColumnName(@"CustomerItem").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.EdiOrder).WithMany(b => b.EdiOrderDetails).HasForeignKey(c => c.EdiOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EDI_OrderDetails_EDI_Orders");

            builder.HasIndex(x => new { x.EdiOrderId, x.ProductNumber }).HasName("IX_EDI_OrderDetails");
        }
    }

    // EDI_OrderType
    public class EdiOrderTypeConfiguration : IEntityTypeConfiguration<EdiOrderType>
    {
        public void Configure(EntityTypeBuilder<EdiOrderType> builder)
        {
            builder.ToTable("EDI_OrderType", "dbo");
            builder.HasKey(x => x.EdiOrderTypeId).HasName("PK_EDI_Order_OrderType").IsClustered();

            builder.Property(x => x.EdiOrderTypeId).HasColumnName(@"EDI_OrderTypeID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EdiOrderTypeDescription).HasColumnName(@"EDI_OrderTypeDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.EdiOrderType_).HasColumnName(@"EDI_OrderType").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // EDI_tmpProductID
    public class EdiTmpProductIdConfiguration : IEntityTypeConfiguration<EdiTmpProductId>
    {
        public void Configure(EntityTypeBuilder<EdiTmpProductId> builder)
        {
            builder.ToTable("EDI_tmpProductID", "dbo");
            builder.HasKey(x => x.EdiTmpProductId_).HasName("PK_EDI_tmpProductID_1").IsClustered();

            builder.Property(x => x.EdiTmpProductId_).HasColumnName(@"EDI_tmpProductID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EdiOrderDetailId).HasColumnName(@"EDI_OrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TotalRemain).HasColumnName(@"TotalRemain").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RequestQuantity).HasColumnName(@"RequestQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Fifo).HasColumnName(@"FIFO").HasColumnType("bit").IsRequired(false);
        }
    }

    // EDI_tmpProductRemains
    public class EdiTmpProductRemainConfiguration : IEntityTypeConfiguration<EdiTmpProductRemain>
    {
        public void Configure(EntityTypeBuilder<EdiTmpProductRemain> builder)
        {
            builder.ToTable("EDI_tmpProductRemains", "dbo");
            builder.HasKey(x => x.TmpProductRemainId).HasName("PK_EDI_tmpProductRemains_PickSequence").IsClustered();

            builder.Property(x => x.TmpProductRemainId).HasColumnName(@"tmpProductRemainID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TmpProductRemainName).HasColumnName(@"tmpProductRemainName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TmpWeightPerPackage).HasColumnName(@"tmpWeightPerPackage").HasColumnType("decimal(10,5)").IsRequired(false);
            builder.Property(x => x.TmpRemainQuantity).HasColumnName(@"tmpRemainQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TmpProductRemainNumber).HasColumnName(@"tmpProductRemainNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TmpCustomerId).HasColumnName(@"tmpCustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TmpUpdateTime).HasColumnName(@"tmpUpdateTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TmpProductRemainNumberFull).HasColumnName(@"tmpProductRemainNumberFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // EDI_tmpProductRemains_PickSequence
    public class EdiTmpProductRemainsPickSequenceConfiguration : IEntityTypeConfiguration<EdiTmpProductRemainsPickSequence>
    {
        public void Configure(EntityTypeBuilder<EdiTmpProductRemainsPickSequence> builder)
        {
            builder.ToTable("EDI_tmpProductRemains_PickSequence", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EDI_tmpProductRemains_PickSequence1").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TmpProductRemainId).HasColumnName(@"tmpProductRemainID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TmpProductRemainName).HasColumnName(@"tmpProductRemainName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TmpWeightPerPackage).HasColumnName(@"tmpWeightPerPackage").HasColumnType("decimal(10,5)").IsRequired(false);
            builder.Property(x => x.TmpRemainQuantity).HasColumnName(@"tmpRemainQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TmpProductRemainNumber).HasColumnName(@"tmpProductRemainNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TmpUpdateTime).HasColumnName(@"tmpUpdateTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TmpProductRemainNumberFull).HasColumnName(@"tmpProductRemainNumberFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TmpProductionDate).HasColumnName(@"tmpProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TmpExpiryDate).HasColumnName(@"tmpExpiryDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TmpCustomerRef).HasColumnName(@"tmpCustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TmpCustomerId).HasColumnName(@"tmpCustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TmpReceivingOrderId).HasColumnName(@"tmpReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // EFile
    public class EFileConfiguration : IEntityTypeConfiguration<EFile>
    {
        public void Configure(EntityTypeBuilder<EFile> builder)
        {
            builder.ToTable("EFile", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__EFile__3214EC27F9D92939").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.FileContent).HasColumnName(@"FileContent").HasColumnType("varbinary(max)").IsRequired(false);
            builder.Property(x => x.FileType).HasColumnName(@"FileType").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ReferenceId).HasColumnName(@"ReferenceID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // ElectricityConsumption
    public class ElectricityConsumptionConfiguration : IEntityTypeConfiguration<ElectricityConsumption>
    {
        public void Configure(EntityTypeBuilder<ElectricityConsumption> builder)
        {
            builder.ToTable("ElectricityConsumption", "dbo");
            builder.HasKey(x => x.ElectricityConsumptionId).HasName("PK_ContainerTruckElectricity").IsClustered();

            builder.Property(x => x.ElectricityConsumptionId).HasColumnName(@"ElectricityConsumptionID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.QuantityKwh).HasColumnName(@"QuantityKwh").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.QuantityHour).HasColumnName(@"QuantityHour").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.ContainerType).HasColumnName(@"ContainerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RunningHours).HasColumnName(@"RunningHours").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OtherServiceDetailId).HasColumnName(@"OtherServiceDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.VehicleInOutNumber).HasColumnName(@"VehicleInOutNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Electricity).HasColumnName(@"Electricity").HasColumnType("bit").IsRequired(false);
        }
    }

    // Employees
    public class EmployeeConfiguration : IEntityTypeConfiguration<Employee>
    {
        public void Configure(EntityTypeBuilder<Employee> builder)
        {
            builder.ToTable("Employees", "dbo");
            builder.HasKey(x => x.EmployeeId).HasName("PK_Employees_1").IsClustered();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DateOfEntry).HasColumnName(@"DateOfEntry").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IdCardNumber).HasColumnName(@"IDCardNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IdCardIssueDate).HasColumnName(@"IDCardIssueDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PersonnalTaxCode).HasColumnName(@"PersonnalTaxCode").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.SocialInsuaranceNumber).HasColumnName(@"SocialInsuaranceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.HealthInsuaranceNumber).HasColumnName(@"HealthInsuaranceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EffectiveDate).HasColumnName(@"EffectiveDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.AddressNow).HasColumnName(@"AddressNow").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BankAccountNumber).HasColumnName(@"BankAccountNumber").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.IdCardIssuePlace).HasColumnName(@"IDCardIssuePlace").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDateFirst).HasColumnName(@"ContractDateFirst").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Education).HasColumnName(@"Education").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Photograph).HasColumnName(@"Photograph").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BikeNumber).HasColumnName(@"BikeNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BikeUse).HasColumnName(@"BikeUse").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Grade).HasColumnName(@"Grade").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PerformanceStatus).HasColumnName(@"PerformanceStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Sex).HasColumnName(@"Sex").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.InOutCardNumber).HasColumnName(@"InOutCardNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.MonthlyAdvanceRequired).HasColumnName(@"MonthlyAdvanceRequired").HasColumnType("bit").IsRequired();
            builder.Property(x => x.MonthlyAdvanceAmount).HasColumnName(@"MonthlyAdvanceAmount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IsLunch).HasColumnName(@"IsLunch").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LunchPlace).HasColumnName(@"LunchPlace").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.LeaveDate).HasColumnName(@"LeaveDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.IsLeave).HasColumnName(@"IsLeave").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsOutsourcing).HasColumnName(@"IsOutsourcing").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EnglishName).HasColumnName(@"EnglishName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ReportTo).HasColumnName(@"ReportTo").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.IsOnlineWorking).HasColumnName(@"IsOnlineWorking").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EndProbationDate).HasColumnName(@"EndProbationDate").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Position).WithMany(b => b.Employees).HasForeignKey(c => c.PositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employees_Positions");

            builder.HasIndex(x => x.EmployeeCode).HasName("IX_Employees").IsUnique();
        }
    }

    // EmployeeAnnualHistories
    public class EmployeeAnnualHistoryConfiguration : IEntityTypeConfiguration<EmployeeAnnualHistory>
    {
        public void Configure(EntityTypeBuilder<EmployeeAnnualHistory> builder)
        {
            builder.ToTable("EmployeeAnnualHistories", "dbo");
            builder.HasKey(x => x.EmployeeHistoryId).HasName("PK__EmployeeAnnualHi__6582B673").IsClustered();

            builder.Property(x => x.EmployeeHistoryId).HasColumnName(@"EmployeeHistoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.YearId).HasColumnName(@"YearID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Grade).HasColumnName(@"Grade").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EvaluationGrade).HasColumnName(@"EvaluationGrade").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Salary).HasColumnName(@"Salary").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.SalaryAllowance).HasColumnName(@"SalaryAllowance").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.SalarySeniority).HasColumnName(@"SalarySeniority").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.RecordId).HasColumnName(@"RecordID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TimeStamp).HasColumnName(@"TimeStamp").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // EmployeeAreas
    public class EmployeeAreaConfiguration : IEntityTypeConfiguration<EmployeeArea>
    {
        public void Configure(EntityTypeBuilder<EmployeeArea> builder)
        {
            builder.ToTable("EmployeeAreas", "dbo");
            builder.HasKey(x => x.RoomId).HasName("PK__EmployeeAreas__x").IsClustered();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.RoomDescription).HasColumnName(@"RoomDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Warehouse).HasColumnName(@"Warehouse").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.RoomArea).HasColumnName(@"RoomArea").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuantityOfPallets).HasColumnName(@"QuantityOfPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomVolume).HasColumnName(@"RoomVolume").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeAreaId).HasColumnName(@"EmployeeAreaID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // EmployeeAreaResponsibities
    public class EmployeeAreaResponsibityConfiguration : IEntityTypeConfiguration<EmployeeAreaResponsibity>
    {
        public void Configure(EntityTypeBuilder<EmployeeAreaResponsibity> builder)
        {
            builder.ToTable("EmployeeAreaResponsibities", "dbo");
            builder.HasKey(x => x.EmployeeAreaId).HasName("PK_EmployeeAreaResponsibities").IsClustered();

            builder.Property(x => x.EmployeeAreaId).HasColumnName(@"EmployeeAreaID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AreaRemark).HasColumnName(@"AreaRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // EmployeeChangeHistories
    public class EmployeeChangeHistoryConfiguration : IEntityTypeConfiguration<EmployeeChangeHistory>
    {
        public void Configure(EntityTypeBuilder<EmployeeChangeHistory> builder)
        {
            builder.ToTable("EmployeeChangeHistories", "dbo");
            builder.HasKey(x => x.EmployeeChangeHistoryId).HasName("PK_EmployeeHistories").IsClustered();

            builder.Property(x => x.EmployeeChangeHistoryId).HasColumnName(@"EmployeeChangeHistoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Salary).HasColumnName(@"Salary").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.SalaryResponsibility).HasColumnName(@"SalaryResponsibility").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.SalaryAllowance).HasColumnName(@"SalaryAllowance").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.SalarySeniority).HasColumnName(@"SalarySeniority").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.EffectiveDate).HasColumnName(@"EffectiveDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ImplementationDate).HasColumnName(@"ImplementationDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.PeriodOfTime).HasColumnName(@"PeriodOfTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Delegate).HasColumnName(@"Delegate").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TimeStamp).HasColumnName(@"TimeStamp").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OldPositionId).HasColumnName(@"OldPositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OldShiftId).HasColumnName(@"OldShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OldDepartmentId).HasColumnName(@"OldDepartmentID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OldStoreId).HasColumnName(@"OldStoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OldContractPermanent).HasColumnName(@"OldContractPermanent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OldEducation).HasColumnName(@"OldEducation").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Education).HasColumnName(@"Education").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ApprovedBy).HasColumnName(@"ApprovedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ApprovedTime).HasColumnName(@"ApprovedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // EmployeeCodeFinger_HN
    public class EmployeeCodeFingerHnConfiguration : IEntityTypeConfiguration<EmployeeCodeFingerHn>
    {
        public void Configure(EntityTypeBuilder<EmployeeCodeFingerHn> builder)
        {
            builder.ToTable("EmployeeCodeFinger_HN", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EmployeeCodeFinger_HN").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
        }
    }

    // EmployeeCoreValues
    public class EmployeeCoreValueConfiguration : IEntityTypeConfiguration<EmployeeCoreValue>
    {
        public void Configure(EntityTypeBuilder<EmployeeCoreValue> builder)
        {
            builder.ToTable("EmployeeCoreValues", "dbo");
            builder.HasKey(x => x.EmployeeCoreValueId).HasName("PK_EmployeeCoreValues");

            builder.Property(x => x.EmployeeCoreValueId).HasColumnName(@"EmployeeCoreValueID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CoreValueEmployeeId).HasColumnName(@"CoreValueEmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);

            builder.HasIndex(x => new { x.CoreValueEmployeeId, x.EmployeeId }).HasName("IX_EmployeeCoreValues");
        }
    }

    // EmployeeCoreValuesScores
    public class EmployeeCoreValuesScoreConfiguration : IEntityTypeConfiguration<EmployeeCoreValuesScore>
    {
        public void Configure(EntityTypeBuilder<EmployeeCoreValuesScore> builder)
        {
            builder.ToTable("EmployeeCoreValuesScores", "dbo");
            builder.HasKey(x => x.Score).HasName("PK_EmployeeCoreValuesScores").IsClustered();

            builder.Property(x => x.Score).HasColumnName(@"Score").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ScoreDescription).HasColumnName(@"ScoreDescription").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
        }
    }

    // EmployeeEducations
    public class EmployeeEducationConfiguration : IEntityTypeConfiguration<EmployeeEducation>
    {
        public void Configure(EntityTypeBuilder<EmployeeEducation> builder)
        {
            builder.ToTable("EmployeeEducations", "dbo");
            builder.HasKey(x => x.Education).HasName("PK_EmployeeEducations").IsClustered();

            builder.Property(x => x.Education).HasColumnName(@"Education").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // EmployeeFamilyMembers
    public class EmployeeFamilyMemberConfiguration : IEntityTypeConfiguration<EmployeeFamilyMember>
    {
        public void Configure(EntityTypeBuilder<EmployeeFamilyMember> builder)
        {
            builder.ToTable("EmployeeFamilyMembers", "dbo");
            builder.HasKey(x => x.EmployeeFamilyMemberId).HasName("PK_EmployeeFamilyMembers").IsClustered();

            builder.Property(x => x.EmployeeFamilyMemberId).HasColumnName(@"EmployeeFamilyMemberID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Sex).HasColumnName(@"Sex").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Relationship).HasColumnName(@"Relationship").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Dependent).HasColumnName(@"Dependent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EmployeeHistory
    public class EmployeeHistoryConfiguration : IEntityTypeConfiguration<EmployeeHistory>
    {
        public void Configure(EntityTypeBuilder<EmployeeHistory> builder)
        {
            builder.ToTable("EmployeeHistory", "dbo");
            builder.HasKey(x => x.EmployeeHistoryId).HasName("PK_EmployeeHistory").IsClustered();

            builder.Property(x => x.EmployeeHistoryId).HasColumnName(@"EmployeeHistoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.HistoryDescription).HasColumnName(@"HistoryDescription").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.HistoryCategory).HasColumnName(@"HistoryCategory").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EditTime).HasColumnName(@"EditTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BeforeDataChanged).HasColumnName(@"BeforeDataChanged").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.AfterDataChanged).HasColumnName(@"AfterDataChanged").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();

            builder.HasIndex(x => x.CreatedTime).HasName("IX_EmployeeHistory_1");
        }
    }

    // EmployeeInOutDisplay
    public class EmployeeInOutDisplayConfiguration : IEntityTypeConfiguration<EmployeeInOutDisplay>
    {
        public void Configure(EntityTypeBuilder<EmployeeInOutDisplay> builder)
        {
            builder.ToView("EmployeeInOutDisplay", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // EmployeeMovements
    public class EmployeeMovementConfiguration : IEntityTypeConfiguration<EmployeeMovement>
    {
        public void Configure(EntityTypeBuilder<EmployeeMovement> builder)
        {
            builder.ToTable("EmployeeMovements", "dbo");
            builder.HasKey(x => x.EmployeeMovementId).HasName("PK_EmployeeMovements1").IsClustered();

            builder.Property(x => x.EmployeeMovementId).HasColumnName(@"EmployeeMovementID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.MovementDate).HasColumnName(@"MovementDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.MovementReason).HasColumnName(@"MovementReason").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.MovementType).HasColumnName(@"MovementType").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OldReferenceId).HasColumnName(@"OldReferenceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NewReferenceId).HasColumnName(@"NewReferenceID").HasColumnType("int").IsRequired(false);
        }
    }

    // EmployeeOTSupervisors
    public class EmployeeOtSupervisorConfiguration : IEntityTypeConfiguration<EmployeeOtSupervisor>
    {
        public void Configure(EntityTypeBuilder<EmployeeOtSupervisor> builder)
        {
            builder.ToTable("EmployeeOTSupervisors", "dbo");
            builder.HasKey(x => x.EmployeeOtSupervisorId).HasName("PK_Timekeepings").IsClustered();

            builder.Property(x => x.EmployeeOtSupervisorDate).HasColumnName(@"EmployeeOTSupervisorDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.AuthorisedBy).HasColumnName(@"AuthorisedBy").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.HourQuantity).HasColumnName(@"HourQuantity").HasColumnType("real").IsRequired();
            builder.Property(x => x.DayStatus).HasColumnName(@"DayStatus").HasColumnType("char(7)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.SundayHoliday).HasColumnName(@"SundayHoliday").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeOtSupervisorConfirm).HasColumnName(@"EmployeeOTSupervisorConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.EmployeeOtSupervisorAccept).HasColumnName(@"EmployeeOTSupervisorAccept").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.EmployeeOtSupervisorId).HasColumnName(@"EmployeeOTSupervisorID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Rejected).HasColumnName(@"Rejected").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RejectedReason).HasColumnName(@"RejectedReason").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);

            builder.HasIndex(x => x.EmployeeOtSupervisorDate).HasName("IX_EmployeeOTSupervisors_1");
        }
    }

    // EmployeeReminders
    public class EmployeeReminderConfiguration : IEntityTypeConfiguration<EmployeeReminder>
    {
        public void Configure(EntityTypeBuilder<EmployeeReminder> builder)
        {
            builder.ToTable("EmployeeReminders", "dbo");
            builder.HasKey(x => x.ReminderId).HasName("PK_EmployeeReminders").IsClustered();

            builder.Property(x => x.ReminderId).HasColumnName(@"ReminderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReminderDescription).HasColumnName(@"ReminderDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ReminderDate).HasColumnName(@"ReminderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ReminderAcknowledged).HasColumnName(@"ReminderAcknowledged").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AcknowledgedTime).HasColumnName(@"AcknowledgedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AcknowledgedBy).HasColumnName(@"AcknowledgedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReminderedBy).HasColumnName(@"ReminderedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ReminderNumber).HasColumnName(@"ReminderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.EmployeeKpiDefinitionId).HasColumnName(@"EmployeeKPIDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // EmployeesImport
    public class EmployeesImportConfiguration : IEntityTypeConfiguration<EmployeesImport>
    {
        public void Configure(EntityTypeBuilder<EmployeesImport> builder)
        {
            builder.ToTable("EmployeesImport", "dbo");
            builder.HasKey(x => x.EmployeeId).HasName("PK_EmployeesImport").IsClustered();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DateOfEntry).HasColumnName(@"DateOfEntry").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IdCardNumber).HasColumnName(@"IDCardNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IdCardIssueDate).HasColumnName(@"IDCardIssueDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PersonnalTaxCode).HasColumnName(@"PersonnalTaxCode").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.SocialInsuaranceNumber).HasColumnName(@"SocialInsuaranceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.HealthInsuaranceNumber).HasColumnName(@"HealthInsuaranceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EffectiveDate).HasColumnName(@"EffectiveDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.AddressNow).HasColumnName(@"AddressNow").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // EmployeesImport_HCM
    public class EmployeesImportHcmConfiguration : IEntityTypeConfiguration<EmployeesImportHcm>
    {
        public void Configure(EntityTypeBuilder<EmployeesImportHcm> builder)
        {
            builder.ToTable("EmployeesImport_HCM", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EmployeesImport_HCM").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Office).HasColumnName(@"Office").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // EmployeesImport_HCM2
    public class EmployeesImportHcm2Configuration : IEntityTypeConfiguration<EmployeesImportHcm2>
    {
        public void Configure(EntityTypeBuilder<EmployeesImportHcm2> builder)
        {
            builder.ToTable("EmployeesImport_HCM2", "dbo");
            builder.HasKey(x => x.EmployeeCode).HasName("PK_EmployeesImport_HCM2").IsClustered();

            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // EmployeesImport_HCM_TanTao
    public class EmployeesImportHcmTanTaoConfiguration : IEntityTypeConfiguration<EmployeesImportHcmTanTao>
    {
        public void Configure(EntityTypeBuilder<EmployeesImportHcmTanTao> builder)
        {
            builder.ToTable("EmployeesImport_HCM_TanTao", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EmployeesImport_HCM_TanTao").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Office).HasColumnName(@"Office").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // EmployeesImport_HN
    public class EmployeesImportHnConfiguration : IEntityTypeConfiguration<EmployeesImportHn>
    {
        public void Configure(EntityTypeBuilder<EmployeesImportHn> builder)
        {
            builder.ToTable("EmployeesImport_HN", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EmployeesImport_HN").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IdCardNumber).HasColumnName(@"IDCardNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IdCardIssueDate).HasColumnName(@"IDCardIssueDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IdCardNumberPlace).HasColumnName(@"IDCardNumberPlace").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateOfEntry).HasColumnName(@"DateOfEntry").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
        }
    }

    // EmployeeWorkings
    public class EmployeeWorkingConfiguration : IEntityTypeConfiguration<EmployeeWorking>
    {
        public void Configure(EntityTypeBuilder<EmployeeWorking> builder)
        {
            builder.ToTable("EmployeeWorkings", "dbo");
            builder.HasKey(x => x.EmployeeWorkingId).HasName("PK_EmployeeWorkings");

            builder.Property(x => x.EmployeeWorkingId).HasColumnName(@"EmployeeWorkingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.EquipmentId).HasColumnName(@"EquipmentID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.EmployeeWorkings).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeWorkings_Employees");

            builder.HasIndex(x => x.OrderNumber).HasName("IX_EmployeeWorkings");
            builder.HasIndex(x => x.Remark).HasName("IX_EmployeeWorkings_2");
        }
    }

    // EmployeeWorking_StoreHNNew
    public class EmployeeWorkingStoreHnNewConfiguration : IEntityTypeConfiguration<EmployeeWorkingStoreHnNew>
    {
        public void Configure(EntityTypeBuilder<EmployeeWorkingStoreHnNew> builder)
        {
            builder.ToView("EmployeeWorking_StoreHNNew", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Money).HasColumnName(@"Money").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.OrderRemark).HasColumnName(@"OrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.EmployeeWorkingCreatedTime).HasColumnName(@"EmployeeWorkingCreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeWorking).HasColumnName(@"TimeWorking").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.IsProductivity).HasColumnName(@"isProductivity").HasColumnType("bit").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionVietnam).HasColumnName(@"PositionVietnam").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
        }
    }

    // Equipments
    public class EquipmentConfiguration : IEntityTypeConfiguration<Equipment>
    {
        public void Configure(EntityTypeBuilder<Equipment> builder)
        {
            builder.ToView("Equipments", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EquipmentId).HasColumnName(@"EquipmentID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.EquipmentName).HasColumnName(@"EquipmentName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.EquipmentNameVn).HasColumnName(@"EquipmentNameVN").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Manufacturer).HasColumnName(@"Manufacturer").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Model).HasColumnName(@"Model").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SerialNumber).HasColumnName(@"SerialNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RecievedDate).HasColumnName(@"RecievedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WarrantyExpiredate).HasColumnName(@"WarrantyExpiredate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EquipmentCategoryId).HasColumnName(@"EquipmentCategoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired().IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.Capacity).HasColumnName(@"Capacity").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.HRate).HasColumnName(@"HRate").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ItEquipmentComputerName).HasColumnName(@"ITEquipmentComputerName").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ItDepartment).HasColumnName(@"ITDepartment").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ItEquipmentLocation).HasColumnName(@"ITEquipmentLocation").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ItEquipmentUser).HasColumnName(@"ITEquipmentUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ItEquipmentSpecification).HasColumnName(@"ITEquipmentSpecification").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Softwares).HasColumnName(@"Softwares").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Licencing).HasColumnName(@"Licencing").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ItEquipmentNumber).HasColumnName(@"ITEquipmentNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ItEquipmentCondition).HasColumnName(@"ITEquipmentCondition").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ItEquipmentBuyingDate).HasColumnName(@"ITEquipmentBuyingDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ItEquipmentPrice).HasColumnName(@"ITEquipmentPrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.BuyingWhere).HasColumnName(@"BuyingWhere").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Service).HasColumnName(@"Service").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Internet).HasColumnName(@"Internet").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ForJob).HasColumnName(@"ForJob").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Lan).HasColumnName(@"LAN").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EquipmentDateEntry).HasColumnName(@"EquipmentDateEntry").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Eid).HasColumnName(@"EID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.PropertyCategoryId).HasColumnName(@"PropertyCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.PurchasingOrderId).HasColumnName(@"PurchasingOrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MeasureAccuracy).HasColumnName(@"Measure_Accuracy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MeasureMeasuringRange).HasColumnName(@"Measure_MeasuringRange").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MeasureDepartmentUsing).HasColumnName(@"Measure_DepartmentUsing").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MeasureCalibrationPlace).HasColumnName(@"Measure_CalibrationPlace").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MeasureCalibrationDate).HasColumnName(@"Measure_CalibrationDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.MeasureCalibrationExpireDate).HasColumnName(@"Measure_CalibrationExpireDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EquipmentConfirm).HasColumnName(@"EquipmentConfirm").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ScheduleMaintenance).HasColumnName(@"ScheduleMaintenance").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EquipmentStatusNote).HasColumnName(@"EquipmentStatusNote").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.RepacePlans).HasColumnName(@"RepacePlans").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ScheduledCheck).HasColumnName(@"ScheduledCheck").HasColumnType("nchar(10)").IsRequired(false).IsFixedLength().HasMaxLength(10);
            builder.Property(x => x.DoneBy).HasColumnName(@"DoneBy").HasColumnType("nchar(10)").IsRequired(false).IsFixedLength().HasMaxLength(10);
            builder.Property(x => x.CheckMethods).HasColumnName(@"CheckMethods").HasColumnType("nchar(10)").IsRequired(false).IsFixedLength().HasMaxLength(10);
            builder.Property(x => x.BackupPlans).HasColumnName(@"BackupPlans").HasColumnType("nchar(10)").IsRequired(false).IsFixedLength().HasMaxLength(10);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.WifiMacAddress).HasColumnName(@"Wifi_MAC_Address").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
        }
    }

    // Exception
    public class ExceptionConfiguration : IEntityTypeConfiguration<Exception>
    {
        public void Configure(EntityTypeBuilder<Exception> builder)
        {
            builder.ToTable("Exception", "dbo");
            builder.HasKey(x => x.ExceptioId).HasName("PK__Exceptio__C1B6362DC0D8FEF0").IsClustered();

            builder.Property(x => x.ExceptioId).HasColumnName(@"ExceptioID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ExceptionType).HasColumnName(@"ExceptionType").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ExceiptonTime).HasColumnName(@"ExceiptonTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ExceptionMessage).HasColumnName(@"ExceptionMessage").HasColumnType("text(2147483647)").IsRequired(false).IsUnicode(false).HasMaxLength(2147483647);
            builder.Property(x => x.UserException).HasColumnName(@"UserException").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // FeeBackForCultural
    public class FeeBackForCulturalConfiguration : IEntityTypeConfiguration<FeeBackForCultural>
    {
        public void Configure(EntityTypeBuilder<FeeBackForCultural> builder)
        {
            builder.ToTable("FeeBackForCultural", "dbo");
            builder.HasKey(x => x.FeeBackId).HasName("PK__FreeBack__4C25B3F729E3B50C").IsClustered();

            builder.Property(x => x.FeeBackId).HasColumnName(@"FeeBackID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Content).HasColumnName(@"Content").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.EmployeeRef).HasColumnName(@"EmployeeRef").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.FeeBackIdMain).HasColumnName(@"FeeBackIDMain").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.IsDelete).HasColumnName(@"IsDelete").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.FeeBackForCulturals).HasForeignKey(c => c.EmployeeRef).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_FreeBackCultural_Employee");
            builder.HasOne(a => a.UserAccount).WithMany(b => b.FeeBackForCulturals).HasForeignKey(c => c.CreatedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_FreeBackCultural_UserAccount");
        }
    }

    // FeeBackForCulturalType
    public class FeeBackForCulturalTypeConfiguration : IEntityTypeConfiguration<FeeBackForCulturalType>
    {
        public void Configure(EntityTypeBuilder<FeeBackForCulturalType> builder)
        {
            builder.ToTable("FeeBackForCulturalType", "dbo");
            builder.HasKey(x => x.FeeBackForCulturalTypeId).HasName("PK_FeeBackForCulturalType").IsClustered();

            builder.Property(x => x.FeeBackForCulturalTypeId).HasColumnName(@"FeeBackForCulturalTypeID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TypeDescription).HasColumnName(@"TypeDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Feedbacks
    public class FeedbackConfiguration : IEntityTypeConfiguration<Feedback>
    {
        public void Configure(EntityTypeBuilder<Feedback> builder)
        {
            builder.ToTable("Feedbacks", "dbo");
            builder.HasKey(x => x.FeedbackId).HasName("PK_Feedbacks").IsClustered();

            builder.Property(x => x.FeedbackId).HasColumnName(@"FeedbackID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FeedbackDate).HasColumnName(@"FeedbackDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(25)").IsRequired().HasMaxLength(25);
            builder.Property(x => x.IpClient).HasColumnName(@"IPClient").HasColumnType("char(25)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.FeedbackDescription).HasColumnName(@"FeedbackDescription").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.ResponsedDescription).HasColumnName(@"ResponsedDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ResponsedBy).HasColumnName(@"ResponsedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.ResponsedTime).HasColumnName(@"ResponsedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
        }
    }

    // FingerMachines
    public class FingerMachineConfiguration : IEntityTypeConfiguration<FingerMachine>
    {
        public void Configure(EntityTypeBuilder<FingerMachine> builder)
        {
            builder.ToTable("FingerMachines", "dbo");
            builder.HasKey(x => x.FingerMachineId).HasName("PK_FingerMachines").IsClustered();

            builder.Property(x => x.FingerMachineId).HasColumnName(@"FingerMachineID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Port).HasColumnName(@"Port").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsChecked).HasColumnName(@"IsChecked").HasColumnType("bit").IsRequired(false);
        }
    }

    // FingerMachineData
    public class FingerMachineDataConfiguration : IEntityTypeConfiguration<FingerMachineData>
    {
        public void Configure(EntityTypeBuilder<FingerMachineData> builder)
        {
            builder.ToTable("FingerMachineData", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_FingerMachineData").IsClustered();

            builder.Property(x => x.FingerMachineId).HasColumnName(@"FingerMachineID").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DwTMachineNumber).HasColumnName(@"dwTMachineNumber").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IdwEnrollNumber).HasColumnName(@"_idwEnrollNumber").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IdwVerifyMode).HasColumnName(@"_idwVerifyMode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IdwInOutMode).HasColumnName(@"_idwInOutMode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.STime).HasColumnName(@"_sTime").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // FT_StockTakeByRequestManyProduct
    public class FtStockTakeByRequestManyProductConfiguration : IEntityTypeConfiguration<FtStockTakeByRequestManyProduct>
    {
        public void Configure(EntityTypeBuilder<FtStockTakeByRequestManyProduct> builder)
        {
            builder.ToView("FT_StockTakeByRequestManyProduct", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.QtyProducts).HasColumnName(@"QtyProducts").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
        }
    }

    // FT_TotalStockHandlingByDay
    public class FtTotalStockHandlingByDayConfiguration : IEntityTypeConfiguration<FtTotalStockHandlingByDay>
    {
        public void Configure(EntityTypeBuilder<FtTotalStockHandlingByDay> builder)
        {
            builder.ToView("FT_TotalStockHandlingByDay", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.HandlingC).HasColumnName(@"HandlingC").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HandlingW).HasColumnName(@"HandlingW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HandlingP).HasColumnName(@"HandlingP").HasColumnType("real").IsRequired(false);
        }
    }

    // FT_TotalStockHandlingByMonth
    public class FtTotalStockHandlingByMonthConfiguration : IEntityTypeConfiguration<FtTotalStockHandlingByMonth>
    {
        public void Configure(EntityTypeBuilder<FtTotalStockHandlingByMonth> builder)
        {
            builder.ToView("FT_TotalStockHandlingByMonth", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReportMonth).HasColumnName(@"ReportMonth").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.HandlingC).HasColumnName(@"HandlingC").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HandlingW).HasColumnName(@"HandlingW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HandlingP).HasColumnName(@"HandlingP").HasColumnType("real").IsRequired(false);
        }
    }

    // FT_TotalStockHandlingByWeek
    public class FtTotalStockHandlingByWeekConfiguration : IEntityTypeConfiguration<FtTotalStockHandlingByWeek>
    {
        public void Configure(EntityTypeBuilder<FtTotalStockHandlingByWeek> builder)
        {
            builder.ToView("FT_TotalStockHandlingByWeek", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReportWeek).HasColumnName(@"ReportWeek").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.HandlingC).HasColumnName(@"HandlingC").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HandlingW).HasColumnName(@"HandlingW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HandlingP).HasColumnName(@"HandlingP").HasColumnType("real").IsRequired(false);
        }
    }

    // FT_TotalStockOnHandAvgByDay
    public class FtTotalStockOnHandAvgByDayConfiguration : IEntityTypeConfiguration<FtTotalStockOnHandAvgByDay>
    {
        public void Configure(EntityTypeBuilder<FtTotalStockOnHandAvgByDay> builder)
        {
            builder.ToView("FT_TotalStockOnHandAvgByDay", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.AverageStockW).HasColumnName(@"AverageStockW").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AverageStockC).HasColumnName(@"AverageStockC").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AverageStockP).HasColumnName(@"AverageStockP").HasColumnType("float").IsRequired(false);
        }
    }

    // GasStation
    public class GasStationConfiguration : IEntityTypeConfiguration<GasStation>
    {
        public void Configure(EntityTypeBuilder<GasStation> builder)
        {
            builder.ToTable("GasStation", "dbo");
            builder.HasKey(x => x.GasStationId).HasName("PK_GasStation").IsClustered();

            builder.Property(x => x.GasStationId).HasColumnName(@"GasStationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.GasStationName).HasColumnName(@"GasStationName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IsInternal).HasColumnName(@"IsInternal").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.GasStationRemark).HasColumnName(@"GasStationRemark").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.GasStationAddress).HasColumnName(@"GasStationAddress").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.IsNorm).HasColumnName(@"IsNorm").HasColumnType("bit").IsRequired(false);
        }
    }

    // Gates
    public class GateConfiguration : IEntityTypeConfiguration<Gate>
    {
        public void Configure(EntityTypeBuilder<Gate> builder)
        {
            builder.ToTable("Gates", "dbo");
            builder.HasKey(x => x.Gate_).HasName("PK_Gates").IsClustered();

            builder.Property(x => x.Gate_).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.GateVietnam).HasColumnName(@"GateVietnam").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
        }
    }

    // Gate_Companies
    public class GateCompanyConfiguration : IEntityTypeConfiguration<GateCompany>
    {
        public void Configure(EntityTypeBuilder<GateCompany> builder)
        {
            builder.ToTable("Gate_Companies", "dbo");
            builder.HasKey(x => x.CompanyId).HasName("PK__a__17043817").IsClustered();

            builder.Property(x => x.CompanyId).HasColumnName(@"CompanyID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CompanyNumber).HasColumnName(@"CompanyNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CompanyAddress).HasColumnName(@"CompanyAddress").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CompanyPhoneNumber).HasColumnName(@"CompanyPhoneNumber").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CompanyContact).HasColumnName(@"CompanyContact").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // Gate_ContInOut
    public class GateContInOutConfiguration : IEntityTypeConfiguration<GateContInOut>
    {
        public void Configure(EntityTypeBuilder<GateContInOut> builder)
        {
            builder.ToTable("Gate_ContInOut", "dbo");
            builder.HasKey(x => x.ContInOutId).HasName("PK_Gate_ContInOut");

            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ContainerNum).HasColumnName(@"ContainerNum").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ContainerType).HasColumnName(@"ContainerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserOut).HasColumnName(@"UserOut").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Via).HasColumnName(@"Via").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TruckIn).HasColumnName(@"TruckIn").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.TruckOut).HasColumnName(@"TruckOut").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.UserCheckOut).HasColumnName(@"UserCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TruckCheckOut).HasColumnName(@"TruckCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.UserTruckOut).HasColumnName(@"UserTruckOut").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StartWorkingTime).HasColumnName(@"StartWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndWorkingTime).HasColumnName(@"EndWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TempOut).HasColumnName(@"TempOut").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.DriverMobilePhone).HasColumnName(@"DriverMobilePhone").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CustomerRequirement).HasColumnName(@"CustomerRequirement").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ExpectedProcessTime).HasColumnName(@"ExpectedProcessTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContInOutNumber).HasColumnName(@"ContInOutNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OtherServiceId).HasColumnName(@"OtherServiceID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ElectricityConsumptionId).HasColumnName(@"ElectricityConsumptionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContInOutLocalId).HasColumnName(@"ContInOutLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.OrderNumber).HasName("Gate_ContInOut81");
            builder.HasIndex(x => x.TimeOut).HasName("Gate_ContInOut91");
            builder.HasIndex(x => x.TimeIn).HasName("IX_Gate_ContInOut_1");
            builder.HasIndex(x => x.CheckOut).HasName("IX_Gate_ContInOut_3");
        }
    }

    // Gate_EmployeeInOut
    public class GateEmployeeInOutConfiguration : IEntityTypeConfiguration<GateEmployeeInOut>
    {
        public void Configure(EntityTypeBuilder<GateEmployeeInOut> builder)
        {
            builder.ToTable("Gate_EmployeeInOut", "dbo");
            builder.HasKey(x => x.EmployeeInOutId).HasName("PK_Gate_EmployeeInOut").IsClustered();

            builder.Property(x => x.EmployeeInOutId).HasColumnName(@"EmployeeInOutID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BikeNumber).HasColumnName(@"BikeNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CheckBike).HasColumnName(@"CheckBike").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => new { x.TimeIn, x.TimeOut }).HasName("IX_Gate_EmployeeInOut_1");
        }
    }

    // Gate_Properties
    public class GatePropertyConfiguration : IEntityTypeConfiguration<GateProperty>
    {
        public void Configure(EntityTypeBuilder<GateProperty> builder)
        {
            builder.ToTable("Gate_Properties", "dbo");
            builder.HasKey(x => x.PropertyId).HasName("PK_Properties").IsClustered();

            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PropertyName).HasColumnName(@"PropertyName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PropertyRemark).HasColumnName(@"PropertyRemark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Gate_PropertyMovements
    public class GatePropertyMovementConfiguration : IEntityTypeConfiguration<GatePropertyMovement>
    {
        public void Configure(EntityTypeBuilder<GatePropertyMovement> builder)
        {
            builder.ToTable("Gate_PropertyMovements", "dbo");
            builder.HasKey(x => x.PropertyMovementId).HasName("PK_Gate_PropertyMovements").IsClustered();

            builder.Property(x => x.PropertyMovementId).HasColumnName(@"PropertyMovementID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PropertyMovementDate).HasColumnName(@"PropertyMovementDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AuthorizedBy).HasColumnName(@"AuthorizedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("float").IsRequired();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // Gate_TruckInOut
    public class GateTruckInOutConfiguration : IEntityTypeConfiguration<GateTruckInOut>
    {
        public void Configure(EntityTypeBuilder<GateTruckInOut> builder)
        {
            builder.ToTable("Gate_TruckInOut", "dbo");
            builder.HasKey(x => x.TruckInOutId).HasName("PK_Gate_TruckInOut");

            builder.Property(x => x.TruckInOutId).HasColumnName(@"TruckInOutID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TruckNum).HasColumnName(@"TruckNum").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckType).HasColumnName(@"TruckType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TruckReason).HasColumnName(@"TruckReason").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CmBl).HasColumnName(@"CM_BL").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UserOut).HasColumnName(@"UserOut").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserCheckOut).HasColumnName(@"UserCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.StartWorkingTime).HasColumnName(@"StartWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndWorkingTime).HasColumnName(@"EndWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PowerQuantity).HasColumnName(@"PowerQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.RunningFloat).HasColumnName(@"RunningFloat").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.TruckConfirmed).HasColumnName(@"TruckConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TruckInOutNumber).HasColumnName(@"TruckInOutNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.LoadingCapacity).HasColumnName(@"LoadingCapacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TruckTemperatureBefore).HasColumnName(@"TruckTemperatureBefore").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DriverMobilePhone).HasColumnName(@"DriverMobilePhone").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CustomerRequirement).HasColumnName(@"CustomerRequirement").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ExpectedProcessTime).HasColumnName(@"ExpectedProcessTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OtherServiceId).HasColumnName(@"OtherServiceID").HasColumnType("uniqueidentifier").IsRequired(false);

            builder.HasIndex(x => x.OrderNumber).HasName("Gate_TruckInOut31");
            builder.HasIndex(x => x.TimeOut).HasName("Gate_TruckInOut34");
            builder.HasIndex(x => x.TimeIn).HasName("IX_Gate_TruckInOut_1");
            builder.HasIndex(x => x.CheckOut).HasName("IX_Gate_TruckInOut_2");
            builder.HasIndex(x => x.CheckOut).HasName("IX_Gate_TruckInOut_3");
        }
    }

    // Gate_TruckPowerKwh
    public class GateTruckPowerKwhConfiguration : IEntityTypeConfiguration<GateTruckPowerKwh>
    {
        public void Configure(EntityTypeBuilder<GateTruckPowerKwh> builder)
        {
            builder.ToTable("Gate_TruckPowerKwh", "dbo");
            builder.HasKey(x => x.TruckGroupPowerId).HasName("PK__Gate_TruckPowerK__022916C2").IsClustered();

            builder.Property(x => x.TruckGroupPowerId).HasColumnName(@"TruckGroupPowerID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckGroupPower).HasColumnName(@"TruckGroupPower").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TruckPowerKwh).HasColumnName(@"TruckPowerKwh").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TruckPowerRemark).HasColumnName(@"TruckPowerRemark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Gate_VehicleType
    public class GateVehicleTypeConfiguration : IEntityTypeConfiguration<GateVehicleType>
    {
        public void Configure(EntityTypeBuilder<GateVehicleType> builder)
        {
            builder.ToTable("Gate_VehicleType", "dbo");
            builder.HasKey(x => x.VehicleType).HasName("PK_Gate_VehicleType").IsClustered();

            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.VehicleCapacity).HasColumnName(@"VehicleCapacity").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nchar(15)").IsRequired(false).IsFixedLength().HasMaxLength(15);
        }
    }

    // Gate_Workers
    public class GateWorkerConfiguration : IEntityTypeConfiguration<GateWorker>
    {
        public void Configure(EntityTypeBuilder<GateWorker> builder)
        {
            builder.ToTable("Gate_Workers", "dbo");
            builder.HasKey(x => x.WorkerId).HasName("PK__a__151BEFA5").IsClustered();

            builder.Property(x => x.WorkerId).HasColumnName(@"WorkerID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WorkerName).HasColumnName(@"WorkerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CardId).HasColumnName(@"CardID").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CardType).HasColumnName(@"CardType").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CompanyId).HasColumnName(@"CompanyID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Gate_WorkerInOut
    public class GateWorkerInOutConfiguration : IEntityTypeConfiguration<GateWorkerInOut>
    {
        public void Configure(EntityTypeBuilder<GateWorkerInOut> builder)
        {
            builder.ToTable("Gate_WorkerInOut", "dbo");
            builder.HasKey(x => x.WorkerInOutId).HasName("PK_Gate_WorkerInOut").IsClustered();

            builder.Property(x => x.WorkerInOutId).HasColumnName(@"WorkerInOutID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.WorkerName).HasColumnName(@"WorkerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IDcard).HasColumnName(@"IDcard").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => x.TimeOut).HasName("IX_Gate_WorkerInOut");
        }
    }

    // Gate_WorkerLaborSafetyTraining
    public class GateWorkerLaborSafetyTrainingConfiguration : IEntityTypeConfiguration<GateWorkerLaborSafetyTraining>
    {
        public void Configure(EntityTypeBuilder<GateWorkerLaborSafetyTraining> builder)
        {
            builder.ToTable("Gate_WorkerLaborSafetyTraining", "dbo");
            builder.HasKey(x => x.LaborSafetyTrainId).HasName("PK_Gate_WorkerL").IsClustered();

            builder.Property(x => x.LaborSafetyTrainId).HasColumnName(@"LaborSafetyTrainID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LaborSafetyTrainBy).HasColumnName(@"LaborSafetyTrainBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LaborSafetyTrainDate).HasColumnName(@"LaborSafetyTrainDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.WorkerId).HasColumnName(@"WorkerID").HasColumnType("int").IsRequired();
        }
    }

    // Gate_WorkerRegularInOut
    public class GateWorkerRegularInOutConfiguration : IEntityTypeConfiguration<GateWorkerRegularInOut>
    {
        public void Configure(EntityTypeBuilder<GateWorkerRegularInOut> builder)
        {
            builder.ToTable("Gate_WorkerRegularInOut", "dbo");
            builder.HasKey(x => x.WorkerRegularInOutId).HasName("PK__a1__1333A733").IsClustered();

            builder.Property(x => x.WorkerRegularInOutId).HasColumnName(@"WorkerRegularInOutID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.WorkerId).HasColumnName(@"WorkerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TimeIn1).HasColumnName(@"TimeIn1").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut1).HasColumnName(@"TimeOut1").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeIn2).HasColumnName(@"TimeIn2").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut2).HasColumnName(@"TimeOut2").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.UniformReflectedLight).HasColumnName(@"UniformReflectedLight").HasColumnType("smallint").IsRequired(false);
        }
    }

    // GenerateRandomBarcodeLabel
    public class GenerateRandomBarcodeLabelConfiguration : IEntityTypeConfiguration<GenerateRandomBarcodeLabel>
    {
        public void Configure(EntityTypeBuilder<GenerateRandomBarcodeLabel> builder)
        {
            builder.ToTable("GenerateRandomBarcodeLabel", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Generate__3214EC27220C52FA").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IndexNumber).HasColumnName(@"IndexNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);

            builder.HasIndex(x => new { x.CreatedDate, x.Type, x.IndexNumber }).HasName("Index_RandomBarcode");
        }
    }

    // GPSLocationTrackingHistory
    public class GpsLocationTrackingHistoryConfiguration : IEntityTypeConfiguration<GpsLocationTrackingHistory>
    {
        public void Configure(EntityTypeBuilder<GpsLocationTrackingHistory> builder)
        {
            builder.ToTable("GPSLocationTrackingHistory", "dbo");
            builder.HasKey(x => x.GpsLocationTrackingHistoryId).HasName("PK_GPS");

            builder.Property(x => x.GpsLocationTrackingHistoryId).HasColumnName(@"GPSLocationTrackingHistoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.X).HasColumnName(@"x").HasColumnType("decimal(18,10)").IsRequired();
            builder.Property(x => x.Y).HasColumnName(@"y").HasColumnType("decimal(18,10)").IsRequired();
            builder.Property(x => x.TrackingTime).HasColumnName(@"TrackingTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.UserName).HasName("IX_GPSLocationTrackingHistory");
        }
    }

    // Highs
    public class HighConfiguration : IEntityTypeConfiguration<High>
    {
        public void Configure(EntityTypeBuilder<High> builder)
        {
            builder.ToTable("Highs", "dbo");
            builder.HasKey(x => x.High_).HasName("PK_Highs").IsClustered();

            builder.Property(x => x.High_).HasColumnName(@"High").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.HighBarcode).HasColumnName(@"HighBarcode").HasColumnType("nvarchar(4)").IsRequired(false).HasMaxLength(4);
        }
    }

    // History_BillingDetails
    public class HistoryBillingDetailConfiguration : IEntityTypeConfiguration<HistoryBillingDetail>
    {
        public void Configure(EntityTypeBuilder<HistoryBillingDetail> builder)
        {
            builder.ToTable("History_BillingDetails", "dbo");
            builder.HasKey(x => x.BillingDetailId).HasName("PK_History_BillingDetails").IsClustered();

            builder.Property(x => x.BillingDetailId).HasColumnName(@"BillingDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ManualUpdate).HasColumnName(@"ManualUpdate").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // History_ContractDetails
    public class HistoryContractDetailConfiguration : IEntityTypeConfiguration<HistoryContractDetail>
    {
        public void Configure(EntityTypeBuilder<HistoryContractDetail> builder)
        {
            builder.ToTable("History_ContractDetails", "dbo");
            builder.HasKey(x => x.ContractDetailId).HasName("PK_History_ContractDetails").IsClustered();

            builder.Property(x => x.ContractDetailId).HasColumnName(@"ContractDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ContractId).HasColumnName(@"ContractID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ContractDetailRemark).HasColumnName(@"ContractDetailRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CurrencyUnit).HasColumnName(@"CurrencyUnit").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CheckingQuantity).HasColumnName(@"CheckingQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CheckingQuantity2).HasColumnName(@"CheckingQuantity2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ScopeOfWork).HasColumnName(@"ScopeOfWork").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ScopeOfWorkVietnam).HasColumnName(@"ScopeOfWorkVietnam").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Vat).HasColumnName(@"VAT").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // History_DispatchingLocations
    public class HistoryDispatchingLocationConfiguration : IEntityTypeConfiguration<HistoryDispatchingLocation>
    {
        public void Configure(EntityTypeBuilder<HistoryDispatchingLocation> builder)
        {
            builder.ToView("History_DispatchingLocations", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingLocationId).HasColumnName(@"DispatchingLocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.QuantityOfPackages).HasColumnName(@"QuantityOfPackages").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.DispatchingLocationRemark).HasColumnName(@"DispatchingLocationRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.DispatchingLocationStatus).HasColumnName(@"DispatchingLocationStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.NewId).HasColumnName(@"NewID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // History_DispatchingOrders
    public class HistoryDispatchingOrderConfiguration : IEntityTypeConfiguration<HistoryDispatchingOrder>
    {
        public void Configure(EntityTypeBuilder<HistoryDispatchingOrder> builder)
        {
            builder.ToView("History_DispatchingOrders", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.DispatchingOrderLocalId).HasColumnName(@"DispatchingOrderLocalID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingOrderRemark).HasColumnName(@"DispatchingOrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.InternalRemark).HasColumnName(@"InternalRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DispatchingOrderProgress).HasColumnName(@"DispatchingOrderProgress").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Electricity).HasColumnName(@"Electricity").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ProgressPercentage).HasColumnName(@"ProgressPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.IsAttachment).HasColumnName(@"IsAttachment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DockDoorId).HasColumnName(@"DockDoorID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PickingPercentage).HasColumnName(@"PickingPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired(false);
        }
    }

    // History_DispatchingOrderDetails
    public class HistoryDispatchingOrderDetailConfiguration : IEntityTypeConfiguration<HistoryDispatchingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<HistoryDispatchingOrderDetail> builder)
        {
            builder.ToView("History_DispatchingOrderDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackageQuantity).HasColumnName(@"PackageQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailRemark).HasColumnName(@"DispatchingOrderDetailRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CheckBreak).HasColumnName(@"CheckBreak").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingScannedBy).HasColumnName(@"DispatchingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingScannedTime).HasColumnName(@"DispatchingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PickingScannedTime).HasColumnName(@"PickingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PickingScannedBy).HasColumnName(@"PickingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // History_DispatchingProducts
    public class HistoryDispatchingProductConfiguration : IEntityTypeConfiguration<HistoryDispatchingProduct>
    {
        public void Configure(EntityTypeBuilder<HistoryDispatchingProduct> builder)
        {
            builder.ToView("History_DispatchingProducts", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
        }
    }

    // History_DispatchingProductPacks
    public class HistoryDispatchingProductPackConfiguration : IEntityTypeConfiguration<HistoryDispatchingProductPack>
    {
        public void Configure(EntityTypeBuilder<HistoryDispatchingProductPack> builder)
        {
            builder.ToView("History_DispatchingProductPacks", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingProductPackId).HasColumnName(@"DispatchingProductPackID").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // History_DistributionOrders
    public class HistoryDistributionOrderConfiguration : IEntityTypeConfiguration<HistoryDistributionOrder>
    {
        public void Configure(EntityTypeBuilder<HistoryDistributionOrder> builder)
        {
            builder.ToTable("History_DistributionOrders", "dbo");
            builder.HasKey(x => x.DistributionOrderId).HasName("PK_History_DistributionOrders").IsClustered();

            builder.Property(x => x.DistributionOrderId).HasColumnName(@"DistributionOrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DistributionOrderNumber).HasColumnName(@"DistributionOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Kilometer).HasColumnName(@"Kilometer").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DistributionRemark).HasColumnName(@"DistributionRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PartId).HasColumnName(@"PartID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserCheckOut).HasColumnName(@"UserCheckOut").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TruckDriverHistoryId).HasColumnName(@"TruckDriverHistoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsCheckOut).HasColumnName(@"IsCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.PumpTrigger).HasColumnName(@"PumpTrigger").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ChipQty).HasColumnName(@"ChipQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.KeyQty).HasColumnName(@"KeyQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FillTime).HasColumnName(@"FillTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.GasStationId).HasColumnName(@"GasStationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DocumentNumber).HasColumnName(@"DocumentNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Outside).HasColumnName(@"Outside").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IpAddress).HasColumnName(@"IPAddress").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // History_EmployeeWorkings
    public class HistoryEmployeeWorkingConfiguration : IEntityTypeConfiguration<HistoryEmployeeWorking>
    {
        public void Configure(EntityTypeBuilder<HistoryEmployeeWorking> builder)
        {
            builder.ToView("History_EmployeeWorkings", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeWorkingId).HasColumnName(@"EmployeeWorkingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(16)").IsRequired().IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // History_Gate_ContTruckInOut
    public class HistoryGateContTruckInOutConfiguration : IEntityTypeConfiguration<HistoryGateContTruckInOut>
    {
        public void Configure(EntityTypeBuilder<HistoryGateContTruckInOut> builder)
        {
            builder.ToTable("History_Gate_ContTruckInOut", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Gate_ContInOut_D__4BE2E001").IsClustered();

            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContainerNum).HasColumnName(@"ContainerNum").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ContainerType).HasColumnName(@"ContainerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserOut).HasColumnName(@"UserOut").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.RunningHour).HasColumnName(@"RunningHour").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RunningFloat).HasColumnName(@"RunningFloat").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PowerQuantity).HasColumnName(@"PowerQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Via).HasColumnName(@"Via").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TruckIn).HasColumnName(@"TruckIn").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.TruckOut).HasColumnName(@"TruckOut").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.UserCheckOut).HasColumnName(@"UserCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TruckCheckOut).HasColumnName(@"TruckCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.UserTruckOut).HasColumnName(@"UserTruckOut").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.EstimateHour).HasColumnName(@"EstimateHour").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("char(20)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StartWorkingTime).HasColumnName(@"StartWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndWorkingTime).HasColumnName(@"EndWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TempOut).HasColumnName(@"TempOut").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CmBl).HasColumnName(@"CM_BL").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TruckReason).HasColumnName(@"TruckReason").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IpAddressDeleted).HasColumnName(@"IPAddressDeleted").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TimeDeleted).HasColumnName(@"TimeDeleted").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nvarchar(7)").IsRequired(false).HasMaxLength(7);
            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OtherServiceId).HasColumnName(@"OtherServiceID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
        }
    }

    // History_Pallets
    public class HistoryPalletConfiguration : IEntityTypeConfiguration<HistoryPallet>
    {
        public void Configure(EntityTypeBuilder<HistoryPallet> builder)
        {
            builder.ToView("History_Pallets", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CanMove).HasColumnName(@"CanMove").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.CanNotAdd).HasColumnName(@"CanNotAdd").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReceivingScannedBy).HasColumnName(@"ReceivingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReceivingScannedTime).HasColumnName(@"ReceivingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PutAwayScannedBy).HasColumnName(@"PutAwayScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PutAwayScannedTime).HasColumnName(@"PutAwayScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
        }
    }

    // History_PalletCartons
    public class HistoryPalletCartonConfiguration : IEntityTypeConfiguration<HistoryPalletCarton>
    {
        public void Configure(EntityTypeBuilder<HistoryPalletCarton> builder)
        {
            builder.ToTable("History_PalletCartons", "dbo");
            builder.HasKey(x => x.PalletCartonId).HasName("PK_History_PalletCartons").IsClustered();

            builder.Property(x => x.PalletCartonId).HasColumnName(@"PalletCartonID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletCartonNumber).HasColumnName(@"PalletCartonNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CartonWeight).HasColumnName(@"CartonWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletRemark).HasColumnName(@"PalletRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.PalletGrossWeight).HasColumnName(@"PalletGrossWeight").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.CartonUnits).HasColumnName(@"CartonUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CartonWeightPay).HasColumnName(@"CartonWeightPay").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProDate).HasColumnName(@"ProDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.IsRecordNew).HasColumnName(@"IsRecordNew").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // History_Products
    public class HistoryProductConfiguration : IEntityTypeConfiguration<HistoryProduct>
    {
        public void Configure(EntityTypeBuilder<HistoryProduct> builder)
        {
            builder.ToView("History_Products", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.Discontinue).HasColumnName(@"Discontinue").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TemperatureRequire).HasColumnName(@"TemperatureRequire").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PackagesPerPallet2).HasColumnName(@"PackagesPerPallet2").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.HomeLocation1).HasColumnName(@"HomeLocation1").HasColumnType("int").IsRequired();
            builder.Property(x => x.HomeLocation2).HasColumnName(@"HomeLocation2").HasColumnType("int").IsRequired();
            builder.Property(x => x.PickingLocation).HasColumnName(@"PickingLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.HomeRoom1).HasColumnName(@"HomeRoom1").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.HomeRoom2).HasColumnName(@"HomeRoom2").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.PickingMethod).HasColumnName(@"PickingMethod").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ProductCategory).HasColumnName(@"ProductCategory").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WarehouseNo).HasColumnName(@"WAREHOUSE_NO").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.GrossWeightPerPackage).HasColumnName(@"GrossWeightPerPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductNameVn).HasColumnName(@"ProductNameVN").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.WarningDaysBeforeExpiry).HasColumnName(@"WarningDaysBeforeExpiry").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.IsWeightingRequire).HasColumnName(@"IsWeightingRequire").HasColumnType("bit").IsRequired(false);
        }
    }

    // History_ReceivingOrders
    public class HistoryReceivingOrderConfiguration : IEntityTypeConfiguration<HistoryReceivingOrder>
    {
        public void Configure(EntityTypeBuilder<HistoryReceivingOrder> builder)
        {
            builder.ToView("History_ReceivingOrders", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("char(2)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderProgress).HasColumnName(@"ReceivingOrderProgress").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.BlNumber).HasColumnName(@"BLNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.LadenDate).HasColumnName(@"LadenDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.LadingReportNumber).HasColumnName(@"LadingReportNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderRemark).HasColumnName(@"ReceivingOrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ReceivingOrderLocalId).HasColumnName(@"ReceivingOrderLocalID").HasColumnType("int").IsRequired(false);
        }
    }

    // History_ReceivingOrderDetails
    public class HistoryReceivingOrderDetailConfiguration : IEntityTypeConfiguration<HistoryReceivingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<HistoryReceivingOrderDetail> builder)
        {
            builder.ToView("History_ReceivingOrderDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.PalletHeight).HasColumnName(@"PalletHeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.PackingListQuantity).HasColumnName(@"PackingListQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Origin).HasColumnName(@"Origin").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RejectPercentage).HasColumnName(@"RejectPercentage").HasColumnType("decimal(10,4)").IsRequired(false);
            builder.Property(x => x.PackagingWeight).HasColumnName(@"PackagingWeight").HasColumnType("decimal(10,4)").IsRequired(false);
        }
    }

    // HitCounters
    public class HitCounterConfiguration : IEntityTypeConfiguration<HitCounter>
    {
        public void Configure(EntityTypeBuilder<HitCounter> builder)
        {
            builder.ToTable("HitCounters", "dbo");
            builder.HasKey(x => x.HitCounterId).HasName("PK_HitCounters").IsClustered();

            builder.Property(x => x.HitCounterId).HasColumnName(@"HitCounterID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TotalVisitTimes).HasColumnName(@"TotalVisitTimes").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ApplicationEnd).HasColumnName(@"Application_End").HasColumnType("int").IsRequired(false);
        }
    }

    // HolidayDate
    public class HolidayDateConfiguration : IEntityTypeConfiguration<HolidayDate>
    {
        public void Configure(EntityTypeBuilder<HolidayDate> builder)
        {
            builder.ToTable("HolidayDate", "dbo");
            builder.HasKey(x => x.HolidayDateId).HasName("PK_HolidayDate").IsClustered();

            builder.Property(x => x.HolidayDateId).HasColumnName(@"HolidayDateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.HolidayDate_).HasColumnName(@"HolidayDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Year).HasColumnName(@"Year").HasColumnType("nvarchar(4)").IsRequired(false).HasMaxLength(4);

            builder.HasIndex(x => x.HolidayDate_).HasName("IX_HolidayDate").IsUnique();
        }
    }

    // HouseKeepingChecks
    public class HouseKeepingCheckConfiguration : IEntityTypeConfiguration<HouseKeepingCheck>
    {
        public void Configure(EntityTypeBuilder<HouseKeepingCheck> builder)
        {
            builder.ToTable("HouseKeepingChecks", "dbo");
            builder.HasKey(x => x.HouseKeepingCheckId).HasName("PK_HouseKeepingChecks").IsClustered();

            builder.Property(x => x.HouseKeepingCheckId).HasColumnName(@"HouseKeepingCheckID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeAreaId).HasColumnName(@"EmployeeAreaID").HasColumnType("int").IsRequired();
            builder.Property(x => x.HouseKeepingCheckDate).HasColumnName(@"HouseKeepingCheckDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.HouseKeepingCheckBy).HasColumnName(@"HouseKeepingCheckBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.HouseKeepingCheckGrade).HasColumnName(@"HouseKeepingCheckGrade").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.HouseKeepingCheckRemark).HasColumnName(@"HouseKeepingCheckRemark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.HouseKeepingCheckNumber).HasColumnName(@"HouseKeepingCheckNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
        }
    }

    // IN_BinLoc
    public class InBinLocConfiguration : IEntityTypeConfiguration<InBinLoc>
    {
        public void Configure(EntityTypeBuilder<InBinLoc> builder)
        {
            builder.ToView("IN_BinLoc", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.WhseLoc).HasColumnName(@"WhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Descr).HasColumnName(@"Descr").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.SalesAllowed).HasColumnName(@"SalesAllowed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IssueAllowed).HasColumnName(@"IssueAllowed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CrtdDateTime).HasColumnName(@"Crtd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CrtdProg).HasColumnName(@"Crtd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.CrtdUser).HasColumnName(@"Crtd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LUpdProg).HasColumnName(@"LUpd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LUpdUser).HasColumnName(@"LUpd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Tstamp).HasColumnName(@"tstamp").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
            builder.Property(x => x.Zone).HasColumnName(@"Zone").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Way).HasColumnName(@"Way").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Layer).HasColumnName(@"Layer").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Square).HasColumnName(@"Square").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.SiteType).HasColumnName(@"SiteType").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.StkItem).HasColumnName(@"StkItem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LocQty).HasColumnName(@"LocQty").HasColumnType("float").IsRequired();
            builder.Property(x => x.MaxWeight).HasColumnName(@"MaxWeight").HasColumnType("float").IsRequired();
        }
    }

    // IN_Inventory
    public class InInventoryConfiguration : IEntityTypeConfiguration<InInventory>
    {
        public void Configure(EntityTypeBuilder<InInventory> builder)
        {
            builder.ToView("IN_Inventory", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.InvtId).HasColumnName(@"InvtID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Buyer).HasColumnName(@"Buyer").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ClassId).HasColumnName(@"ClassID").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.CogsAcct).HasColumnName(@"COGSAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CogsSub).HasColumnName(@"COGSSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.Color).HasColumnName(@"Color").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Descr).HasColumnName(@"Descr").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DfltPoUnit).HasColumnName(@"DfltPOUnit").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.DfltSalesAcct).HasColumnName(@"DfltSalesAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DfltSalesSub).HasColumnName(@"DfltSalesSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.DfltDiscAcct).HasColumnName(@"DfltDiscAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DfltDiscSub).HasColumnName(@"DfltDiscSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.DfltPromAcct).HasColumnName(@"DfltPromAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DfltPromSub).HasColumnName(@"DfltPromSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.DfltSite).HasColumnName(@"DfltSite").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DfltSoUnit).HasColumnName(@"DfltSOUnit").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.DfltWhseLoc).HasColumnName(@"DfltWhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Exported).HasColumnName(@"Exported").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.FrtAcct).HasColumnName(@"FrtAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.FrtSub).HasColumnName(@"FrtSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.InvtAcct).HasColumnName(@"InvtAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.InvtSub).HasColumnName(@"InvtSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.InvtType).HasColumnName(@"InvtType").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.KitType).HasColumnName(@"KitType").HasColumnType("varchar(1)").IsRequired(false).IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.LastCost).HasColumnName(@"LastCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.LastStdCost).HasColumnName(@"LastStdCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.LcVarianceAcct).HasColumnName(@"LCVarianceAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LcVarianceSub).HasColumnName(@"LCVarianceSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.LossRate00).HasColumnName(@"LossRate00").HasColumnType("float").IsRequired();
            builder.Property(x => x.LossRate01).HasColumnName(@"LossRate01").HasColumnType("float").IsRequired();
            builder.Property(x => x.LossRate02).HasColumnName(@"LossRate02").HasColumnType("float").IsRequired();
            builder.Property(x => x.LossRate03).HasColumnName(@"LossRate03").HasColumnType("float").IsRequired();
            builder.Property(x => x.LotSerFxdLen).HasColumnName(@"LotSerFxdLen").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.LotSerFxdTyp).HasColumnName(@"LotSerFxdTyp").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.LotSerFxdVal).HasColumnName(@"LotSerFxdVal").HasColumnType("varchar(12)").IsRequired().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.LotSerIssMthd).HasColumnName(@"LotSerIssMthd").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.LotSerNumLen).HasColumnName(@"LotSerNumLen").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.LotSerNumVal).HasColumnName(@"LotSerNumVal").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.LotSerTrack).HasColumnName(@"LotSerTrack").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.MaterialType).HasColumnName(@"MaterialType").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.NodeId).HasColumnName(@"NodeID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.NodeLevel).HasColumnName(@"NodeLevel").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ParentRecordId).HasColumnName(@"ParentRecordID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PoFee).HasColumnName(@"POFee").HasColumnType("float").IsRequired();
            builder.Property(x => x.PpvAcct).HasColumnName(@"PPVAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.PpvSub).HasColumnName(@"PPVSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.PrePayPct).HasColumnName(@"PrePayPct").HasColumnType("float").IsRequired();
            builder.Property(x => x.PriceClassId).HasColumnName(@"PriceClassID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SerAssign).HasColumnName(@"SerAssign").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.ShelfLife).HasColumnName(@"ShelfLife").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Size).HasColumnName(@"Size").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.Source).HasColumnName(@"Source").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.SoFee).HasColumnName(@"SOFee").HasColumnType("float").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.StdCost).HasColumnName(@"StdCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.StdCostDate).HasColumnName(@"StdCostDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.StkBasePrc).HasColumnName(@"StkBasePrc").HasColumnType("float").IsRequired();
            builder.Property(x => x.StkItem).HasColumnName(@"StkItem").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.StkUnit).HasColumnName(@"StkUnit").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.Style).HasColumnName(@"Style").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.TaxCat).HasColumnName(@"TaxCat").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ValMthd).HasColumnName(@"ValMthd").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.WarrantyDays).HasColumnName(@"WarrantyDays").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CrtdDateTime).HasColumnName(@"Crtd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CrtdProg).HasColumnName(@"Crtd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.CrtdUser).HasColumnName(@"Crtd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LUpdProg).HasColumnName(@"LUpd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LUpdUser).HasColumnName(@"LUpd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Tstamp).HasColumnName(@"tstamp").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
            builder.Property(x => x.BarCode).HasColumnName(@"BarCode").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Descr1).HasColumnName(@"Descr1").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Picture).HasColumnName(@"Picture").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.VendId1).HasColumnName(@"VendID1").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.VendId2).HasColumnName(@"VendID2").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.StkVol).HasColumnName(@"StkVol").HasColumnType("float").IsRequired();
            builder.Property(x => x.StkWt).HasColumnName(@"StkWt").HasColumnType("float").IsRequired();
            builder.Property(x => x.StkWtUnit).HasColumnName(@"StkWtUnit").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.IrSftyStkDays).HasColumnName(@"IRSftyStkDays").HasColumnType("float").IsRequired();
            builder.Property(x => x.IrSftyStkPct).HasColumnName(@"IRSftyStkPct").HasColumnType("float").IsRequired();
            builder.Property(x => x.IrSftyStkQty).HasColumnName(@"IRSftyStkQty").HasColumnType("float").IsRequired();
            builder.Property(x => x.IrOverStkQty).HasColumnName(@"IROverStkQty").HasColumnType("float").IsRequired();
            builder.Property(x => x.DateDep).HasColumnName(@"DateDep").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.LotSerRcptAuto).HasColumnName(@"LotSerRcptAuto").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ImportTaxId).HasColumnName(@"ImportTaxID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SoPrice).HasColumnName(@"SOPrice").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.StopSell).HasColumnName(@"StopSell").HasColumnType("int").IsRequired();
            builder.Property(x => x.MthdIssue).HasColumnName(@"MthdIssue").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("float").IsRequired();
            builder.Property(x => x.WeightAll).HasColumnName(@"WeightAll").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyInLot).HasColumnName(@"QtyInLot").HasColumnType("float").IsRequired();
        }
    }

    // IN_ItemSite
    public class InItemSiteConfiguration : IEntityTypeConfiguration<InItemSite>
    {
        public void Configure(EntityTypeBuilder<InItemSite> builder)
        {
            builder.ToView("IN_ItemSite", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.InvtId).HasColumnName(@"InvtID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.AvgCost).HasColumnName(@"AvgCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.CogsAcct).HasColumnName(@"COGSAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CogsSub).HasColumnName(@"COGSSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.SalesAcct).HasColumnName(@"SalesAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SalesSub).HasColumnName(@"SalesSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.InvtAcct).HasColumnName(@"InvtAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.InvtSub).HasColumnName(@"InvtSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.Buyer).HasColumnName(@"Buyer").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DfltPoUnit).HasColumnName(@"DfltPOUnit").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.DfltSoUnit).HasColumnName(@"DfltSOUnit").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.DfltWhseLoc).HasColumnName(@"DfltWhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.LastCost).HasColumnName(@"LastCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.LastPurchaseDate).HasColumnName(@"LastPurchaseDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.LastPurchasePrice).HasColumnName(@"LastPurchasePrice").HasColumnType("float").IsRequired();
            builder.Property(x => x.LastStdCost).HasColumnName(@"LastStdCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyAlloc).HasColumnName(@"QtyAlloc").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyAllocIn).HasColumnName(@"QtyAllocIN").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyAllocPoRet).HasColumnName(@"QtyAllocPORet").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyAllocSo).HasColumnName(@"QtyAllocSO").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyAvail).HasColumnName(@"QtyAvail").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyInTransit).HasColumnName(@"QtyInTransit").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyOnBo).HasColumnName(@"QtyOnBO").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyOnHand).HasColumnName(@"QtyOnHand").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyOnPo).HasColumnName(@"QtyOnPO").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyOnTransferOrders).HasColumnName(@"QtyOnTransferOrders").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyOnSo).HasColumnName(@"QtyOnSO").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyShipNotInv).HasColumnName(@"QtyShipNotInv").HasColumnType("float").IsRequired();
            builder.Property(x => x.StdCost).HasColumnName(@"StdCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.StdCostDate).HasColumnName(@"StdCostDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.StkItem).HasColumnName(@"StkItem").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.TotCost).HasColumnName(@"TotCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.CrtdDateTime).HasColumnName(@"Crtd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CrtdProg).HasColumnName(@"Crtd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.CrtdUser).HasColumnName(@"Crtd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LUpdProg).HasColumnName(@"LUpd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LUpdUser).HasColumnName(@"LUpd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Tstamp).HasColumnName(@"tstamp").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
            builder.Property(x => x.QtyUnCosted).HasColumnName(@"QtyUnCosted").HasColumnType("float").IsRequired();
        }
    }

    // IN_LotTrans
    public class InLotTranConfiguration : IEntityTypeConfiguration<InLotTran>
    {
        public void Configure(EntityTypeBuilder<InLotTran> builder)
        {
            builder.ToView("IN_LotTrans", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.BranchId).HasColumnName(@"BranchID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.BatNbr).HasColumnName(@"BatNbr").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.RefNbr).HasColumnName(@"RefNbr").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.LotSerNbr).HasColumnName(@"LotSerNbr").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.InTranLineRef).HasColumnName(@"INTranLineRef").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.ExpDate).HasColumnName(@"ExpDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.InvtId).HasColumnName(@"InvtID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.InvtMult).HasColumnName(@"InvtMult").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.KitId).HasColumnName(@"KitID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.MfgrLotSerNbr).HasColumnName(@"MfgrLotSerNbr").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("float").IsRequired();
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ToSiteId).HasColumnName(@"ToSiteID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ToWhseLoc).HasColumnName(@"ToWhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.TranDate).HasColumnName(@"TranDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TranType).HasColumnName(@"TranType").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.TranScr).HasColumnName(@"TranScr").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.UnitCost).HasColumnName(@"UnitCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("float").IsRequired();
            builder.Property(x => x.WarrantyDate).HasColumnName(@"WarrantyDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.WhseLoc).HasColumnName(@"WhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CrtdProg).HasColumnName(@"Crtd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.CrtdUser).HasColumnName(@"Crtd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CrtdDateTime).HasColumnName(@"Crtd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LUpdProg).HasColumnName(@"LUpd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LUpdUser).HasColumnName(@"LUpd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Tstamp).HasColumnName(@"tstamp").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
            builder.Property(x => x.CnvFact).HasColumnName(@"CnvFact").HasColumnType("float").IsRequired();
            builder.Property(x => x.UnitMultDiv).HasColumnName(@"UnitMultDiv").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.UnitDesc).HasColumnName(@"UnitDesc").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.CustId).HasColumnName(@"CustID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.MfcDate).HasColumnName(@"MfcDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RcptQty).HasColumnName(@"RcptQty").HasColumnType("float").IsRequired();
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("float").IsRequired();
            builder.Property(x => x.TotWeight).HasColumnName(@"TotWeight").HasColumnType("float").IsRequired();
        }
    }

    // Inners
    public class InnerConfiguration : IEntityTypeConfiguration<Inner>
    {
        public void Configure(EntityTypeBuilder<Inner> builder)
        {
            builder.ToTable("Inners", "dbo");
            builder.HasKey(x => x.InnerId).HasName("PK_dbo_Inners").IsClustered();

            builder.Property(x => x.InnerId).HasColumnName(@"InnerID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InnerNumber).HasColumnName(@"InnerNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InnerName).HasColumnName(@"InnerName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Ingredents).HasColumnName(@"Ingredents").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.UnitWeight).HasColumnName(@"UnitWeight").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CountryOriginal).HasColumnName(@"CountryOriginal").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StorageTemp).HasColumnName(@"StorageTemp").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Distributor).HasColumnName(@"Distributor").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.InnerQuantity).HasColumnName(@"InnerQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PackageDate).HasColumnName(@"PackageDate").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Printed).HasColumnName(@"Printed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UnitVolume).HasColumnName(@"UnitVolume").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Manufactured).HasColumnName(@"Manufactured").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Supplier).HasColumnName(@"Supplier").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ArticleNumber).HasColumnName(@"ArticleNumber").HasColumnType("int").IsRequired(false);
        }
    }

    // IN_Site
    public class InSiteConfiguration : IEntityTypeConfiguration<InSite>
    {
        public void Configure(EntityTypeBuilder<InSite> builder)
        {
            builder.ToView("IN_Site", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.WhKeeper).HasColumnName(@"WhKeeper").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.Addr1).HasColumnName(@"Addr1").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Addr2).HasColumnName(@"Addr2").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SlsAcct).HasColumnName(@"SlsAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SlsSub).HasColumnName(@"SlsSub").HasColumnType("varchar(31)").IsRequired().IsUnicode(false).HasMaxLength(31);
            builder.Property(x => x.CogsAcct).HasColumnName(@"COGSAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CogsSub).HasColumnName(@"COGSSub").HasColumnType("varchar(31)").IsRequired().IsUnicode(false).HasMaxLength(31);
            builder.Property(x => x.DiscAcct).HasColumnName(@"DiscAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DiscSub).HasColumnName(@"DiscSub").HasColumnType("varchar(31)").IsRequired().IsUnicode(false).HasMaxLength(31);
            builder.Property(x => x.MiscAcct).HasColumnName(@"MiscAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MiscSub).HasColumnName(@"MiscSub").HasColumnType("varchar(31)").IsRequired().IsUnicode(false).HasMaxLength(31);
            builder.Property(x => x.PromAcct).HasColumnName(@"PromAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.PromSub).HasColumnName(@"PromSub").HasColumnType("varchar(31)").IsRequired().IsUnicode(false).HasMaxLength(31);
            builder.Property(x => x.FrtAcct).HasColumnName(@"FrtAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.FrtSub).HasColumnName(@"FrtSub").HasColumnType("varchar(31)").IsRequired().IsUnicode(false).HasMaxLength(31);
            builder.Property(x => x.CrtdDateTime).HasColumnName(@"Crtd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CrtdProg).HasColumnName(@"Crtd_Prog").HasColumnType("char(8)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.CrtdUser).HasColumnName(@"Crtd_User").HasColumnType("char(10)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LUpdProg).HasColumnName(@"LUpd_Prog").HasColumnType("char(8)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LUpdUser).HasColumnName(@"LUpd_User").HasColumnType("char(10)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Tstamp).HasColumnName(@"tstamp").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
            builder.Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SlsperId).HasColumnName(@"SlsperId").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
        }
    }

    // InternalAudits
    public class InternalAuditConfiguration : IEntityTypeConfiguration<InternalAudit>
    {
        public void Configure(EntityTypeBuilder<InternalAudit> builder)
        {
            builder.ToTable("InternalAudits", "dbo");
            builder.HasKey(x => x.InternalAuditId).HasName("PK_InternalAudits").IsClustered();

            builder.Property(x => x.InternalAuditId).HasColumnName(@"InternalAuditID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProblemDescription).HasColumnName(@"ProblemDescription").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.PreventativeAction).HasColumnName(@"PreventativeAction").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CorrectiveResult).HasColumnName(@"CorrectiveResult").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.InternalAuditDate).HasColumnName(@"InternalAuditDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.InternalAuditConfirmed).HasColumnName(@"InternalAuditConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PreventativeActionDoneTime).HasColumnName(@"PreventativeActionDoneTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CorrectiveAction).HasColumnName(@"CorrectiveAction").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.InternalAuditStatus).HasColumnName(@"InternalAuditStatus").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CorrectiveActionDoneTime).HasColumnName(@"CorrectiveActionDoneTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PreventativeActionStatus).HasColumnName(@"PreventativeActionStatus").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PreventativeActionRequired).HasColumnName(@"PreventativeActionRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DocumentFolder).HasColumnName(@"DocumentFolder").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PreventativeActionBy).HasColumnName(@"PreventativeActionBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Complained).HasColumnName(@"Complained").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CompleteBeforeDate).HasColumnName(@"CompleteBeforeDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProblemCategoryId).HasColumnName(@"ProblemCategoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductDamageId).HasColumnName(@"ProductDamageID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Hospitalized).HasColumnName(@"Hospitalized").HasColumnType("bit").IsRequired();
            builder.Property(x => x.MedicalTreated).HasColumnName(@"MedicalTreated").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Injured).HasColumnName(@"Injured").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CorrectiveActionBy).HasColumnName(@"CorrectiveActionBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CorrectiveBeforeDate).HasColumnName(@"CorrectiveBeforeDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AccidentId).HasColumnName(@"AccidentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProblemNumber).HasColumnName(@"ProblemNumber").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.RootCause).HasColumnName(@"RootCause").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Severity).HasColumnName(@"Severity").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Likehood).HasColumnName(@"Likehood").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.AccidentLevel).HasColumnName(@"AccidentLevel").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ComplainedLevel).HasColumnName(@"ComplainedLevel").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeDisciplineRefNumber).HasColumnName(@"EmployeeDisciplineRefNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ResolvedEmployeeId).HasColumnName(@"ResolvedEmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
        }
    }

    // InternalAuditDetails
    public class InternalAuditDetailConfiguration : IEntityTypeConfiguration<InternalAuditDetail>
    {
        public void Configure(EntityTypeBuilder<InternalAuditDetail> builder)
        {
            builder.ToTable("InternalAuditDetails", "dbo");
            builder.HasKey(x => x.InternalAuditDetailId).HasName("PK_InternalAuditDetails_01").IsClustered();

            builder.Property(x => x.InternalAuditDetailId).HasColumnName(@"InternalAuditDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OperationCode).HasColumnName(@"OperationCode").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DetailRemark).HasColumnName(@"DetailRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EstimatedValueLost).HasColumnName(@"EstimatedValueLost").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CurrencyUnit).HasColumnName(@"CurrencyUnit").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.InternalAuditId).HasColumnName(@"InternalAuditID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ExpensesCoverBy).HasColumnName(@"ExpensesCoverBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
        }
    }

    // InternalAuditEmployees
    public class InternalAuditEmployeeConfiguration : IEntityTypeConfiguration<InternalAuditEmployee>
    {
        public void Configure(EntityTypeBuilder<InternalAuditEmployee> builder)
        {
            builder.ToTable("InternalAuditEmployees", "dbo");
            builder.HasKey(x => x.InternalAuditEmployeeId).HasName("PK_InternalAuditEmployees").IsClustered();

            builder.Property(x => x.InternalAuditEmployeeId).HasColumnName(@"InternalAuditEmployeeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.InternalAuditId).HasColumnName(@"InternalAuditID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DisciplineActionReference).HasColumnName(@"DisciplineActionReference").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.DisciplineAction).HasColumnName(@"DisciplineAction").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // IN_Trans
    public class InTranConfiguration : IEntityTypeConfiguration<InTran>
    {
        public void Configure(EntityTypeBuilder<InTran> builder)
        {
            builder.ToView("IN_Trans", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.BranchId).HasColumnName(@"BranchID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.BatNbr).HasColumnName(@"BatNbr").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.RefNbr).HasColumnName(@"RefNbr").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.LineRef).HasColumnName(@"LineRef").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.Acct).HasColumnName(@"Acct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CnvFact).HasColumnName(@"CnvFact").HasColumnType("float").IsRequired();
            builder.Property(x => x.DrCr).HasColumnName(@"DrCr").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.ExtCost).HasColumnName(@"ExtCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.InvtId).HasColumnName(@"InvtID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.InvtAcct).HasColumnName(@"InvtAcct").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.InvtMult).HasColumnName(@"InvtMult").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.InvtSub).HasColumnName(@"InvtSub").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.JrnlType).HasColumnName(@"JrnlType").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.ObjId).HasColumnName(@"ObjID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.PerEnt).HasColumnName(@"PerEnt").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.PerPost).HasColumnName(@"PerPost").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("float").IsRequired();
            builder.Property(x => x.QtyUnCosted).HasColumnName(@"QtyUnCosted").HasColumnType("float").IsRequired();
            builder.Property(x => x.ReasonCd).HasColumnName(@"ReasonCD").HasColumnType("varchar(6)").IsRequired().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.Rlsed).HasColumnName(@"Rlsed").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ShipperId).HasColumnName(@"ShipperID").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ShipperLineRef).HasColumnName(@"ShipperLineRef").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SlsperId).HasColumnName(@"SlsperID").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SubAcct).HasColumnName(@"SubAcct").HasColumnType("varchar(24)").IsRequired().IsUnicode(false).HasMaxLength(24);
            builder.Property(x => x.ToSiteId).HasColumnName(@"ToSiteID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ToWhseLoc).HasColumnName(@"ToWhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.TranAmt).HasColumnName(@"TranAmt").HasColumnType("float").IsRequired();
            builder.Property(x => x.TranFee).HasColumnName(@"TranFee").HasColumnType("float").IsRequired();
            builder.Property(x => x.TranDate).HasColumnName(@"TranDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TranDesc).HasColumnName(@"TranDesc").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.TranType).HasColumnName(@"TranType").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.UnitCost).HasColumnName(@"UnitCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.UnitDesc).HasColumnName(@"UnitDesc").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.UnitMultDiv).HasColumnName(@"UnitMultDiv").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.WhseLoc).HasColumnName(@"WhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CrtdDateTime).HasColumnName(@"Crtd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CrtdProg).HasColumnName(@"Crtd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.CrtdUser).HasColumnName(@"Crtd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LUpdDateTime).HasColumnName(@"LUpd_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.LUpdProg).HasColumnName(@"LUpd_Prog").HasColumnType("varchar(8)").IsRequired().IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.LUpdUser).HasColumnName(@"LUpd_User").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Tstamp).HasColumnName(@"tstamp").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
            builder.Property(x => x.CostId).HasColumnName(@"CostID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ExpDate).HasColumnName(@"ExpDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.LotSerNbr).HasColumnName(@"LotSerNbr").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.UnitLotCost).HasColumnName(@"UnitLotCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.ExtLotCost).HasColumnName(@"ExtLotCost").HasColumnType("float").IsRequired();
            builder.Property(x => x.WarrantyDate).HasColumnName(@"WarrantyDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.MfgrLotSerNbr).HasColumnName(@"MfgrLotSerNbr").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.CustId).HasColumnName(@"CustID").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.MfcDate).HasColumnName(@"MfcDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RcptQty).HasColumnName(@"RcptQty").HasColumnType("float").IsRequired();
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("float").IsRequired();
            builder.Property(x => x.TotWeight).HasColumnName(@"TotWeight").HasColumnType("float").IsRequired();
        }
    }

    // InventoryChecking
    public class InventoryCheckingConfiguration : IEntityTypeConfiguration<InventoryChecking>
    {
        public void Configure(EntityTypeBuilder<InventoryChecking> builder)
        {
            builder.ToTable("InventoryChecking", "dbo");
            builder.HasKey(x => x.InventoryCheckingId).HasName("PK_InventoryChecking");

            builder.Property(x => x.InventoryCheckingId).HasColumnName(@"InventoryCheckingID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DataScannedId).HasColumnName(@"DataScannedID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DataScannedType).HasColumnName(@"DataScannedType").HasColumnType("nvarchar(2)").IsRequired().HasMaxLength(2);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ScannedTime).HasColumnName(@"ScannedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ScannedBy).HasColumnName(@"ScannedBy").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Result).HasColumnName(@"Result").HasColumnType("nvarchar(5)").IsRequired().HasMaxLength(5);
            builder.Property(x => x.IsRecordNew).HasColumnName(@"IsRecordNew").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.WarehouseType).HasColumnName(@"WarehouseType").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
        }
    }

    // ISOOrders
    public class IsoOrderConfiguration : IEntityTypeConfiguration<IsoOrder>
    {
        public void Configure(EntityTypeBuilder<IsoOrder> builder)
        {
            builder.ToTable("ISOOrders", "dbo");
            builder.HasKey(x => x.IsoOrderId).HasName("PK_ISOInfo");

            builder.Property(x => x.IsoOrderId).HasColumnName(@"ISOOrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Smell).HasColumnName(@"Smell").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Wet).HasColumnName(@"Wet").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LidOpening).HasColumnName(@"LidOpening").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Clean).HasColumnName(@"Clean").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Torn).HasColumnName(@"Torn").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Missing).HasColumnName(@"Missing").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Denting).HasColumnName(@"Denting").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Damages).HasColumnName(@"Damages").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.FallBreak).HasColumnName(@"Fall_Break").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Soft).HasColumnName(@"Soft").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Leak).HasColumnName(@"Leak").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Dirty).HasColumnName(@"Dirty").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Musty).HasColumnName(@"Musty").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.InsectsRisk).HasColumnName(@"InsectsRisk").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.GlassWoodFragments).HasColumnName(@"Glass_WoodFragments").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Others).HasColumnName(@"Others").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ApprovedBy).HasColumnName(@"ApprovedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ApprovedTime).HasColumnName(@"ApprovedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.HasLocker).HasColumnName(@"HasLocker").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsGoodsOnPallet).HasColumnName(@"IsGoodsOnPallet").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PalletQty).HasColumnName(@"PalletQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TruckContAfterNormal).HasColumnName(@"TruckContAfterNormal").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TruckContAfterDamaged).HasColumnName(@"TruckContAfterDamaged").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DifferentQty).HasColumnName(@"DifferentQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.HasThremometer).HasColumnName(@"HasThremometer").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OrderStatus).HasColumnName(@"OrderStatus").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.SetupTemperature).HasColumnName(@"SetupTemperature").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.Electricity).HasColumnName(@"Electricity").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HasThremometerTemp).HasColumnName(@"HasThremometerTemp").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.TruckContDirty).HasColumnName(@"TruckContDirty").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TruckContSmell).HasColumnName(@"TruckContSmell").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => x.OrderNumber).HasName("IX_ISOOrders");
        }
    }

    // IssueTickets
    public class IssueTicketConfiguration : IEntityTypeConfiguration<IssueTicket>
    {
        public void Configure(EntityTypeBuilder<IssueTicket> builder)
        {
            builder.ToTable("IssueTickets", "dbo");
            builder.HasKey(x => x.IssueTicketId).HasName("PK_IssueTickets").IsClustered();

            builder.Property(x => x.IssueTicketId).HasColumnName(@"IssueTicketID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EmployeeName).HasColumnName(@"EmployeeName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // ITHelpDesks
    public class ItHelpDeskConfiguration : IEntityTypeConfiguration<ItHelpDesk>
    {
        public void Configure(EntityTypeBuilder<ItHelpDesk> builder)
        {
            builder.ToTable("ITHelpDesks", "dbo");
            builder.HasKey(x => x.ItHelpDeskId).HasName("PK_ITHelpDesks").IsClustered();

            builder.Property(x => x.ItHelpDeskId).HasColumnName(@"ITHelpDeskID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // KPIDefinitions
    public class KpiDefinitionConfiguration : IEntityTypeConfiguration<KpiDefinition>
    {
        public void Configure(EntityTypeBuilder<KpiDefinition> builder)
        {
            builder.ToTable("KPIDefinitions", "dbo");
            builder.HasKey(x => x.KpiDefinitionId).HasName("PK_KPIDefinitions").IsClustered();

            builder.Property(x => x.KpiDefinitionId).HasColumnName(@"KPIDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.KpiDefinitionDescription).HasColumnName(@"KPIDefinitionDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.KpiCategory).HasColumnName(@"KPICategory").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.KpiScoreStandard).HasColumnName(@"KPIScoreStandard").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.KpiRemark).HasColumnName(@"KPIRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.KpiCode).HasColumnName(@"KPICode").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.KpiCategoryId).HasColumnName(@"KPICategoryID").HasColumnType("int").IsRequired(false);
        }
    }

    // KPIFinancialRequests
    public class KpiFinancialRequestConfiguration : IEntityTypeConfiguration<KpiFinancialRequest>
    {
        public void Configure(EntityTypeBuilder<KpiFinancialRequest> builder)
        {
            builder.ToTable("KPIFinancialRequests", "dbo");
            builder.HasKey(x => x.KpiFinancialRequestId).HasName("PK_KPIFinancialRequests").IsClustered();

            builder.Property(x => x.KpiFinancialRequestId).HasColumnName(@"KPIFinancialRequestID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.InboundCases).HasColumnName(@"InboundCases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InboundWeight).HasColumnName(@"InboundWeight").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.InboundCube).HasColumnName(@"InboundCube").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.InboundPallets).HasColumnName(@"InboundPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InboundWeightPerPallet).HasColumnName(@"InboundWeightPerPallet").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.InboundReceipts).HasColumnName(@"InboundReceipts").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InboundUniqueSkUs).HasColumnName(@"InboundUniqueSKUs").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InboundLots).HasColumnName(@"InboundLots").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InboundTemperature).HasColumnName(@"InboundTemperature").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutboundCases).HasColumnName(@"OutboundCases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutboundWeight).HasColumnName(@"OutboundWeight").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.OutboundCube).HasColumnName(@"OutboundCube").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.OutboundPallets).HasColumnName(@"OutboundPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutboundWeightPerPallet).HasColumnName(@"OutboundWeightPerPallet").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.OutboundSkUs).HasColumnName(@"OutboundSKUs").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutboundLines).HasColumnName(@"OutboundLines").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutboundCasesPerLine).HasColumnName(@"OutboundCasesPerLine").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.OutboundCasesPicked).HasColumnName(@"OutboundCasesPicked").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.CasePickPercent).HasColumnName(@"CasePickPercent").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.BlastFrozenCases).HasColumnName(@"BlastFrozenCases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BlastFrozenKgs).HasColumnName(@"BlastFrozenKgs").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.CasesLabeled).HasColumnName(@"CasesLabeled").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EachsPicked).HasColumnName(@"EachsPicked").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CatchWeightCases).HasColumnName(@"CatchWeightCases").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.PalletsWrapped).HasColumnName(@"PalletsWrapped").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletsRestacked).HasColumnName(@"PalletsRestacked").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OccupiedCases).HasColumnName(@"OccupiedCases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OccupiedPallets).HasColumnName(@"OccupiedPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletCapacity).HasColumnName(@"PalletCapacity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletOccupancyPercent).HasColumnName(@"PalletOccupancyPercent").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.Turns).HasColumnName(@"Turns").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.Month).HasColumnName(@"Month").HasColumnType("datetime").IsRequired(false);
        }
    }

    // KPIRecordings
    public class KpiRecordingConfiguration : IEntityTypeConfiguration<KpiRecording>
    {
        public void Configure(EntityTypeBuilder<KpiRecording> builder)
        {
            builder.ToTable("KPIRecordings", "dbo");
            builder.HasKey(x => x.Kpiid).HasName("PK_KPI").IsClustered();

            builder.Property(x => x.Kpiid).HasColumnName(@"KPIID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.KpiDescription).HasColumnName(@"KPIDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.KpiScore123Day).HasColumnName(@"KPIScore123Day").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.KpiComment).HasColumnName(@"KPIComment").HasColumnType("nvarchar(3000)").IsRequired(false).HasMaxLength(3000);
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.KpiDefinitionId).HasColumnName(@"KPIDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.KpiScore45Day).HasColumnName(@"KPIScore45Day").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.KpiScore12345Afternoon).HasColumnName(@"KPIScore12345Afternoon").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.KpiScoreShift3).HasColumnName(@"KPIScoreShift3").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.KpiConfirmed).HasColumnName(@"KPIConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // KPIVisibility
    public class KpiVisibilityConfiguration : IEntityTypeConfiguration<KpiVisibility>
    {
        public void Configure(EntityTypeBuilder<KpiVisibility> builder)
        {
            builder.ToTable("KPIVisibility", "dbo");
            builder.HasKey(x => x.KpiVisibilityId).HasName("PK_KPIVisibility").IsClustered();

            builder.Property(x => x.KpiVisibilityId).HasColumnName(@"KPIVisibilityID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.WarehouseSafety).HasColumnName(@"WarehouseSafety").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Vin).HasColumnName(@"VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bhx).HasColumnName(@"BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Masan).HasColumnName(@"MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bigc).HasColumnName(@"BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Target).HasColumnName(@"Target").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.AbaHanoi).HasColumnName(@"ABAHanoi").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.AbaSaigon1).HasColumnName(@"ABASaigon1").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.MasanHanam).HasColumnName(@"MasanHanam").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bhxlmx).HasColumnName(@"BHXLMX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WhTarget).HasColumnName(@"WH_Target").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BhxKgs).HasColumnName(@"BHX_Kgs").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.BhxKm).HasColumnName(@"BHX_Km").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VinKgs).HasColumnName(@"VIN_Kgs").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.VinKm).HasColumnName(@"VIN_Km").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.MasanKgs).HasColumnName(@"MASAN_Kgs").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.MasanKm).HasColumnName(@"MASAN_Km").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.BigcKgs).HasColumnName(@"BIGC_Kgs").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.BigcKm).HasColumnName(@"BIGC_Km").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.SlVin).HasColumnName(@"SL_VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.SlBhx).HasColumnName(@"SL_BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.SlMasan).HasColumnName(@"SL_MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.SlBigc).HasColumnName(@"SL_BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.SlTarget).HasColumnName(@"SL_Target").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.OtVin).HasColumnName(@"OT_VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.OtBhx).HasColumnName(@"OT_BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.OtMasan).HasColumnName(@"OT_MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.OtBigc).HasColumnName(@"OT_BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.OtTarget).HasColumnName(@"OT_Target").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DifotVin).HasColumnName(@"DIFOT_VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DifotBhx).HasColumnName(@"DIFOT_BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DifotMasan).HasColumnName(@"DIFOT_MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DifotBigc).HasColumnName(@"DIFOT_BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DifotTarget).HasColumnName(@"DIFOT_Target").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckVin).HasColumnName(@"Truck_VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckBhx).HasColumnName(@"Truck_BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckMasan).HasColumnName(@"Truck_MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckBigc).HasColumnName(@"Truck_BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckTarget).HasColumnName(@"Truck_Target").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // KPIVisibilityCategories
    public class KpiVisibilityCategoryConfiguration : IEntityTypeConfiguration<KpiVisibilityCategory>
    {
        public void Configure(EntityTypeBuilder<KpiVisibilityCategory> builder)
        {
            builder.ToTable("KPIVisibilityCategories", "dbo");
            builder.HasKey(x => x.KpiVisibilityCategoryId).HasName("PK_KPIVisibilityCategories").IsClustered();

            builder.Property(x => x.KpiVisibilityCategoryId).HasColumnName(@"KPIVisibilityCategoryID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CategoryDescription).HasColumnName(@"CategoryDescription").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // KPIVisibility_ServiceLevel
    public class KpiVisibilityServiceLevelConfiguration : IEntityTypeConfiguration<KpiVisibilityServiceLevel>
    {
        public void Configure(EntityTypeBuilder<KpiVisibilityServiceLevel> builder)
        {
            builder.ToTable("KPIVisibility_ServiceLevel", "dbo");
            builder.HasKey(x => x.KpiVisibilityId).HasName("PK_KPIVisibility_ServiceLevel").IsClustered();

            builder.Property(x => x.KpiVisibilityId).HasColumnName(@"KPIVisibilityID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OnTime).HasColumnName(@"OnTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Difot).HasColumnName(@"DIFOT").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OsDCases).HasColumnName(@"OS_D_Cases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.KgPerKm).HasColumnName(@"KgPerKm").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WhProductivitive).HasColumnName(@"WHProductivitive").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckingProductivities).HasColumnName(@"TruckingProductivities").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ServiceLevel).HasColumnName(@"ServiceLevel").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WarehouseSafety).HasColumnName(@"WarehouseSafety").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Vin).HasColumnName(@"VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bhx).HasColumnName(@"BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Masan).HasColumnName(@"MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bigc).HasColumnName(@"BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Target).HasColumnName(@"Target").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // KPIVisibility_TruckingProductivities
    public class KpiVisibilityTruckingProductivityConfiguration : IEntityTypeConfiguration<KpiVisibilityTruckingProductivity>
    {
        public void Configure(EntityTypeBuilder<KpiVisibilityTruckingProductivity> builder)
        {
            builder.ToTable("KPIVisibility_TruckingProductivities", "dbo");
            builder.HasKey(x => x.KpiVisibilityId).HasName("PK_KPIVisibility_TruckingProductivities").IsClustered();

            builder.Property(x => x.KpiVisibilityId).HasColumnName(@"KPIVisibilityID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OnTime).HasColumnName(@"OnTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Difot).HasColumnName(@"DIFOT").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OsDCases).HasColumnName(@"OS_D_Cases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.KgPerKm).HasColumnName(@"KgPerKm").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WhProductivitive).HasColumnName(@"WHProductivitive").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckingProductivities).HasColumnName(@"TruckingProductivities").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ServiceLevel).HasColumnName(@"ServiceLevel").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WarehouseSafety).HasColumnName(@"WarehouseSafety").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Vin).HasColumnName(@"VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bhx).HasColumnName(@"BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Masan).HasColumnName(@"MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bigc).HasColumnName(@"BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Target).HasColumnName(@"Target").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // KPIVisibility_WarehouseSafety
    public class KpiVisibilityWarehouseSafetyConfiguration : IEntityTypeConfiguration<KpiVisibilityWarehouseSafety>
    {
        public void Configure(EntityTypeBuilder<KpiVisibilityWarehouseSafety> builder)
        {
            builder.ToTable("KPIVisibility_WarehouseSafety", "dbo");
            builder.HasKey(x => x.KpiVisibilityId).HasName("PK_KPIVisibility_WarehouseSafety").IsClustered();

            builder.Property(x => x.KpiVisibilityId).HasColumnName(@"KPIVisibilityID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OnTime).HasColumnName(@"OnTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Difot).HasColumnName(@"DIFOT").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OsDCases).HasColumnName(@"OS_D_Cases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.KgPerKm).HasColumnName(@"KgPerKm").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WhProductivitive).HasColumnName(@"WHProductivitive").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckingProductivities).HasColumnName(@"TruckingProductivities").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ServiceLevel).HasColumnName(@"ServiceLevel").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WarehouseSafety).HasColumnName(@"WarehouseSafety").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Vin).HasColumnName(@"VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bhx).HasColumnName(@"BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Masan).HasColumnName(@"MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bigc).HasColumnName(@"BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Target).HasColumnName(@"Target").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // KPIVisibility_WHProductivitive
    public class KpiVisibilityWhProductivitiveConfiguration : IEntityTypeConfiguration<KpiVisibilityWhProductivitive>
    {
        public void Configure(EntityTypeBuilder<KpiVisibilityWhProductivitive> builder)
        {
            builder.ToTable("KPIVisibility_WHProductivitive", "dbo");
            builder.HasKey(x => x.KpiVisibilityId).HasName("PK_KPIVisibility_WHProductivitive").IsClustered();

            builder.Property(x => x.KpiVisibilityId).HasColumnName(@"KPIVisibilityID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OnTime).HasColumnName(@"OnTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Difot).HasColumnName(@"DIFOT").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OsDCases).HasColumnName(@"OS_D_Cases").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.KgPerKm).HasColumnName(@"KgPerKm").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WhProductivitive).HasColumnName(@"WHProductivitive").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TruckingProductivities).HasColumnName(@"TruckingProductivities").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ServiceLevel).HasColumnName(@"ServiceLevel").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WarehouseSafety).HasColumnName(@"WarehouseSafety").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Vin).HasColumnName(@"VIN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bhx).HasColumnName(@"BHX").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Masan).HasColumnName(@"MASAN").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Bigc).HasColumnName(@"BIGC").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Target).HasColumnName(@"Target").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // LoadingReports
    public class LoadingReportConfiguration : IEntityTypeConfiguration<LoadingReport>
    {
        public void Configure(EntityTypeBuilder<LoadingReport> builder)
        {
            builder.ToTable("LoadingReports", "dbo");
            builder.HasKey(x => x.LoadingReportId).HasName("PK_LoadingReports");

            builder.Property(x => x.LoadingReportId).HasColumnName(@"LoadingReportID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.LoadingReportDate).HasColumnName(@"LoadingReportDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Owner).HasColumnName(@"Owner").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.St).HasColumnName(@"ST").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // LoadingReportDetails
    public class LoadingReportDetailConfiguration : IEntityTypeConfiguration<LoadingReportDetail>
    {
        public void Configure(EntityTypeBuilder<LoadingReportDetail> builder)
        {
            builder.ToTable("LoadingReportDetails", "dbo");
            builder.HasKey(x => x.LoadingReportDetailId).HasName("PK_LoadingReportDetails").IsClustered();

            builder.Property(x => x.LoadingReportDetailId).HasColumnName(@"LoadingReportDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.LoadingReportId).HasColumnName(@"LoadingReportID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D1).HasColumnName(@"D1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D2).HasColumnName(@"D2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D3).HasColumnName(@"D3").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D4).HasColumnName(@"D4").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D5).HasColumnName(@"D5").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D6).HasColumnName(@"D6").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D7).HasColumnName(@"D7").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D8).HasColumnName(@"D8").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D9).HasColumnName(@"D9").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D10).HasColumnName(@"D10").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D11).HasColumnName(@"D11").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D12).HasColumnName(@"D12").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D13).HasColumnName(@"D13").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D14).HasColumnName(@"D14").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D15).HasColumnName(@"D15").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D16).HasColumnName(@"D16").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D17).HasColumnName(@"D17").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D18).HasColumnName(@"D18").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D19).HasColumnName(@"D19").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D20).HasColumnName(@"D20").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D21).HasColumnName(@"D21").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D22).HasColumnName(@"D22").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D23).HasColumnName(@"D23").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D24).HasColumnName(@"D24").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D25).HasColumnName(@"D25").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D26).HasColumnName(@"D26").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D27).HasColumnName(@"D27").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D28).HasColumnName(@"D28").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D29).HasColumnName(@"D29").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D30).HasColumnName(@"D30").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D31).HasColumnName(@"D31").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D32).HasColumnName(@"D32").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D33).HasColumnName(@"D33").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D34).HasColumnName(@"D34").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D35).HasColumnName(@"D35").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D36).HasColumnName(@"D36").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Sorting).HasColumnName(@"Sorting").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductQuantityCheck).HasColumnName(@"ProductQuantityCheck").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.D37).HasColumnName(@"D37").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D38).HasColumnName(@"D38").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D39).HasColumnName(@"D39").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D40).HasColumnName(@"D40").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D41).HasColumnName(@"D41").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D42).HasColumnName(@"D42").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D43).HasColumnName(@"D43").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D44).HasColumnName(@"D44").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D45).HasColumnName(@"D45").HasColumnType("int").IsRequired(false);
        }
    }

    // Locations
    public class LocationConfiguration : IEntityTypeConfiguration<Location>
    {
        public void Configure(EntityTypeBuilder<Location> builder)
        {
            builder.ToTable("Locations", "dbo");
            builder.HasKey(x => x.LocationId).HasName("PK_Locations");

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.High).HasColumnName(@"High").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Used).HasColumnName(@"Used").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Top).HasColumnName(@"Top").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Low).HasColumnName(@"Low").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LocationNumberShort).HasColumnName(@"LocationNumberShort").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.IsBusy).HasColumnName(@"isBusy").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ProductQuantity).HasColumnName(@"ProductQuantity").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PalletQuantity).HasColumnName(@"PalletQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.VeryLowHigh).HasColumnName(@"VeryLowHigh").HasColumnType("bit").IsRequired();
            builder.Property(x => x.MaxWeight).HasColumnName(@"MaxWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationIdOld).HasColumnName(@"LocationID_OLD").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomIdOld).HasColumnName(@"RoomID_OLD").HasColumnType("nchar(2)").IsRequired(false).IsFixedLength().HasMaxLength(2);
            builder.Property(x => x.Virtual).HasColumnName(@"Virtual").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LocationHq).HasColumnName(@"LocationHQ").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IsLocationHome).HasColumnName(@"IsLocationHome").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => new { x.LocationNumberShort, x.RoomId }).HasName("IX_Locations");
        }
    }

    // location_abstract
    public class LocationAbstractConfiguration : IEntityTypeConfiguration<LocationAbstract>
    {
        public void Configure(EntityTypeBuilder<LocationAbstract> builder)
        {
            builder.ToView("location_abstract", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.Wms).HasColumnName(@"WMS").HasColumnType("nvarchar(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.WmsLocation).HasColumnName(@"WMSLocation").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.WhseLoc).HasColumnName(@"WhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Zone).HasColumnName(@"Zone").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Way).HasColumnName(@"Way").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Layer).HasColumnName(@"Layer").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Square).HasColumnName(@"Square").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
        }
    }

    // location_HQ_NG
    public class LocationHqNgConfiguration : IEntityTypeConfiguration<LocationHqNg>
    {
        public void Configure(EntityTypeBuilder<LocationHqNg> builder)
        {
            builder.ToView("location_HQ_NG", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.WhseLoc).HasColumnName(@"WhseLoc").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.LocationIsTrue).HasColumnName(@"LocationIsTrue").HasColumnType("varchar(79)").IsRequired().IsUnicode(false).HasMaxLength(79);
            builder.Property(x => x.Zone).HasColumnName(@"Zone").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Way).HasColumnName(@"Way").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Layer).HasColumnName(@"Layer").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Square).HasColumnName(@"Square").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
        }
    }

    // location_reference
    public class LocationReferenceConfiguration : IEntityTypeConfiguration<LocationReference>
    {
        public void Configure(EntityTypeBuilder<LocationReference> builder)
        {
            builder.ToView("location_reference", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.Hq).HasColumnName(@"HQ").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Wms).HasColumnName(@"WMS").HasColumnType("nvarchar(51)").IsRequired(false).HasMaxLength(51);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Way).HasColumnName(@"Way").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Layer).HasColumnName(@"Layer").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Square).HasColumnName(@"Square").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
        }
    }

    // LocationsHome
    public class LocationsHomeConfiguration : IEntityTypeConfiguration<LocationsHome>
    {
        public void Configure(EntityTypeBuilder<LocationsHome> builder)
        {
            builder.ToTable("LocationsHome", "dbo");
            builder.HasKey(x => x.LocationId).HasName("PK_LocationsHome").IsClustered();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.High).HasColumnName(@"High").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.RoomIdOld).HasColumnName(@"RoomID_OLD").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.LocationIdOld).HasColumnName(@"LocationID_OLD").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomNumber).HasColumnName(@"RoomNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // LogRecords
    public class LogRecordConfiguration : IEntityTypeConfiguration<LogRecord>
    {
        public void Configure(EntityTypeBuilder<LogRecord> builder)
        {
            builder.ToTable("LogRecords", "dbo");
            builder.HasKey(x => x.LogInId).HasName("PK_LogRecords").IsClustered();

            builder.Property(x => x.LogInId).HasColumnName(@"LogInID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LoginDate).HasColumnName(@"LoginDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.WindowUserName).HasColumnName(@"WindowUserName").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.LoginLevel).HasColumnName(@"LoginLevel").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.IpClient).HasColumnName(@"IPClient").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // LunchPlaces
    public class LunchPlaceConfiguration : IEntityTypeConfiguration<LunchPlace>
    {
        public void Configure(EntityTypeBuilder<LunchPlace> builder)
        {
            builder.ToTable("LunchPlaces", "dbo");
            builder.HasKey(x => x.LunchPlaceId).HasName("PK_LunchPlaces_1").IsClustered();

            builder.Property(x => x.LunchPlaceId).HasColumnName(@"LunchPlaceID").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2).ValueGeneratedNever();
            builder.Property(x => x.PlaceDescription).HasColumnName(@"PlaceDescription").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
        }
    }

    // MappingLocatorWithCustomers
    public class MappingLocatorWithCustomerConfiguration : IEntityTypeConfiguration<MappingLocatorWithCustomer>
    {
        public void Configure(EntityTypeBuilder<MappingLocatorWithCustomer> builder)
        {
            builder.ToTable("MappingLocatorWithCustomers", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__MappingL__3214EC2782E7B19C").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Rooms).HasColumnName(@"Rooms").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RoomMapping).HasColumnName(@"Room_Mapping").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Locattion).HasColumnName(@"Locattion").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.LocationMapping).HasColumnName(@"Location_Mapping").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.WareHouse).HasColumnName(@"WareHouse").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.WareHouseMapping).HasColumnName(@"WareHouseMapping").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
        }
    }

    // MappingPalletOrders
    public class MappingPalletOrderConfiguration : IEntityTypeConfiguration<MappingPalletOrder>
    {
        public void Configure(EntityTypeBuilder<MappingPalletOrder> builder)
        {
            builder.ToTable("MappingPalletOrders", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__MappingP__3214EC27BD699F9A").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.MappingOrder).HasColumnName(@"MappingOrder").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsPrintTemp).HasColumnName(@"IsPrintTemp").HasColumnType("int").IsRequired(false);
        }
    }

    // MASAN_CHECK_CARTON_OVERSIZE
    public class MasanCheckCartonOversizeConfiguration : IEntityTypeConfiguration<MasanCheckCartonOversize>
    {
        public void Configure(EntityTypeBuilder<MasanCheckCartonOversize> builder)
        {
            builder.ToView("MASAN_CHECK_CARTON_OVERSIZE", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ShipToAddress).HasColumnName(@"SHIP_TO_ADDRESS").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalPack).HasColumnName(@"TotalPack").HasColumnType("int").IsRequired(false);
        }
    }

    // MASAN_CHECK_DUPLICATEPACK_INCARTON
    public class MasanCheckDuplicatepackIncartonConfiguration : IEntityTypeConfiguration<MasanCheckDuplicatepackIncarton>
    {
        public void Configure(EntityTypeBuilder<MasanCheckDuplicatepackIncarton> builder)
        {
            builder.ToView("MASAN_CHECK_DUPLICATEPACK_INCARTON", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ShipToAddress).HasColumnName(@"SHIP_TO_ADDRESS").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CountPacks).HasColumnName(@"CountPacks").HasColumnType("int").IsRequired(false);
        }
    }

    // MASAN_CHECK_PACK_CARTON_DIFF
    public class MasanCheckPackCartonDiffConfiguration : IEntityTypeConfiguration<MasanCheckPackCartonDiff>
    {
        public void Configure(EntityTypeBuilder<MasanCheckPackCartonDiff> builder)
        {
            builder.ToView("MASAN_CHECK_PACK_CARTON_DIFF", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.OrQtyDiff).HasColumnName(@"OrQtyDiff").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CartonQtyDiff).HasColumnName(@"CartonQtyDiff").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderQuantity).HasColumnName(@"OrderQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderNetWeight).HasColumnName(@"OrderNetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
        }
    }

    // MASAN_CHECKTOTAL_SCAN
    public class MasanChecktotalScanConfiguration : IEntityTypeConfiguration<MasanChecktotalScan>
    {
        public void Configure(EntityTypeBuilder<MasanChecktotalScan> builder)
        {
            builder.ToView("MASAN_CHECKTOTAL_SCAN", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.W).HasColumnName(@"W").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // MASAN_ViewCheckCartonDuplicate
    public class MasanViewCheckCartonDuplicateConfiguration : IEntityTypeConfiguration<MasanViewCheckCartonDuplicate>
    {
        public void Configure(EntityTypeBuilder<MasanViewCheckCartonDuplicate> builder)
        {
            builder.ToView("MASAN_ViewCheckCartonDuplicate", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CountCarton).HasColumnName(@"CountCarton").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
        }
    }

    // Masan_ViewStockByDate2
    public class MasanViewStockByDate2Configuration : IEntityTypeConfiguration<MasanViewStockByDate2>
    {
        public void Configure(EntityTypeBuilder<MasanViewStockByDate2> builder)
        {
            builder.ToView("Masan_ViewStockByDate2", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ReceivingOrderLocalId).HasColumnName(@"ReceivingOrderLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerLocalId).HasColumnName(@"CustomerLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Discontinue).HasColumnName(@"Discontinue").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("int").IsRequired(false);
        }
    }

    // Messages
    public class MessageConfiguration : IEntityTypeConfiguration<Message>
    {
        public void Configure(EntityTypeBuilder<Message> builder)
        {
            builder.ToTable("Messages", "dbo");
            builder.HasKey(x => x.MessageId).HasName("PK_Messages").IsClustered();

            builder.Property(x => x.MessageId).HasColumnName(@"MessageID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MessageDescription).HasColumnName(@"MessageDescription").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.IsReceived).HasColumnName(@"IsReceived").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DeliveryAddress).HasColumnName(@"DeliveryAddress").HasColumnType("varchar(2000)").IsRequired().IsUnicode(false).HasMaxLength(2000);
            builder.Property(x => x.IsDelivered).HasColumnName(@"IsDelivered").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.MessageRemark).HasColumnName(@"MessageRemark").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);
        }
    }

    // MessageSystemMaster
    public class MessageSystemMasterConfiguration : IEntityTypeConfiguration<MessageSystemMaster>
    {
        public void Configure(EntityTypeBuilder<MessageSystemMaster> builder)
        {
            builder.ToTable("MessageSystemMaster", "dbo");
            builder.HasKey(x => x.MessageKey).HasName("PK__MessageS__E03734E00DF39A5D").IsClustered();

            builder.Property(x => x.MessageKey).HasColumnName(@"MessageKey").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Message1).HasColumnName(@"Message1").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Message2).HasColumnName(@"Message2").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Component).HasColumnName(@"Component").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.MessageType).HasColumnName(@"MessageType").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ResponeCode).HasColumnName(@"ResponeCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // M_item
    public class MItemConfiguration : IEntityTypeConfiguration<MItem>
    {
        public void Configure(EntityTypeBuilder<MItem> builder)
        {
            builder.ToTable("M_item", "dbo");
            builder.HasKey(x => x.ItemKey).HasName("PK__m_item__37A71F7E539EBCCC").IsClustered();

            builder.Property(x => x.ItemKey).HasColumnName(@"item_key").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64).ValueGeneratedNever();
            builder.Property(x => x.ItemLabel).HasColumnName(@"item_label").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.Editable).HasColumnName(@"editable").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"remark").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
        }
    }

    // M_item_value
    public class MItemValueConfiguration : IEntityTypeConfiguration<MItemValue>
    {
        public void Configure(EntityTypeBuilder<MItemValue> builder)
        {
            builder.ToTable("M_item_value", "dbo");
            builder.HasKey(x => new { x.ItemKey, x.Code }).HasName("PK__M_item_v__A4F0CBB1F126230F").IsClustered();

            builder.Property(x => x.ItemKey).HasColumnName(@"item_key").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64).ValueGeneratedNever();
            builder.Property(x => x.Code).HasColumnName(@"code").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Remark).HasColumnName(@"remark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.IsKey).HasColumnName(@"is_key").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.MItem).WithMany(b => b.MItemValues).HasForeignKey(c => c.ItemKey).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_app_m_item_value_1");
        }
    }

    // MonthlyPayRollQuantity
    public class MonthlyPayRollQuantityConfiguration : IEntityTypeConfiguration<MonthlyPayRollQuantity>
    {
        public void Configure(EntityTypeBuilder<MonthlyPayRollQuantity> builder)
        {
            builder.ToTable("MonthlyPayRollQuantity", "dbo");
            builder.HasKey(x => x.MonthPayRollQuantityId).HasName("PK_MonthlyPayRollQ").IsClustered();

            builder.Property(x => x.MonthPayRollQuantityId).HasColumnName(@"MonthPayRollQuantityID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Change).HasColumnName(@"Change").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // MonthlyPayRollSummary
    public class MonthlyPayRollSummaryConfiguration : IEntityTypeConfiguration<MonthlyPayRollSummary>
    {
        public void Configure(EntityTypeBuilder<MonthlyPayRollSummary> builder)
        {
            builder.ToTable("MonthlyPayRollSummary", "dbo");
            builder.HasKey(x => x.PayRollMonthId).HasName("PK_Monthly").IsClustered();

            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PayRollMonth).HasColumnName(@"PayRollMonth").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WorkingDays).HasColumnName(@"WorkingDays").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WorkingDaysChange).HasColumnName(@"WorkingDaysChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PayableHolidays).HasColumnName(@"PayableHolidays").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OtsChange).HasColumnName(@"OTSChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OtnChange).HasColumnName(@"OTNChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TotalWorkerHour).HasColumnName(@"TotalWorkerHour").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TotalWorkerHourScs).HasColumnName(@"TotalWorkerHourSCS").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TotalWorkerHourChange).HasColumnName(@"TotalWorkerHourChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Accidents).HasColumnName(@"Accidents").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.AccidentsChange).HasColumnName(@"AccidentsChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.AccidentLeave).HasColumnName(@"AccidentLeave").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.AccidentLeaveChange).HasColumnName(@"AccidentLeaveChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.SickLeave).HasColumnName(@"SickLeave").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.SickLeavechange).HasColumnName(@"SickLeavechange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.LeaveMoreThan3Days).HasColumnName(@"LeaveMoreThan3Days").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeaveMoreThan3DayChange).HasColumnName(@"LeaveMoreThan3DayChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeePermanentQty).HasColumnName(@"EmployeePermanentQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeTemporaryQty).HasColumnName(@"EmployeeTemporaryQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OthChange).HasColumnName(@"OTHChange").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HalfSum).HasColumnName(@"HalfSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OffSum).HasColumnName(@"OffSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.LeaveSum).HasColumnName(@"LeaveSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // MSN_ItemCode
    public class MsnItemCodeConfiguration : IEntityTypeConfiguration<MsnItemCode>
    {
        public void Configure(EntityTypeBuilder<MsnItemCode> builder)
        {
            builder.ToTable("MSN_ItemCode", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_MSN_ItemCode").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ItemCode).HasColumnName(@"ItemCode").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ItemCodeMain).HasColumnName(@"ItemCodeMain").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ItemDescription).HasColumnName(@"ItemDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // MSN_ItemCode_ShelfDay
    public class MsnItemCodeShelfDayConfiguration : IEntityTypeConfiguration<MsnItemCodeShelfDay>
    {
        public void Configure(EntityTypeBuilder<MsnItemCodeShelfDay> builder)
        {
            builder.ToTable("MSN_ItemCode_ShelfDay", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_MSN_ItemCode_ShelfDay").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ItemCode).HasColumnName(@"ItemCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OldShelfLifeDay).HasColumnName(@"OldShelfLifeDay").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NewDescription2).HasColumnName(@"NewDescription_2").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.EnglishDescription).HasColumnName(@"EnglishDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
        }
    }

    // MSN_ItemCode_Status
    public class MsnItemCodeStatusConfiguration : IEntityTypeConfiguration<MsnItemCodeStatus>
    {
        public void Configure(EntityTypeBuilder<MsnItemCodeStatus> builder)
        {
            builder.ToTable("MSN_ItemCode_Status", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_MSN_ItemCode_Status");

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ItemCode).HasColumnName(@"ItemCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ItemName).HasColumnName(@"ItemName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Lot).HasColumnName(@"Lot").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ExpDate).HasColumnName(@"ExpDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Stock).HasColumnName(@"Stock").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Unallocated).HasColumnName(@"UNALLOCATED").HasColumnType("decimal(18,5)").IsRequired(false);

            builder.HasIndex(x => new { x.ItemCode, x.Lot }).HasName("IX_MSN_ItemCode_Status");
        }
    }

    // myimages
    public class MyimageConfiguration : IEntityTypeConfiguration<Myimage>
    {
        public void Configure(EntityTypeBuilder<Myimage> builder)
        {
            builder.ToTable("myimages", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_myimages").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Img).HasColumnName(@"img").HasColumnType("varbinary(max)").IsRequired(false);
        }
    }

    // News
    public class NewsConfiguration : IEntityTypeConfiguration<News>
    {
        public void Configure(EntityTypeBuilder<News> builder)
        {
            builder.ToTable("News", "dbo");
            builder.HasKey(x => x.CompanyNewId).HasName("PK_News").IsClustered();

            builder.Property(x => x.CompanyNewId).HasColumnName(@"CompanyNewID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NewDate).HasColumnName(@"NewDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.NewDescriptions).HasColumnName(@"NewDescriptions").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.NewHeadline).HasColumnName(@"NewHeadline").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ImageName).HasColumnName(@"ImageName").HasColumnType("varchar(2000)").IsRequired(false).IsUnicode(false).HasMaxLength(2000);
            builder.Property(x => x.NewType).HasColumnName(@"NewType").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.NavigateUrl).HasColumnName(@"NavigateURL").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.NewsConfirmed).HasColumnName(@"NewsConfirmed").HasColumnType("bit").IsRequired();
        }
    }

    // Notes
    public class NoteConfiguration : IEntityTypeConfiguration<Note>
    {
        public void Configure(EntityTypeBuilder<Note> builder)
        {
            builder.ToTable("Notes", "dbo");
            builder.HasKey(x => x.NoteId).HasName("PK_Notes1").IsClustered();

            builder.Property(x => x.NoteId).HasColumnName(@"NoteID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NoteDate).HasColumnName(@"NoteDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.NoteDescription).HasColumnName(@"NoteDescription").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.DocumentFolder).HasColumnName(@"DocumentFolder").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerRefNumber).HasColumnName(@"CustomerRefNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.OccurTime).HasColumnName(@"OccurTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRepresentative).HasColumnName(@"CustomerRepresentative").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.RepresentativePosition).HasColumnName(@"RepresentativePosition").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.OccurLocation).HasColumnName(@"OccurLocation").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.NoteNumber).HasColumnName(@"NoteNumber").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SupervisorId).HasColumnName(@"SupervisorID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // NoteDetails
    public class NoteDetailConfiguration : IEntityTypeConfiguration<NoteDetail>
    {
        public void Configure(EntityTypeBuilder<NoteDetail> builder)
        {
            builder.ToTable("NoteDetails", "dbo");
            builder.HasKey(x => x.NoteDetailId).HasName("PK_NoteDetails").IsClustered();

            builder.Property(x => x.NoteDetailId).HasColumnName(@"NoteDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NoteId).HasColumnName(@"NoteID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ActualQuantity).HasColumnName(@"ActualQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OriginalState).HasColumnName(@"OriginalState").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ActualState).HasColumnName(@"ActualState").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nchar(1500)").IsRequired(false).IsFixedLength().HasMaxLength(1500);
        }
    }

    // Notifications
    public class NotificationConfiguration : IEntityTypeConfiguration<Notification>
    {
        public void Configure(EntityTypeBuilder<Notification> builder)
        {
            builder.ToTable("Notifications", "dbo");
            builder.HasKey(x => x.NotificationId).HasName("PK_Notifications").IsClustered();

            builder.Property(x => x.NotificationId).HasColumnName(@"NotificationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NotificationQuantity).HasColumnName(@"NotificationQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ScanStatus).HasColumnName(@"ScanStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.IsNew).HasColumnName(@"IsNew").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // OfficeInformation
    public class OfficeInformationConfiguration : IEntityTypeConfiguration<OfficeInformation>
    {
        public void Configure(EntityTypeBuilder<OfficeInformation> builder)
        {
            builder.ToTable("OfficeInformation", "dbo");
            builder.HasKey(x => x.OfficeId).HasName("PK_OfficeInformation").IsClustered();

            builder.Property(x => x.OfficeId).HasColumnName(@"OfficeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StateOfProvince).HasColumnName(@"StateOfProvince").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdatedRemain).HasColumnName(@"UpdatedRemain").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedDaily).HasColumnName(@"UpdatedDaily").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TaxCode).HasColumnName(@"TaxCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RepresentativeName).HasColumnName(@"RepresentativeName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RepresentativePosition).HasColumnName(@"RepresentativePosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EnglishCompanyName).HasColumnName(@"EnglishCompanyName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.EnglishAddress).HasColumnName(@"EnglishAddress").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.EnglishRepresentativePosition).HasColumnName(@"EnglishRepresentativePosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // OfficePhones
    public class OfficePhoneConfiguration : IEntityTypeConfiguration<OfficePhone>
    {
        public void Configure(EntityTypeBuilder<OfficePhone> builder)
        {
            builder.ToTable("OfficePhones", "dbo");
            builder.HasKey(x => x.OfficePhoneId).HasName("PK_PhoneInternalNumber").IsClustered();

            builder.Property(x => x.OfficePhoneId).HasColumnName(@"OfficePhoneID").HasColumnType("smallint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PhoneInternalNumber).HasColumnName(@"PhoneInternalNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeName).HasColumnName(@"EmployeeName").HasColumnType("nvarchar(35)").IsRequired(false).HasMaxLength(35);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
        }
    }

    // OperatingCostCustomerIntensity
    public class OperatingCostCustomerIntensityConfiguration : IEntityTypeConfiguration<OperatingCostCustomerIntensity>
    {
        public void Configure(EntityTypeBuilder<OperatingCostCustomerIntensity> builder)
        {
            builder.ToView("OperatingCostCustomerIntensity", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.MonthDescription).HasColumnName(@"MonthDescription").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.LocationInOut).HasColumnName(@"LocationInOut").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LocationOccupied).HasColumnName(@"LocationOccupied").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.WeightInOut).HasColumnName(@"WeightInOut").HasColumnType("decimal(38,2)").IsRequired(false);
            builder.Property(x => x.WeightInStoreNet).HasColumnName(@"WeightInStoreNet").HasColumnType("decimal(38,2)").IsRequired(false);
            builder.Property(x => x.WeightInOutAdjusted).HasColumnName(@"WeightInOutAdjusted").HasColumnType("decimal(38,2)").IsRequired(false);
            builder.Property(x => x.WeightInStoreGross).HasColumnName(@"WeightInStoreGross").HasColumnType("decimal(38,2)").IsRequired(false);
            builder.Property(x => x.NumberOfTransActions).HasColumnName(@"NumberOfTransActions").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.Todate).HasColumnName(@"Todate").HasColumnType("date").IsRequired();
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
        }
    }

    // OperatingCostCustomerMainList
    public class OperatingCostCustomerMainListConfiguration : IEntityTypeConfiguration<OperatingCostCustomerMainList>
    {
        public void Configure(EntityTypeBuilder<OperatingCostCustomerMainList> builder)
        {
            builder.ToView("OperatingCostCustomerMainList", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
        }
    }

    // OperatingCostDefinitions
    public class OperatingCostDefinitionConfiguration : IEntityTypeConfiguration<OperatingCostDefinition>
    {
        public void Configure(EntityTypeBuilder<OperatingCostDefinition> builder)
        {
            builder.ToTable("OperatingCostDefinitions", "dbo");
            builder.HasKey(x => x.OperatingCostId).HasName("PK_OperatingCostDefinitions").IsClustered();

            builder.Property(x => x.OperatingCostId).HasColumnName(@"OperatingCostID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OperatingCostDescription).HasColumnName(@"OperatingCostDescription").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.OperatingCostCode).HasColumnName(@"OperatingCostCode").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.OperatingCostRemark).HasColumnName(@"OperatingCostRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CalculationMethod).HasColumnName(@"CalculationMethod").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CalculationSql).HasColumnName(@"CalculationSQL").HasColumnType("varchar(5000)").IsRequired(false).IsUnicode(false).HasMaxLength(5000);
            builder.Property(x => x.AutoCalculation).HasColumnName(@"AutoCalculation").HasColumnType("bit").IsRequired();
            builder.Property(x => x.OperatingCostCategoryId).HasColumnName(@"OperatingCostCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CreateData).HasColumnName(@"CreateData").HasColumnType("bit").IsRequired();

            builder.HasIndex(x => x.OperatingCostCode).HasName("IX_OperatingCostDefinitions").IsUnique();
        }
    }

    // OperatingCostDetailByCustomers
    public class OperatingCostDetailByCustomerConfiguration : IEntityTypeConfiguration<OperatingCostDetailByCustomer>
    {
        public void Configure(EntityTypeBuilder<OperatingCostDetailByCustomer> builder)
        {
            builder.ToTable("OperatingCostDetailByCustomers", "dbo");
            builder.HasKey(x => x.OperatingCostDetailByCustomerId).HasName("PK_OperatingCostDetailByCustomers").IsClustered();

            builder.Property(x => x.OperatingCostDetailByCustomerId).HasColumnName(@"OperatingCostDetailByCustomerID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerIdOld).HasColumnName(@"CustomerID_old").HasColumnType("int").IsRequired();
            builder.Property(x => x.OperatingCostMonthlyDetailId).HasColumnName(@"OperatingCostMonthlyDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OperatingCostDetailByCustomerQuantity).HasColumnName(@"OperatingCostDetailByCustomerQuantity").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.OperatingCostDetailByCustomerRemark).HasColumnName(@"OperatingCostDetailByCustomerRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.OperatingCostDriverRate).HasColumnName(@"OperatingCostDriverRate").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.OperatingCostDetailByCustomerQuantityAdjusted).HasColumnName(@"OperatingCostDetailByCustomerQuantityAdjusted").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OperatingCostMonthlyDetail).WithMany(b => b.OperatingCostDetailByCustomers).HasForeignKey(c => c.OperatingCostMonthlyDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperatingCostDetailByCustomers_OperatingCostMonthlyDetails");

            builder.HasIndex(x => x.OperatingCostMonthlyDetailId).HasName("IX_OperatingCostDetailByCustomers");
            builder.HasIndex(x => x.CustomerIdOld).HasName("IX_OperatingCostDetailByCustomers_1");
        }
    }

    // OperatingCostElectricityDetails
    public class OperatingCostElectricityDetailConfiguration : IEntityTypeConfiguration<OperatingCostElectricityDetail>
    {
        public void Configure(EntityTypeBuilder<OperatingCostElectricityDetail> builder)
        {
            builder.ToTable("OperatingCostElectricityDetails", "dbo");
            builder.HasKey(x => x.OperatingCostElectrictyDetailId).HasName("PK_OperatingCostElectricityDetails").IsClustered();

            builder.Property(x => x.OperatingCostElectrictyDetailId).HasColumnName(@"OperatingCostElectrictyDetailID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerIdOld).HasColumnName(@"CustomerID_old").HasColumnType("int").IsRequired();
            builder.Property(x => x.ElectricityAmount).HasColumnName(@"ElectricityAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.DriverRate).HasColumnName(@"DriverRate").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.ElectricityAmountAdjusted).HasColumnName(@"ElectricityAmountAdjusted").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.OperatingCostElectricityId).HasColumnName(@"OperatingCostElectricityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.OperatingCostElectricty).WithMany(b => b.OperatingCostElectricityDetails).HasForeignKey(c => c.OperatingCostElectricityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperatingCostElectricityDetails_OperatingCostElectricty");

            builder.HasIndex(x => x.CustomerIdOld).HasName("IX_OperatingCostElectricityDetails");
            builder.HasIndex(x => x.OperatingCostElectricityId).HasName("IX_OperatingCostElectricityDetails_1");
        }
    }

    // OperatingCostElectricty
    public class OperatingCostElectrictyConfiguration : IEntityTypeConfiguration<OperatingCostElectricty>
    {
        public void Configure(EntityTypeBuilder<OperatingCostElectricty> builder)
        {
            builder.ToTable("OperatingCostElectricty", "dbo");
            builder.HasKey(x => x.OperatingCostElectricityId).HasName("PK_OperatingCostElectricty").IsClustered();

            builder.Property(x => x.OperatingCostElectricityId).HasColumnName(@"OperatingCostElectricityID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ElectricityAmount).HasColumnName(@"ElectricityAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.ElectricityKwh).HasColumnName(@"ElectricityKwh").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.OperatingCostMonthlyId).HasColumnName(@"OperatingCostMonthlyID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.OperatingCostMonth).WithMany(b => b.OperatingCostElectricties).HasForeignKey(c => c.OperatingCostMonthlyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperatingCostElectricty_OperatingCostMonths");

            builder.HasIndex(x => x.OperatingCostMonthlyId).HasName("IX_OperatingCostElectricty");
        }
    }

    // OperatingCostEmployeeProductivity
    public class OperatingCostEmployeeProductivityConfiguration : IEntityTypeConfiguration<OperatingCostEmployeeProductivity>
    {
        public void Configure(EntityTypeBuilder<OperatingCostEmployeeProductivity> builder)
        {
            builder.ToView("OperatingCostEmployeeProductivity", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.MonthDescription).HasColumnName(@"MonthDescription").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.PersonnelFromDate).HasColumnName(@"PersonnelFromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PersonnelTodate).HasColumnName(@"PersonnelTodate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.Productivity).HasColumnName(@"Productivity").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LabourCostAmount).HasColumnName(@"LabourCostAmount").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LabourCostAmountAdjusted).HasColumnName(@"LabourCostAmountAdjusted").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LabourType).HasColumnName(@"LabourType").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // OperatingCostInsuranceValueLastWeek
    public class OperatingCostInsuranceValueLastWeekConfiguration : IEntityTypeConfiguration<OperatingCostInsuranceValueLastWeek>
    {
        public void Configure(EntityTypeBuilder<OperatingCostInsuranceValueLastWeek> builder)
        {
            builder.ToView("OperatingCostInsuranceValueLastWeek", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalInsuranceValue).HasColumnName(@"TotalInsuranceValue").HasColumnType("float").IsRequired(false);
        }
    }

    // OperatingCostLabours
    public class OperatingCostLabourConfiguration : IEntityTypeConfiguration<OperatingCostLabour>
    {
        public void Configure(EntityTypeBuilder<OperatingCostLabour> builder)
        {
            builder.ToTable("OperatingCostLabours", "dbo");
            builder.HasKey(x => x.OperatingCostLabourId).HasName("PK_OperatingCostLabours").IsClustered();

            builder.Property(x => x.OperatingCostLabourId).HasColumnName(@"OperatingCostLabourID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OperatingCostMonthlyId).HasColumnName(@"OperatingCostMonthlyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeIdOld).HasColumnName(@"EmployeeID_old").HasColumnType("int").IsRequired();
            builder.Property(x => x.LabourCostAmount).HasColumnName(@"LabourCostAmount").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LabourCostRemark).HasColumnName(@"LabourCostRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OperatingCostMonth).WithMany(b => b.OperatingCostLabours).HasForeignKey(c => c.OperatingCostMonthlyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperatingCostLabours_OperatingCostMonths");

            builder.HasIndex(x => x.EmployeeIdOld).HasName("IX_OperatingCostLabours");
            builder.HasIndex(x => x.OperatingCostMonthlyId).HasName("IX_OperatingCostLabours_1");
        }
    }

    // OperatingCostLabourDetails
    public class OperatingCostLabourDetailConfiguration : IEntityTypeConfiguration<OperatingCostLabourDetail>
    {
        public void Configure(EntityTypeBuilder<OperatingCostLabourDetail> builder)
        {
            builder.ToTable("OperatingCostLabourDetails", "dbo");
            builder.HasKey(x => x.OperatingCostLabourDetailId).HasName("PK_OperatingCostLabourDetails").IsClustered();

            builder.Property(x => x.OperatingCostLabourDetailId).HasColumnName(@"OperatingCostLabourDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OperatingCostLabourId).HasColumnName(@"OperatingCostLabourID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerIdOld).HasColumnName(@"CustomerID_old").HasColumnType("int").IsRequired();
            builder.Property(x => x.Productivity).HasColumnName(@"Productivity").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.UnitCost).HasColumnName(@"UnitCost").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LabourCostAmount).HasColumnName(@"LabourCostAmount").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.DriverRate).HasColumnName(@"DriverRate").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LabourType).HasColumnName(@"LabourType").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.LabourCostAmountAdjusted).HasColumnName(@"LabourCostAmountAdjusted").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LabourCostAmountAdjustRated).HasColumnName(@"LabourCostAmountAdjustRated").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OperatingCostLabour).WithMany(b => b.OperatingCostLabourDetails).HasForeignKey(c => c.OperatingCostLabourId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperatingCostLabourDetails_OperatingCostLabours");

            builder.HasIndex(x => x.OperatingCostLabourId).HasName("IX_OperatingCostLabourDetails");
            builder.HasIndex(x => x.CustomerIdOld).HasName("IX_OperatingCostLabourDetails_1");
        }
    }

    // OperatingCostMonths
    public class OperatingCostMonthConfiguration : IEntityTypeConfiguration<OperatingCostMonth>
    {
        public void Configure(EntityTypeBuilder<OperatingCostMonth> builder)
        {
            builder.ToTable("OperatingCostMonths", "dbo");
            builder.HasKey(x => x.OperatingCostMonthlyId).HasName("PK_OperatingCostMonths").IsClustered();

            builder.Property(x => x.OperatingCostMonthlyId).HasColumnName(@"OperatingCostMonthlyID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MonthDescription).HasColumnName(@"MonthDescription").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.OperatingCostMonthlyRemark).HasColumnName(@"OperatingCostMonthlyRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.Todate).HasColumnName(@"Todate").HasColumnType("date").IsRequired();
            builder.Property(x => x.NumberOfSundays).HasColumnName(@"NumberOfSundays").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.NumberOfHollidays).HasColumnName(@"NumberOfHollidays").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.PersonnelFromDate).HasColumnName(@"PersonnelFromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PersonnelTodate).HasColumnName(@"PersonnelTodate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProcessData).HasColumnName(@"ProcessData").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ProcessDataTime).HasColumnName(@"ProcessDataTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // OperatingCostMonthlyDetails
    public class OperatingCostMonthlyDetailConfiguration : IEntityTypeConfiguration<OperatingCostMonthlyDetail>
    {
        public void Configure(EntityTypeBuilder<OperatingCostMonthlyDetail> builder)
        {
            builder.ToTable("OperatingCostMonthlyDetails", "dbo");
            builder.HasKey(x => x.OperatingCostMonthlyDetailId).HasName("PK_OperatingCostMonthlyDetails").IsClustered();

            builder.Property(x => x.OperatingCostMonthlyDetailId).HasColumnName(@"OperatingCostMonthlyDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OperatingCostMonthlyId).HasColumnName(@"OperatingCostMonthlyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OperatingCostId).HasColumnName(@"OperatingCostID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OperatingCostQuantity).HasColumnName(@"OperatingCostQuantity").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.OperatingCostMonthlyDetailRemark).HasColumnName(@"OperatingCostMonthlyDetailRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("tinyint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OperatingCostDefinition).WithMany(b => b.OperatingCostMonthlyDetails).HasForeignKey(c => c.OperatingCostId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperatingCostMonthlyDetails_OperatingCostDefinitions");
            builder.HasOne(a => a.OperatingCostMonth).WithMany(b => b.OperatingCostMonthlyDetails).HasForeignKey(c => c.OperatingCostMonthlyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperatingCostMonthlyDetails_OperatingCostMonths");

            builder.HasIndex(x => x.OperatingCostId).HasName("IX_OperatingCostMonthlyDetails");
            builder.HasIndex(x => x.OperatingCostMonthlyId).HasName("IX_OperatingCostMonthlyDetails_1");
        }
    }

    // OperatingCostNonlistedRates
    public class OperatingCostNonlistedRateConfiguration : IEntityTypeConfiguration<OperatingCostNonlistedRate>
    {
        public void Configure(EntityTypeBuilder<OperatingCostNonlistedRate> builder)
        {
            builder.ToTable("OperatingCostNonlistedRates", "dbo");
            builder.HasKey(x => x.NominalRateId).HasName("PK_OperatingCostNominalRates").IsClustered();

            builder.Property(x => x.NominalRateId).HasColumnName(@"NominalRateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TaskDescription).HasColumnName(@"TaskDescription").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.NominalRate).HasColumnName(@"NominalRate").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.TaskRemark).HasColumnName(@"TaskRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
        }
    }

    // OperatingCostOtherActivities
    public class OperatingCostOtherActivityConfiguration : IEntityTypeConfiguration<OperatingCostOtherActivity>
    {
        public void Configure(EntityTypeBuilder<OperatingCostOtherActivity> builder)
        {
            builder.ToView("OperatingCostOtherActivities", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OpeType).HasColumnName(@"Ope_type").HasColumnType("varchar(9)").IsRequired().IsUnicode(false).HasMaxLength(9);
            builder.Property(x => x.Ym).HasColumnName(@"YM").HasColumnType("varchar(7)").IsRequired(false).IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.Trs).HasColumnName(@"Trs").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Kgs).HasColumnName(@"Kgs").HasColumnType("float").IsRequired(false);
        }
    }

    // OperatingCostStockOnHandAvgByRoom
    public class OperatingCostStockOnHandAvgByRoomConfiguration : IEntityTypeConfiguration<OperatingCostStockOnHandAvgByRoom>
    {
        public void Configure(EntityTypeBuilder<OperatingCostStockOnHandAvgByRoom> builder)
        {
            builder.ToView("OperatingCostStockOnHandAvgByRoom", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.AvgQtyPallets).HasColumnName(@"AvgQtyPallets").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.AvgWeight).HasColumnName(@"AvgWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("varchar(25)").IsRequired(false).IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.Todate).HasColumnName(@"Todate").HasColumnType("varchar(25)").IsRequired(false).IsUnicode(false).HasMaxLength(25);
        }
    }

    // OperatingCostVehicleInOutRunningTime
    public class OperatingCostVehicleInOutRunningTimeConfiguration : IEntityTypeConfiguration<OperatingCostVehicleInOutRunningTime>
    {
        public void Configure(EntityTypeBuilder<OperatingCostVehicleInOutRunningTime> builder)
        {
            builder.ToView("OperatingCostVehicleInOutRunningTime", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ContainerNum).HasColumnName(@"ContainerNum").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Via).HasColumnName(@"Via").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ContainerType).HasColumnName(@"ContainerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RunningHour).HasColumnName(@"RunningHour").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OtherServiceId).HasColumnName(@"OtherServiceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserOut).HasColumnName(@"UserOut").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserCheckOut).HasColumnName(@"UserCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TruckCheckOut).HasColumnName(@"TruckCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DateIn).HasColumnName(@"DateIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RunningFloat).HasColumnName(@"RunningFloat").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PowerQuantity).HasColumnName(@"PowerQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // OperationCostBlastFreezing
    public class OperationCostBlastFreezingConfiguration : IEntityTypeConfiguration<OperationCostBlastFreezing>
    {
        public void Configure(EntityTypeBuilder<OperationCostBlastFreezing> builder)
        {
            builder.ToView("OperationCostBlastFreezing", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.BlastFreezerCreateTime).HasColumnName(@"BlastFreezerCreateTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StartLoadingTime).HasColumnName(@"StartLoadingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndLoadingTime).HasColumnName(@"EndLoadingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BlastFreezerUloadingTime).HasColumnName(@"BlastFreezerUloadingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BlastFreezerRoomId).HasColumnName(@"BlastFreezerRoomID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DateIn).HasColumnName(@"DateIn").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductDetailsRemark).HasColumnName(@"ProductDetailsRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BlastFreezerLoadingBy).HasColumnName(@"BlastFreezerLoadingBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StartRunTime).HasColumnName(@"StartRunTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndRunTime).HasColumnName(@"EndRunTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BlastFreezerRunningRemark).HasColumnName(@"BlastFreezerRunningRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BlastFreezerRecordNumber).HasColumnName(@"BlastFreezerRecordNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // OperationCostMonthlyParameters
    public class OperationCostMonthlyParameterConfiguration : IEntityTypeConfiguration<OperationCostMonthlyParameter>
    {
        public void Configure(EntityTypeBuilder<OperationCostMonthlyParameter> builder)
        {
            builder.ToTable("OperationCostMonthlyParameters", "dbo");
            builder.HasKey(x => x.OperationCostMonthlyParameterId).HasName("PK_OperationCostMonthlyParameters").IsClustered();

            builder.Property(x => x.OperationCostMonthlyParameterId).HasColumnName(@"OperationCostMonthlyParameterID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerIdOld).HasColumnName(@"CustomerID_old").HasColumnType("int").IsRequired();
            builder.Property(x => x.LocationInout).HasColumnName(@"LocationInout").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.LocationOccupied).HasColumnName(@"LocationOccupied").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.WeightInOut).HasColumnName(@"WeightInOut").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.WeightInStoreNet).HasColumnName(@"WeightInStoreNet").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.WeightInOutAdjusted).HasColumnName(@"WeightInOutAdjusted").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.WeightInStoreGross).HasColumnName(@"WeightInStoreGross").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.NumberOfTransactions).HasColumnName(@"NumberOfTransactions").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.OperatingCostMonthlyId).HasColumnName(@"OperatingCostMonthlyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.IndexLocationInOut).HasColumnName(@"Index_LocationInOut").HasColumnType("decimal(10,3)").IsRequired(false);
            builder.Property(x => x.IndexTransactions).HasColumnName(@"Index_Transactions").HasColumnType("decimal(10,3)").IsRequired(false);
            builder.Property(x => x.LocationInOutActual).HasColumnName(@"LocationInOutActual").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.TransactionActual).HasColumnName(@"TransactionActual").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OperatingCostMonth).WithMany(b => b.OperationCostMonthlyParameters).HasForeignKey(c => c.OperatingCostMonthlyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperationCostMonthlyParameters_OperatingCostMonths");

            builder.HasIndex(x => x.OperatingCostMonthlyId).HasName("IX_OperationCostMonthlyParameters");
            builder.HasIndex(x => x.CustomerIdOld).HasName("IX_OperationCostMonthlyParameters_1");
        }
    }

    // OperationCostNominalRates
    public class OperationCostNominalRateConfiguration : IEntityTypeConfiguration<OperationCostNominalRate>
    {
        public void Configure(EntityTypeBuilder<OperationCostNominalRate> builder)
        {
            builder.ToView("OperationCostNominalRates", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.JobName).HasColumnName(@"JobName").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("real").IsRequired(false);
        }
    }

    // OperationGroupCustomers
    public class OperationGroupCustomerConfiguration : IEntityTypeConfiguration<OperationGroupCustomer>
    {
        public void Configure(EntityTypeBuilder<OperationGroupCustomer> builder)
        {
            builder.ToTable("OperationGroupCustomers", "dbo");
            builder.HasKey(x => new { x.OperationGroupDefinitionId, x.CustomerId }).HasName("PK__Operatio__E9ECFB07DADBEA98").IsClustered();

            builder.Property(x => x.OperationGroupDefinitionId).HasColumnName(@"OperationGroupDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.OperationGroupDefinition).WithMany(b => b.OperationGroupCustomers).HasForeignKey(c => c.OperationGroupDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperationGroupDefinitionID_OperationGroupDefinitions");
        }
    }

    // OperationGroupDefinitions
    public class OperationGroupDefinitionConfiguration : IEntityTypeConfiguration<OperationGroupDefinition>
    {
        public void Configure(EntityTypeBuilder<OperationGroupDefinition> builder)
        {
            builder.ToTable("OperationGroupDefinitions", "dbo");
            builder.HasKey(x => x.OperationGroupDefinitionId).HasName("PK__Operatio__73A61D4CD462BADC").IsClustered();

            builder.Property(x => x.OperationGroupDefinitionId).HasColumnName(@"OperationGroupDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OperationGroupName).HasColumnName(@"OperationGroupName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
        }
    }

    // OperationGroupUser
    public class OperationGroupUserConfiguration : IEntityTypeConfiguration<OperationGroupUser>
    {
        public void Configure(EntityTypeBuilder<OperationGroupUser> builder)
        {
            builder.ToTable("OperationGroupUser", "dbo");
            builder.HasKey(x => new { x.OperationGroupDefinitionId, x.UserName }).HasName("PK__Operatio__1F39350984C0E142").IsClustered();

            builder.Property(x => x.OperationGroupDefinitionId).HasColumnName(@"OperationGroupDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.OperationGroupDefinition).WithMany(b => b.OperationGroupUsers).HasForeignKey(c => c.OperationGroupDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OperationGroupDefinitionID_User");
            builder.HasOne(a => a.UserAccount).WithMany(b => b.OperationGroupUsers).HasForeignKey(c => c.UserName).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserName_AcountUser");
        }
    }

    // OrderCategories
    public class OrderCategoryConfiguration : IEntityTypeConfiguration<OrderCategory>
    {
        public void Configure(EntityTypeBuilder<OrderCategory> builder)
        {
            builder.ToTable("OrderCategories", "dbo");
            builder.HasKey(x => x.OrderCategoryId).HasName("PK_OrderCategories").IsClustered();

            builder.Property(x => x.OrderCategoryId).HasColumnName(@"OrderCategoryID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.DescriptionVietnam).HasColumnName(@"DescriptionVietnam").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.ProductivityPercentage).HasColumnName(@"ProductivityPercentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductivityLevel).HasColumnName(@"ProductivityLevel").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.DescriptionEnglish).HasColumnName(@"DescriptionEnglish").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.OrderCategoryNumber).HasColumnName(@"OrderCategoryNumber").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CategoryActive).HasColumnName(@"CategoryActive").HasColumnType("bit").IsRequired(false);
        }
    }

    // OrderProgress
    public class OrderProgressConfiguration : IEntityTypeConfiguration<OrderProgress>
    {
        public void Configure(EntityTypeBuilder<OrderProgress> builder)
        {
            builder.ToTable("OrderProgress", "dbo");
            builder.HasKey(x => x.OrderProgressId).HasName("PK_OrderProgress").IsClustered();

            builder.Property(x => x.OrderProgressId).HasColumnName(@"OrderProgressID").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderProgressDescription).HasColumnName(@"OrderProgressDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // OrderType
    public class OrderTypeConfiguration : IEntityTypeConfiguration<OrderType>
    {
        public void Configure(EntityTypeBuilder<OrderType> builder)
        {
            builder.ToTable("OrderType", "dbo");
            builder.HasKey(x => x.OrderTypeId).HasName("PK_OrderType").IsClustered();

            builder.Property(x => x.OrderTypeId).HasColumnName(@"OrderTypeID").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderTypeDescription).HasColumnName(@"OrderTypeDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.OrderType_).HasColumnName(@"OrderType").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // OtherService
    public class OtherServiceConfiguration : IEntityTypeConfiguration<OtherService>
    {
        public void Configure(EntityTypeBuilder<OtherService> builder)
        {
            builder.ToTable("OtherService", "dbo");
            builder.HasKey(x => x.OtherServiceId).HasName("PK_OtherService").IsClustered();

            builder.Property(x => x.OtherServiceId).HasColumnName(@"OtherServiceID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OtherServiceNumber).HasColumnName(@"OtherServiceNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServiceDate).HasColumnName(@"ServiceDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ServiceRemark).HasColumnName(@"ServiceRemark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerRep).HasColumnName(@"CustomerRep").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.LockStatus).HasColumnName(@"LockStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BillingConfirmed).HasColumnName(@"BillingConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OtherServiceLocalId).HasColumnName(@"OtherServiceLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            builder.HasIndex(x => x.ServiceDate).HasName("IX_OtherService_1");
        }
    }

    // OtherServiceDetails
    public class OtherServiceDetailConfiguration : IEntityTypeConfiguration<OtherServiceDetail>
    {
        public void Configure(EntityTypeBuilder<OtherServiceDetail> builder)
        {
            builder.ToTable("OtherServiceDetails", "dbo");
            builder.HasKey(x => x.OtherServiceDetailId).HasName("PK_OtherServiceDetails").IsClustered();

            builder.Property(x => x.OtherServiceDetailId).HasColumnName(@"OtherServiceDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.Billed).HasColumnName(@"Billed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Invoiced).HasColumnName(@"Invoiced").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Manual).HasColumnName(@"Manual").HasColumnType("bit").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.OtherServiceId).HasColumnName(@"OtherServiceID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OrderDetailId).HasColumnName(@"OrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.IsAutoByBilling).HasColumnName(@"IsAutoByBilling").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Vat).HasColumnName(@"VAT").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.RevenuedTime).HasColumnName(@"RevenuedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OtherService).WithMany(b => b.OtherServiceDetails).HasForeignKey(c => c.OtherServiceId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OtherServiceDetails_OtherService");
            builder.HasOne(a => a.ServicesDefinition).WithMany(b => b.OtherServiceDetails).HasForeignKey(c => c.ServicesDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OtherServiceDetails_ServicesDefinition");
        }
    }

    // OTM_BUY_SHIPMENT
    public class OtmBuyShipmentConfiguration : IEntityTypeConfiguration<OtmBuyShipment>
    {
        public void Configure(EntityTypeBuilder<OtmBuyShipment> builder)
        {
            builder.ToTable("OTM_BUY_SHIPMENT", "dbo");
            builder.HasKey(x => x.RowPointer);

            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RecordDate).HasColumnName(@"RecordDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RowPointer).HasColumnName(@"RowPointer").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.NoteExistsFlag).HasColumnName(@"NoteExistsFlag").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.InWorkflow).HasColumnName(@"InWorkflow").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CustomerCode).HasColumnName(@"CustomerCode").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101);
            builder.Property(x => x.ShipmentGid).HasColumnName(@"Shipment_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Trucktype).HasColumnName(@"Trucktype").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101);
            builder.Property(x => x.StartTime).HasColumnName(@"START_TIME").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"END_TIME").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DriverGid).HasColumnName(@"DRIVER_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.PowerUnitGid).HasColumnName(@"POWER_UNIT_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Status).HasColumnName(@"STATUS").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BuyShipmentId).HasColumnName(@"BuyShipmentID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.InterfaceStatus).HasColumnName(@"INTERFACE_STATUS").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.AtmShipmentId).HasColumnName(@"ATM_SHIPMENT_ID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Mode).HasColumnName(@"MODE").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Routeno).HasColumnName(@"ROUTENO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TransmissionNo).HasColumnName(@"TransmissionNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Message).HasColumnName(@"MESSAGE").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);

            builder.HasIndex(x => x.RowPointer).HasName("IX_OTM_BUY_SHIPMENT_RowPointer").IsUnique();
        }
    }

    // OTM_Contacts
    public class OtmContactConfiguration : IEntityTypeConfiguration<OtmContact>
    {
        public void Configure(EntityTypeBuilder<OtmContact> builder)
        {
            builder.ToTable("OTM_Contacts", "dbo");
            builder.HasKey(x => x.ContactGid).HasName("PK_OTM_Contacts").IsClustered();

            builder.Property(x => x.ContactGid).HasColumnName(@"CONTACT_GID").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101).ValueGeneratedNever();
            builder.Property(x => x.ContactXid).HasColumnName(@"CONTACT_XID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.FirstName).HasColumnName(@"FIRST_NAME").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.LastName).HasColumnName(@"LAST_NAME").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.JobTitle).HasColumnName(@"JOB_TITLE").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.EmailAddress).HasColumnName(@"EMAIL_ADDRESS").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.Phone1).HasColumnName(@"PHONE1").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.Phone2).HasColumnName(@"PHONE2").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.Fax).HasColumnName(@"FAX").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.LanguageSpoken).HasColumnName(@"LANGUAGE_SPOKEN").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.IsPrimaryContact).HasColumnName(@"IS_PRIMARY_CONTACT").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Telex).HasColumnName(@"TELEX").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ExternalSystemGid).HasColumnName(@"EXTERNAL_SYSTEM_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Notes).HasColumnName(@"NOTES").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.GlUserGid).HasColumnName(@"GL_USER_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.RecipientDomainName).HasColumnName(@"RECIPIENT_DOMAIN_NAME").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RouteThroughLocation).HasColumnName(@"ROUTE_THROUGH_LOCATION").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.ContactType).HasColumnName(@"CONTACT_TYPE").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.IsBroadcast).HasColumnName(@"IS_BROADCAST").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.GroupSavedQueryGid).HasColumnName(@"GROUP_SAVED_QUERY_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.LocationGid).HasColumnName(@"LOCATION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.IsEmailVirusProtected).HasColumnName(@"IS_EMAIL_VIRUS_PROTECTED").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.ConsolidationProfileGid).HasColumnName(@"CONSOLIDATION_PROFILE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.ConsolidatedNotifyOnly).HasColumnName(@"CONSOLIDATED_NOTIFY_ONLY").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.IsNotificationOn).HasColumnName(@"IS_NOTIFICATION_ON").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.TimeZoneGid).HasColumnName(@"TIME_ZONE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.FromAddrContactGid).HasColumnName(@"FROM_ADDR_CONTACT_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.IsFromAddress).HasColumnName(@"IS_FROM_ADDRESS").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.MiddleName).HasColumnName(@"MIDDLE_NAME").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.CellPhone).HasColumnName(@"CELL_PHONE").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.SendAsMessage).HasColumnName(@"SEND_AS_MESSAGE").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.MessageProfileGid).HasColumnName(@"MESSAGE_PROFILE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.AlternateName).HasColumnName(@"ALTERNATE_NAME").HasColumnType("nvarchar(360)").IsRequired(false).HasMaxLength(360);
            builder.Property(x => x.CompanyName).HasColumnName(@"COMPANY_NAME").HasColumnType("nvarchar(360)").IsRequired(false).HasMaxLength(360);
            builder.Property(x => x.Description).HasColumnName(@"DESCRIPTION").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.IppPrinterGid).HasColumnName(@"IPP_PRINTER_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.EcmUser).HasColumnName(@"ECM_USER").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Attribute1).HasColumnName(@"ATTRIBUTE1").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute2).HasColumnName(@"ATTRIBUTE2").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute3).HasColumnName(@"ATTRIBUTE3").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute4).HasColumnName(@"ATTRIBUTE4").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute5).HasColumnName(@"ATTRIBUTE5").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute6).HasColumnName(@"ATTRIBUTE6").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute7).HasColumnName(@"ATTRIBUTE7").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute8).HasColumnName(@"ATTRIBUTE8").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute9).HasColumnName(@"ATTRIBUTE9").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute10).HasColumnName(@"ATTRIBUTE10").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute11).HasColumnName(@"ATTRIBUTE11").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute12).HasColumnName(@"ATTRIBUTE12").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute13).HasColumnName(@"ATTRIBUTE13").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute14).HasColumnName(@"ATTRIBUTE14").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute15).HasColumnName(@"ATTRIBUTE15").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute16).HasColumnName(@"ATTRIBUTE16").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute17).HasColumnName(@"ATTRIBUTE17").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute18).HasColumnName(@"ATTRIBUTE18").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute19).HasColumnName(@"ATTRIBUTE19").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute20).HasColumnName(@"ATTRIBUTE20").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AttributeNumber1).HasColumnName(@"ATTRIBUTE_NUMBER1").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber2).HasColumnName(@"ATTRIBUTE_NUMBER2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber3).HasColumnName(@"ATTRIBUTE_NUMBER3").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber4).HasColumnName(@"ATTRIBUTE_NUMBER4").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber5).HasColumnName(@"ATTRIBUTE_NUMBER5").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber6).HasColumnName(@"ATTRIBUTE_NUMBER6").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber7).HasColumnName(@"ATTRIBUTE_NUMBER7").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber8).HasColumnName(@"ATTRIBUTE_NUMBER8").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber9).HasColumnName(@"ATTRIBUTE_NUMBER9").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber10).HasColumnName(@"ATTRIBUTE_NUMBER10").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeDate1).HasColumnName(@"ATTRIBUTE_DATE1").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate2).HasColumnName(@"ATTRIBUTE_DATE2").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate3).HasColumnName(@"ATTRIBUTE_DATE3").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate4).HasColumnName(@"ATTRIBUTE_DATE4").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate5).HasColumnName(@"ATTRIBUTE_DATE5").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate6).HasColumnName(@"ATTRIBUTE_DATE6").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate7).HasColumnName(@"ATTRIBUTE_DATE7").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate8).HasColumnName(@"ATTRIBUTE_DATE8").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate9).HasColumnName(@"ATTRIBUTE_DATE9").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate10).HasColumnName(@"ATTRIBUTE_DATE10").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.NameAddressUpdateDate).HasColumnName(@"NAME_ADDRESS_UPDATE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Indicator).HasColumnName(@"INDICATOR").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.UserDefined1IconGid).HasColumnName(@"USER_DEFINED1_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined2IconGid).HasColumnName(@"USER_DEFINED2_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined3IconGid).HasColumnName(@"USER_DEFINED3_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined4IconGid).HasColumnName(@"USER_DEFINED4_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined5IconGid).HasColumnName(@"USER_DEFINED5_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.DomainName).HasColumnName(@"DOMAIN_NAME").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsertUser).HasColumnName(@"INSERT_USER").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.InsertDate).HasColumnName(@"INSERT_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UPDATE_USER").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UPDATE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsCompany).HasColumnName(@"IS_COMPANY").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SyncDate).HasColumnName(@"SYNC_DATE").HasColumnType("datetime").IsRequired(false);
        }
    }

    // OTM_CostDefinitions
    public class OtmCostDefinitionConfiguration : IEntityTypeConfiguration<OtmCostDefinition>
    {
        public void Configure(EntityTypeBuilder<OtmCostDefinition> builder)
        {
            builder.ToTable("OTM_CostDefinitions", "dbo");
            builder.HasKey(x => x.CostDefinitionId).HasName("PK_OTM_CostDefinitions").IsClustered();

            builder.Property(x => x.CostDefinitionId).HasColumnName(@"CostDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CostDefinitionDescription).HasColumnName(@"CostDefinitionDescription").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // OTM_Drivers
    public class OtmDriverConfiguration : IEntityTypeConfiguration<OtmDriver>
    {
        public void Configure(EntityTypeBuilder<OtmDriver> builder)
        {
            builder.ToTable("OTM_Drivers", "dbo");
            builder.HasKey(x => new { x.DriverGid, x.DriverXid, x.ResourceType, x.UseHosHistory, x.IsActive, x.DomainName, x.InsertUser, x.InsertDate });

            builder.Property(x => x.DriverGid).HasColumnName(@"DRIVER_GID").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101).ValueGeneratedNever();
            builder.Property(x => x.DriverXid).HasColumnName(@"DRIVER_XID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.DefHomeLocGid).HasColumnName(@"DEF_HOME_LOC_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.FirstName).HasColumnName(@"FIRST_NAME").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.LastName).HasColumnName(@"LAST_NAME").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.DateOfBirth).HasColumnName(@"DATE_OF_BIRTH").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.WorkRegionGid).HasColumnName(@"WORK_REGION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.DedAcctLocnProfileGid).HasColumnName(@"DED_ACCT_LOCN_PROFILE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.ContactGid).HasColumnName(@"CONTACT_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.RateOfferingGid).HasColumnName(@"RATE_OFFERING_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.PrefConstraintConfigGid).HasColumnName(@"PREF_CONSTRAINT_CONFIG_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.ResourceType).HasColumnName(@"RESOURCE_TYPE").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.UseHosHistory).HasColumnName(@"USE_HOS_HISTORY").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.AdjHireDate).HasColumnName(@"ADJ_HIRE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CorporationProfileGid).HasColumnName(@"CORPORATION_PROFILE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.DriverTypeGid).HasColumnName(@"DRIVER_TYPE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.IsActive).HasColumnName(@"IS_ACTIVE").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.SightingLocationGid).HasColumnName(@"SIGHTING_LOCATION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.SightingDate).HasColumnName(@"SIGHTING_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PrevSightingLocationGid).HasColumnName(@"PREV_SIGHTING_LOCATION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.PrevSightingDate).HasColumnName(@"PREV_SIGHTING_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UserDefined1IconGid).HasColumnName(@"USER_DEFINED1_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined2IconGid).HasColumnName(@"USER_DEFINED2_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined3IconGid).HasColumnName(@"USER_DEFINED3_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined4IconGid).HasColumnName(@"USER_DEFINED4_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UserDefined5IconGid).HasColumnName(@"USER_DEFINED5_ICON_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Indicator).HasColumnName(@"INDICATOR").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.DriverAssignmentSeqNum).HasColumnName(@"DRIVER_ASSIGNMENT_SEQ_NUM").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.RateDistanceGid).HasColumnName(@"RATE_DISTANCE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.EndDate).HasColumnName(@"END_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DomainName).HasColumnName(@"DOMAIN_NAME").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.InsertUser).HasColumnName(@"INSERT_USER").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128).ValueGeneratedNever();
            builder.Property(x => x.InsertDate).HasColumnName(@"INSERT_DATE").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UpdateUser).HasColumnName(@"UPDATE_USER").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UPDATE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Attribute1).HasColumnName(@"ATTRIBUTE1").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute2).HasColumnName(@"ATTRIBUTE2").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute3).HasColumnName(@"ATTRIBUTE3").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute4).HasColumnName(@"ATTRIBUTE4").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute5).HasColumnName(@"ATTRIBUTE5").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute6).HasColumnName(@"ATTRIBUTE6").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute7).HasColumnName(@"ATTRIBUTE7").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute8).HasColumnName(@"ATTRIBUTE8").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute9).HasColumnName(@"ATTRIBUTE9").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute10).HasColumnName(@"ATTRIBUTE10").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute11).HasColumnName(@"ATTRIBUTE11").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute12).HasColumnName(@"ATTRIBUTE12").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute13).HasColumnName(@"ATTRIBUTE13").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute14).HasColumnName(@"ATTRIBUTE14").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute15).HasColumnName(@"ATTRIBUTE15").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute16).HasColumnName(@"ATTRIBUTE16").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute17).HasColumnName(@"ATTRIBUTE17").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute18).HasColumnName(@"ATTRIBUTE18").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute19).HasColumnName(@"ATTRIBUTE19").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute20).HasColumnName(@"ATTRIBUTE20").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AttributeNumber1).HasColumnName(@"ATTRIBUTE_NUMBER1").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber2).HasColumnName(@"ATTRIBUTE_NUMBER2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber3).HasColumnName(@"ATTRIBUTE_NUMBER3").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber4).HasColumnName(@"ATTRIBUTE_NUMBER4").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber5).HasColumnName(@"ATTRIBUTE_NUMBER5").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber6).HasColumnName(@"ATTRIBUTE_NUMBER6").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber7).HasColumnName(@"ATTRIBUTE_NUMBER7").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber8).HasColumnName(@"ATTRIBUTE_NUMBER8").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber9).HasColumnName(@"ATTRIBUTE_NUMBER9").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber10).HasColumnName(@"ATTRIBUTE_NUMBER10").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeDate1).HasColumnName(@"ATTRIBUTE_DATE1").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate2).HasColumnName(@"ATTRIBUTE_DATE2").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate3).HasColumnName(@"ATTRIBUTE_DATE3").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate4).HasColumnName(@"ATTRIBUTE_DATE4").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate5).HasColumnName(@"ATTRIBUTE_DATE5").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate6).HasColumnName(@"ATTRIBUTE_DATE6").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate7).HasColumnName(@"ATTRIBUTE_DATE7").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate8).HasColumnName(@"ATTRIBUTE_DATE8").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate9).HasColumnName(@"ATTRIBUTE_DATE9").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate10).HasColumnName(@"ATTRIBUTE_DATE10").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.SyncDate).HasColumnName(@"SYNC_DATE").HasColumnType("datetime").IsRequired(false);
        }
    }

    // OTM_EVENTS
    public class OtmEventConfiguration : IEntityTypeConfiguration<OtmEvent>
    {
        public void Configure(EntityTypeBuilder<OtmEvent> builder)
        {
            builder.ToTable("OTM_EVENTS", "dbo");
            builder.HasKey(x => x.RowPointer);

            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RecordDate).HasColumnName(@"RecordDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RowPointer).HasColumnName(@"RowPointer").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.NoteExistsFlag).HasColumnName(@"NoteExistsFlag").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.InWorkflow).HasColumnName(@"InWorkflow").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.EventGid).HasColumnName(@"EVENT_GID").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.EventName).HasColumnName(@"EVENT_NAME").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101);
            builder.Property(x => x.ShipmentGid).HasColumnName(@"SHIPMENT_GID").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101);

            builder.HasIndex(x => x.RowPointer).HasName("IX_OTM_EVENTS_RowPointer").IsUnique();
        }
    }

    // OTM_Items
    public class OtmItemConfiguration : IEntityTypeConfiguration<OtmItem>
    {
        public void Configure(EntityTypeBuilder<OtmItem> builder)
        {
            builder.ToTable("OTM_Items", "dbo");
            builder.HasKey(x => new { x.ItemGid, x.ItemXid, x.IsDrawback, x.DomainName, x.InsertUser, x.InsertDate, x.IsTemplate });

            builder.Property(x => x.ItemGid).HasColumnName(@"ITEM_GID").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101).ValueGeneratedNever();
            builder.Property(x => x.ItemXid).HasColumnName(@"ITEM_XID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.ItemName).HasColumnName(@"ITEM_NAME").HasColumnType("nvarchar(240)").IsRequired(false).HasMaxLength(240);
            builder.Property(x => x.CommodityGid).HasColumnName(@"COMMODITY_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.NmfcArticleGid).HasColumnName(@"NMFC_ARTICLE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.NmfcClassGid).HasColumnName(@"NMFC_CLASS_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.StccGid).HasColumnName(@"STCC_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.HtsGid).HasColumnName(@"HTS_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.SitcGid).HasColumnName(@"SITC_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Description).HasColumnName(@"DESCRIPTION").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.UserDefinedCommodityGid).HasColumnName(@"USER_DEFINED_COMMODITY_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.UdcClassificationListGid).HasColumnName(@"UDC_CLASSIFICATION_LIST_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.BrandName).HasColumnName(@"BRAND_NAME").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.EffectiveDate).HasColumnName(@"EFFECTIVE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ExpirationDate).HasColumnName(@"EXPIRATION_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ManufacturedCountryCodeGid).HasColumnName(@"MANUFACTURED_COUNTRY_CODE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.IsDrawback).HasColumnName(@"IS_DRAWBACK").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.IataScrCodeGid).HasColumnName(@"IATA_SCR_CODE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.MarkedForPurge).HasColumnName(@"MARKED_FOR_PURGE").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.DomainName).HasColumnName(@"DOMAIN_NAME").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.InsertUser).HasColumnName(@"INSERT_USER").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128).ValueGeneratedNever();
            builder.Property(x => x.InsertDate).HasColumnName(@"INSERT_DATE").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UpdateUser).HasColumnName(@"UPDATE_USER").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UPDATE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UnitOfMeasure).HasColumnName(@"UNIT_OF_MEASURE").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.PricePerUnit).HasColumnName(@"PRICE_PER_UNIT").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PricePerUnitBase).HasColumnName(@"PRICE_PER_UNIT_BASE").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PricePerUnitCurrencyGid).HasColumnName(@"PRICE_PER_UNIT_CURRENCY_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.IsTemplate).HasColumnName(@"IS_TEMPLATE").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.Attribute1).HasColumnName(@"ATTRIBUTE1").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute2).HasColumnName(@"ATTRIBUTE2").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute3).HasColumnName(@"ATTRIBUTE3").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute4).HasColumnName(@"ATTRIBUTE4").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute5).HasColumnName(@"ATTRIBUTE5").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute6).HasColumnName(@"ATTRIBUTE6").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute7).HasColumnName(@"ATTRIBUTE7").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute8).HasColumnName(@"ATTRIBUTE8").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute9).HasColumnName(@"ATTRIBUTE9").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute10).HasColumnName(@"ATTRIBUTE10").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute11).HasColumnName(@"ATTRIBUTE11").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute12).HasColumnName(@"ATTRIBUTE12").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute13).HasColumnName(@"ATTRIBUTE13").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute14).HasColumnName(@"ATTRIBUTE14").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute15).HasColumnName(@"ATTRIBUTE15").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute16).HasColumnName(@"ATTRIBUTE16").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute17).HasColumnName(@"ATTRIBUTE17").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute18).HasColumnName(@"ATTRIBUTE18").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute19).HasColumnName(@"ATTRIBUTE19").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute20).HasColumnName(@"ATTRIBUTE20").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AttributeNumber1).HasColumnName(@"ATTRIBUTE_NUMBER1").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber2).HasColumnName(@"ATTRIBUTE_NUMBER2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber3).HasColumnName(@"ATTRIBUTE_NUMBER3").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber4).HasColumnName(@"ATTRIBUTE_NUMBER4").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber5).HasColumnName(@"ATTRIBUTE_NUMBER5").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber6).HasColumnName(@"ATTRIBUTE_NUMBER6").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber7).HasColumnName(@"ATTRIBUTE_NUMBER7").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber8).HasColumnName(@"ATTRIBUTE_NUMBER8").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber9).HasColumnName(@"ATTRIBUTE_NUMBER9").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber10).HasColumnName(@"ATTRIBUTE_NUMBER10").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeDate1).HasColumnName(@"ATTRIBUTE_DATE1").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate2).HasColumnName(@"ATTRIBUTE_DATE2").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate3).HasColumnName(@"ATTRIBUTE_DATE3").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate4).HasColumnName(@"ATTRIBUTE_DATE4").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate5).HasColumnName(@"ATTRIBUTE_DATE5").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate6).HasColumnName(@"ATTRIBUTE_DATE6").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate7).HasColumnName(@"ATTRIBUTE_DATE7").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate8).HasColumnName(@"ATTRIBUTE_DATE8").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate9).HasColumnName(@"ATTRIBUTE_DATE9").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate10).HasColumnName(@"ATTRIBUTE_DATE10").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Indicator).HasColumnName(@"INDICATOR").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Priority).HasColumnName(@"PRIORITY").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SyncDate).HasColumnName(@"SYNC_DATE").HasColumnType("datetime").IsRequired(false);
        }
    }

    // OTM_Locations
    public class OtmLocationConfiguration : IEntityTypeConfiguration<OtmLocation>
    {
        public void Configure(EntityTypeBuilder<OtmLocation> builder)
        {
            builder.ToTable("OTM_Locations", "dbo");
            builder.HasKey(x => x.LocationGid).HasName("PK_OTM_Locations").IsClustered();

            builder.Property(x => x.LocationGid).HasColumnName(@"LOCATION_GID").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101).ValueGeneratedNever();
            builder.Property(x => x.LocationXid).HasColumnName(@"LOCATION_XID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LocationName).HasColumnName(@"LOCATION_NAME").HasColumnType("nvarchar(360)").IsRequired(false).HasMaxLength(360);
            builder.Property(x => x.City).HasColumnName(@"CITY").HasColumnType("nvarchar(240)").IsRequired(false).HasMaxLength(240);
            builder.Property(x => x.Province).HasColumnName(@"PROVINCE").HasColumnType("nvarchar(240)").IsRequired(false).HasMaxLength(240);
            builder.Property(x => x.ProvinceCode).HasColumnName(@"PROVINCE_CODE").HasColumnType("nvarchar(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.PostalCode).HasColumnName(@"POSTAL_CODE").HasColumnType("nvarchar(240)").IsRequired(false).HasMaxLength(240);
            builder.Property(x => x.CountryCode3Gid).HasColumnName(@"COUNTRY_CODE3_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Zone1).HasColumnName(@"ZONE1").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Zone2).HasColumnName(@"ZONE2").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Zone3).HasColumnName(@"ZONE3").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Zone4).HasColumnName(@"ZONE4").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TimeZoneGid).HasColumnName(@"TIME_ZONE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Lat).HasColumnName(@"LAT").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Lon).HasColumnName(@"LON").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.SourcingGroupName).HasColumnName(@"SOURCING_GROUP_NAME").HasColumnType("nvarchar(120)").IsRequired(false).HasMaxLength(120);
            builder.Property(x => x.DeliveryGroupName).HasColumnName(@"DELIVERY_GROUP_NAME").HasColumnType("nvarchar(120)").IsRequired(false).HasMaxLength(120);
            builder.Property(x => x.RegionGid).HasColumnName(@"REGION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.ServprovProfileGid).HasColumnName(@"SERVPROV_PROFILE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.LocationGroupGid).HasColumnName(@"LOCATION_GROUP_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.IsTemporary).HasColumnName(@"IS_TEMPORARY").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.IsMakeApptBeforePlan).HasColumnName(@"IS_MAKE_APPT_BEFORE_PLAN").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.IsShipperKnown).HasColumnName(@"IS_SHIPPER_KNOWN").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.IsAddressValid).HasColumnName(@"IS_ADDRESS_VALID").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.RateClassificationGid).HasColumnName(@"RATE_CLASSIFICATION_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.EquipmentGroupProfileGid).HasColumnName(@"EQUIPMENT_GROUP_PROFILE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.SlotTimeInterval).HasColumnName(@"SLOT_TIME_INTERVAL").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.SlotTimeIntervalUomCode).HasColumnName(@"SLOT_TIME_INTERVAL_UOM_CODE").HasColumnType("nvarchar(64)").IsRequired(false).HasMaxLength(64);
            builder.Property(x => x.SlotTimeIntervalBase).HasColumnName(@"SLOT_TIME_INTERVAL_BASE").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.IsLtlSplitable).HasColumnName(@"IS_LTL_SPLITABLE").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.NumOfRowsInYard).HasColumnName(@"NUM_OF_ROWS_IN_YARD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.NumOfSlotsPerRowInYard).HasColumnName(@"NUM_OF_SLOTS_PER_ROW_IN_YARD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.UseAppointmentPriority).HasColumnName(@"USE_APPOINTMENT_PRIORITY").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.ScheduleLowPriorityAppoint).HasColumnName(@"SCHEDULE_LOW_PRIORITY_APPOINT").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.EnforceTimeWindowAppoint).HasColumnName(@"ENFORCE_TIME_WINDOW_APPOINT").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.ScheduleInfeasibleAppoint).HasColumnName(@"SCHEDULE_INFEASIBLE_APPOINT").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.CountyQualifier).HasColumnName(@"COUNTY_QUALIFIER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BbMaxCasesPerBatch).HasColumnName(@"BB_MAX_CASES_PER_BATCH").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.BbIsNewStore).HasColumnName(@"BB_IS_NEW_STORE").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.BbOrderSplitMethod).HasColumnName(@"BB_ORDER_SPLIT_METHOD").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ExcludeFromRouteExecution).HasColumnName(@"EXCLUDE_FROM_ROUTE_EXECUTION").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.AppointDisplay).HasColumnName(@"APPOINT_DISPLAY").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AppointDisplayBase).HasColumnName(@"APPOINT_DISPLAY_BASE").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AppointDisplayUomCode).HasColumnName(@"APPOINT_DISPLAY_UOM_CODE").HasColumnType("nvarchar(64)").IsRequired(false).HasMaxLength(64);
            builder.Property(x => x.AppointDisplayStartTime).HasColumnName(@"APPOINT_DISPLAY_START_TIME").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PickupRoutingSequenceGid).HasColumnName(@"PICKUP_ROUTING_SEQUENCE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.DropoffRoutingSequenceGid).HasColumnName(@"DROPOFF_ROUTING_SEQUENCE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.PostalSplcGid).HasColumnName(@"POSTAL_SPLC_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.RailSplcGid).HasColumnName(@"RAIL_SPLC_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.RailStationCodeGid).HasColumnName(@"RAIL_STATION_CODE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.ErpcGid).HasColumnName(@"ERPC_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.RailJunctionCodeGid).HasColumnName(@"RAIL_JUNCTION_CODE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.ServingServprovProfileGid).HasColumnName(@"SERVING_SERVPROV_PROFILE_GID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.YardRowLabels).HasColumnName(@"YARD_ROW_LABELS").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.YardSlotLabels).HasColumnName(@"YARD_SLOT_LABELS").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.IsTemplate).HasColumnName(@"IS_TEMPLATE").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.Description).HasColumnName(@"DESCRIPTION").HasColumnType("nvarchar(120)").IsRequired(false).HasMaxLength(120);
            builder.Property(x => x.StandingApptCutoffWindow).HasColumnName(@"STANDING_APPT_CUTOFF_WINDOW").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AllowDriverRest).HasColumnName(@"ALLOW_DRIVER_REST").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.ApptObjectType).HasColumnName(@"APPT_OBJECT_TYPE").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.ApptSearchDays).HasColumnName(@"APPT_SEARCH_DAYS").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ApptShowNumberOfOptions).HasColumnName(@"APPT_SHOW_NUMBER_OF_OPTIONS").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AppointmentActivityType).HasColumnName(@"APPOINTMENT_ACTIVITY_TYPE").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.IsFixedAddress).HasColumnName(@"IS_FIXED_ADDRESS").HasColumnType("nvarchar(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.PrimaryAddressLineSeq).HasColumnName(@"PRIMARY_ADDRESS_LINE_SEQ").HasColumnType("float").IsRequired();
            builder.Property(x => x.DomainName).HasColumnName(@"DOMAIN_NAME").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.InsertUser).HasColumnName(@"INSERT_USER").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.InsertDate).HasColumnName(@"INSERT_DATE").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdateUser).HasColumnName(@"UPDATE_USER").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UPDATE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Attribute1).HasColumnName(@"ATTRIBUTE1").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute2).HasColumnName(@"ATTRIBUTE2").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute3).HasColumnName(@"ATTRIBUTE3").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute4).HasColumnName(@"ATTRIBUTE4").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute5).HasColumnName(@"ATTRIBUTE5").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute6).HasColumnName(@"ATTRIBUTE6").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute7).HasColumnName(@"ATTRIBUTE7").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute8).HasColumnName(@"ATTRIBUTE8").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute9).HasColumnName(@"ATTRIBUTE9").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute10).HasColumnName(@"ATTRIBUTE10").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute11).HasColumnName(@"ATTRIBUTE11").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute12).HasColumnName(@"ATTRIBUTE12").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute13).HasColumnName(@"ATTRIBUTE13").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute14).HasColumnName(@"ATTRIBUTE14").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute15).HasColumnName(@"ATTRIBUTE15").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute16).HasColumnName(@"ATTRIBUTE16").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute17).HasColumnName(@"ATTRIBUTE17").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute18).HasColumnName(@"ATTRIBUTE18").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute19).HasColumnName(@"ATTRIBUTE19").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Attribute20).HasColumnName(@"ATTRIBUTE20").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AttributeNumber1).HasColumnName(@"ATTRIBUTE_NUMBER1").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber2).HasColumnName(@"ATTRIBUTE_NUMBER2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber3).HasColumnName(@"ATTRIBUTE_NUMBER3").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber4).HasColumnName(@"ATTRIBUTE_NUMBER4").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber5).HasColumnName(@"ATTRIBUTE_NUMBER5").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber6).HasColumnName(@"ATTRIBUTE_NUMBER6").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber7).HasColumnName(@"ATTRIBUTE_NUMBER7").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber8).HasColumnName(@"ATTRIBUTE_NUMBER8").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber9).HasColumnName(@"ATTRIBUTE_NUMBER9").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeNumber10).HasColumnName(@"ATTRIBUTE_NUMBER10").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.AttributeDate1).HasColumnName(@"ATTRIBUTE_DATE1").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate2).HasColumnName(@"ATTRIBUTE_DATE2").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate3).HasColumnName(@"ATTRIBUTE_DATE3").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate4).HasColumnName(@"ATTRIBUTE_DATE4").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate5).HasColumnName(@"ATTRIBUTE_DATE5").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate6).HasColumnName(@"ATTRIBUTE_DATE6").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate7).HasColumnName(@"ATTRIBUTE_DATE7").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate8).HasColumnName(@"ATTRIBUTE_DATE8").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate9).HasColumnName(@"ATTRIBUTE_DATE9").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AttributeDate10).HasColumnName(@"ATTRIBUTE_DATE10").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IS_ACTIVE").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.AddressUpdateDate).HasColumnName(@"ADDRESS_UPDATE_DATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LocationAddress).HasColumnName(@"LOCATION_ADDRESS").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Syndate).HasColumnName(@"SYNDATE").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Cdcd).HasColumnName(@"CDCD").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.GiaoLau).HasColumnName(@"GIAO_LAU").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CamGio).HasColumnName(@"CAM_GIO").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CamTai).HasColumnName(@"CAM_TAI").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.KiemDem).HasColumnName(@"KIEM_DEM").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.DiemKho).HasColumnName(@"DIEM_KHO").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
        }
    }

    // OTM_OrderBooking_S
    public class OtmOrderBookingSConfiguration : IEntityTypeConfiguration<OtmOrderBookingS>
    {
        public void Configure(EntityTypeBuilder<OtmOrderBookingS> builder)
        {
            builder.ToTable("OTM_OrderBooking_S", "dbo");
            builder.HasKey(x => new { x.CreatedBy, x.UpdatedBy, x.CreateDate, x.RecordDate, x.RowPointer, x.NoteExistsFlag, x.InWorkflow, x.OrderBookingId, x.LineNum, x.CustomerCode, x.ShipFromCode, x.ShipToCode, x.EarlyPickupDate, x.EarlyDeliveryDate, x.PackagedItemXid, x.CashOnDelivery, x.Mode });

            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RecordDate).HasColumnName(@"RecordDate").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RowPointer).HasColumnName(@"RowPointer").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.NoteExistsFlag).HasColumnName(@"NoteExistsFlag").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.InWorkflow).HasColumnName(@"InWorkflow").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderBookingId).HasColumnName(@"OrderBookingID").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101).ValueGeneratedNever();
            builder.Property(x => x.LineNum).HasColumnName(@"LineNum").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerCode).HasColumnName(@"CustomerCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.OrderReleaseType).HasColumnName(@"OrderReleaseType").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.ShipFromCode).HasColumnName(@"ShipFromCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.ShipFromName).HasColumnName(@"ShipFromName").HasColumnType("nvarchar(360)").IsRequired(false).HasMaxLength(360);
            builder.Property(x => x.ShipFromAddress).HasColumnName(@"ShipFromAddress").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.ShipToName).HasColumnName(@"ShipToName").HasColumnType("nvarchar(360)").IsRequired(false).HasMaxLength(360);
            builder.Property(x => x.ShipToAddress).HasColumnName(@"ShipToAddress").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.EarlyPickupDate).HasColumnName(@"EarlyPickupDate").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.LatePickupDate).HasColumnName(@"LatePickupDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EarlyDeliveryDate).HasColumnName(@"EarlyDeliveryDate").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.LateDeliveryDate).HasColumnName(@"LateDeliveryDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TruckType).HasColumnName(@"TruckType").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.PackagedItemXid).HasColumnName(@"Packaged_Item_XID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.ItemXid).HasColumnName(@"ItemXid").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.BookingQuantity).HasColumnName(@"BookingQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.BookingWeight).HasColumnName(@"BookingWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.BookingVolume).HasColumnName(@"BookingVolume").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CashOnDelivery).HasColumnName(@"CashOnDelivery").HasColumnType("nvarchar(1)").IsRequired().HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.CodAmount).HasColumnName(@"CODAmount").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.ShippingInstruction).HasColumnName(@"ShippingInstruction").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServiceProvider).HasColumnName(@"ServiceProvider").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Mode).HasColumnName(@"Mode").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.RouteNo).HasColumnName(@"RouteNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LocAttribute1).HasColumnName(@"Loc_Attribute1").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.ReferenceTransmissionNo).HasColumnName(@"ReferenceTransmissionNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ErrorMsg).HasColumnName(@"ErrorMsg").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.InsertUser).HasColumnName(@"Insert_User").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.InsertDate).HasColumnName(@"Insert_Date").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"Update_User").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.UpdateDate).HasColumnName(@"Update_Date").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderReleaseGid).HasColumnName(@"OrderRelease_GID").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.OrderReleaseXid).HasColumnName(@"OrderRelease_XID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.StatusShipment).HasColumnName(@"Status_Shipment").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ShipmentGid).HasColumnName(@"Shipment_GID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ShipmentXid).HasColumnName(@"Shipment_XID").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.BulkPlanGid).HasColumnName(@"BulkPlan_GID").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.BulkPlanXid).HasColumnName(@"BulkPlan_XID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ItineraryGid).HasColumnName(@"Itinerary_GID").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.ItineraryXid).HasColumnName(@"Itinerary_XID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.BuyShipmentId).HasColumnName(@"BuyShipmentID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.CreateShipmentDate).HasColumnName(@"Create_Shipment_Date").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ShipmentTranmissionNo).HasColumnName(@"ShipmentTranmissionNo").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ShipmentErrorMsg).HasColumnName(@"Shipment_ErrorMsg").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.CheckBox).HasColumnName(@"CheckBox").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TempId).HasColumnName(@"TempID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DriverGid).HasColumnName(@"Driver_GID").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.PowerUnitGid).HasColumnName(@"Power_Unit_GID").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.DriverGid2).HasColumnName(@"Driver_GID_2").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.AtmShipmentId).HasColumnName(@"ATM_SHIPMENT_ID").HasColumnType("nvarchar(101)").IsRequired(false).HasMaxLength(101);
            builder.Property(x => x.Parentlinenum).HasColumnName(@"parentlinenum").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderReleaseLineGid).HasColumnName(@"Order_Release_Line_GID").HasColumnType("varchar(101)").IsRequired(false).IsUnicode(false).HasMaxLength(101);
            builder.Property(x => x.OrderReleaseLineXid).HasColumnName(@"Order_Release_Line_XID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // OutsourcedJobs
    public class OutsourcedJobConfiguration : IEntityTypeConfiguration<OutsourcedJob>
    {
        public void Configure(EntityTypeBuilder<OutsourcedJob> builder)
        {
            builder.ToTable("OutsourcedJobs", "dbo");
            builder.HasKey(x => x.OutsourcedJobId).HasName("PK_OutsourcedJobs").IsClustered();

            builder.Property(x => x.OutsourcedJobId).HasColumnName(@"OutsourcedJobID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutsourcedJobDate).HasColumnName(@"OutsourcedJobDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.OtherServiceDetailId).HasColumnName(@"OtherServiceDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.FromTime).HasColumnName(@"FromTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ToTime).HasColumnName(@"ToTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Accepted).HasColumnName(@"Accepted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AcceptedBy).HasColumnName(@"AcceptedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Rejected).HasColumnName(@"Rejected").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RejectedBy).HasColumnName(@"RejectedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OutsourcedJobDefinitionId).HasColumnName(@"OutsourcedJobDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OutsourcedJobLocalId).HasColumnName(@"OutsourcedJobLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OutsourcedJobNumber).HasColumnName(@"OutsourcedJobNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.OutsourcedJobDefinition).WithMany(b => b.OutsourcedJobs).HasForeignKey(c => c.OutsourcedJobDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OutsourcedJobs_OutsourcedJobDefinitions");
        }
    }

    // OutsourcedJobDefinitions
    public class OutsourcedJobDefinitionConfiguration : IEntityTypeConfiguration<OutsourcedJobDefinition>
    {
        public void Configure(EntityTypeBuilder<OutsourcedJobDefinition> builder)
        {
            builder.ToTable("OutsourcedJobDefinitions", "dbo");
            builder.HasKey(x => x.OutsourcedJobDefinitionId).HasName("PK_OutsourcedJobDefinitions").IsClustered();

            builder.Property(x => x.OutsourcedJobDefinitionId).HasColumnName(@"OutsourcedJobDefinitionID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OutsourcedJobDefinitionNumber).HasColumnName(@"OutsourcedJobDefinitionNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Discontinued).HasColumnName(@"Discontinued").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ServiceDefinitionId).HasColumnName(@"ServiceDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // OutsourcedJobDetails
    public class OutsourcedJobDetailConfiguration : IEntityTypeConfiguration<OutsourcedJobDetail>
    {
        public void Configure(EntityTypeBuilder<OutsourcedJobDetail> builder)
        {
            builder.ToTable("OutsourcedJobDetails", "dbo");
            builder.HasKey(x => x.OutsourcedJobDetailId).HasName("PK_OutsourcedJobDetails");

            builder.Property(x => x.OutsourcedJobDetailId).HasColumnName(@"OutsourcedJobDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OutsourcedJobId).HasColumnName(@"OutsourcedJobID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,5)").IsRequired();
            builder.Property(x => x.OutsourcedJobDetailRemark).HasColumnName(@"OutsourcedJobDetailRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OutsourcedJob).WithMany(b => b.OutsourcedJobDetails).HasForeignKey(c => c.OutsourcedJobId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_OutsourcedJobDetails_OutsourcedJobs");

            builder.HasIndex(x => x.OutsourcedJobId).HasName("IX_OutsourcedJobDetails");
        }
    }

    // PackageDefinition
    public class PackageDefinitionConfiguration : IEntityTypeConfiguration<PackageDefinition>
    {
        public void Configure(EntityTypeBuilder<PackageDefinition> builder)
        {
            builder.ToTable("PackageDefinition", "dbo");
            builder.HasKey(x => x.Packages).HasName("PK_PackageDefinition").IsClustered();

            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.IsPackage).HasColumnName(@"IsPackage").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.MaxQty).HasColumnName(@"MaxQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Hight).HasColumnName(@"Hight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Width).HasColumnName(@"Width").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Lenght).HasColumnName(@"Lenght").HasColumnType("float").IsRequired(false);
        }
    }

    // Pallets
    public class PalletConfiguration : IEntityTypeConfiguration<Pallet>
    {
        public void Configure(EntityTypeBuilder<Pallet> builder)
        {
            builder.ToTable("Pallets", "dbo");
            builder.HasKey(x => x.PalletId).HasName("PK_Pallets");

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CanMove).HasColumnName(@"CanMove").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.CanNotAdd).HasColumnName(@"CanNotAdd").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReceivingScannedBy).HasColumnName(@"ReceivingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReceivingScannedTime).HasColumnName(@"ReceivingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PutAwayScannedBy).HasColumnName(@"PutAwayScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PutAwayScannedTime).HasColumnName(@"PutAwayScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.LotSerNbr).HasColumnName(@"LotSerNbr").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ActualQuantity).HasColumnName(@"ActualQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivedBy).HasColumnName(@"ReceivedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Reference).HasColumnName(@"Reference").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);

            // Foreign keys
            builder.HasOne(a => a.Location).WithMany(b => b.Pallets).HasForeignKey(c => c.LocationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Pallets_Locations");
            builder.HasOne(a => a.ReceivingOrderDetail).WithMany(b => b.Pallets).HasForeignKey(c => c.ReceivingOrderDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Pallets_ReceivingOrderDetails");

            builder.HasIndex(x => new { x.LocationId, x.ReceivingOrderDetailId, x.PalletNumber }).HasName("IX_Pallets");
            builder.HasIndex(x => x.PalletNumber).HasName("IX_Pallets_1");
        }
    }

    // PalletCartons
    public class PalletCartonConfiguration : IEntityTypeConfiguration<PalletCarton>
    {
        public void Configure(EntityTypeBuilder<PalletCarton> builder)
        {
            builder.ToTable("PalletCartons", "dbo");
            builder.HasKey(x => x.PalletCartonId).HasName("PK_PalletCartons").IsClustered();

            builder.Property(x => x.PalletCartonId).HasColumnName(@"PalletCartonID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletCartonNumber).HasColumnName(@"PalletCartonNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CartonWeight).HasColumnName(@"CartonWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletRemark).HasColumnName(@"PalletRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.PalletGrossWeight).HasColumnName(@"PalletGrossWeight").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.CartonUnits).HasColumnName(@"CartonUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CartonWeightPay).HasColumnName(@"CartonWeightPay").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProDate).HasColumnName(@"ProDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.IsRecordNew).HasColumnName(@"IsRecordNew").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);

            // Foreign keys
            builder.HasOne(a => a.Pallet).WithMany(b => b.PalletCartons).HasForeignKey(c => c.PalletId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PalletCartons_Pallets");
        }
    }

    // PalletHoldings
    public class PalletHoldingConfiguration : IEntityTypeConfiguration<PalletHolding>
    {
        public void Configure(EntityTypeBuilder<PalletHolding> builder)
        {
            builder.ToTable("PalletHoldings", "dbo");
            builder.HasKey(x => x.PalletHoldingId).HasName("PK_PalletHoldings").IsClustered();

            builder.Property(x => x.PalletHoldingId).HasColumnName(@"PalletHoldingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletHoldingBy).HasColumnName(@"PalletHoldingBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.PalletHoldingDescription).HasColumnName(@"PalletHoldingDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PalletHoldingTime).HasColumnName(@"PalletHoldingTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PalletRelated
    public class PalletRelatedConfiguration : IEntityTypeConfiguration<PalletRelated>
    {
        public void Configure(EntityTypeBuilder<PalletRelated> builder)
        {
            builder.ToTable("PalletRelated", "dbo");
            builder.HasKey(x => new { x.PalletRelatedId, x.PalletId });

            builder.Property(x => x.PalletRelatedId).HasColumnName(@"PalletRelatedID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DiaptchingOrderDetailId).HasColumnName(@"DiaptchingOrderDetailID").HasColumnType("int").IsRequired(false);
        }
    }

    // PalletStatus
    public class PalletStatuConfiguration : IEntityTypeConfiguration<PalletStatu>
    {
        public void Configure(EntityTypeBuilder<PalletStatu> builder)
        {
            builder.ToTable("PalletStatus", "dbo");
            builder.HasKey(x => x.PalletStatus).HasName("PK_PalletStatus").IsClustered();

            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletStatusDescription).HasColumnName(@"PalletStatusDescription").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.PalletStatusDescriptionVietnam).HasColumnName(@"PalletStatusDescriptionVietnam").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.IsHold).HasColumnName(@"IsHold").HasColumnType("bit").IsRequired(false);
        }
    }

    // Parts
    public class PartConfiguration : IEntityTypeConfiguration<Part>
    {
        public void Configure(EntityTypeBuilder<Part> builder)
        {
            builder.ToTable("Parts", "dbo");
            builder.HasKey(x => x.PartId).HasName("PK__Parts__4589517F").IsClustered();

            builder.Property(x => x.PartId).HasColumnName(@"PartID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PartName).HasColumnName(@"PartName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.PartOriginal).HasColumnName(@"PartOriginal").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PartNumber).HasColumnName(@"PartNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PartGroupId).HasColumnName(@"PartGroupID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PartCategoryId).HasColumnName(@"PartCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EquipmentGroupId).HasColumnName(@"EquipmentGroupID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PartRemark).HasColumnName(@"PartRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyModelAndSpecification).HasColumnName(@"PropertyModelAndSpecification").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UnitPriceVnd).HasColumnName(@"UnitPriceVND").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UnitPriceUsd).HasColumnName(@"UnitPriceUSD").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PartEntryTime).HasColumnName(@"PartEntryTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PartOwner).HasColumnName(@"PartOwner").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.ItEquipmentSpecification).HasColumnName(@"ITEquipmentSpecification").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ItEquipmentBuyingDate).HasColumnName(@"ITEquipmentBuyingDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PartOriginalType).HasColumnName(@"PartOriginalType").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.PropertyOldId).HasColumnName(@"PropertyOldID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Discontinue).HasColumnName(@"Discontinue").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.PropertyCategoryId).HasColumnName(@"PropertyCategoryID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.PartCategory).WithMany(b => b.Parts).HasForeignKey(c => c.PartCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Parts_PartCategories");
            builder.HasOne(a => a.PartGroup).WithMany(b => b.Parts).HasForeignKey(c => c.PartGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Parts_PartGroups1");
        }
    }

    // PartCategories
    public class PartCategoryConfiguration : IEntityTypeConfiguration<PartCategory>
    {
        public void Configure(EntityTypeBuilder<PartCategory> builder)
        {
            builder.ToTable("PartCategories", "dbo");
            builder.HasKey(x => x.PartCategoryId).HasName("PK__aaa__3429BB53").IsClustered();

            builder.Property(x => x.PartCategoryId).HasColumnName(@"PartCategoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PartCategoryDescription).HasColumnName(@"PartCategoryDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // PartGroups
    public class PartGroupConfiguration : IEntityTypeConfiguration<PartGroup>
    {
        public void Configure(EntityTypeBuilder<PartGroup> builder)
        {
            builder.ToTable("PartGroups", "dbo");
            builder.HasKey(x => x.PartGroupId).HasName("PK__PartGrou__94232321230B8AD1").IsClustered();

            builder.Property(x => x.PartGroupId).HasColumnName(@"PartGroupID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PartGroupDescription).HasColumnName(@"PartGroupDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
        }
    }

    // PayRollDetails
    public class PayRollDetailConfiguration : IEntityTypeConfiguration<PayRollDetail>
    {
        public void Configure(EntityTypeBuilder<PayRollDetail> builder)
        {
            builder.ToTable("PayRollDetails", "dbo");
            builder.HasKey(x => x.PayrollDetailId).HasName("PK_PayRollDetails").IsClustered();

            builder.Property(x => x.PayrollDetailId).HasColumnName(@"PayrollDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PayrollDate).HasColumnName(@"PayrollDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired();
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired();
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TimeWork).HasColumnName(@"TimeWork").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SunHol).HasColumnName(@"SunHol").HasColumnType("bit").IsRequired();
            builder.Property(x => x.User).HasColumnName(@"User").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.GuardRemark).HasColumnName(@"GuardRemark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SystemLeave).HasColumnName(@"SystemLeave").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Lunch).HasColumnName(@"Lunch").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Noodles).HasColumnName(@"Noodles").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Milk).HasColumnName(@"Milk").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.LunchCompensate).HasColumnName(@"LunchCompensate").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BenefitUser).HasColumnName(@"BenefitUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.PayrollRemark).HasColumnName(@"PayrollRemark").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.NightShift).HasColumnName(@"NightShift").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HolidayDay).HasColumnName(@"HolidayDay").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LunchPlace).HasColumnName(@"LunchPlace").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Otnn).HasColumnName(@"OTNN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Otsn).HasColumnName(@"OTSN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Othn).HasColumnName(@"OTHN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Otnn43).HasColumnName(@"OTNN+").HasColumnType("real").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();

            builder.HasIndex(x => x.EmployeeId).HasName("IX_PayRollDetails");
            builder.HasIndex(x => x.PayrollDate).HasName("IX_PayRollDetails_1");
        }
    }

    // PayRollEmployeeInvalid
    public class PayRollEmployeeInvalidConfiguration : IEntityTypeConfiguration<PayRollEmployeeInvalid>
    {
        public void Configure(EntityTypeBuilder<PayRollEmployeeInvalid> builder)
        {
            builder.ToTable("PayRollEmployeeInvalid", "dbo");
            builder.HasKey(x => x.PayRollEmployeeInvalidId).HasName("PK_EmployeeInvalid").IsClustered();

            builder.Property(x => x.PayRollEmployeeInvalidId).HasColumnName(@"PayRollEmployeeInvalidID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PayrollDate).HasColumnName(@"PayrollDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeWork).HasColumnName(@"TimeWork").HasColumnType("char(100)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);

            builder.HasIndex(x => x.EmployeeId).HasName("IX_PayRollEmployeeInvalid");
            builder.HasIndex(x => x.PayrollDate).HasName("IX_PayRollEmployeeInvalid_1");
        }
    }

    // PayRollGradedPayments
    public class PayRollGradedPaymentConfiguration : IEntityTypeConfiguration<PayRollGradedPayment>
    {
        public void Configure(EntityTypeBuilder<PayRollGradedPayment> builder)
        {
            builder.ToTable("PayRollGradedPayments", "dbo");
            builder.HasKey(x => x.Grade).HasName("PK_GradedPayments").IsClustered();

            builder.Property(x => x.Grade).HasColumnName(@"Grade").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2).ValueGeneratedNever();
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("float").IsRequired(false);
        }
    }

    // PayrollMonth
    public class PayrollMonthConfiguration : IEntityTypeConfiguration<PayrollMonth>
    {
        public void Configure(EntityTypeBuilder<PayrollMonth> builder)
        {
            builder.ToTable("PayrollMonth", "dbo");
            builder.HasKey(x => x.PayRollMonthId).HasName("PK_PayrollMonth").IsClustered();

            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PayRollMonth).HasColumnName(@"PayRollMonth").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.WorkingDays).HasColumnName(@"WorkingDays").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SundayHoliday).HasColumnName(@"SundayHoliday").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PayableHoliday).HasColumnName(@"PayableHoliday").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PayrollMonthConfirm).HasColumnName(@"PayrollMonthConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PayrollMonthLock).HasColumnName(@"PayrollMonthLock").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AcceptBy).HasColumnName(@"AcceptBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.AccountingUser).HasColumnName(@"AccountingUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.AccountingTime).HasColumnName(@"AccountingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.AccountingConfirm).HasColumnName(@"AccountingConfirm").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.PayRollMonth).HasName("IX_PayrollMonth").IsUnique();
            builder.HasIndex(x => x.FromDate).HasName("IX_PayrollMonth_1");
            builder.HasIndex(x => x.ToDate).HasName("IX_PayrollMonth_2");
        }
    }

    // PayrollMonthlyDetails
    public class PayrollMonthlyDetailConfiguration : IEntityTypeConfiguration<PayrollMonthlyDetail>
    {
        public void Configure(EntityTypeBuilder<PayrollMonthlyDetail> builder)
        {
            builder.ToTable("PayrollMonthlyDetails", "dbo");
            builder.HasKey(x => x.PayRollMonthlyId).HasName("PK__PayrollMonthlyDe__3B4D50DC").IsClustered();

            builder.Property(x => x.PayRollMonthlyId).HasColumnName(@"PayRollMonthlyID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.WorkingDays).HasColumnName(@"WorkingDays").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WorkingDayNightShift).HasColumnName(@"WorkingDayNightShift").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.User).HasColumnName(@"User").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Abc).HasColumnName(@"ABC").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Performance).HasColumnName(@"Performance").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformanceAverage).HasColumnName(@"PerformanceAverage").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformancePercent).HasColumnName(@"PerformancePercent").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PerformanceStatus).HasColumnName(@"PerformanceStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PayRollMonthlyRemark).HasColumnName(@"PayRollMonthlyRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Advance).HasColumnName(@"Advance").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SupervisorRemark).HasColumnName(@"SupervisorRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SupervisorUser).HasColumnName(@"SupervisorUser").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.PersonnelCheck).HasColumnName(@"PersonnelCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PersonnelRemark).HasColumnName(@"PersonnelRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PersonnelCheckTime).HasColumnName(@"PersonnelCheckTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SafetyCheck).HasColumnName(@"SafetyCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SafetyRemark).HasColumnName(@"SafetyRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SafetyCheckTime).HasColumnName(@"SafetyCheckTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ManagerCheck).HasColumnName(@"ManagerCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ManagerRemark).HasColumnName(@"ManagerRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ManagerCheckUser).HasColumnName(@"ManagerCheckUser").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.AbCtemp).HasColumnName(@"ABCtemp").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.IsBirthday).HasColumnName(@"IsBirthday").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EvaluationSafety).HasColumnName(@"EvaluationSafety").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationPerformance).HasColumnName(@"EvaluationPerformance").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationTime).HasColumnName(@"EvaluationTime").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationAttitude).HasColumnName(@"EvaluationAttitude").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.WorkingDayHoliday).HasColumnName(@"WorkingDayHoliday").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Oth43).HasColumnName(@"OTH+").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.AllowUpdated).HasColumnName(@"AllowUpdated").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Otnn).HasColumnName(@"OTNN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otsn).HasColumnName(@"OTSN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Othn).HasColumnName(@"OTHN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otnn43).HasColumnName(@"OTNN+").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Abc1).HasColumnName(@"ABC1").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationCreative).HasColumnName(@"EvaluationCreative").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.PersonnelUser).HasColumnName(@"PersonnelUser").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();

            builder.HasIndex(x => x.PayRollMonthId).HasName("IX_PayrollMonthlyDetails");
            builder.HasIndex(x => x.PositionId).HasName("IX_PayrollMonthlyDetails_2");
            builder.HasIndex(x => x.DepartmentId).HasName("IX_PayrollMonthlyDetails_3");
            builder.HasIndex(x => x.Abc).HasName("IX_PayrollMonthlyDetails_4");
        }
    }

    // PayRollYear
    public class PayRollYearConfiguration : IEntityTypeConfiguration<PayRollYear>
    {
        public void Configure(EntityTypeBuilder<PayRollYear> builder)
        {
            builder.ToTable("PayRollYear", "dbo");
            builder.HasKey(x => x.PayRollYearId).HasName("PK__PayRollYear__149D980F").IsClustered();

            builder.Property(x => x.PayRollYearId).HasColumnName(@"PayRollYearID").HasColumnType("smallint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired();
        }
    }

    // PickingLists
    public class PickingListConfiguration : IEntityTypeConfiguration<PickingList>
    {
        public void Configure(EntityTypeBuilder<PickingList> builder)
        {
            builder.ToTable("PickingLists", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_PickingLists1").IsClustered();

            builder.Property(x => x.LotNo).HasColumnName(@"Lot_no").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckNo).HasColumnName(@"Truck_no").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.PickDate).HasColumnName(@"Pick_date").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ExpiryDate).HasColumnName(@"ExpiryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProductRemark).HasColumnName(@"ProductRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Units).HasColumnName(@"Units").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ClientCode).HasColumnName(@"ClientCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerRefDetailId).HasColumnName(@"CustomerRef_DetailID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustPoNumber).HasColumnName(@"CUST_PO_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Hold).HasColumnName(@"Hold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PoWeight).HasColumnName(@"PO_WEIGHT").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Tolerance).HasColumnName(@"Tolerance").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProDate).HasColumnName(@"Pro_date").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ExpDate).HasColumnName(@"Exp_date").HasColumnType("datetime").IsRequired(false);
        }
    }

    // PickingListSorting
    public class PickingListSortingConfiguration : IEntityTypeConfiguration<PickingListSorting>
    {
        public void Configure(EntityTypeBuilder<PickingListSorting> builder)
        {
            builder.ToTable("PickingListSorting", "dbo");
            builder.HasKey(x => x.SortingId).HasName("PK__PickingL__924B9A60B14E761C").IsClustered();

            builder.Property(x => x.ShipTo).HasColumnName(@"ShipTo").HasColumnType("int").IsRequired();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.OrderQty).HasColumnName(@"OrderQty").HasColumnType("int").IsRequired();
            builder.Property(x => x.ActQty).HasColumnName(@"ActQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MoveQty).HasColumnName(@"MoveQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RemainQty).HasColumnName(@"RemainQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ReceivingTotal).HasColumnName(@"ReceivingTotal").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.SortingId).HasColumnName(@"SortingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.XdocPickingListId).HasColumnName(@"XdocPickingListID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PickingLists_Scan
    public class PickingListsScanConfiguration : IEntityTypeConfiguration<PickingListsScan>
    {
        public void Configure(EntityTypeBuilder<PickingListsScan> builder)
        {
            builder.ToTable("PickingLists_Scan", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_PickingLists_Scan").IsClustered();

            builder.Property(x => x.LotNo).HasColumnName(@"Lot_no").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckNo).HasColumnName(@"Truck_no").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.PickDate).HasColumnName(@"Pick_date").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ExpiryDate).HasColumnName(@"ExpiryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProductRemark).HasColumnName(@"ProductRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Units).HasColumnName(@"Units").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ClientCode).HasColumnName(@"ClientCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerRefDetailId).HasColumnName(@"CustomerRef_DetailID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustPoNumber).HasColumnName(@"CUST_PO_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Hold).HasColumnName(@"Hold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PoWeight).HasColumnName(@"PO_WEIGHT").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Tolerance).HasColumnName(@"Tolerance").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BoxId).HasColumnName(@"BoxID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
        }
    }

    // PickingLists_Scan_AllData
    public class PickingListsScanAllDataConfiguration : IEntityTypeConfiguration<PickingListsScanAllData>
    {
        public void Configure(EntityTypeBuilder<PickingListsScanAllData> builder)
        {
            builder.ToTable("PickingLists_Scan_AllData", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_PickingLists_Scan_AllData").IsClustered();

            builder.Property(x => x.LotNo).HasColumnName(@"Lot_no").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckNo).HasColumnName(@"Truck_no").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.PickDate).HasColumnName(@"Pick_date").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ExpiryDate).HasColumnName(@"ExpiryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProductRemark).HasColumnName(@"ProductRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Units).HasColumnName(@"Units").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ClientCode).HasColumnName(@"ClientCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerRefDetailId).HasColumnName(@"CustomerRef_DetailID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustPoNumber).HasColumnName(@"CUST_PO_NUMBER").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Hold).HasColumnName(@"Hold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PoWeight).HasColumnName(@"PO_WEIGHT").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Tolerance).HasColumnName(@"Tolerance").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // Positions
    public class PositionConfiguration : IEntityTypeConfiguration<Position>
    {
        public void Configure(EntityTypeBuilder<Position> builder)
        {
            builder.ToTable("Positions", "dbo");
            builder.HasKey(x => x.PositionId).HasName("PK_Positions").IsClustered();

            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PositionDescription).HasColumnName(@"PositionDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionVietnam).HasColumnName(@"PositionVietnam").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ManagementLevel).HasColumnName(@"ManagementLevel").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsProductivity).HasColumnName(@"isProductivity").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerAllocationMethod).HasColumnName(@"CustomerAllocationMethod").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReportToPositionId).HasColumnName(@"ReportToPositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => x.ManagementLevel).HasName("IX_Positions");
        }
    }

    // PositionGrades
    public class PositionGradeConfiguration : IEntityTypeConfiguration<PositionGrade>
    {
        public void Configure(EntityTypeBuilder<PositionGrade> builder)
        {
            builder.ToTable("PositionGrades", "dbo");
            builder.HasKey(x => x.PositionGradeId).HasName("PK_PositionGrades").IsClustered();

            builder.Property(x => x.PositionGradeId).HasColumnName(@"PositionGradeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PositionGradeName).HasColumnName(@"PositionGradeName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PositionGradeDescription).HasColumnName(@"PositionGradeDescription").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.PositionGradeRequirements).HasColumnName(@"PositionGradeRequirements").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired();
        }
    }

    // PositionTrainingRequirements
    public class PositionTrainingRequirementConfiguration : IEntityTypeConfiguration<PositionTrainingRequirement>
    {
        public void Configure(EntityTypeBuilder<PositionTrainingRequirement> builder)
        {
            builder.ToTable("PositionTrainingRequirements", "dbo");
            builder.HasKey(x => x.PositionTrainingRequirementId).HasName("PK_PositionTrainingRequirements1");

            builder.Property(x => x.PositionTrainingRequirementId).HasColumnName(@"PositionTrainingRequirementID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TrainingDefinitionId).HasColumnName(@"TrainingDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Frequence).HasColumnName(@"Frequence").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.DefaultTrainingLocation).HasColumnName(@"DefaultTrainingLocation").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);

            builder.HasIndex(x => x.PositionId).HasName("IX_PositionTrainingRequirements");
            builder.HasIndex(x => x.TrainingDefinitionId).HasName("IX_PositionTrainingRequirements_1");
        }
    }

    // ProblemCategories
    public class ProblemCategoryConfiguration : IEntityTypeConfiguration<ProblemCategory>
    {
        public void Configure(EntityTypeBuilder<ProblemCategory> builder)
        {
            builder.ToTable("ProblemCategories", "dbo");
            builder.HasKey(x => x.ProblemCategoryId).HasName("PK_ProblemDefinitions").IsClustered();

            builder.Property(x => x.ProblemCategoryId).HasColumnName(@"ProblemCategoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProblemCategoryDescription).HasColumnName(@"ProblemCategoryDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Products
    public class ProductConfiguration : IEntityTypeConfiguration<Product>
    {
        public void Configure(EntityTypeBuilder<Product> builder)
        {
            builder.ToTable("Products", "dbo");
            builder.HasKey(x => x.ProductId).HasName("PK_Products");

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.Discontinue).HasColumnName(@"Discontinue").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TemperatureRequire).HasColumnName(@"TemperatureRequire").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PackagesPerPallet2).HasColumnName(@"PackagesPerPallet2").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(125)").IsRequired(false).HasMaxLength(125);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.PickingLocation).HasColumnName(@"PickingLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PickingMethod).HasColumnName(@"PickingMethod").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ProductCategory).HasColumnName(@"ProductCategory").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WarehouseNo).HasColumnName(@"WAREHOUSE_NO").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.GrossWeightPerPackage).HasColumnName(@"GrossWeightPerPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNameVn).HasColumnName(@"ProductNameVN").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.WarningDaysBeforeExpiry).HasColumnName(@"WarningDaysBeforeExpiry").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.IsWeightingRequire).HasColumnName(@"IsWeightingRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsAllowLocationChange).HasColumnName(@"IsAllowLocationChange").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Origin).HasColumnName(@"Origin").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.SafetyStock).HasColumnName(@"SafetyStock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Pcs).HasColumnName(@"Pcs").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.HomeRoom1).HasColumnName(@"HomeRoom1").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.HomeRoom2).HasColumnName(@"HomeRoom2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.HomeLocation1).HasColumnName(@"HomeLocation1").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.HomeLocation2).HasColumnName(@"HomeLocation2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductMainId).HasColumnName(@"ProductMainID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Packages2).HasColumnName(@"Packages2").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.Shelfdate).HasColumnName(@"Shelfdate").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.InvtId).HasColumnName(@"InvtID").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.MainProductId).HasColumnName(@"MainProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerProductGroupId).HasColumnName(@"CustomerProductGroupID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.IsExpDateRequire).HasColumnName(@"IsExpDateRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsProDateRequire).HasColumnName(@"IsProDateRequire").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => x.CustomerId).HasName("IX_Products");
            builder.HasIndex(x => x.ProductNumber).HasName("IX_Products_1");
        }
    }

    // ProductCategories
    public class ProductCategoryConfiguration : IEntityTypeConfiguration<ProductCategory>
    {
        public void Configure(EntityTypeBuilder<ProductCategory> builder)
        {
            builder.ToTable("ProductCategories", "dbo");
            builder.HasKey(x => x.ProductCategoryId).HasName("PK_ProductCategories").IsClustered();

            builder.Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ProductCategoryDescription).HasColumnName(@"ProductCategoryDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductCategoryGroupId).HasColumnName(@"ProductCategoryGroupID").HasColumnType("tinyint").IsRequired(false);
        }
    }

    // ProductCategoryGroups
    public class ProductCategoryGroupConfiguration : IEntityTypeConfiguration<ProductCategoryGroup>
    {
        public void Configure(EntityTypeBuilder<ProductCategoryGroup> builder)
        {
            builder.ToTable("ProductCategoryGroups", "dbo");
            builder.HasKey(x => x.ProductCategoryGroupId).HasName("PK_ProductCategoryGroups").IsClustered();

            builder.Property(x => x.ProductCategoryGroupId).HasColumnName(@"ProductCategoryGroupID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ProductCategoryGroupName).HasColumnName(@"ProductCategoryGroupName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // ProductChanging
    public class ProductChangingConfiguration : IEntityTypeConfiguration<ProductChanging>
    {
        public void Configure(EntityTypeBuilder<ProductChanging> builder)
        {
            builder.ToTable("ProductChanging", "dbo");
            builder.HasKey(x => x.ProductChangingId).HasName("PK_ProductChanging").IsClustered();

            builder.Property(x => x.ProductChangingId).HasColumnName(@"ProductChangingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ChangeDate).HasColumnName(@"ChangeDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ChangeBy).HasColumnName(@"ChangeBy").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.ChangeDescription).HasColumnName(@"ChangeDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ReferenceId).HasColumnName(@"ReferenceID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // ProductionOrders
    public class ProductionOrderConfiguration : IEntityTypeConfiguration<ProductionOrder>
    {
        public void Configure(EntityTypeBuilder<ProductionOrder> builder)
        {
            builder.ToTable("ProductionOrders", "dbo");
            builder.HasKey(x => x.ProductionOrderId).HasName("PK_ProductionOrders").IsClustered();

            builder.Property(x => x.ProductionOrderId).HasColumnName(@"ProductionOrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductionOrderNumber).HasColumnName(@"ProductionOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProductionOrderLocalId).HasColumnName(@"ProductionOrderLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductionOrderDate).HasColumnName(@"ProductionOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductionOrderRemark).HasColumnName(@"ProductionOrderRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.BillOfMaterialId).HasColumnName(@"BillOfMaterialID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PlannedWeight).HasColumnName(@"Planned_Weight").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.PlannedUnit).HasColumnName(@"Planned_Unit").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
        }
    }

    // ProductionOrderDetails
    public class ProductionOrderDetailConfiguration : IEntityTypeConfiguration<ProductionOrderDetail>
    {
        public void Configure(EntityTypeBuilder<ProductionOrderDetail> builder)
        {
            builder.ToTable("ProductionOrderDetails", "dbo");
            builder.HasKey(x => x.ProductionOrderDetailId).HasName("PK_ProductionOrderDetails");

            builder.Property(x => x.ProductionOrderDetailId).HasColumnName(@"ProductionOrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ProductionOrderId).HasColumnName(@"ProductionOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.MaterialProductId).HasColumnName(@"Material_ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.MaterialQuantity).HasColumnName(@"Material_Quantity").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.ProductionOrderDetailRemark).HasColumnName(@"ProductionOrderDetailRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.MaterialActual).HasColumnName(@"Material_Actual").HasColumnType("decimal(18,5)").IsRequired(false);

            builder.HasIndex(x => new { x.MaterialProductId, x.ProductionOrderId }).HasName("IX_ProductionOrderDetails");
        }
    }

    // ProductNumber_BHX_Import2
    public class ProductNumberBhxImport2Configuration : IEntityTypeConfiguration<ProductNumberBhxImport2>
    {
        public void Configure(EntityTypeBuilder<ProductNumberBhxImport2> builder)
        {
            builder.ToTable("ProductNumber_BHX_Import2", "dbo");
            builder.HasKey(x => x.ProductNumber).HasName("PK_ProductNumber_BHX_Import2").IsClustered();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
        }
    }

    // Profiles
    public class ProfileConfiguration : IEntityTypeConfiguration<Profile>
    {
        public void Configure(EntityTypeBuilder<Profile> builder)
        {
            builder.ToTable("Profiles", "dbo");
            builder.HasKey(x => x.MyProfileId).HasName("PK_Profiles").IsClustered();

            builder.Property(x => x.MyProfileId).HasColumnName(@"MyProfileID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DefaultCustomer).HasColumnName(@"DefaultCustomer").HasColumnType("bit").IsRequired();
        }
    }

    // Properties
    public class PropertyConfiguration : IEntityTypeConfiguration<Property>
    {
        public void Configure(EntityTypeBuilder<Property> builder)
        {
            builder.ToView("Properties", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PropertyName).HasColumnName(@"PropertyName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.PartOriginal).HasColumnName(@"PartOriginal").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PartNumber).HasColumnName(@"PartNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PartGroupId).HasColumnName(@"PartGroupID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PartCategoryId).HasColumnName(@"PartCategoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EquipmentGroupId).HasColumnName(@"EquipmentGroupID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PartRemark).HasColumnName(@"PartRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyModelAndSpecification).HasColumnName(@"PropertyModelAndSpecification").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UnitPriceVnd).HasColumnName(@"UnitPriceVND").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UnitPriceUsd).HasColumnName(@"UnitPriceUSD").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PartEntryTime).HasColumnName(@"PartEntryTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PartOwner).HasColumnName(@"PartOwner").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.ItEquipmentSpecification).HasColumnName(@"ITEquipmentSpecification").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ItEquipmentBuyingDate).HasColumnName(@"ITEquipmentBuyingDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PartOriginalType).HasColumnName(@"PartOriginalType").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.PropertyOldId).HasColumnName(@"PropertyOldID").HasColumnType("int").IsRequired(false);
        }
    }

    // PurchasingOrders
    public class PurchasingOrderConfiguration : IEntityTypeConfiguration<PurchasingOrder>
    {
        public void Configure(EntityTypeBuilder<PurchasingOrder> builder)
        {
            builder.ToTable("PurchasingOrders", "dbo");
            builder.HasKey(x => x.PurchasingOrderId).HasName("PK__PurchasingOrders__7132C993").IsClustered();

            builder.Property(x => x.PurchasingOrderId).HasColumnName(@"PurchasingOrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PurchasingOrderNumber).HasColumnName(@"PurchasingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.PuchasingDate).HasColumnName(@"PuchasingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderEmployeeId).HasColumnName(@"OrderEmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DeliveryAddress).HasColumnName(@"DeliveryAddress").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.OrderBy).HasColumnName(@"OrderBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderConfirmed).HasColumnName(@"OrderConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PurchasingRemark).HasColumnName(@"PurchasingRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Currency).HasColumnName(@"Currency").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ExchangeRate).HasColumnName(@"ExchangeRate").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UsedPeriod).HasColumnName(@"UsedPeriod").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.StrategicSupplier).HasColumnName(@"StrategicSupplier").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.AdvancePaymentDate).HasColumnName(@"AdvancePaymentDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.FinalPaymentDate).HasColumnName(@"FinalPaymentDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RiskAssessmentRequired).HasColumnName(@"RiskAssessmentRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CompetitivePricingRequired).HasColumnName(@"CompetitivePricingRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContractExpiredDate).HasColumnName(@"ContractExpiredDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContractRequired).HasColumnName(@"ContractRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DocumentFileScan).HasColumnName(@"DocumentFileScan").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OrderConfirmedAll).HasColumnName(@"OrderConfirmedAll").HasColumnType("bit").IsRequired();
            builder.Property(x => x.OrderConfirmedAllBy).HasColumnName(@"OrderConfirmedAllBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.Supplier).WithMany(b => b.PurchasingOrders).HasForeignKey(c => c.SupplierId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PurchasingOrders_Suppliers");
        }
    }

    // PurchasingOrderDetails
    public class PurchasingOrderDetailConfiguration : IEntityTypeConfiguration<PurchasingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<PurchasingOrderDetail> builder)
        {
            builder.ToTable("PurchasingOrderDetails", "dbo");
            builder.HasKey(x => x.PurchasingOrderDetailId).HasName("PK__PurchasingOrderD__6F4A8121").IsClustered();

            builder.Property(x => x.PurchasingOrderDetailId).HasColumnName(@"PurchasingOrderDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PurchasingOrderId).HasColumnName(@"PurchasingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PartId).HasColumnName(@"PartID").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitPriceUsd).HasColumnName(@"UnitPriceUSD").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UnitPriceVnd).HasColumnName(@"UnitPriceVND").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.ItemRemark).HasColumnName(@"ItemRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.PropertyCategoryId).HasColumnName(@"PropertyCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OrderQuantity).HasColumnName(@"OrderQuantity").HasColumnType("decimal(18,5)").IsRequired();
            builder.Property(x => x.DeliveryQuantity).HasColumnName(@"DeliveryQuantity").HasColumnType("decimal(18,5)").IsRequired();
            builder.Property(x => x.DeliveryDateDetail).HasColumnName(@"DeliveryDateDetail").HasColumnType("smalldatetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Part).WithMany(b => b.PurchasingOrderDetails).HasForeignKey(c => c.PartId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PurchasingOrderDetails_Parts");
            builder.HasOne(a => a.PurchasingOrder).WithMany(b => b.PurchasingOrderDetails).HasForeignKey(c => c.PurchasingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PurchasingOrderDetails_PurchasingOrders");
        }
    }

    // QAReport
    public class QaReportConfiguration : IEntityTypeConfiguration<QaReport>
    {
        public void Configure(EntityTypeBuilder<QaReport> builder)
        {
            builder.ToTable("QAReport", "dbo");
            builder.HasKey(x => x.QaReportId).HasName("PK_QA").IsClustered();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Original).HasColumnName(@"Original").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Supplier).HasColumnName(@"Supplier").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Manufactured).HasColumnName(@"Manufactured").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DocumentFileScan).HasColumnName(@"DocumentFileScan").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomNo).HasColumnName(@"CustomNo").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RecorderConfirmed).HasColumnName(@"RecorderConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.RecorderOccurTime).HasColumnName(@"RecorderOccurTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RecorderTransporterRepresentative).HasColumnName(@"RecorderTransporterRepresentative").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.RecorderTransporter).HasColumnName(@"RecorderTransporter").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.RecorderTruckNo).HasColumnName(@"RecorderTruckNo").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.RecorderPhoneNo).HasColumnName(@"RecorderPhoneNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RecorderTemperature).HasColumnName(@"RecorderTemperature").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.RecorderDriver).HasColumnName(@"RecorderDriver").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RecorderCode).HasColumnName(@"RecorderCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RecorderProductBranch).HasColumnName(@"RecorderProductBranch").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.RecorderDescription).HasColumnName(@"RecorderDescription").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ContainerNo).HasColumnName(@"ContainerNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QaReportId).HasColumnName(@"QAReportID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // QAReportDetails
    public class QaReportDetailConfiguration : IEntityTypeConfiguration<QaReportDetail>
    {
        public void Configure(EntityTypeBuilder<QaReportDetail> builder)
        {
            builder.ToTable("QAReportDetails", "dbo");
            builder.HasKey(x => x.QaReportDetailId).HasName("PK_QAReportDetails").IsClustered();

            builder.Property(x => x.QaReportDetailId).HasColumnName(@"QAReportDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.Origin).HasColumnName(@"Origin").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Manufactured).HasColumnName(@"Manufactured").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomNo).HasColumnName(@"CustomNo").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ContainerNo).HasColumnName(@"ContainerNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.FileLocatoin).HasColumnName(@"FileLocatoin").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // QHSE
    public class QhseConfiguration : IEntityTypeConfiguration<Qhse>
    {
        public void Configure(EntityTypeBuilder<Qhse> builder)
        {
            builder.ToTable("QHSE", "dbo");
            builder.HasKey(x => x.Qhseid).HasName("PK_QHSE").IsClustered();

            builder.Property(x => x.Qhseid).HasColumnName(@"QHSEID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QhseNumber).HasColumnName(@"QHSENumber").HasColumnType("nvarchar(16)").IsRequired().HasMaxLength(16);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.PhotoAttachment).HasColumnName(@"PhotoAttachment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ManagementResponse).HasColumnName(@"ManagementResponse").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.ResponseBy).HasColumnName(@"ResponseBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ResponseTime).HasColumnName(@"ResponseTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.AssignedTo).HasColumnName(@"AssignedTo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AssignedComment).HasColumnName(@"AssignedComment").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.AssignedCommentTime).HasColumnName(@"AssignedCommentTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Deadline).HasColumnName(@"Deadline").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AssigmentReject).HasColumnName(@"AssigmentReject").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TaskProgress).HasColumnName(@"TaskProgress").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Evaluation).HasColumnName(@"Evaluation").HasColumnType("decimal(15,1)").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // qryEDIProductRemains
    public class QryEdiProductRemainConfiguration : IEntityTypeConfiguration<QryEdiProductRemain>
    {
        public void Configure(EntityTypeBuilder<QryEdiProductRemain> builder)
        {
            builder.ToView("qryEDIProductRemains", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.TmpProductRemainId).HasColumnName(@"tmpProductRemainID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TmpProductRemainName).HasColumnName(@"tmpProductRemainName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TmpRemainQuantity).HasColumnName(@"tmpRemainQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TmpProductRemainNumber).HasColumnName(@"tmpProductRemainNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TmpCustomerId).HasColumnName(@"tmpCustomerID").HasColumnType("int").IsRequired(false);
        }
    }

    // QualityCheckings
    public class QualityCheckingConfiguration : IEntityTypeConfiguration<QualityChecking>
    {
        public void Configure(EntityTypeBuilder<QualityChecking> builder)
        {
            builder.ToTable("QualityCheckings", "dbo");
            builder.HasKey(x => x.QualityCheckingId).HasName("PK_QualityCheckings").IsClustered();

            builder.Property(x => x.QualityCheckingId).HasColumnName(@"QualityCheckingID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QualityCheckingDate).HasColumnName(@"QualityCheckingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.QualityCheckingRemark).HasColumnName(@"QualityCheckingRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);

            builder.HasIndex(x => x.QualityCheckingDate).HasName("IX_QualityCheckings");
        }
    }

    // QualityCheckingDetails
    public class QualityCheckingDetailConfiguration : IEntityTypeConfiguration<QualityCheckingDetail>
    {
        public void Configure(EntityTypeBuilder<QualityCheckingDetail> builder)
        {
            builder.ToTable("QualityCheckingDetails", "dbo");
            builder.HasKey(x => x.QualityCheckingDetailId).HasName("PK_QualityCheckingDetails").IsClustered();

            builder.Property(x => x.QualityCheckingDetailId).HasColumnName(@"QualityCheckingDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QualityCheckingId).HasColumnName(@"QualityCheckingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.QuantityOfPackages).HasColumnName(@"QuantityOfPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired();
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("real").IsRequired();
            builder.Property(x => x.CheckingDetailRemark).HasColumnName(@"CheckingDetailRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CheckingPassed).HasColumnName(@"CheckingPassed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ReferenceNumber).HasColumnName(@"ReferenceNumber").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckingQuantity).HasColumnName(@"CheckingQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CheckedBy).HasColumnName(@"CheckedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.QualityChecking).WithMany(b => b.QualityCheckingDetails).HasForeignKey(c => c.QualityCheckingId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_QualityCheckingDetails_QualityCheckings");

            builder.HasIndex(x => x.QualityCheckingId).HasName("IX_QualityCheckingDetails");
            builder.HasIndex(x => x.ProductId).HasName("IX_QualityCheckingDetails_1");
            builder.HasIndex(x => x.CustomerId).HasName("IX_QualityCheckingDetails_2");
            builder.HasIndex(x => x.ReferenceNumber).HasName("IX_QualityCheckingDetails_3");
        }
    }

    // Quarantines
    public class QuarantineConfiguration : IEntityTypeConfiguration<Quarantine>
    {
        public void Configure(EntityTypeBuilder<Quarantine> builder)
        {
            builder.ToTable("Quarantines", "dbo");
            builder.HasKey(x => x.QuarantineId).HasName("PK_Quarantines").IsClustered();

            builder.Property(x => x.QuarantineId).HasColumnName(@"QuarantineID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QuarantineNumber).HasColumnName(@"QuarantineNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.QuarantineDate).HasColumnName(@"QuarantineDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.QuarantineType).HasColumnName(@"QuarantineType").HasColumnType("bit").IsRequired();
            builder.Property(x => x.QuarantineRemark).HasColumnName(@"QuarantineRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.QuarantineConfirm).HasColumnName(@"QuarantineConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Accepted).HasColumnName(@"Accepted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.AcceptedBy).HasColumnName(@"AcceptedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.AcceptedTime).HasColumnName(@"AcceptedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => x.QuarantineDate).HasName("IX_Quarantines_1");
        }
    }

    // QuarantineDetails
    public class QuarantineDetailConfiguration : IEntityTypeConfiguration<QuarantineDetail>
    {
        public void Configure(EntityTypeBuilder<QuarantineDetail> builder)
        {
            builder.ToTable("QuarantineDetails", "dbo");
            builder.HasKey(x => x.QuarantineDetailId).HasName("PK_QuarantineDetails").IsClustered();

            builder.Property(x => x.QuarantineDetailId).HasColumnName(@"QuarantineDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.QuarantineId).HasColumnName(@"QuarantineID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(18,5)").IsRequired();
            builder.Property(x => x.QuarantineDetailRemark).HasColumnName(@"QuarantineDetailRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.IcUser).HasColumnName(@"ICUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired(false);

            builder.HasIndex(x => x.QuarantineId).HasName("IX_QuarantineDetails");
        }
    }

    // Ratings
    public class RatingConfiguration : IEntityTypeConfiguration<Rating>
    {
        public void Configure(EntityTypeBuilder<Rating> builder)
        {
            builder.ToTable("Ratings", "dbo");
            builder.HasKey(x => x.RatingId).HasName("PK_Ratings").IsClustered();

            builder.Property(x => x.RatingId).HasColumnName(@"RatingID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RatingValue).HasColumnName(@"RatingValue").HasColumnType("decimal(15,1)").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // ReasonDefinition
    public class ReasonDefinitionConfiguration : IEntityTypeConfiguration<ReasonDefinition>
    {
        public void Configure(EntityTypeBuilder<ReasonDefinition> builder)
        {
            builder.ToTable("ReasonDefinition", "dbo");
            builder.HasKey(x => x.ReasonCode).HasName("PK_ReasonDefinitions").IsClustered();

            builder.Property(x => x.ReasonCode).HasColumnName(@"REASON_CODE").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.ReasonMeaning).HasColumnName(@"REASON_MEANING").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Status).HasColumnName(@"STATUS").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // ReasonModifyBillingDetailAdjectments
    public class ReasonModifyBillingDetailAdjectmentConfiguration : IEntityTypeConfiguration<ReasonModifyBillingDetailAdjectment>
    {
        public void Configure(EntityTypeBuilder<ReasonModifyBillingDetailAdjectment> builder)
        {
            builder.ToTable("ReasonModifyBillingDetailAdjectments", "dbo");
            builder.HasKey(x => x.Code).HasName("PK__ReasonMo__A25C5AA6719816CA").IsClustered();

            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreateTime).HasColumnName(@"CreateTime").HasColumnType("datetime").IsRequired();
        }
    }

    // ReceivedParts
    public class ReceivedPartConfiguration : IEntityTypeConfiguration<ReceivedPart>
    {
        public void Configure(EntityTypeBuilder<ReceivedPart> builder)
        {
            builder.ToTable("ReceivedParts", "dbo");
            builder.HasKey(x => x.ReceivedPartId).HasName("PK__ReceivedParts__589C25F3").IsClustered();

            builder.Property(x => x.ReceivedPartId).HasColumnName(@"ReceivedPartID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PurchasingOrderId).HasColumnName(@"PurchasingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PuchasingDate).HasColumnName(@"PuchasingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.OrderEmployeeId).HasColumnName(@"OrderEmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PurchasingRemark).HasColumnName(@"PurchasingRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.OrderConfirmed).HasColumnName(@"OrderConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.DeliveryAddress).HasColumnName(@"DeliveryAddress").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.OrderBy).HasColumnName(@"OrderBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ConfirmBy).HasColumnName(@"ConfirmBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.ReceivedPartNumber).HasColumnName(@"ReceivedPartNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Supplier).WithMany(b => b.ReceivedParts).HasForeignKey(c => c.SupplierId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivedParts_Suppliers1");
        }
    }

    // ReceivedPartDetails
    public class ReceivedPartDetailConfiguration : IEntityTypeConfiguration<ReceivedPartDetail>
    {
        public void Configure(EntityTypeBuilder<ReceivedPartDetail> builder)
        {
            builder.ToTable("ReceivedPartDetails", "dbo");
            builder.HasKey(x => x.PartReceivedDetailId).HasName("PK__zzzz__0015E5C7").IsClustered();

            builder.Property(x => x.PartReceivedDetailId).HasColumnName(@"PartReceivedDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PartReceivedId).HasColumnName(@"PartReceivedID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PartId).HasColumnName(@"PartID").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitPriceUsd).HasColumnName(@"UnitPriceUSD").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UnitPriceVnd).HasColumnName(@"UnitPriceVND").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DeliveryQuantity).HasColumnName(@"DeliveryQuantity").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.ItemRemark).HasColumnName(@"ItemRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.LabelOwner).HasColumnName(@"LabelOwner").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.LabelAccountNumber).HasColumnName(@"LabelAccountNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LabelDate).HasColumnName(@"LabelDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.LabelRemark).HasColumnName(@"LabelRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.LabelAccountId).HasColumnName(@"LabelAccountID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentCategoryId).HasColumnName(@"DepartmentCategoryID").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.PropertyCategoryId).HasColumnName(@"PropertyCategoryID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Part).WithMany(b => b.ReceivedPartDetails).HasForeignKey(c => c.PartId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivedPartDetails_Parts");
            builder.HasOne(a => a.ReceivedPart).WithMany(b => b.ReceivedPartDetails).HasForeignKey(c => c.PartReceivedId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivedPartDetails_ReceivedParts");
        }
    }

    // ReceivingCartons
    public class ReceivingCartonConfiguration : IEntityTypeConfiguration<ReceivingCarton>
    {
        public void Configure(EntityTypeBuilder<ReceivingCarton> builder)
        {
            builder.ToTable("ReceivingCartons", "dbo");
            builder.HasKey(x => x.ReceivingCartonId).HasName("PK__Receivin__D8F13404A2B7204A").IsClustered();

            builder.Property(x => x.ReceivingCartonId).HasColumnName(@"ReceivingCartonID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Dispatched).HasColumnName(@"Dispatched").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DataRangeFrom).HasColumnName(@"DataRangeFrom").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DatarangeTo).HasColumnName(@"DatarangeTo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
        }
    }

    // ReceivingOrders
    public class ReceivingOrderConfiguration : IEntityTypeConfiguration<ReceivingOrder>
    {
        public void Configure(EntityTypeBuilder<ReceivingOrder> builder)
        {
            builder.ToTable("ReceivingOrders", "dbo");
            builder.HasKey(x => x.ReceivingOrderId).HasName("PK_ReceivingOrders");

            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ReceivingOrderLocalId).HasColumnName(@"ReceivingOrderLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.ReceivingOrderRemark).HasColumnName(@"ReceivingOrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderProgress).HasColumnName(@"ReceivingOrderProgress").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LadingReportNumber).HasColumnName(@"LadingReportNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomsDeclarationNumber).HasColumnName(@"CustomsDeclarationNumber").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.Origin).HasColumnName(@"Origin").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.InternalRemark).HasColumnName(@"InternalRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Electricity).HasColumnName(@"Electricity").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ProgressPercentage).HasColumnName(@"ProgressPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.IsAttachment).HasColumnName(@"IsAttachment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerSupplierId).HasColumnName(@"CustomerSupplierID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DockDoorId).HasColumnName(@"DockDoorID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PutAwayPercentage).HasColumnName(@"PutAwayPercentage").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PerformanceCategoryId).HasColumnName(@"PerformanceCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OrderTypeId).HasColumnName(@"OrderTypeID").HasColumnType("tinyint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.ReceivingOrders).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivingOrders_Customers");

            builder.HasIndex(x => new { x.CustomerId, x.ReceivingOrderDate, x.ServicesDefinitionId }).HasName("IX_ReceivingOrders");
        }
    }

    // ReceivingOrderDetails
    public class ReceivingOrderDetailConfiguration : IEntityTypeConfiguration<ReceivingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<ReceivingOrderDetail> builder)
        {
            builder.ToTable("ReceivingOrderDetails", "dbo");
            builder.HasKey(x => x.ReceivingOrderDetailId).HasName("PK_ReceivingOrderDetails");

            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerRef2).HasColumnName(@"CustomerRef2").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.PalletHeight).HasColumnName(@"PalletHeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.PackingListQuantity).HasColumnName(@"PackingListQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Origin).HasColumnName(@"Origin").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RejectPercentage).HasColumnName(@"RejectPercentage").HasColumnType("decimal(10,4)").IsRequired(false);
            builder.Property(x => x.PackagingWeight).HasColumnName(@"PackagingWeight").HasColumnType("decimal(10,4)").IsRequired(false);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Product).WithMany(b => b.ReceivingOrderDetails).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivingOrderDetails_Products");
            builder.HasOne(a => a.ReceivingOrder).WithMany(b => b.ReceivingOrderDetails).HasForeignKey(c => c.ReceivingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivingOrderDetails_ReceivingOrders");

            builder.HasIndex(x => new { x.ReceivingOrderId, x.ProductId }).HasName("IX_ReceivingOrderDetails");
            builder.HasIndex(x => x.CustomerRef).HasName("IX_ReceivingOrderDetails_2");
            builder.HasIndex(x => x.Status).HasName("ReceivingOrderDetails51");
        }
    }

    // ReceivingPallets
    public class ReceivingPalletConfiguration : IEntityTypeConfiguration<ReceivingPallet>
    {
        public void Configure(EntityTypeBuilder<ReceivingPallet> builder)
        {
            builder.ToTable("ReceivingPallets", "dbo");
            builder.HasKey(x => x.ReceivingPalletId).HasName("PK_ReceivingPallets").IsClustered();

            builder.Property(x => x.ReceivingPalletId).HasColumnName(@"ReceivingPalletID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // ReceivingProductCartons
    public class ReceivingProductCartonConfiguration : IEntityTypeConfiguration<ReceivingProductCarton>
    {
        public void Configure(EntityTypeBuilder<ReceivingProductCarton> builder)
        {
            builder.ToTable("ReceivingProductCartons", "dbo");
            builder.HasKey(x => x.ReceivingCartonId).HasName("PK_ReceivingProductCartons").IsClustered();

            builder.Property(x => x.ReceivingCartonId).HasColumnName(@"ReceivingCartonID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.PackageType).HasColumnName(@"PackageType").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ProductCartonDate).HasColumnName(@"ProductCartonDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsScan).HasColumnName(@"IsScan").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.ReceivingOrder).WithMany(b => b.ReceivingProductCartons).HasForeignKey(c => c.ReceivingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivingProductCartons_ReceivingOrders");
        }
    }

    // ReceivingProductCartons_History
    public class ReceivingProductCartonsHistoryConfiguration : IEntityTypeConfiguration<ReceivingProductCartonsHistory>
    {
        public void Configure(EntityTypeBuilder<ReceivingProductCartonsHistory> builder)
        {
            builder.ToTable("ReceivingProductCartons_History", "dbo");
            builder.HasKey(x => x.ReceivingCartonId);

            builder.Property(x => x.ReceivingCartonId).HasColumnName(@"ReceivingCartonID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.PackageType).HasColumnName(@"PackageType").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ProductCartonDate).HasColumnName(@"ProductCartonDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsScan).HasColumnName(@"IsScan").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.ReceivingOrder).WithMany(b => b.ReceivingProductCartonsHistories).HasForeignKey(c => c.ReceivingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Receiving__Recei__54F44D5D");
        }
    }

    // ReceivingProductPacks
    public class ReceivingProductPackConfiguration : IEntityTypeConfiguration<ReceivingProductPack>
    {
        public void Configure(EntityTypeBuilder<ReceivingProductPack> builder)
        {
            builder.ToTable("ReceivingProductPacks", "dbo");
            builder.HasKey(x => x.ReceivingProductPackId).HasName("PK__Receivin__6BC87568230B2205").IsClustered();

            builder.Property(x => x.ReceivingProductPackId).HasColumnName(@"ReceivingProductPackID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingCartonId).HasColumnName(@"ReceivingCartonID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.ReceivingProductCarton).WithMany(b => b.ReceivingProductPacks).HasForeignKey(c => c.ReceivingCartonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReceivingProductPacks_ReceivingProductCartons");
        }
    }

    // ReceivingProductPacks_History
    public class ReceivingProductPacksHistoryConfiguration : IEntityTypeConfiguration<ReceivingProductPacksHistory>
    {
        public void Configure(EntityTypeBuilder<ReceivingProductPacksHistory> builder)
        {
            builder.ToTable("ReceivingProductPacks_History", "dbo");
            builder.HasKey(x => x.ReceivingProductPackId);

            builder.Property(x => x.ReceivingProductPackId).HasColumnName(@"ReceivingProductPackID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingCartonId).HasColumnName(@"ReceivingCartonID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingProductPackIdold).HasColumnName(@"ReceivingProductPackIDOLD").HasColumnType("bigint").IsRequired(false);
        }
    }

    // ReceivingUnits
    public class ReceivingUnitConfiguration : IEntityTypeConfiguration<ReceivingUnit>
    {
        public void Configure(EntityTypeBuilder<ReceivingUnit> builder)
        {
            builder.ToTable("ReceivingUnits", "dbo");
            builder.HasKey(x => x.ReceivingUnitId).HasName("PK_ReceivingUnits");

            builder.Property(x => x.ReceivingUnitId).HasColumnName(@"ReceivingUnitID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PalletCartonId).HasColumnName(@"PalletCartonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitWeights).HasColumnName(@"UnitWeights").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => x.PalletCartonId).HasName("IX_ReceivingUnits");
        }
    }

    // Releases
    public class ReleaseConfiguration : IEntityTypeConfiguration<Release>
    {
        public void Configure(EntityTypeBuilder<Release> builder)
        {
            builder.ToTable("Releases", "dbo");
            builder.HasKey(x => x.ReleaseId).HasName("PK_Releases").IsClustered();

            builder.Property(x => x.ReleaseId).HasColumnName(@"ReleaseID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReleaseDate).HasColumnName(@"ReleaseDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.ReleaseRemark).HasColumnName(@"ReleaseRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ReleaseConfirm).HasColumnName(@"ReleaseConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ReleaseType).HasColumnName(@"ReleaseType").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReleaseConfirmedBy).HasColumnName(@"ReleaseConfirmedBy").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);

            builder.HasIndex(x => x.CustomerId).HasName("IX_Releases");
            builder.HasIndex(x => x.ReleaseDate).HasName("IX_Releases_1");
        }
    }

    // ReleaseDetails
    public class ReleaseDetailConfiguration : IEntityTypeConfiguration<ReleaseDetail>
    {
        public void Configure(EntityTypeBuilder<ReleaseDetail> builder)
        {
            builder.ToTable("ReleaseDetails", "dbo");
            builder.HasKey(x => x.ReleaseDetailId).HasName("PK_ReleaseDetails").IsClustered();

            builder.Property(x => x.ReleaseDetailId).HasColumnName(@"ReleaseDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReleaseId).HasColumnName(@"ReleaseID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerProductGroupId).HasColumnName(@"CustomerProductGroupID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerProductGroupName).HasColumnName(@"CustomerProductGroupName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ReleaseTotalPackages).HasColumnName(@"ReleaseTotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReleaseTotalWeight).HasColumnName(@"ReleaseTotalWeight").HasColumnType("real").IsRequired();
            builder.Property(x => x.ReleaseDetailRemark).HasColumnName(@"ReleaseDetailRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.IcUser).HasColumnName(@"ICUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CustomerProductGroup).WithMany(b => b.ReleaseDetails).HasForeignKey(c => c.CustomerProductGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReleaseDetails_CustomerProductGroups");
            builder.HasOne(a => a.Release).WithMany(b => b.ReleaseDetails).HasForeignKey(c => c.ReleaseId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ReleaseDetails_Releases");

            builder.HasIndex(x => x.ReleaseId).HasName("IX_ReleaseDetails");
            builder.HasIndex(x => x.CustomerProductGroupId).HasName("IX_ReleaseDetails_1");
        }
    }

    // Reports
    public class ReportConfiguration : IEntityTypeConfiguration<Report>
    {
        public void Configure(EntityTypeBuilder<Report> builder)
        {
            builder.ToTable("Reports", "dbo");
            builder.HasKey(x => x.ReportId).HasName("PK_Reports").IsClustered();

            builder.Property(x => x.ReportId).HasColumnName(@"ReportID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReportName).HasColumnName(@"ReportName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReportSystemName).HasColumnName(@"ReportSystemName").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.ReportWmsName).HasColumnName(@"ReportWMSName").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.RecipientGroupId).HasColumnName(@"RecipientGroupID").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);

            builder.HasIndex(x => x.RecipientGroupId).HasName("IX_Reports");
        }
    }

    // ReportDates
    public class ReportDateConfiguration : IEntityTypeConfiguration<ReportDate>
    {
        public void Configure(EntityTypeBuilder<ReportDate> builder)
        {
            builder.ToTable("ReportDates", "dbo");
            builder.HasKey(x => new { x.ReportDate_, x.ReportMonth, x.BeginOfTheMonth, x.EndOfTheMonth, x.DaysOfTheMonth, x.WeekNumber });

            builder.Property(x => x.ReportDate_).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReportMonth).HasColumnName(@"ReportMonth").HasColumnType("char(7)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(7).ValueGeneratedNever();
            builder.Property(x => x.BeginOfTheMonth).HasColumnName(@"BeginOfTheMonth").HasColumnType("smalldatetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EndOfTheMonth).HasColumnName(@"EndOfTheMonth").HasColumnType("smalldatetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DaysOfTheMonth).HasColumnName(@"DaysOfTheMonth").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WeekNumber).HasColumnName(@"WeekNumber").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.StockOnHandWeeklyId).HasColumnName(@"StockOnHandWeeklyID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // ReportToCustomer
    public class ReportToCustomerConfiguration : IEntityTypeConfiguration<ReportToCustomer>
    {
        public void Configure(EntityTypeBuilder<ReportToCustomer> builder)
        {
            builder.ToTable("ReportToCustomer", "dbo");
            builder.HasKey(x => x.ReportToCustomerId).HasName("PK_ReportToCustomer").IsClustered();

            builder.Property(x => x.ReportToCustomerId).HasColumnName(@"ReportToCustomerID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SendObject).HasColumnName(@"SendObject").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.SentTime).HasColumnName(@"SentTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.SentBy).HasColumnName(@"SentBy").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SendAddress).HasColumnName(@"SendAddress").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
        }
    }

    // Rooms
    public class RoomConfiguration : IEntityTypeConfiguration<Room>
    {
        public void Configure(EntityTypeBuilder<Room> builder)
        {
            builder.ToTable("Rooms", "dbo");
            builder.HasKey(x => x.RoomId).HasName("PK_Rooms_1").IsClustered();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RoomNumber).HasColumnName(@"RoomNumber").HasColumnType("char(2)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("real").IsRequired();
            builder.Property(x => x.DateRoom).HasColumnName(@"DateRoom").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Warehouse).HasColumnName(@"Warehouse").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.RoomDescription).HasColumnName(@"RoomDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.RoomArea).HasColumnName(@"RoomArea").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuantityOfPallets).HasColumnName(@"QuantityOfPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomVolume).HasColumnName(@"RoomVolume").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomProductStorage).HasColumnName(@"RoomProductStorage").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TemperatureFrom).HasColumnName(@"TemperatureFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TemperatureTo).HasColumnName(@"TemperatureTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityFrom).HasColumnName(@"HumidityFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityTo).HasColumnName(@"HumidityTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.LostProductLocationId).HasColumnName(@"LostProductLocationID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // RoomNumbers
    public class RoomNumberConfiguration : IEntityTypeConfiguration<RoomNumber>
    {
        public void Configure(EntityTypeBuilder<RoomNumber> builder)
        {
            builder.ToTable("RoomNumbers", "dbo");
            builder.HasKey(x => x.RoomId).HasName("PK_RoomNumbers").IsClustered();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.RoomNumber_).HasColumnName(@"RoomNumber").HasColumnType("int").IsRequired(false);
        }
    }

    // Rooms_Locations
    public class RoomsLocationConfiguration : IEntityTypeConfiguration<RoomsLocation>
    {
        public void Configure(EntityTypeBuilder<RoomsLocation> builder)
        {
            builder.ToTable("Rooms_Locations", "dbo");
            builder.HasKey(x => x.RoomId).HasName("PK_Rooms_Locations").IsClustered();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.QtyLow).HasColumnName(@"QtyLow").HasColumnType("int").IsRequired();
            builder.Property(x => x.QtyHigh).HasColumnName(@"QtyHigh").HasColumnType("int").IsRequired();
            builder.Property(x => x.QtyStandards).HasColumnName(@"QtyStandards").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyAvailable).HasColumnName(@"QtyAvailable").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomRemark).HasColumnName(@"RoomRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.RoomNumber).HasColumnName(@"RoomNumber").HasColumnType("char(2)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.TemperatureFrom).HasColumnName(@"TemperatureFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TemperatureTo).HasColumnName(@"TemperatureTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityFrom).HasColumnName(@"HumidityFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityTo).HasColumnName(@"HumidityTo").HasColumnType("real").IsRequired(false);
        }
    }

    // SafetyClothesEnquiry
    public class SafetyClothesEnquiryConfiguration : IEntityTypeConfiguration<SafetyClothesEnquiry>
    {
        public void Configure(EntityTypeBuilder<SafetyClothesEnquiry> builder)
        {
            builder.ToTable("SafetyClothesEnquiry", "dbo");
            builder.HasKey(x => x.SafetyClothesEnquiryId).HasName("PK_SafetyClothesEnquiry").IsClustered();

            builder.Property(x => x.SafetyClothesEnquiryId).HasColumnName(@"SafetyClothesEnquiryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EnquiryDate).HasColumnName(@"EnquiryDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.EnquiryRemark).HasColumnName(@"EnquiryRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // SafetyClothesEnquiryDetails
    public class SafetyClothesEnquiryDetailConfiguration : IEntityTypeConfiguration<SafetyClothesEnquiryDetail>
    {
        public void Configure(EntityTypeBuilder<SafetyClothesEnquiryDetail> builder)
        {
            builder.ToTable("SafetyClothesEnquiryDetails", "dbo");
            builder.HasKey(x => x.SafetyClothesEnquiryDetailId).HasName("PK_SafetyClothesEnquiryDetails").IsClustered();

            builder.Property(x => x.SafetyClothesEnquiryDetailId).HasColumnName(@"SafetyClothesEnquiryDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SafetyClothesEnquiryId).HasColumnName(@"SafetyClothesEnquiryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PartId).HasColumnName(@"PartID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EnquiryQuantity).HasColumnName(@"EnquiryQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EnquiryIdOld).HasColumnName(@"EnquiryID_Old").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SafetyClothesIdOld).HasColumnName(@"SafetyClothesID_Old").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EnquiryDetailIdOld).HasColumnName(@"EnquiryDetailID_Old").HasColumnType("int").IsRequired(false);
        }
    }

    // SafetyContacts
    public class SafetyContactConfiguration : IEntityTypeConfiguration<SafetyContact>
    {
        public void Configure(EntityTypeBuilder<SafetyContact> builder)
        {
            builder.ToTable("SafetyContacts", "dbo");
            builder.HasKey(x => new { x.SafetyContactId, x.SafetyContactDate, x.CreatedBy, x.CreatedTime, x.TaskCompleted, x.Confirmed });

            builder.Property(x => x.SafetyContactId).HasColumnName(@"SafetyContactID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SafetyContactDate).HasColumnName(@"SafetyContactDate").HasColumnType("smalldatetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SafetyContactDescription).HasColumnName(@"SafetyContactDescription").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.SafetyCommiteeResponse).HasColumnName(@"SafetyCommiteeResponse").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.TaskAssignedTo).HasColumnName(@"TaskAssignedTo").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.TaskPlannedDate).HasColumnName(@"TaskPlannedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TaskCompleted).HasColumnName(@"TaskCompleted").HasColumnType("bit").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ManagementResponse).HasColumnName(@"ManagementResponse").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
        }
    }

    // SafetyStocks
    public class SafetyStockConfiguration : IEntityTypeConfiguration<SafetyStock>
    {
        public void Configure(EntityTypeBuilder<SafetyStock> builder)
        {
            builder.ToTable("SafetyStocks", "dbo");
            builder.HasKey(x => x.SafetyStockId).HasName("PK_SafetyStocks").IsClustered();

            builder.Property(x => x.SafetyStockId).HasColumnName(@"SafetyStockID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductNumber6).HasColumnName(@"ProductNumber6").HasColumnType("nvarchar(18)").IsRequired(false).HasMaxLength(18);
            builder.Property(x => x.ProductName6).HasColumnName(@"ProductName6").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.SafetyStock_).HasColumnName(@"SafetyStock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber2).HasColumnName(@"ProductNumber2").HasColumnType("nvarchar(18)").IsRequired(false).HasMaxLength(18);
            builder.Property(x => x.ProductName2).HasColumnName(@"ProductName2").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.ProductNumberP).HasColumnName(@"ProductNumberP").HasColumnType("nvarchar(18)").IsRequired(false).HasMaxLength(18);
            builder.Property(x => x.ProductNameP).HasColumnName(@"ProductNameP").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.ProductId6).HasColumnName(@"ProductID6").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductId2).HasColumnName(@"ProductID2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductIdPack).HasColumnName(@"ProductIDPack").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // SafetyStockReasons
    public class SafetyStockReasonConfiguration : IEntityTypeConfiguration<SafetyStockReason>
    {
        public void Configure(EntityTypeBuilder<SafetyStockReason> builder)
        {
            builder.ToTable("SafetyStockReasons", "dbo");
            builder.HasKey(x => x.SafetyStockReasonId).HasName("PK_SafetyStockReasons").IsClustered();

            builder.Property(x => x.SafetyStockReasonId).HasColumnName(@"SafetyStockReasonID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductId6).HasColumnName(@"ProductID6").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.ReasonTime).HasColumnName(@"ReasonTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Owner).HasColumnName(@"Owner").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductId6Stock).HasColumnName(@"ProductID6_Stock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductIdPackStock).HasColumnName(@"ProductIDPack_Stock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId2Stock).HasColumnName(@"ProductID2_Stock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsCurrent).HasColumnName(@"IsCurrent").HasColumnType("bit").IsRequired(false);
        }
    }

    // SafetyStockReasonDefinitions
    public class SafetyStockReasonDefinitionConfiguration : IEntityTypeConfiguration<SafetyStockReasonDefinition>
    {
        public void Configure(EntityTypeBuilder<SafetyStockReasonDefinition> builder)
        {
            builder.ToTable("SafetyStockReasonDefinitions", "dbo");
            builder.HasKey(x => x.ReasonId).HasName("PK_Backup2").IsClustered();

            builder.Property(x => x.ReasonId).HasColumnName(@"ReasonID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
        }
    }

    // SalesOrders
    public class SalesOrderConfiguration : IEntityTypeConfiguration<SalesOrder>
    {
        public void Configure(EntityTypeBuilder<SalesOrder> builder)
        {
            builder.ToTable("SalesOrders", "dbo");
            builder.HasKey(x => x.SalesOrderId).HasName("PK__SalesOrd__B14003C20D965AF6").IsClustered();

            builder.Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SalesOrderNumber).HasColumnName(@"SalesOrderNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.SalesOrderDate).HasColumnName(@"SalesOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.SalesOrderRemark).HasColumnName(@"SalesOrderRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OperationCategoryId).HasColumnName(@"OperationCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SoNo).HasColumnName(@"SO_NO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SalesOrderConfirmed).HasColumnName(@"SalesOrderConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.SupplierGroupId).HasColumnName(@"SupplierGroupID").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.SalesOrderDept).HasColumnName(@"SalesOrderDept").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.SalesOrders).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SaleOrder_Customer");
            builder.HasOne(a => a.CustomerClient).WithMany(b => b.SalesOrders).HasForeignKey(c => c.StoreId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SaleOrder_CustomerClients");
        }
    }

    // SalesOrderProducts
    public class SalesOrderProductConfiguration : IEntityTypeConfiguration<SalesOrderProduct>
    {
        public void Configure(EntityTypeBuilder<SalesOrderProduct> builder)
        {
            builder.ToTable("SalesOrderProducts", "dbo");
            builder.HasKey(x => x.SalesOrderProductId).HasName("PK__SalesOrd__B0C095BCBD7E7F2B").IsClustered();

            builder.Property(x => x.SalesOrderProductId).HasColumnName(@"SalesOrderProductID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.SalesOrderProductRemark).HasColumnName(@"SalesOrderProductRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.ProductNumer).HasColumnName(@"ProductNumer").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PurchasingOrderProductId).HasColumnName(@"PurchasingOrderProductID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedActualCarton).HasColumnName(@"DispatchedActualCarton").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedActualWeight).HasColumnName(@"DispatchedActualWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.DispatchedActualVolume).HasColumnName(@"DispatchedActualVolume").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.StoreBookingCarton).HasColumnName(@"StoreBookingCarton").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StoreBookingWeight).HasColumnName(@"StoreBookingWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.StoreBookingVolume).HasColumnName(@"StoreBookingVolume").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.DispatchedActualBasket1).HasColumnName(@"DispatchedActualBasket1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedActualBasket2).HasColumnName(@"DispatchedActualBasket2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedActualPallet).HasColumnName(@"DispatchedActualPallet").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedGrossWeight).HasColumnName(@"DispatchedGrossWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.DispatchedGrossWeightScale).HasColumnName(@"DispatchedGrossWeightScale").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.PackagingWeight).HasColumnName(@"PackagingWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.SoNo).HasColumnName(@"SO_NO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Lining).HasColumnName(@"Lining").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.BreakCheck).HasColumnName(@"BreakCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.DamageWeightPercent).HasColumnName(@"DamageWeightPercent").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.SopQuarantine).HasColumnName(@"SOPQuarantine").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchedActualBasket3).HasColumnName(@"DispatchedActualBasket3").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedActualBasket4).HasColumnName(@"DispatchedActualBasket4").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedActualBasket5).HasColumnName(@"DispatchedActualBasket5").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedActualBasket6).HasColumnName(@"DispatchedActualBasket6").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Trolley).HasColumnName(@"Trolley").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BasketId).HasColumnName(@"BasketID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BasketQuantity).HasColumnName(@"BasketQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NaturalLossRateSo).HasColumnName(@"NaturalLossRateSO").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PoNo).HasColumnName(@"PO_NO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PoNoLine).HasColumnName(@"PO_NOLine").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Lv).HasColumnName(@"LV").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Lu).HasColumnName(@"LU").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Comm).HasColumnName(@"COMM").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.WhCode).HasColumnName(@"WH_CODE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TillCode).HasColumnName(@"TILL_CODE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ScannedTime).HasColumnName(@"ScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ScannedBy).HasColumnName(@"ScannedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ScannedResult).HasColumnName(@"ScannedResult").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ScannedStatus).HasColumnName(@"ScannedStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Region).HasColumnName(@"REGION").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Pakage1).HasColumnName(@"Pakage1").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Pakage2).HasColumnName(@"Pakage2").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.SalesOrder).WithMany(b => b.SalesOrderProducts).HasForeignKey(c => c.SalesOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SaleOrderProduct_SalesOrderID");
        }
    }

    // Schedules
    public class ScheduleConfiguration : IEntityTypeConfiguration<Schedule>
    {
        public void Configure(EntityTypeBuilder<Schedule> builder)
        {
            builder.ToTable("Schedules", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Schedules").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.AllDay).HasColumnName(@"AllDay").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EventType).HasColumnName(@"EventType").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RecurrenceInfo).HasColumnName(@"RecurrenceInfo").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ReminderInfo).HasColumnName(@"ReminderInfo").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("money").IsRequired(false);
            builder.Property(x => x.ContactInfo).HasColumnName(@"ContactInfo").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // ServicesDefinition
    public class ServicesDefinitionConfiguration : IEntityTypeConfiguration<ServicesDefinition>
    {
        public void Configure(EntityTypeBuilder<ServicesDefinition> builder)
        {
            builder.ToTable("ServicesDefinition", "dbo");
            builder.HasKey(x => x.ServicesDefinitionId).HasName("PK_ServicesDefinition").IsClustered();

            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.ServiceNameVietnamese).HasColumnName(@"ServiceNameVietnamese").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerCategory).HasColumnName(@"CustomerCategory").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ServiceCategory).HasColumnName(@"ServiceCategory").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CheckingQuantityMax).HasColumnName(@"CheckingQuantityMax").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CheckingQuantityMin).HasColumnName(@"CheckingQuantityMin").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.HandlingOvertime).HasColumnName(@"HandlingOvertime").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ServiceType).HasColumnName(@"ServiceType").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ServiceStandardScopeOfWork).HasColumnName(@"ServiceStandardScopeOfWork").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServicePrice).HasColumnName(@"ServicePrice").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.ScopeOfWork).HasColumnName(@"ScopeOfWork").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ScopeOfWorkVietnam).HasColumnName(@"ScopeOfWorkVietnam").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Discontinued).HasColumnName(@"Discontinued").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionMeasureId).HasColumnName(@"ServicesDefinitionMeasureID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Measure).HasColumnName(@"Measure").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.MeasureVietnam).HasColumnName(@"MeasureVietnam").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Vat).HasColumnName(@"VAT").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.MemoLineName).HasColumnName(@"MEMO_LINE_NAME").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.ServiceDescription).HasColumnName(@"ServiceDescription").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ServiceMethod).HasColumnName(@"ServiceMethod").HasColumnType("tinyint").IsRequired(false);

            builder.HasIndex(x => x.ServiceNumber).HasName("IX_ServicesDefinition").IsUnique();
        }
    }

    // ServicesDefinitionMeasures
    public class ServicesDefinitionMeasureConfiguration : IEntityTypeConfiguration<ServicesDefinitionMeasure>
    {
        public void Configure(EntityTypeBuilder<ServicesDefinitionMeasure> builder)
        {
            builder.ToTable("ServicesDefinitionMeasures", "dbo");
            builder.HasKey(x => x.ServicesDefinitionMeasureId).HasName("PK_ServicesDefinitionMeasure").IsClustered();

            builder.Property(x => x.ServicesDefinitionMeasureId).HasColumnName(@"ServicesDefinitionMeasureID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.ServicesDefinitionMeasureVn).HasColumnName(@"ServicesDefinitionMeasureVN").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MeasureDescription).HasColumnName(@"MeasureDescription").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // ServicesDefinition_MEMO_LINE_NAME
    public class ServicesDefinitionMemoLineNameConfiguration : IEntityTypeConfiguration<ServicesDefinitionMemoLineName>
    {
        public void Configure(EntityTypeBuilder<ServicesDefinitionMemoLineName> builder)
        {
            builder.ToTable("ServicesDefinition_MEMO_LINE_NAME", "dbo");
            builder.HasKey(x => x.ServiceNumber).HasName("PK_ServiceDefinition_MEMO_LINE_NAME").IsClustered();

            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired().HasMaxLength(14).ValueGeneratedNever();
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.MemoLineName).HasColumnName(@"MEMO_LINE_NAME").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ServiceDescription).HasColumnName(@"ServiceDescription").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
        }
    }

    // ServicesDefinition_tmp
    public class ServicesDefinitionTmpConfiguration : IEntityTypeConfiguration<ServicesDefinitionTmp>
    {
        public void Configure(EntityTypeBuilder<ServicesDefinitionTmp> builder)
        {
            builder.ToTable("ServicesDefinition_tmp", "dbo");
            builder.HasKey(x => x.ServiceNumber).HasName("PK_ServicesDefinition_tmp").IsClustered();

            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired().HasMaxLength(14).ValueGeneratedNever();
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.ServiceNameVietnamese).HasColumnName(@"ServiceNameVietnamese").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.ServiceDescription).HasColumnName(@"ServiceDescription").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
        }
    }

    // Shifts
    public class ShiftConfiguration : IEntityTypeConfiguration<Shift>
    {
        public void Configure(EntityTypeBuilder<Shift> builder)
        {
            builder.ToTable("Shifts", "dbo");
            builder.HasKey(x => x.ShiftId).HasName("PK_Shifts").IsClustered();

            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.FromTime).HasColumnName(@"FromTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ToTime).HasColumnName(@"ToTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ShiftName).HasColumnName(@"ShiftName").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.WorkingHours).HasColumnName(@"WorkingHours").HasColumnType("tinyint").IsRequired(false);
        }
    }

    // SOLOMON_ContractDetails
    public class SolomonContractDetailConfiguration : IEntityTypeConfiguration<SolomonContractDetail>
    {
        public void Configure(EntityTypeBuilder<SolomonContractDetail> builder)
        {
            builder.ToView("SOLOMON_ContractDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ContractNbr).HasColumnName(@"ContractNbr").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("char(15)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ServiceId).HasColumnName(@"ServiceID").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryId).HasColumnName(@"CuryID").HasColumnType("char(10)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").HasColumnType("datetime2").IsRequired(false);
        }
    }

    // SOLOMON_ServicesDefinition
    public class SolomonServicesDefinitionConfiguration : IEntityTypeConfiguration<SolomonServicesDefinition>
    {
        public void Configure(EntityTypeBuilder<SolomonServicesDefinition> builder)
        {
            builder.ToView("SOLOMON_ServicesDefinition", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ServiceId).HasColumnName(@"serviceID").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("char(60)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(60);
            builder.Property(x => x.Uom).HasColumnName(@"UOM").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
        }
    }

    // SOShipped
    public class SoShippedConfiguration : IEntityTypeConfiguration<SoShipped>
    {
        public void Configure(EntityTypeBuilder<SoShipped> builder)
        {
            builder.ToTable("SOShipped", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__SOShippe__3214EC2772B60657").IsClustered();

            builder.Property(x => x.SoNumber).HasColumnName(@"SONumber").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.TripId).HasColumnName(@"TripID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
        }
    }

    // StationaryRequests
    public class StationaryRequestConfiguration : IEntityTypeConfiguration<StationaryRequest>
    {
        public void Configure(EntityTypeBuilder<StationaryRequest> builder)
        {
            builder.ToTable("StationaryRequests", "dbo");
            builder.HasKey(x => x.StationaryRequestId).HasName("PK_StationaryRequests").IsClustered();

            builder.Property(x => x.StationaryRequestId).HasColumnName(@"StationaryRequestID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.StationaryRequestDate).HasColumnName(@"StationaryRequestDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.RequestedBy).HasColumnName(@"RequestedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.StationaryRequestRemark).HasColumnName(@"StationaryRequestRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EspectedDeliveryDate).HasColumnName(@"EspectedDeliveryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.StationaryRequestOldId).HasColumnName(@"StationaryRequestOldID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // StockMovements
    public class StockMovementConfiguration : IEntityTypeConfiguration<StockMovement>
    {
        public void Configure(EntityTypeBuilder<StockMovement> builder)
        {
            builder.ToTable("StockMovements", "dbo");
            builder.HasKey(x => x.StockMovementId).HasName("PK_StockMovements").IsClustered();

            builder.Property(x => x.StockMovementId).HasColumnName(@"StockMovementID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DateMovement).HasColumnName(@"DateMovement").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Automatic).HasColumnName(@"Automatic").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ReasonMovement).HasColumnName(@"ReasonMovement").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AuthorisedBy).HasColumnName(@"AuthorisedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StockMovementType).HasColumnName(@"StockMovementType").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.SourceLocation).HasColumnName(@"SourceLocation").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DestinationLocation).HasColumnName(@"DestinationLocation").HasColumnType("uniqueidentifier").IsRequired();

            builder.HasIndex(x => x.DateMovement).HasName("IX_SM_DateMovement_Included");
        }
    }

    // StockMovementDetails
    public class StockMovementDetailConfiguration : IEntityTypeConfiguration<StockMovementDetail>
    {
        public void Configure(EntityTypeBuilder<StockMovementDetail> builder)
        {
            builder.ToTable("StockMovementDetails", "dbo");
            builder.HasKey(x => x.StockMovementDetailId).HasName("PK_StockMovementDetails");

            builder.Property(x => x.StockMovementDetailId).HasColumnName(@"StockMovementDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.StockMovementId).HasColumnName(@"StockMovementID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // StockMovementMass
    public class StockMovementMassConfiguration : IEntityTypeConfiguration<StockMovementMass>
    {
        public void Configure(EntityTypeBuilder<StockMovementMass> builder)
        {
            builder.ToTable("StockMovementMass", "dbo");
            builder.HasKey(x => x.StockMovementMassId).HasName("PK_StockMovementMass_1").IsClustered();

            builder.Property(x => x.StockMovementMassDate).HasColumnName(@"StockMovementMassDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.StockMovementMassRemark).HasColumnName(@"StockMovementMassRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StockMovementMassConfirm).HasColumnName(@"StockMovementMassConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.StockMovementMassInformation).HasColumnName(@"StockMovementMassInformation").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StockMovementMassNumber).HasColumnName(@"StockMovementMassNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.IsPrinted).HasColumnName(@"IsPrinted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"Ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.StockMovementMassId).HasColumnName(@"StockMovementMassID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EmployeeId2).HasColumnName(@"EmployeeID2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EmployeeId3).HasColumnName(@"EmployeeID3").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StockMovementMassLocalId).HasColumnName(@"StockMovementMassLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // StockMovementMassPallets
    public class StockMovementMassPalletConfiguration : IEntityTypeConfiguration<StockMovementMassPallet>
    {
        public void Configure(EntityTypeBuilder<StockMovementMassPallet> builder)
        {
            builder.ToTable("StockMovementMassPallets", "dbo");
            builder.HasKey(x => x.StockMovementMassPalletId).HasName("PK_Mass_Pallets").IsClustered();

            builder.Property(x => x.StockMovementMassPalletId).HasColumnName(@"StockMovementMassPalletID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.SourceLocationId).HasColumnName(@"SourceLocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.DestinationLocationId).HasColumnName(@"DestinationLocationID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CanMove).HasColumnName(@"CanMove").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.CanNotAdd).HasColumnName(@"CanNotAdd").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReceivingScannedBy).HasColumnName(@"ReceivingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReceivingScannedTime).HasColumnName(@"ReceivingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PutAwayScannedBy).HasColumnName(@"PutAwayScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PutAwayScannedTime).HasColumnName(@"PutAwayScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.StockMovementMassId).HasColumnName(@"StockMovementMassID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StockOnHandDaily
    public class StockOnHandDailyConfiguration : IEntityTypeConfiguration<StockOnHandDaily>
    {
        public void Configure(EntityTypeBuilder<StockOnHandDaily> builder)
        {
            builder.ToView("StockOnHandDaily", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DateId).HasColumnName(@"DateID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DoneBy).HasColumnName(@"DoneBy").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
        }
    }

    // StockOnHandDailyCapacity
    public class StockOnHandDailyCapacityConfiguration : IEntityTypeConfiguration<StockOnHandDailyCapacity>
    {
        public void Configure(EntityTypeBuilder<StockOnHandDailyCapacity> builder)
        {
            builder.ToView("StockOnHandDailyCapacity", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StockOnHandDailyCapacityId).HasColumnName(@"StockOnHandDailyCapacityID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.QuantityOfLocations).HasColumnName(@"QuantityOfLocations").HasColumnType("int").IsRequired();
            builder.Property(x => x.QuantityOfLocationOff).HasColumnName(@"QuantityOfLocationOff").HasColumnType("int").IsRequired();
            builder.Property(x => x.QuantityOfLocationOccupied).HasColumnName(@"QuantityOfLocationOccupied").HasColumnType("int").IsRequired();
            builder.Property(x => x.DateId).HasColumnName(@"DateID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.QuantityOfLocationsFixed).HasColumnName(@"QuantityOfLocationsFixed").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuantityOfLocationsVirtual).HasColumnName(@"QuantityOfLocationsVirtual").HasColumnType("int").IsRequired(false);
        }
    }

    // StockOnHandDailyDetails
    public class StockOnHandDailyDetailConfiguration : IEntityTypeConfiguration<StockOnHandDailyDetail>
    {
        public void Configure(EntityTypeBuilder<StockOnHandDailyDetail> builder)
        {
            builder.ToView("StockOnHandDailyDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StockOnHandDetailId).HasColumnName(@"StockOnHandDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductLines).HasColumnName(@"ProductLines").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Cartons).HasColumnName(@"Cartons").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DoneBy).HasColumnName(@"DoneBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PalletLow).HasColumnName(@"PalletLow").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletVeryLow).HasColumnName(@"PalletVeryLow").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletVeryHigh).HasColumnName(@"PalletVeryHigh").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletHigh).HasColumnName(@"PalletHigh").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletIn).HasColumnName(@"PalletIn").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DateId).HasColumnName(@"DateID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StockOnHandDailyDetailPallets
    public class StockOnHandDailyDetailPalletConfiguration : IEntityTypeConfiguration<StockOnHandDailyDetailPallet>
    {
        public void Configure(EntityTypeBuilder<StockOnHandDailyDetailPallet> builder)
        {
            builder.ToView("StockOnHandDailyDetailPallets", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StockOnHandDetailPalletId).HasColumnName(@"StockOnHandDetailPalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DateId).HasColumnName(@"DateID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CanMove).HasColumnName(@"CanMove").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.CanNotAdd).HasColumnName(@"CanNotAdd").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BillingCalculated).HasColumnName(@"BillingCalculated").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BillingComments).HasColumnName(@"BillingComments").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.LocationCategoryId).HasColumnName(@"LocationCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // StockOnHandDailyDetailsByRoom
    public class StockOnHandDailyDetailsByRoomConfiguration : IEntityTypeConfiguration<StockOnHandDailyDetailsByRoom>
    {
        public void Configure(EntityTypeBuilder<StockOnHandDailyDetailsByRoom> builder)
        {
            builder.ToView("StockOnHandDailyDetailsByRoom", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StockOnHandDailyByRoomId).HasColumnName(@"StockOnHandDailyByRoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.StockOnHandId).HasColumnName(@"StockOnHandID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.QuantityPallets).HasColumnName(@"QuantityPallets").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.QuantityCartons).HasColumnName(@"QuantityCartons").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.QuantityWeight).HasColumnName(@"QuantityWeight").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StockOnHandDailyInOut
    public class StockOnHandDailyInOutConfiguration : IEntityTypeConfiguration<StockOnHandDailyInOut>
    {
        public void Configure(EntityTypeBuilder<StockOnHandDailyInOut> builder)
        {
            builder.ToView("StockOnHandDailyInOut", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StockOnHandDailyInOutId).HasColumnName(@"StockOnHandDailyInOutID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DateId).HasColumnName(@"DateID").HasColumnType("int").IsRequired();
            builder.Property(x => x.InC).HasColumnName(@"InC").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.InW).HasColumnName(@"InW").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.InP).HasColumnName(@"InP").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.OutC).HasColumnName(@"OutC").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.OutW).HasColumnName(@"OutW").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.OutP).HasColumnName(@"OutP").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // StockOnHandWeekly
    public class StockOnHandWeeklyConfiguration : IEntityTypeConfiguration<StockOnHandWeekly>
    {
        public void Configure(EntityTypeBuilder<StockOnHandWeekly> builder)
        {
            builder.ToView("StockOnHandWeekly", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.WeekId).HasColumnName(@"WeekID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.WeekRemarks).HasColumnName(@"WeekRemarks").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.WeekConfirm).HasColumnName(@"WeekConfirm").HasColumnType("bit").IsRequired();
        }
    }

    // StockOnHandWeeklyDetails
    public class StockOnHandWeeklyDetailConfiguration : IEntityTypeConfiguration<StockOnHandWeeklyDetail>
    {
        public void Configure(EntityTypeBuilder<StockOnHandWeeklyDetail> builder)
        {
            builder.ToView("StockOnHandWeeklyDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DataId).HasColumnName(@"DataID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.WeekId).HasColumnName(@"WeekID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ActualProductLines).HasColumnName(@"ActualProductLines").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ConProductLines).HasColumnName(@"ConProductLines").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OccupiedPallets).HasColumnName(@"OccupiedPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.NumberOfCartons).HasColumnName(@"NumberOfCartons").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.HandlingWeight).HasColumnName(@"HandlingWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.WorkerWeight).HasColumnName(@"WorkerWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.DockHours).HasColumnName(@"DockHours").HasColumnType("float").IsRequired(false);
        }
    }

    // Stores
    public class StoreConfiguration : IEntityTypeConfiguration<Store>
    {
        public void Configure(EntityTypeBuilder<Store> builder)
        {
            builder.ToTable("Stores", "dbo");
            builder.HasKey(x => x.StoreId).HasName("PK_Stores").IsClustered();

            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.StoreDescription).HasColumnName(@"StoreDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StoreVietnam).HasColumnName(@"StoreVietnam").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.RangeId).HasColumnName(@"RangeID").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // store_temp
    public class StoreTempConfiguration : IEntityTypeConfiguration<StoreTemp>
    {
        public void Configure(EntityTypeBuilder<StoreTemp> builder)
        {
            builder.ToTable("store_temp", "dbo");
            builder.HasKey(x => new { x.Wms, x.Hq, x.Type });

            builder.Property(x => x.Wms).HasColumnName(@"WMS").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.Hq).HasColumnName(@"HQ").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // Suppliers
    public class SupplierConfiguration : IEntityTypeConfiguration<Supplier>
    {
        public void Configure(EntityTypeBuilder<Supplier> builder)
        {
            builder.ToTable("Suppliers", "dbo");
            builder.HasKey(x => x.SupplierId).HasName("PK__Suppliers__640DD89F").IsClustered();

            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SupplierCode).HasColumnName(@"SupplierCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.SupplierAddress).HasColumnName(@"SupplierAddress").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.SupplierContactName).HasColumnName(@"SupplierContactName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierTitle).HasColumnName(@"SupplierTitle").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierPhone).HasColumnName(@"SupplierPhone").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierFax).HasColumnName(@"SupplierFax").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierEmail).HasColumnName(@"SupplierEmail").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SupplierRemark).HasColumnName(@"SupplierRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.SupplierFullName).HasColumnName(@"SupplierFullName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StrategicSupplier).HasColumnName(@"StrategicSupplier").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.SupplierTaxCode).HasColumnName(@"SupplierTaxCode").HasColumnType("nvarchar(25)").IsRequired().HasMaxLength(25);
            builder.Property(x => x.SupplierBankAccountNumber).HasColumnName(@"SupplierBankAccountNumber").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.SupplierBankAccountName).HasColumnName(@"SupplierBankAccountName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SupplierOldId).HasColumnName(@"SupplierOldID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupplierMobile).HasColumnName(@"SupplierMobile").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierWebsite).HasColumnName(@"SupplierWebsite").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
        }
    }

    // SyncValidateSaleShipment
    public class SyncValidateSaleShipmentConfiguration : IEntityTypeConfiguration<SyncValidateSaleShipment>
    {
        public void Configure(EntityTypeBuilder<SyncValidateSaleShipment> builder)
        {
            builder.ToTable("SyncValidateSaleShipment", "dbo");
            builder.HasKey(x => x.ValidateId).HasName("PK__SyncVali__FA699D5BA92D1EA2");

            builder.Property(x => x.ValidateId).HasColumnName(@"ValidateID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WmsTripNumber).HasColumnName(@"WMS_TripNumber").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.WmsShipTo).HasColumnName(@"WMS_ShipTo").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.WmsWeight).HasColumnName(@"WMS_Weight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WmsTotalPakage).HasColumnName(@"WMS_TotalPakage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WmsVehicleNo).HasColumnName(@"WMS_VehicleNo").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.AtmTripNumber).HasColumnName(@"ATM_TripNumber").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.AtmShipTo).HasColumnName(@"ATM_ShipTo").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.OtmOrderBooking).HasColumnName(@"OTM_OrderBooking").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.AtmVehicleNo).HasColumnName(@"ATM_VehicleNo").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.WmsDriverName).HasColumnName(@"WMS_DriverName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ResultCheckAtmShipmmentId).HasColumnName(@"ResultCheck_ATM_ShipmmentID").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ResultCheckAtmShipto).HasColumnName(@"ResultCheck_ATM_Shipto").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ResultCheckOtmOtherBooking).HasColumnName(@"ResultCheck_OTM_OtherBooking").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ResultCode).HasColumnName(@"ResultCode").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ResultCheckAtmVehicleNo).HasColumnName(@"ResultCheck_ATM_VehicleNo").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Customer).HasColumnName(@"Customer").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.DeletedTime).HasColumnName(@"DeletedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CofirmedBy).HasColumnName(@"CofirmedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ResultCheckTotalShipTo).HasColumnName(@"ResultCheck_TotalShipTo").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"ShipToLocation").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);

            builder.HasIndex(x => new { x.WmsTripNumber, x.CreatedBy, x.CreatedTime }).HasName("index_TripNumber_SyncValidateShipMent");
        }
    }

    // TableLog
    public class TableLogConfiguration : IEntityTypeConfiguration<TableLog>
    {
        public void Configure(EntityTypeBuilder<TableLog> builder)
        {
            builder.ToTable("TableLog", "dbo");
            builder.HasKey(x => x.LogId).HasName("PK__TableLog__5E5499A88199D59C").IsClustered();

            builder.Property(x => x.LogId).HasColumnName(@"LogID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreateTime).HasColumnName(@"CreateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.FunctionName).HasColumnName(@"FunctionName").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SqlCommand).HasColumnName(@"SQLCommand").HasColumnType("ntext").IsRequired();
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
        }
    }

    // Tasks
    public class TaskConfiguration : IEntityTypeConfiguration<Task>
    {
        public void Configure(EntityTypeBuilder<Task> builder)
        {
            builder.ToTable("Tasks", "dbo");
            builder.HasKey(x => x.TaskId).HasName("PK_Tasks").IsClustered();

            builder.Property(x => x.TaskId).HasColumnName(@"TaskID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReportId).HasColumnName(@"ReportID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SendVia).HasColumnName(@"SendVia").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Scheduling).HasColumnName(@"Scheduling").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.LastSendTime).HasColumnName(@"LastSendTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TaskResult).HasColumnName(@"TaskResult").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TaskResultDescription).HasColumnName(@"TaskResultDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.NextSendTime).HasColumnName(@"NextSendTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Destination).HasColumnName(@"Destination").HasColumnType("nvarchar(4000)").IsRequired().HasMaxLength(4000);
            builder.Property(x => x.ReportFormat).HasColumnName(@"ReportFormat").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.SendAt).HasColumnName(@"SendAt").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TaskType).HasColumnName(@"TaskType").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // TaskHistories
    public class TaskHistoryConfiguration : IEntityTypeConfiguration<TaskHistory>
    {
        public void Configure(EntityTypeBuilder<TaskHistory> builder)
        {
            builder.ToTable("TaskHistories", "dbo");
            builder.HasKey(x => x.TaskHistoryId).HasName("PK_TaskHistories");

            builder.Property(x => x.TaskHistoryId).HasColumnName(@"TaskHistoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TaskId).HasColumnName(@"TaskID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SentTime).HasColumnName(@"SentTime").HasColumnType("smalldatetime").IsRequired(false);

            builder.HasIndex(x => x.TaskId).HasName("IX_TaskHistories");
            builder.HasIndex(x => x.SentTime).HasName("IX_TaskHistories_1");
        }
    }

    // TempIndexRouteDelivery
    public class TempIndexRouteDeliveryConfiguration : IEntityTypeConfiguration<TempIndexRouteDelivery>
    {
        public void Configure(EntityTypeBuilder<TempIndexRouteDelivery> builder)
        {
            builder.ToTable("TempIndexRouteDelivery", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__TempInde__3214EC275F4DA7D3").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.RouteIndex).HasColumnName(@"RouteIndex").HasColumnType("int").IsRequired();
            builder.Property(x => x.RouteCode).HasColumnName(@"RouteCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ShipTo).HasColumnName(@"ShipTo").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DiverName).HasColumnName(@"DiverName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.TotalTemp).HasColumnName(@"TotalTemp").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Barcode).HasColumnName(@"Barcode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.IndexRow).HasColumnName(@"IndexRow").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeletedBy).HasColumnName(@"DeletedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DeliveryTime).HasColumnName(@"DeliveryTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AtmOrderReleaseId).HasColumnName(@"ATM_OrderReleaseID").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);

            // Foreign keys
            builder.HasOne(a => a.CustomerClient).WithMany(b => b.TempIndexRouteDeliveries).HasForeignKey(c => c.CustomerClientId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TempIndexRouteCustomerClietns");
            builder.HasOne(a => a.DispatchingOrder).WithMany(b => b.TempIndexRouteDeliveries).HasForeignKey(c => c.DispatchingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TempIndexRouteDeliveryDispatchingOrders");
        }
    }

    // Test
    public class TestConfiguration : IEntityTypeConfiguration<Test>
    {
        public void Configure(EntityTypeBuilder<Test> builder)
        {
            builder.ToTable("Test", "dbo");
            builder.HasKey(x => x.TestId).HasName("PK_Test").IsClustered();

            builder.Property(x => x.TestId).HasColumnName(@"TestID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TestTime).HasColumnName(@"TestTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TestRemark).HasColumnName(@"TestRemark").HasColumnType("nvarchar(51)").IsRequired(false).HasMaxLength(51);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductIdQty).HasColumnName(@"ProductIDQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ExpiryDate).HasColumnName(@"ExpiryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalQuantity).HasColumnName(@"TotalQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired(false);
        }
    }

    // TEST2
    public class Test2Configuration : IEntityTypeConfiguration<Test2>
    {
        public void Configure(EntityTypeBuilder<Test2> builder)
        {
            builder.ToTable("TEST2", "dbo");
            builder.HasKey(x => x.IdAuto).HasName("PK_TEST2").IsClustered();

            builder.Property(x => x.IdAuto).HasColumnName(@"idAuto").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.BillingCustomerId).HasColumnName(@"BillingCustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RowCount).HasColumnName(@"ROW_COUNT").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Dd).HasColumnName(@"DD").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Mm).HasColumnName(@"MM").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Kg).HasColumnName(@"KG").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.CartonWeightChar).HasColumnName(@"CartonWeightChar").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
        }
    }

    // Test3
    public class Test3Configuration : IEntityTypeConfiguration<Test3>
    {
        public void Configure(EntityTypeBuilder<Test3> builder)
        {
            builder.ToTable("Test3", "dbo");
            builder.HasKey(x => x.Id1).HasName("PK_Test3").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nchar(10)").IsRequired(false).IsFixedLength().HasMaxLength(10);
            builder.Property(x => x.Id1).HasColumnName(@"ID1").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpAccounting_BillingContractNull
    public class TmpAccountingBillingContractNullConfiguration : IEntityTypeConfiguration<TmpAccountingBillingContractNull>
    {
        public void Configure(EntityTypeBuilder<TmpAccountingBillingContractNull> builder)
        {
            builder.ToTable("tmpAccounting_BillingContractNull", "dbo");
            builder.HasKey(x => new { x.CustId, x.ServiceId, x.CustomerWms, x.ContractNbr });

            builder.Property(x => x.ContractId).HasColumnName(@"ContractID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("char(30)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustId).HasColumnName(@"CustID").HasColumnType("char(15)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.ServiceId).HasColumnName(@"ServiceID").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.CustomerWms).HasColumnName(@"Customer_WMS").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ContractNbr).HasColumnName(@"contractNbr").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.ContractDate).HasColumnName(@"contractDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("datetime").IsRequired(false);
        }
    }

    // tmpAccounting_Revenues
    public class TmpAccountingRevenueConfiguration : IEntityTypeConfiguration<TmpAccountingRevenue>
    {
        public void Configure(EntityTypeBuilder<TmpAccountingRevenue> builder)
        {
            builder.ToTable("tmpAccounting_Revenues", "dbo");
            builder.HasKey(x => x.RecordId);

            builder.Property(x => x.InvoiceNo).HasColumnName(@"InvoiceNo").HasColumnType("char(30)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.InvoiceDate).HasColumnName(@"InvoiceDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceFromDate).HasColumnName(@"InvoiceFromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvoiceToDate).HasColumnName(@"InvoiceToDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BillingNo).HasColumnName(@"BillingNo").HasColumnType("char(10)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerIdOld).HasColumnName(@"CustomerID_old").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.Uom).HasColumnName(@"UOM").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryPrice).HasColumnName(@"CuryPrice").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CuryId).HasColumnName(@"curyID").HasColumnType("char(10)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("char(30)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.RecordId).HasColumnName(@"RecordID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BillType).HasColumnName(@"BillType").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);

            builder.HasIndex(x => x.CustomerIdOld).HasName("IX_tmpAccounting_Revenues");
            builder.HasIndex(x => x.ServiceNumber).HasName("IX_tmpAccounting_Revenues_1");
            builder.HasIndex(x => x.InvoiceToDate).HasName("IX_tmpAccounting_Revenues_2");
            builder.HasIndex(x => x.RecordId).HasName("IX_tmpAccounting_Revenues_3").IsUnique();
        }
    }

    // tmpAisles
    public class TmpAisleConfiguration : IEntityTypeConfiguration<TmpAisle>
    {
        public void Configure(EntityTypeBuilder<TmpAisle> builder)
        {
            builder.ToTable("tmpAisles", "dbo");
            builder.HasKey(x => x.AisleId).HasName("PK_tmpAisle").IsClustered();

            builder.Property(x => x.AisleId).HasColumnName(@"AisleID").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // tmpATMOrderRelaseIDByDate
    public class TmpAtmOrderRelaseIdByDateConfiguration : IEntityTypeConfiguration<TmpAtmOrderRelaseIdByDate>
    {
        public void Configure(EntityTypeBuilder<TmpAtmOrderRelaseIdByDate> builder)
        {
            builder.ToTable("tmpATMOrderRelaseIDByDate", "dbo");
            builder.HasKey(x => new { x.User, x.DeliverDate, x.ShipToName }).HasName("PK__tmpABA_B__AB788FBD54F3EB65").IsClustered();

            builder.Property(x => x.User).HasColumnName(@"User").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.DeliverDate).HasColumnName(@"DeliverDate").HasColumnType("date").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ShipToName).HasColumnName(@"ShipToName").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.AtmOrderReleaseId).HasColumnName(@"ATM_OrderReleaseID").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // tmpBillingByOvertime
    public class TmpBillingByOvertimeConfiguration : IEntityTypeConfiguration<TmpBillingByOvertime>
    {
        public void Configure(EntityTypeBuilder<TmpBillingByOvertime> builder)
        {
            builder.ToTable("tmpBillingByOvertime", "dbo");
            builder.HasKey(x => x.BillingByOverTimeId).HasName("PK_tmpBillingByOverTime").IsClustered();

            builder.Property(x => x.BillingByOverTimeId).HasColumnName(@"BillingByOverTimeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.BillingChecked).HasColumnName(@"BillingChecked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Sunday).HasColumnName(@"Sunday").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("real").IsRequired(false);
        }
    }

    // tmpBillingByProducts
    public class TmpBillingByProductConfiguration : IEntityTypeConfiguration<TmpBillingByProduct>
    {
        public void Configure(EntityTypeBuilder<TmpBillingByProduct> builder)
        {
            builder.ToTable("tmpBillingByProducts", "dbo");
            builder.HasKey(x => x.ProductId).HasName("PK_tmpBillingByProducts").IsClustered();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // tmpBillingCombined
    public class TmpBillingCombinedConfiguration : IEntityTypeConfiguration<TmpBillingCombined>
    {
        public void Configure(EntityTypeBuilder<TmpBillingCombined> builder)
        {
            builder.ToTable("tmpBillingCombined", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpBillingCombined_new").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckCombined).HasColumnName(@"CheckCombined").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpBillingCustomers
    public class TmpBillingCustomerConfiguration : IEntityTypeConfiguration<TmpBillingCustomer>
    {
        public void Configure(EntityTypeBuilder<TmpBillingCustomer> builder)
        {
            builder.ToTable("tmpBillingCustomers", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpBillingCustomers").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LimitedWeight).HasColumnName(@"LimitedWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LimitedPallet).HasColumnName(@"LimitedPallet").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.EndPreviousCarton).HasColumnName(@"EndPreviousCarton").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.EndPreviousWeight).HasColumnName(@"EndPreviousWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.EndPreviousPallet).HasColumnName(@"EndPreviousPallet").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // tmpBillingCustomerJoined
    public class TmpBillingCustomerJoinedConfiguration : IEntityTypeConfiguration<TmpBillingCustomerJoined>
    {
        public void Configure(EntityTypeBuilder<TmpBillingCustomerJoined> builder)
        {
            builder.ToTable("tmpBillingCustomerJoined", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpBillingCustomerJoin").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpBillingCustomersContracts
    public class TmpBillingCustomersContractConfiguration : IEntityTypeConfiguration<TmpBillingCustomersContract>
    {
        public void Configure(EntityTypeBuilder<TmpBillingCustomersContract> builder)
        {
            builder.ToTable("tmpBillingCustomersContracts", "dbo");
            builder.HasKey(x => x.BillingCustomerContractId).HasName("PK__tmpBillingCustom__43A29FBB").IsClustered();

            builder.Property(x => x.BillingCustomerContractId).HasColumnName(@"BillingCustomerContractID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BillingCustomerId).HasColumnName(@"BillingCustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.ServiceRemark).HasColumnName(@"ServiceRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CheckingQuantity).HasColumnName(@"CheckingQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CheckingQuantity2).HasColumnName(@"CheckingQuantity2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ManualUpdate).HasColumnName(@"ManualUpdate").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContractId).HasColumnName(@"ContractID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,5)").IsRequired(false);

            builder.HasIndex(x => x.BillingCustomerId).HasName("IX_tmpBillingCustomersContracts");
        }
    }

    // tmpBillingCustomersContracts_test
    public class TmpBillingCustomersContractsTestConfiguration : IEntityTypeConfiguration<TmpBillingCustomersContractsTest>
    {
        public void Configure(EntityTypeBuilder<TmpBillingCustomersContractsTest> builder)
        {
            builder.ToTable("tmpBillingCustomersContracts_test", "dbo");
            builder.HasKey(x => x.BillingCustomerContractId).HasName("PK_tmpBillingCustomersContracts_test").IsClustered();

            builder.Property(x => x.BillingCustomerContractId).HasColumnName(@"BillingCustomerContractID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BillingCustomerId).HasColumnName(@"BillingCustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.ServiceRemark).HasColumnName(@"ServiceRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CheckingQuantity).HasColumnName(@"CheckingQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CheckingQuantity2).HasColumnName(@"CheckingQuantity2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ManualUpdate).HasColumnName(@"ManualUpdate").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContractId).HasColumnName(@"ContractID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,5)").IsRequired(false);
        }
    }

    // tmpBillingInvoiceSummaryByMonth
    public class TmpBillingInvoiceSummaryByMonthConfiguration : IEntityTypeConfiguration<TmpBillingInvoiceSummaryByMonth>
    {
        public void Configure(EntityTypeBuilder<TmpBillingInvoiceSummaryByMonth> builder)
        {
            builder.ToTable("tmpBillingInvoiceSummaryByMonth", "dbo");
            builder.HasKey(x => x.TmpBillingInvoiceSummaryByMonthId).HasName("PK_tmpBillingInvoiceSummaryByMonths").IsClustered();

            builder.Property(x => x.TmpBillingInvoiceSummaryByMonthId).HasColumnName(@"tmpBillingInvoiceSummaryByMonthID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ServiceType).HasColumnName(@"ServiceType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.AmountVat).HasColumnName(@"AmountVAT").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalAmount).HasColumnName(@"TotalAmount").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Vat).HasColumnName(@"VAT").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BeginStockW).HasColumnName(@"BeginStockW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.EndStockW).HasColumnName(@"EndStockW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BeginStockPlt).HasColumnName(@"BeginStockPlt").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.EndStockPlt).HasColumnName(@"EndStockPlt").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumberAccounting).HasColumnName(@"CustomerNumberAccounting").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.BillingFromDate).HasColumnName(@"BillingFromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BillingToDate).HasColumnName(@"BillingToDate").HasColumnType("datetime").IsRequired(false);
        }
    }

    // tmpBillingInvoiceSummaryByMonthStorage
    public class TmpBillingInvoiceSummaryByMonthStorageConfiguration : IEntityTypeConfiguration<TmpBillingInvoiceSummaryByMonthStorage>
    {
        public void Configure(EntityTypeBuilder<TmpBillingInvoiceSummaryByMonthStorage> builder)
        {
            builder.ToTable("tmpBillingInvoiceSummaryByMonthStorage", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpBillingInvoiceSummaryByMonthStorage").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.BeginStockW).HasColumnName(@"BeginStockW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.EndStockW).HasColumnName(@"EndStockW").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BeginStockPlt).HasColumnName(@"BeginStockPlt").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.EndStockPlt).HasColumnName(@"EndStockPlt").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpBillingReport
    public class TmpBillingReportConfiguration : IEntityTypeConfiguration<TmpBillingReport>
    {
        public void Configure(EntityTypeBuilder<TmpBillingReport> builder)
        {
            builder.ToTable("tmpBillingReport", "dbo");
            builder.HasKey(x => x.BillingDateId).HasName("PK_tmpBillingReport").IsClustered();

            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BeginC).HasColumnName(@"BeginC").HasColumnType("float").IsRequired();
            builder.Property(x => x.BeginW).HasColumnName(@"BeginW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.InC).HasColumnName(@"InC").HasColumnType("float").IsRequired();
            builder.Property(x => x.InW).HasColumnName(@"InW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.OutC).HasColumnName(@"OutC").HasColumnType("float").IsRequired();
            builder.Property(x => x.OutW).HasColumnName(@"OutW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.CloseC).HasColumnName(@"CloseC").HasColumnType("float").IsRequired();
            builder.Property(x => x.CloseW).HasColumnName(@"CloseW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.BeginP).HasColumnName(@"BeginP").HasColumnType("float").IsRequired();
            builder.Property(x => x.InP).HasColumnName(@"InP").HasColumnType("float").IsRequired();
            builder.Property(x => x.OutP).HasColumnName(@"OutP").HasColumnType("float").IsRequired();
            builder.Property(x => x.CloseP).HasColumnName(@"CloseP").HasColumnType("float").IsRequired();
            builder.Property(x => x.BillingDetailBreakdownRemark).HasColumnName(@"BillingDetailBreakdownRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.InCNofee).HasColumnName(@"InCNofee").HasColumnType("decimal(10,0)").IsRequired(false);
            builder.Property(x => x.InWNofee).HasColumnName(@"InWNofee").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.OutCNofee).HasColumnName(@"OutCNofee").HasColumnType("decimal(10,0)").IsRequired(false);
            builder.Property(x => x.OutWNofee).HasColumnName(@"OutWNofee").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.BillingDateId).HasColumnName(@"BillingDateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BillingCustomerId).HasColumnName(@"BillingCustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OverW).HasColumnName(@"OverW").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.StorageWNofee).HasColumnName(@"StorageWNofee").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.StorageCNofee).HasColumnName(@"StorageCNofee").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.StoragePNofee).HasColumnName(@"StoragePNofee").HasColumnType("float").IsRequired(false);

            builder.HasIndex(x => x.ReportDate).HasName("IX_tmpBillingReport_2");
        }
    }

    // tmpBillingReportMain
    public class TmpBillingReportMainConfiguration : IEntityTypeConfiguration<TmpBillingReportMain>
    {
        public void Configure(EntityTypeBuilder<TmpBillingReportMain> builder)
        {
            builder.ToTable("tmpBillingReportMain", "dbo");
            builder.HasKey(x => x.BillingDateId).HasName("PK_tmpBillingReportMain").IsClustered();

            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BeginC).HasColumnName(@"BeginC").HasColumnType("float").IsRequired();
            builder.Property(x => x.BeginW).HasColumnName(@"BeginW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.InC).HasColumnName(@"InC").HasColumnType("float").IsRequired();
            builder.Property(x => x.InW).HasColumnName(@"InW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.OutC).HasColumnName(@"OutC").HasColumnType("float").IsRequired();
            builder.Property(x => x.OutW).HasColumnName(@"OutW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.CloseC).HasColumnName(@"CloseC").HasColumnType("float").IsRequired();
            builder.Property(x => x.CloseW).HasColumnName(@"CloseW").HasColumnType("decimal(13,5)").IsRequired();
            builder.Property(x => x.BeginP).HasColumnName(@"BeginP").HasColumnType("float").IsRequired();
            builder.Property(x => x.InP).HasColumnName(@"InP").HasColumnType("float").IsRequired();
            builder.Property(x => x.OutP).HasColumnName(@"OutP").HasColumnType("float").IsRequired();
            builder.Property(x => x.CloseP).HasColumnName(@"CloseP").HasColumnType("float").IsRequired();
            builder.Property(x => x.BillingDetailBreakdownRemark).HasColumnName(@"BillingDetailBreakdownRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.InCNofee).HasColumnName(@"InCNofee").HasColumnType("decimal(10,0)").IsRequired(false);
            builder.Property(x => x.InWNofee).HasColumnName(@"InWNofee").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.OutCNofee).HasColumnName(@"OutCNofee").HasColumnType("decimal(10,0)").IsRequired(false);
            builder.Property(x => x.OutWNofee).HasColumnName(@"OutWNofee").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.BillingDateId).HasColumnName(@"BillingDateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BillingCustomerId).HasColumnName(@"BillingCustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OverW).HasColumnName(@"OverW").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.StorageWNofee).HasColumnName(@"StorageWNofee").HasColumnType("decimal(13,5)").IsRequired(false);
            builder.Property(x => x.StorageCNofee).HasColumnName(@"StorageCNofee").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.StoragePNofee).HasColumnName(@"StoragePNofee").HasColumnType("float").IsRequired(false);
        }
    }

    // tmpBillingRunByDispatchingOrders
    public class TmpBillingRunByDispatchingOrderConfiguration : IEntityTypeConfiguration<TmpBillingRunByDispatchingOrder>
    {
        public void Configure(EntityTypeBuilder<TmpBillingRunByDispatchingOrder> builder)
        {
            builder.ToTable("tmpBillingRunByDispatchingOrders", "dbo");
            builder.HasKey(x => x.RecordId).HasName("PK_tmpBillingRunByDispatchingOrders").IsClustered();

            builder.Property(x => x.RecordId).HasColumnName(@"RecordID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RoRemark).HasColumnName(@"RORemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ReceivedQty).HasColumnName(@"ReceivedQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(65)").IsRequired(false).HasMaxLength(65);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DispatchingOrderQty).HasColumnName(@"DispatchingOrderQty").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("int").IsRequired();
        }
    }

    // tmpBillingRunByReceivingOrders
    public class TmpBillingRunByReceivingOrderConfiguration : IEntityTypeConfiguration<TmpBillingRunByReceivingOrder>
    {
        public void Configure(EntityTypeBuilder<TmpBillingRunByReceivingOrder> builder)
        {
            builder.ToTable("tmpBillingRunByReceivingOrders", "dbo");
            builder.HasKey(x => x.RecordId).HasName("PK_tmpBillingRunByReceivingOrders").IsClustered();

            builder.Property(x => x.RecordId).HasColumnName(@"RecordID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DispatchedQty).HasColumnName(@"DispatchedQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ReceivingOrderQty).HasColumnName(@"ReceivingOrderQty").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Total).HasColumnName(@"Total").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BillingDays).HasColumnName(@"BillingDays").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DoCustomerRef).HasColumnName(@"DOCustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DoSpecialRequirement).HasColumnName(@"DOSpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DoRemark).HasColumnName(@"DORemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DispatchWeight).HasColumnName(@"DispatchWeight").HasColumnType("decimal(18,3)").IsRequired(false);
        }
    }

    // tmpBillingRunCustomerList
    public class TmpBillingRunCustomerListConfiguration : IEntityTypeConfiguration<TmpBillingRunCustomerList>
    {
        public void Configure(EntityTypeBuilder<TmpBillingRunCustomerList> builder)
        {
            builder.ToTable("tmpBillingRunCustomerList", "dbo");
            builder.HasKey(x => x.CustomerId);

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerType).HasColumnName(@"CustomerType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // tmpChart
    public class TmpChartConfiguration : IEntityTypeConfiguration<TmpChart>
    {
        public void Configure(EntityTypeBuilder<TmpChart> builder)
        {
            builder.ToTable("tmpChart", "dbo");
            builder.HasKey(x => new { x.CustomerMainId, x.ReportId });

            builder.Property(x => x.ProductLines).HasColumnName(@"ProductLines").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Cartons).HasColumnName(@"Cartons").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReportId).HasColumnName(@"ReportID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpCheckSH03Daily
    public class TmpCheckSh03DailyConfiguration : IEntityTypeConfiguration<TmpCheckSh03Daily>
    {
        public void Configure(EntityTypeBuilder<TmpCheckSh03Daily> builder)
        {
            builder.ToView("tmpCheckSH03Daily", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.Ou).HasColumnName(@"OU").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OrderNumber).HasColumnName(@"Order Number").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OrderType).HasColumnName(@"Order Type").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerPo).HasColumnName(@"Customer PO").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"Customer Number").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerName).HasColumnName(@"Customer Name").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.BillToLocation).HasColumnName(@"Bill to Location").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"Ship to Location").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.BillToAddress).HasColumnName(@"Bill to Address").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ShipToAdress).HasColumnName(@"Ship to Adress").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Province).HasColumnName(@"Province").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OrderDate).HasColumnName(@"Order Date").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.DeliveryDate).HasColumnName(@"Delivery Date").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ScheduleDate).HasColumnName(@"Schedule Date").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.OrderItem).HasColumnName(@"Order Item").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ItemDescription).HasColumnName(@"Item Description").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Uom1).HasColumnName(@"Uom 1").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OrderQty1).HasColumnName(@"Order Qty 1").HasColumnType("decimal(10,3)").IsRequired(false);
            builder.Property(x => x.Uom2).HasColumnName(@"Uom 2").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OrderQty2).HasColumnName(@"Order Qty 2").HasColumnType("decimal(10,3)").IsRequired(false);
            builder.Property(x => x.DetailId).HasColumnName(@"Detail ID").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Kho).HasColumnName(@"Kho").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.LinesStatus).HasColumnName(@"Lines Status").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Hold).HasColumnName(@"Hold").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClass).HasColumnName(@"Customer Class").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Sub).HasColumnName(@"Sub").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerPo1).HasColumnName(@"Customer PO1").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Po).HasColumnName(@"PO").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
        }
    }

    // tmpConsumables
    public class TmpConsumableConfiguration : IEntityTypeConfiguration<TmpConsumable>
    {
        public void Configure(EntityTypeBuilder<TmpConsumable> builder)
        {
            builder.ToTable("tmpConsumables", "dbo");
            builder.HasKey(x => x.ConsumableId).HasName("PK_zzz").IsClustered();

            builder.Property(x => x.ConsumableId).HasColumnName(@"ConsumableID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerpackage).HasColumnName(@"WeightPerpackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BeginQty).HasColumnName(@"BeginQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.RemainQty).HasColumnName(@"RemainQty").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // tmpContainerChecking
    public class TmpContainerCheckingConfiguration : IEntityTypeConfiguration<TmpContainerChecking>
    {
        public void Configure(EntityTypeBuilder<TmpContainerChecking> builder)
        {
            builder.ToTable("tmpContainerChecking", "dbo");
            builder.HasKey(x => x.CheckingId).HasName("PK_tmpContainerChecking").IsClustered();

            builder.Property(x => x.CheckingId).HasColumnName(@"CheckingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ContainerNum).HasColumnName(@"ContainerNum").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContainerType).HasColumnName(@"ContainerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Operation).HasColumnName(@"Operation").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.TemperatureShow).HasColumnName(@"TemperatureShow").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TemperatureSetup).HasColumnName(@"TemperatureSetup").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Running).HasColumnName(@"Running").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Thawing).HasColumnName(@"Thawing").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Stop).HasColumnName(@"Stop").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Error).HasColumnName(@"Error").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ProductEmpty).HasColumnName(@"ProductEmpty").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Seal).HasColumnName(@"Seal").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Lock).HasColumnName(@"Lock").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Finished).HasColumnName(@"Finished").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.AttachmentFile).HasColumnName(@"AttachmentFile").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LocationChecking).HasColumnName(@"LocationChecking").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.NoOperation).HasColumnName(@"NoOperation").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Electricity).HasColumnName(@"Electricity").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("nchar(2)").IsRequired(false).IsFixedLength().HasMaxLength(2);
        }
    }

    // tmpContractImports
    public class TmpContractImportConfiguration : IEntityTypeConfiguration<TmpContractImport>
    {
        public void Configure(EntityTypeBuilder<TmpContractImport> builder)
        {
            builder.ToTable("tmpContractImports", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpContractImports").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").HasColumnType("date").IsRequired(false);
        }
    }

    // tmpContractServicePrices
    public class TmpContractServicePriceConfiguration : IEntityTypeConfiguration<TmpContractServicePrice>
    {
        public void Configure(EntityTypeBuilder<TmpContractServicePrice> builder)
        {
            builder.ToTable("tmpContractServicePrices", "dbo");
            builder.HasKey(x => x.ServiceNumber);

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("char(20)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.MaxPrice).HasColumnName(@"MaxPrice").HasColumnType("float").IsRequired(false);
        }
    }

    // tmpCustomerPallets
    public class TmpCustomerPalletConfiguration : IEntityTypeConfiguration<TmpCustomerPallet>
    {
        public void Configure(EntityTypeBuilder<TmpCustomerPallet> builder)
        {
            builder.ToTable("tmpCustomerPallets", "dbo");
            builder.HasKey(x => x.CustomerId);

            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletLow).HasColumnName(@"PalletLow").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletVeryLow).HasColumnName(@"PalletVeryLow").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletVeryHigh).HasColumnName(@"PalletVeryHigh").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletHigh).HasColumnName(@"PalletHigh").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
        }
    }

    // tmpCustomerSalesInvoiceReprt
    public class TmpCustomerSalesInvoiceReprtConfiguration : IEntityTypeConfiguration<TmpCustomerSalesInvoiceReprt>
    {
        public void Configure(EntityTypeBuilder<TmpCustomerSalesInvoiceReprt> builder)
        {
            builder.ToTable("tmpCustomerSalesInvoiceReprt", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpCustomerSalesInvoiceReprt").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerSalesInvoiceId).HasColumnName(@"CustomerSalesInvoiceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientCodeFbv).HasColumnName(@"CustomerClientCodeFBV").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientTaxCode).HasColumnName(@"CustomerClientTaxCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CustomerClientTaxName).HasColumnName(@"CustomerClientTaxName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerClientAddress).HasColumnName(@"CustomerClientAddress").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerSalesInvoiceDate).HasColumnName(@"CustomerSalesInvoiceDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DiscountAmount).HasColumnName(@"DiscountAmount").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.InvoiceOfficialNumber).HasColumnName(@"InvoiceOfficialNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.InvoiceOfficialSerieName).HasColumnName(@"InvoiceOfficialSerieName").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.InvoiceUnit).HasColumnName(@"InvoiceUnit").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.InvoiceQuantity).HasColumnName(@"InvoiceQuantity").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductCategoryDescription).HasColumnName(@"ProductCategoryDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerSalesOrderNumber).HasColumnName(@"CustomerSalesOrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerPurchasingOrderNumber).HasColumnName(@"CustomerPurchasingOrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerClientCreditTerm).HasColumnName(@"CustomerClientCreditTerm").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PageDescription).HasColumnName(@"PageDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductDiscountPercentage).HasColumnName(@"ProductDiscountPercentage").HasColumnType("decimal(18,8)").IsRequired(false);
            builder.Property(x => x.InvoicePrice).HasColumnName(@"InvoicePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TotalAmount).HasColumnName(@"TotalAmount").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TotalDiscountAmount).HasColumnName(@"TotalDiscountAmount").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CustomerClientBuyer).HasColumnName(@"CustomerClientBuyer").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.DiscountAdditional).HasColumnName(@"DiscountAdditional").HasColumnType("float").IsRequired(false);
        }
    }

    // tmpCustomerSalesOrderUnitStandards
    public class TmpCustomerSalesOrderUnitStandardConfiguration : IEntityTypeConfiguration<TmpCustomerSalesOrderUnitStandard>
    {
        public void Configure(EntityTypeBuilder<TmpCustomerSalesOrderUnitStandard> builder)
        {
            builder.ToTable("tmpCustomerSalesOrderUnitStandards", "dbo");
            builder.HasKey(x => new { x.ProductId, x.SalesUnit });

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SalesProductName).HasColumnName(@"SalesProductName").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.SalesUnit).HasColumnName(@"SalesUnit").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.SalesUnitPerPackage).HasColumnName(@"SalesUnitPerPackage").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpDataShipEBS
    public class TmpDataShipEbConfiguration : IEntityTypeConfiguration<TmpDataShipEb>
    {
        public void Configure(EntityTypeBuilder<TmpDataShipEb> builder)
        {
            builder.ToTable("tmpDataShipEBS", "dbo");
            builder.HasKey(x => new { x.So, x.Item, x.CreatedBy }).HasName("PK__tmpDataS__94BBF8C4DA26323F").IsClustered();

            builder.Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired();
            builder.Property(x => x.So).HasColumnName(@"SO").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.ShipToLocation).HasColumnName(@"ShipToLocation").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Item).HasColumnName(@"Item").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.WeightsTotal).HasColumnName(@"WeightsTotal").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Tranporter).HasColumnName(@"Tranporter").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.SortWeightWms).HasColumnName(@"SortWeightWMS").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.SortQtyWms).HasColumnName(@"SortQtyWMS").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // tmpDispatchingOrders
    public class TmpDispatchingOrderConfiguration : IEntityTypeConfiguration<TmpDispatchingOrder>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingOrder> builder)
        {
            builder.ToTable("tmpDispatchingOrders", "dbo");
            builder.HasKey(x => x.DispatchingOrderId).HasName("PK_tmpDispatchingOrderID").IsClustered();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // tmpDispatchingOrderDetailsBreak
    public class TmpDispatchingOrderDetailsBreakConfiguration : IEntityTypeConfiguration<TmpDispatchingOrderDetailsBreak>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingOrderDetailsBreak> builder)
        {
            builder.ToTable("tmpDispatchingOrderDetailsBreak", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpDispatchingOrderDetailsBreak").IsClustered();

            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingLocationId).HasColumnName(@"DispatchingLocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.QuantityOfPackages).HasColumnName(@"QuantityOfPackages").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailRemark).HasColumnName(@"DispatchingOrderDetailRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CheckBreak).HasColumnName(@"CheckBreak").HasColumnType("bit").IsRequired(false);
        }
    }

    // tmpDispatchingProducts
    public class TmpDispatchingProductConfiguration : IEntityTypeConfiguration<TmpDispatchingProduct>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingProduct> builder)
        {
            builder.ToTable("tmpDispatchingProducts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpDispatchingProducts").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // tmpDispatchingProductExport
    public class TmpDispatchingProductExportConfiguration : IEntityTypeConfiguration<TmpDispatchingProductExport>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingProductExport> builder)
        {
            builder.ToTable("tmpDispatchingProductExport", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__tmpDispatchingPr__19232161").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NewProductId).HasColumnName(@"NewProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.NewProductNumber).HasColumnName(@"NewProductNumber").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.NewProductName).HasColumnName(@"NewProductName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.NewWeightPerPackage).HasColumnName(@"NewWeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CheckBreak).HasColumnName(@"CheckBreak").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.NewTotalPackages).HasColumnName(@"NewTotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsChecked).HasColumnName(@"IsChecked").HasColumnType("int").IsRequired();
        }
    }

    // tmpDispatchingProductFromRO
    public class TmpDispatchingProductFromRoConfiguration : IEntityTypeConfiguration<TmpDispatchingProductFromRo>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingProductFromRo> builder)
        {
            builder.ToTable("tmpDispatchingProductFromRO", "dbo");
            builder.HasKey(x => x.ReceivingOrderDetailId).HasName("PK_tmpDispatchingProductFromRO").IsClustered();

            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingQuantity).HasColumnName(@"DispatchingQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivedQuantity).HasColumnName(@"ReceivedQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CheckDispatched).HasColumnName(@"CheckDispatched").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // tmpDispatchingProductPacks
    public class TmpDispatchingProductPackConfiguration : IEntityTypeConfiguration<TmpDispatchingProductPack>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingProductPack> builder)
        {
            builder.ToTable("tmpDispatchingProductPacks", "dbo");
            builder.HasKey(x => x.DispatchingProductPackId).HasName("PK_tmpDispatchingProductPacks").IsClustered();

            builder.Property(x => x.DispatchingProductPackId).HasColumnName(@"DispatchingProductPackID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // tmpDispatchingProductSelectLocation
    public class TmpDispatchingProductSelectLocationConfiguration : IEntityTypeConfiguration<TmpDispatchingProductSelectLocation>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingProductSelectLocation> builder)
        {
            builder.ToTable("tmpDispatchingProductSelectLocation", "dbo");
            builder.HasKey(x => new { x.PalletId, x.CreatedBy }).HasName("PK_tmpDispatchingProductSelectLocation").IsClustered();

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ref).HasColumnName(@"Ref").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Ro).HasColumnName(@"RO").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Date).HasColumnName(@"Date").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RoDetailRemark).HasColumnName(@"RODetailRemark").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.QtyDispatch).HasColumnName(@"QtyDispatch").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remain).HasColumnName(@"Remain").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ResquestFrom).HasColumnName(@"ResquestFrom").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.IsSelect).HasColumnName(@"IsSelect").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsNg).HasColumnName(@"IsNG").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => x.PalletNumber).HasName("IX_tmpDispatchingProductSelectLocation");
            builder.HasIndex(x => new { x.ProductId, x.ReceivingOrderId }).HasName("IX_tmpDispatchingProductSelectLocation_1");
        }
    }

    // tmpDispatchingProductUpsert
    public class TmpDispatchingProductUpsertConfiguration : IEntityTypeConfiguration<TmpDispatchingProductUpsert>
    {
        public void Configure(EntityTypeBuilder<TmpDispatchingProductUpsert> builder)
        {
            builder.ToTable("tmpDispatchingProductUpsert", "dbo");
            builder.HasKey(x => new { x.DispatchingOrderDetailId, x.DispatchingOrderId, x.PalletId }).HasName("PK__tmpDispa__8C59EA00F33C6A05").IsClustered();

            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PackageQuantity).HasColumnName(@"PackageQuantity").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpDistributionMovementByDateReport
    public class TmpDistributionMovementByDateReportConfiguration : IEntityTypeConfiguration<TmpDistributionMovementByDateReport>
    {
        public void Configure(EntityTypeBuilder<TmpDistributionMovementByDateReport> builder)
        {
            builder.ToTable("tmpDistributionMovementByDateReport", "dbo");
            builder.HasKey(x => x.ReportDateId).HasName("PK_tmpDistributionMovementByDateReport").IsClustered();

            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Begin).HasColumnName(@"Begin").HasColumnType("float").IsRequired();
            builder.Property(x => x.In).HasColumnName(@"In").HasColumnType("float").IsRequired();
            builder.Property(x => x.Out).HasColumnName(@"Out").HasColumnType("float").IsRequired();
            builder.Property(x => x.Close).HasColumnName(@"Close").HasColumnType("float").IsRequired();
            builder.Property(x => x.DetailBreakdownRemark).HasColumnName(@"DetailBreakdownRemark").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ReportDateId).HasColumnName(@"ReportDateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpEDIDispatchingProducts
    public class TmpEdiDispatchingProductConfiguration : IEntityTypeConfiguration<TmpEdiDispatchingProduct>
    {
        public void Configure(EntityTypeBuilder<TmpEdiDispatchingProduct> builder)
        {
            builder.ToTable("tmpEDIDispatchingProducts", "dbo");
            builder.HasKey(x => x.DispatchingProductNewId);

            builder.Property(x => x.DispatchingProductNewId).HasColumnName(@"DispatchingProductNewID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DispatchingQuantity).HasColumnName(@"DispatchingQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerReference).HasColumnName(@"CustomerReference").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Fifo).HasColumnName(@"FIFO").HasColumnType("bit").IsRequired(false);
        }
    }

    // tmpEDIOnProcess
    public class TmpEdiOnProcessConfiguration : IEntityTypeConfiguration<TmpEdiOnProcess>
    {
        public void Configure(EntityTypeBuilder<TmpEdiOnProcess> builder)
        {
            builder.ToTable("tmpEDIOnProcess", "dbo");
            builder.HasKey(x => x.EdiOrderNumber).HasName("PK__tmpEDIOn__2A0B8BBBC4977720").IsClustered();

            builder.Property(x => x.EdiOrderNumber).HasColumnName(@"EDIOrderNumber").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // tmpElectrictyCost
    public class TmpElectrictyCostConfiguration : IEntityTypeConfiguration<TmpElectrictyCost>
    {
        public void Configure(EntityTypeBuilder<TmpElectrictyCost> builder)
        {
            builder.ToTable("tmpElectrictyCost", "dbo");
            builder.HasKey(x => new { x.OperatingCostMonthlyId, x.OperatingCostDescription, x.OperatingCostDriverRate, x.OperatingCostId, x.CustomerMainId });

            builder.Property(x => x.OperatingCostMonthlyId).HasColumnName(@"OperatingCostMonthlyID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OperatingCostDescription).HasColumnName(@"OperatingCostDescription").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250).ValueGeneratedNever();
            builder.Property(x => x.S1).HasColumnName(@"S1").HasColumnType("decimal(38,2)").IsRequired(false);
            builder.Property(x => x.OperatingCostDriverRate).HasColumnName(@"OperatingCostDriverRate").HasColumnType("decimal(18,2)").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.S2).HasColumnName(@"S2").HasColumnType("decimal(38,2)").IsRequired(false);
            builder.Property(x => x.OperatingCostId).HasColumnName(@"OperatingCostID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // tmpEmployeeInOutFinger
    public class TmpEmployeeInOutFingerConfiguration : IEntityTypeConfiguration<TmpEmployeeInOutFinger>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeInOutFinger> builder)
        {
            builder.ToTable("tmpEmployeeInOutFinger", "dbo");
            builder.HasKey(x => x.EmployeeInOutId).HasName("PK__tmpEmplo__723D104C55B7F9AC").IsClustered();

            builder.Property(x => x.EmployeeInOutId).HasColumnName(@"EmployeeInOutID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Time).HasColumnName(@"Time").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpEmployeeInOutFinger20190320
    public class TmpEmployeeInOutFinger20190320Configuration : IEntityTypeConfiguration<TmpEmployeeInOutFinger20190320>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeInOutFinger20190320> builder)
        {
            builder.ToTable("tmpEmployeeInOutFinger20190320", "dbo");
            builder.HasKey(x => x.EmployeeInOutId).HasName("PK_tmpEmployeeInOutFinger20190320").IsClustered();

            builder.Property(x => x.EmployeeInOutId).HasColumnName(@"EmployeeInOutID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Time).HasColumnName(@"Time").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FingerMachineId).HasColumnName(@"FingerMachineID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpEmployeeInOutFingerNew
    public class TmpEmployeeInOutFingerNewConfiguration : IEntityTypeConfiguration<TmpEmployeeInOutFingerNew>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeInOutFingerNew> builder)
        {
            builder.ToTable("tmpEmployeeInOutFingerNew", "dbo");
            builder.HasKey(x => x.EmployeeInOutId).HasName("PK_tmpEmployeeInOutFingerNew").IsClustered();

            builder.Property(x => x.EmployeeInOutId).HasColumnName(@"EmployeeInOutID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Time).HasColumnName(@"Time").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpEmployeeLunch
    public class TmpEmployeeLunchConfiguration : IEntityTypeConfiguration<TmpEmployeeLunch>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeLunch> builder)
        {
            builder.ToTable("tmpEmployeeLunch", "dbo");
            builder.HasKey(x => x.EmployeeLunchId).HasName("PK_tmpEmployeeLunch").IsClustered();

            builder.Property(x => x.EmployeeLunchId).HasColumnName(@"EmployeeLunchID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LunchLocation).HasColumnName(@"LunchLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpEmployeeOTSupervisors
    public class TmpEmployeeOtSupervisorConfiguration : IEntityTypeConfiguration<TmpEmployeeOtSupervisor>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeOtSupervisor> builder)
        {
            builder.ToTable("tmpEmployeeOTSupervisors", "dbo");
            builder.HasKey(x => x.EmployeeOtSupervisorId).HasName("PK_EmployeeOTSupervisorstmp_1").IsClustered();

            builder.Property(x => x.EmployeeOtSupervisorId).HasColumnName(@"EmployeeOTSupervisorID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VietNamName).HasColumnName(@"VietNamName").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.HourQuantity).HasColumnName(@"HourQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DayStatus).HasColumnName(@"DayStatus").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.GateNumber).HasColumnName(@"GateNumber").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);

            builder.HasIndex(x => x.EmployeeOtSupervisorId).HasName("IX_EmployeeOTSupervisorstmp");
        }
    }

    // tmpEmployeeWorkings
    public class TmpEmployeeWorkingConfiguration : IEntityTypeConfiguration<TmpEmployeeWorking>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeWorking> builder)
        {
            builder.ToTable("tmpEmployeeWorkings", "dbo");
            builder.HasKey(x => x.TmpEmployeeWorkingId).HasName("PK_tmpEmployeeWorkings_").IsClustered();

            builder.Property(x => x.TmpEmployeeWorkingId).HasColumnName(@"tmpEmployeeWorkingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TruckNo).HasColumnName(@"TruckNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SealNo).HasColumnName(@"SealNo").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Dock).HasColumnName(@"Dock").HasColumnType("nvarchar(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.UserUpdate).HasColumnName(@"UserUpdate").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.TimeUpdate).HasColumnName(@"TimeUpdate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Approve).HasColumnName(@"Approve").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SetupTemperature).HasColumnName(@"SetupTemperature").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.GeneralHandId1).HasColumnName(@"GeneralHandID1").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.GeneralHandId2).HasColumnName(@"GeneralHandID2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.GeneralHandId3).HasColumnName(@"GeneralHandID3").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.GeneralHandId4).HasColumnName(@"GeneralHandID4").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.GeneralHandId5).HasColumnName(@"GeneralHandID5").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PercentGh1).HasColumnName(@"PercentGH1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentGh2).HasColumnName(@"PercentGH2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentGh3).HasColumnName(@"PercentGH3").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentGh4).HasColumnName(@"PercentGH4").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentGh5).HasColumnName(@"PercentGH5").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalPercentGh).HasColumnName(@"TotalPercentGH").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WalkieId1).HasColumnName(@"WalkieID1").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.WalkieId2).HasColumnName(@"WalkieID2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.WalkieId3).HasColumnName(@"WalkieID3").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.WalkieId4).HasColumnName(@"WalkieID4").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PercentWalkieId1).HasColumnName(@"PercentWalkieID1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentWalkieId2).HasColumnName(@"PercentWalkieID2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentWalkieId3).HasColumnName(@"PercentWalkieID3").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentWalkieId4).HasColumnName(@"PercentWalkieID4").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ForkliftDriverId1).HasColumnName(@"ForkliftDriverID1").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ForkliftDriverId2).HasColumnName(@"ForkliftDriverID2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PercentFd1).HasColumnName(@"PercentFD1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentFd2).HasColumnName(@"PercentFD2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupervisorId).HasColumnName(@"SupervisorID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // tmpEmployeeWorkingDetails
    public class TmpEmployeeWorkingDetailConfiguration : IEntityTypeConfiguration<TmpEmployeeWorkingDetail>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeWorkingDetail> builder)
        {
            builder.ToTable("tmpEmployeeWorkingDetails", "dbo");
            builder.HasKey(x => x.TmpEmployeeWorkingDetailId).HasName("PK__tmpEmployeeWorki__3965086A").IsClustered();

            builder.Property(x => x.TmpEmployeeWorkingDetailId).HasColumnName(@"tmpEmployeeWorkingDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);

            builder.HasIndex(x => x.EmployeeId).HasName("IX_tmpEmployeeWorkingDetails");
            builder.HasIndex(x => x.OrderNumber).HasName("IX_tmpEmployeeWorkingDetails_1");
            builder.HasIndex(x => x.OrderDate).HasName("IX_tmpEmployeeWorkingDetails_2");
            builder.HasIndex(x => new { x.EmployeeId, x.TotalWeight, x.OrderDate, x.OrderNumber }).HasName("tmpEmployeeWorkingDetails42");
        }
    }

    // tmpEmployeeWorkingDetailCheck_TotalPerday
    public class TmpEmployeeWorkingDetailCheckTotalPerdayConfiguration : IEntityTypeConfiguration<TmpEmployeeWorkingDetailCheckTotalPerday>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeWorkingDetailCheckTotalPerday> builder)
        {
            builder.ToTable("tmpEmployeeWorkingDetailCheck_TotalPerday", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpEmployeeWorkingDetailCheck_TotalPerday").IsClustered();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TotalWeightPerday).HasColumnName(@"TotalWeightPerday").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cn).HasColumnName(@"CN").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpEmployeeWorkingInvalid
    public class TmpEmployeeWorkingInvalidConfiguration : IEntityTypeConfiguration<TmpEmployeeWorkingInvalid>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeWorkingInvalid> builder)
        {
            builder.ToTable("tmpEmployeeWorkingInvalid", "dbo");
            builder.HasKey(x => x.EmployeeWorkingInvalidId);

            builder.Property(x => x.EmployeeWorkingInvalidId).HasColumnName(@"EmployeeWorkingInvalidID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TonOneHour).HasColumnName(@"TonOneHour").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Hours).HasColumnName(@"Hours").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Owner).HasColumnName(@"Owner").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.NightShift).HasColumnName(@"NightShift").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => x.EmployeeWorkingInvalidId).HasName("IX_tmpEmployeeWorkingInvalid");
            builder.HasIndex(x => x.EmployeeId).HasName("IX_tmpEmployeeWorkingInvalid_1");
            builder.HasIndex(x => x.OrderNumber).HasName("IX_tmpEmployeeWorkingInvalid_2");
        }
    }

    // tmpEmployeeWorkingPercentage
    public class TmpEmployeeWorkingPercentageConfiguration : IEntityTypeConfiguration<TmpEmployeeWorkingPercentage>
    {
        public void Configure(EntityTypeBuilder<TmpEmployeeWorkingPercentage> builder)
        {
            builder.ToTable("tmpEmployeeWorkingPercentage", "dbo");
            builder.HasKey(x => x.EmployeeWorkingPercentageId).HasName("PK_EmployeeWorkingPercentage").IsClustered();

            builder.Property(x => x.EmployeeWorkingPercentageId).HasColumnName(@"EmployeeWorkingPercentageID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("smallint").IsRequired(false);
        }
    }

    // tmpFreeLocations
    public class TmpFreeLocationConfiguration : IEntityTypeConfiguration<TmpFreeLocation>
    {
        public void Configure(EntityTypeBuilder<TmpFreeLocation> builder)
        {
            builder.ToTable("tmpFreeLocations", "dbo");
            builder.HasKey(x => x.RoomId).HasName("PK_tmpFreeLocations_1").IsClustered();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RoomNumber).HasColumnName(@"RoomNumber").HasColumnType("char(2)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.QtyLocation).HasColumnName(@"QtyLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyLow).HasColumnName(@"QtyLow").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyHigh).HasColumnName(@"QtyHigh").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyOfFree).HasColumnName(@"QtyOfFree").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyFreeAfterDp).HasColumnName(@"QtyFreeAfterDP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.QtyFreeLow).HasColumnName(@"QtyFree_Low").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyStandards).HasColumnName(@"QtyStandards").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomRemark).HasColumnName(@"RoomRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.QtyFreeVeryLow).HasColumnName(@"QtyFree_VeryLow").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyFreeVeryHigh).HasColumnName(@"QtyFree_VeryHigh").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyFreeHigh).HasColumnName(@"QtyFree_High").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyOfPalletsOnHand).HasColumnName(@"QtyOfPallets_OnHand").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.QtyOnFloor).HasColumnName(@"QtyOnFloor").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TemperatureFrom).HasColumnName(@"TemperatureFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TemperatureTo).HasColumnName(@"TemperatureTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityFrom).HasColumnName(@"HumidityFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityTo).HasColumnName(@"HumidityTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.QtyLocationOff).HasColumnName(@"QtyLocationOff").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpIDByUserName
    public class TmpIdByUserNameConfiguration : IEntityTypeConfiguration<TmpIdByUserName>
    {
        public void Configure(EntityTypeBuilder<TmpIdByUserName> builder)
        {
            builder.ToTable("tmpIDByUserName", "dbo");
            builder.HasKey(x => new { x.Id, x.Table });

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Table).HasColumnName(@"Table").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // tmpImportRouting
    public class TmpImportRoutingConfiguration : IEntityTypeConfiguration<TmpImportRouting>
    {
        public void Configure(EntityTypeBuilder<TmpImportRouting> builder)
        {
            builder.ToTable("tmpImportRouting", "dbo");
            builder.HasKey(x => new { x.ShipTo, x.Vehicle, x.Driver, x.CreatedBy, x.CustomerClientCode });

            builder.Property(x => x.ShipTo).HasColumnName(@"SHIP_TO").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100).ValueGeneratedNever();
            builder.Property(x => x.ShipTime).HasColumnName(@"SHIP_TIME").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Vehicle).HasColumnName(@"VEHICLE").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.Driver).HasColumnName(@"DRIVER").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150).ValueGeneratedNever();
            builder.Property(x => x.Phone).HasColumnName(@"PHONE").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CUSTOMER_CLIENT_CODE").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.RouteCode).HasColumnName(@"RouteCode").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletNumber1).HasColumnName(@"PalletNumber1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletNumber2).HasColumnName(@"PalletNumber2").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpLabels
    public class TmpLabelConfiguration : IEntityTypeConfiguration<TmpLabel>
    {
        public void Configure(EntityTypeBuilder<TmpLabel> builder)
        {
            builder.ToTable("tmpLabels", "dbo");
            builder.HasKey(x => new { x.Label, x.CustomerName, x.WeightPerPackage });

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.RPallet).HasColumnName(@"R_Pallet").HasColumnType("nvarchar(400)").IsRequired(false).HasMaxLength(400);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.RRo).HasColumnName(@"R_RO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150).ValueGeneratedNever();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SumQuantity).HasColumnName(@"SumQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Label1).HasColumnName(@"Label1").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.GrossWeight).HasColumnName(@"GrossWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DispatchingOrderLocalId).HasColumnName(@"DispatchingOrderLocalID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpLocations
    public class TmpLocationConfiguration : IEntityTypeConfiguration<TmpLocation>
    {
        public void Configure(EntityTypeBuilder<TmpLocation> builder)
        {
            builder.ToTable("tmpLocations", "dbo");
            builder.HasKey(x => x.LocationId).HasName("PK_tmpLocations").IsClustered();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
        }
    }

    // tmpLocationCodes
    public class TmpLocationCodeConfiguration : IEntityTypeConfiguration<TmpLocationCode>
    {
        public void Configure(EntityTypeBuilder<TmpLocationCode> builder)
        {
            builder.ToTable("tmpLocationCodes", "dbo");
            builder.HasKey(x => x.LocationId).HasName("PK_tmpLocationCodes").IsClustered();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("float").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("float").IsRequired(false);
        }
    }

    // tmpLocForStockTake
    public class TmpLocForStockTakeConfiguration : IEntityTypeConfiguration<TmpLocForStockTake>
    {
        public void Configure(EntityTypeBuilder<TmpLocForStockTake> builder)
        {
            builder.ToTable("tmpLocForStockTake", "dbo");
            builder.HasKey(x => x.LocationId).HasName("PK__tmpLocForStockTa__3CC9EE4C").IsClustered();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.High).HasColumnName(@"High").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Used).HasColumnName(@"Used").HasColumnType("smallint").IsRequired();
        }
    }

    // tmpMovementHistory
    public class TmpMovementHistoryConfiguration : IEntityTypeConfiguration<TmpMovementHistory>
    {
        public void Configure(EntityTypeBuilder<TmpMovementHistory> builder)
        {
            builder.ToTable("tmpMovementHistory", "dbo");
            builder.HasKey(x => x.PalletId).HasName("PK_tmpMovementHistory").IsClustered();

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.MovementHistory).HasColumnName(@"MovementHistory").HasColumnType("varchar(5000)").IsRequired(false).IsUnicode(false).HasMaxLength(5000);
        }
    }

    // tmpNoteDispatchingOder
    public class TmpNoteDispatchingOderConfiguration : IEntityTypeConfiguration<TmpNoteDispatchingOder>
    {
        public void Configure(EntityTypeBuilder<TmpNoteDispatchingOder> builder)
        {
            builder.ToTable("tmpNoteDispatchingOder", "dbo");
            builder.HasKey(x => x.NoteDispatchingOderId).HasName("PK_tmpNoteDispatchingOder").IsClustered();

            builder.Property(x => x.NoteDispatchingOderId).HasColumnName(@"NoteDispatchingOderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingOderId).HasColumnName(@"DispatchingOderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.NoteDate).HasColumnName(@"NoteDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.NoteBy).HasColumnName(@"NoteBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
        }
    }

    // tmpNoteDispatchingOderDetail
    public class TmpNoteDispatchingOderDetailConfiguration : IEntityTypeConfiguration<TmpNoteDispatchingOderDetail>
    {
        public void Configure(EntityTypeBuilder<TmpNoteDispatchingOderDetail> builder)
        {
            builder.ToTable("tmpNoteDispatchingOderDetail", "dbo");
            builder.HasKey(x => x.NoteDispatchingOderDetailId).HasName("PK_tmpNoteDispatchingOderDetail").IsClustered();

            builder.Property(x => x.NoteDispatchingOderDetailId).HasColumnName(@"NoteDispatchingOderDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NoteDispatchingOderId).HasColumnName(@"NoteDispatchingOderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LinkImg).HasColumnName(@"LinkImg").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Date).HasColumnName(@"Date").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UploadBy).HasColumnName(@"UploadBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
        }
    }

    // tmpOrders
    public class TmpOrderConfiguration : IEntityTypeConfiguration<TmpOrder>
    {
        public void Configure(EntityTypeBuilder<TmpOrder> builder)
        {
            builder.ToTable("tmpOrders", "dbo");
            builder.HasKey(x => x.OrderId).HasName("PK_tmpOrders").IsClustered();

            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // tmpPayRollAnnual
    public class TmpPayRollAnnualConfiguration : IEntityTypeConfiguration<TmpPayRollAnnual>
    {
        public void Configure(EntityTypeBuilder<TmpPayRollAnnual> builder)
        {
            builder.ToTable("tmpPayRollAnnual", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__tmpEmployeeTimeW__6ECCF4E2").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TimeWorkSum).HasColumnName(@"TimeWorkSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OtnSum).HasColumnName(@"OTNSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OtsSum).HasColumnName(@"OTSSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WorkingDaySum).HasColumnName(@"WorkingDaySum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.LeaveSum).HasColumnName(@"LeaveSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OffSum).HasColumnName(@"OffSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.SickSum).HasColumnName(@"SickSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HaftSum).HasColumnName(@"HaftSum").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PerformanceTotal).HasColumnName(@"PerformanceTotal").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PayRollYearId).HasColumnName(@"PayRollYearID").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.OthSum).HasColumnName(@"OTHSum").HasColumnType("real").IsRequired(false);
        }
    }

    // tmpPayrollAnnualLeaveAll
    public class TmpPayrollAnnualLeaveAllConfiguration : IEntityTypeConfiguration<TmpPayrollAnnualLeaveAll>
    {
        public void Configure(EntityTypeBuilder<TmpPayrollAnnualLeaveAll> builder)
        {
            builder.ToTable("tmpPayrollAnnualLeaveAll", "dbo");
            builder.HasKey(x => x.EmployeeId).HasName("PK_tmpPayrollAnnualLeaveAll").IsClustered();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContractDateFirst).HasColumnName(@"ContractDateFirst").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ManagementLevel).HasColumnName(@"ManagementLevel").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IdCardNumber).HasColumnName(@"IDCardNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Lea).HasColumnName(@"LEA").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DateOfEntry).HasColumnName(@"DateOfEntry").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LeaveAllowance).HasColumnName(@"LeaveAllowance").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpPayrollMonthlyDetails
    public class TmpPayrollMonthlyDetailConfiguration : IEntityTypeConfiguration<TmpPayrollMonthlyDetail>
    {
        public void Configure(EntityTypeBuilder<TmpPayrollMonthlyDetail> builder)
        {
            builder.ToTable("tmpPayrollMonthlyDetails", "dbo");
            builder.HasKey(x => x.TmpPayRollMonthlyId).HasName("PK_tmpPayrollMonthlyDetails").IsClustered();

            builder.Property(x => x.TmpPayRollMonthlyId).HasColumnName(@"tmpPayRollMonthlyID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.WorkingDays).HasColumnName(@"WorkingDays").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Abc).HasColumnName(@"ABC").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Performance).HasColumnName(@"Performance").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformanceAverage).HasColumnName(@"PerformanceAverage").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformanceStatus).HasColumnName(@"PerformanceStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.SupervisorAbc).HasColumnName(@"SupervisorABC").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.SupervisorRemark).HasColumnName(@"SupervisorRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PersonnelCheck).HasColumnName(@"PersonnelCheck").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PersonnelRemark).HasColumnName(@"PersonnelRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PersonnelCheckTime).HasColumnName(@"PersonnelCheckTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SafetyCheck).HasColumnName(@"SafetyCheck").HasColumnType("bit").IsRequired();
            builder.Property(x => x.SafetyRemark).HasColumnName(@"SafetyRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SafetyCheckTime).HasColumnName(@"SafetyCheckTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ManagerCheck).HasColumnName(@"ManagerCheck").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ManagerRemark).HasColumnName(@"ManagerRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ManagerCheckTime).HasColumnName(@"ManagerCheckTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.MonthConfirm).HasColumnName(@"MonthConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // tmpPerformanceCheck
    public class TmpPerformanceCheckConfiguration : IEntityTypeConfiguration<TmpPerformanceCheck>
    {
        public void Configure(EntityTypeBuilder<TmpPerformanceCheck> builder)
        {
            builder.ToTable("tmpPerformanceCheck", "dbo");
            builder.HasKey(x => x.OrderNumber).HasName("PK_tmpPerformanceCheck").IsClustered();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired();
        }
    }

    // tmpPickinglistSorting
    public class TmpPickinglistSortingConfiguration : IEntityTypeConfiguration<TmpPickinglistSorting>
    {
        public void Configure(EntityTypeBuilder<TmpPickinglistSorting> builder)
        {
            builder.ToTable("tmpPickinglistSorting", "dbo");
            builder.HasKey(x => new { x.CustomerNumber, x.PalletNumber, x.Item }).HasName("PK__tmpPicki__80FC22D7AB5914AC").IsClustered();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ShipToLocation).HasColumnName(@"ShipToLocation").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Item).HasColumnName(@"Item").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("date").IsRequired();
        }
    }

    // tmpProducts
    public class TmpProductConfiguration : IEntityTypeConfiguration<TmpProduct>
    {
        public void Configure(EntityTypeBuilder<TmpProduct> builder)
        {
            builder.ToTable("tmpProducts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpProducts").IsClustered();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpProductRemains
    public class TmpProductRemainConfiguration : IEntityTypeConfiguration<TmpProductRemain>
    {
        public void Configure(EntityTypeBuilder<TmpProductRemain> builder)
        {
            builder.ToTable("tmpProductRemains", "dbo");
            builder.HasKey(x => x.TmpProductRemainId).HasName("PK_tmpProductRemains");

            builder.Property(x => x.TmpProductRemainId).HasColumnName(@"tmpProductRemainID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TmpCustomerId).HasColumnName(@"tmpCustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TmpProductRemainName).HasColumnName(@"tmpProductRemainName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TmpWeightPerPackage).HasColumnName(@"tmpWeightPerPackage").HasColumnType("decimal(10,5)").IsRequired(false);
            builder.Property(x => x.TmpRemainQuantity).HasColumnName(@"tmpRemainQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TmpProductRemainNumber).HasColumnName(@"tmpProductRemainNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TmpUpdateTime).HasColumnName(@"tmpUpdateTime").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.TmpProductRemainNumber).HasName("IX_tmpProductRemains_1");
        }
    }

    // tmpProductsSQL
    public class TmpProductsSqlConfiguration : IEntityTypeConfiguration<TmpProductsSql>
    {
        public void Configure(EntityTypeBuilder<TmpProductsSql> builder)
        {
            builder.ToTable("tmpProductsSQL", "dbo");
            builder.HasKey(x => x.ProductId).HasName("PK_tmpProductsSQLzzz").IsClustered();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpPropertyI
    public class TmpPropertyIConfiguration : IEntityTypeConfiguration<TmpPropertyI>
    {
        public void Configure(EntityTypeBuilder<TmpPropertyI> builder)
        {
            builder.ToTable("tmpPropertyI", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpPropertyI").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InFdtd).HasColumnName(@"InFDTD").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.PayRollMonthId).HasName("IX_tmpPropertyI");
            builder.HasIndex(x => x.PropertyId).HasName("IX_tmpPropertyI_1");
        }
    }

    // tmpPropertyID
    public class TmpPropertyIdConfiguration : IEntityTypeConfiguration<TmpPropertyId>
    {
        public void Configure(EntityTypeBuilder<TmpPropertyId> builder)
        {
            builder.ToTable("tmpPropertyID", "dbo");
            builder.HasKey(x => x.PropertyId).HasName("PK_tmpPropertyID").IsClustered();

            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // tmpPropertyMonthly
    public class TmpPropertyMonthlyConfiguration : IEntityTypeConfiguration<TmpPropertyMonthly>
    {
        public void Configure(EntityTypeBuilder<TmpPropertyMonthly> builder)
        {
            builder.ToTable("tmpPropertyMonthly", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpPalletBars").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyBegin).HasColumnName(@"Property_Begin").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyIn).HasColumnName(@"Property_In").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyUsed).HasColumnName(@"Property_Used").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyClosing).HasColumnName(@"Property_Closing").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.PayRollMonthId).HasName("IX_tmpPropertyMonthly");
            builder.HasIndex(x => x.PropertyId).HasName("IX_tmpPropertyMonthly_1");
        }
    }

    // tmpPropertyU
    public class TmpPropertyUConfiguration : IEntityTypeConfiguration<TmpPropertyU>
    {
        public void Configure(EntityTypeBuilder<TmpPropertyU> builder)
        {
            builder.ToTable("tmpPropertyU", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__t__7BD1EA45").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyId).HasColumnName(@"PropertyID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UsedFdtd).HasColumnName(@"UsedFDTD").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => x.PayRollMonthId).HasName("IX_tmpPropertyU");
            builder.HasIndex(x => x.PropertyId).HasName("IX_tmpPropertyU_1");
        }
    }

    // tmpReceivingAdvices
    public class TmpReceivingAdviceConfiguration : IEntityTypeConfiguration<TmpReceivingAdvice>
    {
        public void Configure(EntityTypeBuilder<TmpReceivingAdvice> builder)
        {
            builder.ToTable("tmpReceivingAdvices", "dbo");
            builder.HasKey(x => new { x.ReceivingOrderId, x.ReceivingOrderDetailId, x.ProductId, x.OriginalQuantity, x.WeightPerPackage, x.Label, x.PalletId, x.CustomerName });

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Total).HasColumnName(@"Total").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
        }
    }

    // tmpReceivingOrders
    public class TmpReceivingOrderConfiguration : IEntityTypeConfiguration<TmpReceivingOrder>
    {
        public void Configure(EntityTypeBuilder<TmpReceivingOrder> builder)
        {
            builder.ToTable("tmpReceivingOrders", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpReceivingOrders").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("int").IsRequired();
        }
    }

    // tmpReceivingOrderDetails
    public class TmpReceivingOrderDetailConfiguration : IEntityTypeConfiguration<TmpReceivingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<TmpReceivingOrderDetail> builder)
        {
            builder.ToTable("tmpReceivingOrderDetails", "dbo");
            builder.HasKey(x => x.ReceivingOrderDetailId).HasName("PK_tmpReceivingOrderDetails").IsClustered();

            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // tmpReleaseSummary
    public class TmpReleaseSummaryConfiguration : IEntityTypeConfiguration<TmpReleaseSummary>
    {
        public void Configure(EntityTypeBuilder<TmpReleaseSummary> builder)
        {
            builder.ToTable("tmpReleaseSummary", "dbo");
            builder.HasKey(x => x.TmpReleaseSummaryId).HasName("PK_tmpReleaseSummary").IsClustered();

            builder.Property(x => x.TmpReleaseSummaryId).HasColumnName(@"tmpReleaseSummaryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductCategory).HasColumnName(@"ProductCategory").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductGroupDescription).HasColumnName(@"ProductGroupDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Rwfd).HasColumnName(@"RWFD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Dwfd).HasColumnName(@"DWFD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ReleaseWfd).HasColumnName(@"ReleaseWFD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Rwfdtd).HasColumnName(@"RWFDTD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Dwfdtd).HasColumnName(@"DWFDTD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ReleaseWfdtd).HasColumnName(@"ReleaseWFDTD").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // tmpRepeatRows
    public class TmpRepeatRowConfiguration : IEntityTypeConfiguration<TmpRepeatRow>
    {
        public void Configure(EntityTypeBuilder<TmpRepeatRow> builder)
        {
            builder.ToTable("tmpRepeatRows", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RepeatText).HasColumnName(@"RepeatText").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.RepeatCount).HasColumnName(@"RepeatCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyToCount).HasColumnName(@"QtyToCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // tmpReportingServerMultiAttach
    public class TmpReportingServerMultiAttachConfiguration : IEntityTypeConfiguration<TmpReportingServerMultiAttach>
    {
        public void Configure(EntityTypeBuilder<TmpReportingServerMultiAttach> builder)
        {
            builder.ToTable("tmpReportingServerMultiAttach", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpReportingServerMultiAttach").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.Destination).HasColumnName(@"Destination").HasColumnType("varchar(3000)").IsRequired(false).IsUnicode(false).HasMaxLength(3000);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StoreDescription).HasColumnName(@"StoreDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);

            builder.HasIndex(x => x.CustomerNumber).HasName("IX_tmpReportingServerMultiAttach");
        }
    }

    // tmpResults
    public class TmpResultConfiguration : IEntityTypeConfiguration<TmpResult>
    {
        public void Configure(EntityTypeBuilder<TmpResult> builder)
        {
            builder.ToTable("tmpResults", "dbo");
            builder.HasKey(x => x.ResultId).HasName("PK_tmpResults").IsClustered();

            builder.Property(x => x.ResultId).HasColumnName(@"ResultID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ResultName).HasColumnName(@"ResultName").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ResultText).HasColumnName(@"ResultText").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // tmpRooms
    public class TmpRoomConfiguration : IEntityTypeConfiguration<TmpRoom>
    {
        public void Configure(EntityTypeBuilder<TmpRoom> builder)
        {
            builder.ToTable("tmpRooms", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpRooms").IsClustered();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpRoomOccupancies
    public class TmpRoomOccupancyConfiguration : IEntityTypeConfiguration<TmpRoomOccupancy>
    {
        public void Configure(EntityTypeBuilder<TmpRoomOccupancy> builder)
        {
            builder.ToTable("tmpRoomOccupancies", "dbo");
            builder.HasKey(x => x.RoomId).HasName("PK_tmpRoomOccupancies").IsClustered();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Capacity).HasColumnName(@"Capacity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Occupancy).HasColumnName(@"Occupancy").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.OccupancyLastYear).HasColumnName(@"OccupancyLastYear").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.OccupancyLastMonth).HasColumnName(@"OccupancyLastMonth").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.OccupancyPreviousMonth).HasColumnName(@"OccupancyPreviousMonth").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.RoomProductStorage).HasColumnName(@"RoomProductStorage").HasColumnType("varchar(550)").IsRequired(false).IsUnicode(false).HasMaxLength(550);
        }
    }

    // tmpScheduled_JobWeeks
    public class TmpScheduledJobWeekConfiguration : IEntityTypeConfiguration<TmpScheduledJobWeek>
    {
        public void Configure(EntityTypeBuilder<TmpScheduledJobWeek> builder)
        {
            builder.ToTable("tmpScheduled_JobWeeks", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__tmpScheduled_Job__7B71F792").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Week).HasColumnName(@"Week").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DateFirstOfWeek).HasColumnName(@"DateFirstOfWeek").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckForChange).HasColumnName(@"CheckForChange").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ScheduledJobDefinitionId).HasColumnName(@"ScheduledJobDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EquipmentId).HasColumnName(@"EquipmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Frequence).HasColumnName(@"Frequence").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Duration).HasColumnName(@"Duration").HasColumnType("real").IsRequired(false);
        }
    }

    // tmpStockCorrectionProducts
    public class TmpStockCorrectionProductConfiguration : IEntityTypeConfiguration<TmpStockCorrectionProduct>
    {
        public void Configure(EntityTypeBuilder<TmpStockCorrectionProduct> builder)
        {
            builder.ToTable("tmpStockCorrectionProducts", "dbo");
            builder.HasKey(x => x.DispatchingProductNewId).HasName("PK_tmpStockCorrectionProducts").IsClustered();

            builder.Property(x => x.DispatchingProductNewId).HasColumnName(@"DispatchingProductNewID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DispatchingQuantity).HasColumnName(@"DispatchingQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RemainQuantity).HasColumnName(@"RemainQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalUnitWeight).HasColumnName(@"TotalUnitWeight").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.CheckDispatched).HasColumnName(@"CheckDispatched").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.SystemFeedback).HasColumnName(@"SystemFeedback").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // tmpStockOnHandByDate
    public class TmpStockOnHandByDateConfiguration : IEntityTypeConfiguration<TmpStockOnHandByDate>
    {
        public void Configure(EntityTypeBuilder<TmpStockOnHandByDate> builder)
        {
            builder.ToTable("tmpStockOnHandByDate", "dbo");
            builder.HasKey(x => x.StockOnHandByDateId).HasName("PK_tmpStockOnHandByDate").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BeginC).HasColumnName(@"BeginC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BeginW).HasColumnName(@"BeginW").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BeginP).HasColumnName(@"BeginP").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Wpp).HasColumnName(@"WPP").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.StockOnHandByDateId).HasColumnName(@"StockOnHandByDateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProductLines).HasColumnName(@"ProductLines").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletLowPercent).HasColumnName(@"PalletLowPercent").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpStockOnHandWeekly
    public class TmpStockOnHandWeeklyConfiguration : IEntityTypeConfiguration<TmpStockOnHandWeekly>
    {
        public void Configure(EntityTypeBuilder<TmpStockOnHandWeekly> builder)
        {
            builder.ToTable("tmpStockOnHandWeekly", "dbo");
            builder.HasKey(x => new { x.TotalOrderWeight, x.TotalWorkerWeight });

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalOrderWeight).HasColumnName(@"TotalOrderWeight").HasColumnType("float").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TotalWorkerWeight).HasColumnName(@"TotalWorkerWeight").HasColumnType("float").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.StockOnHandWeeklyId).HasColumnName(@"StockOnHandWeeklyID").HasColumnType("int").IsRequired(false);
        }
    }

    // tmpStockTakeByRequest
    public class TmpStockTakeByRequestConfiguration : IEntityTypeConfiguration<TmpStockTakeByRequest>
    {
        public void Configure(EntityTypeBuilder<TmpStockTakeByRequest> builder)
        {
            builder.ToTable("tmpStockTakeByRequest", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_TableForInputBaysToPrint").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.FromBay).HasColumnName(@"FromBay").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ToBay).HasColumnName(@"ToBay").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.FromHigh).HasColumnName(@"FromHigh").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ToHigh).HasColumnName(@"ToHigh").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.FromDeep).HasColumnName(@"FromDeep").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ToDeep).HasColumnName(@"ToDeep").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // tmpTrainingCourseImports
    public class TmpTrainingCourseImportConfiguration : IEntityTypeConfiguration<TmpTrainingCourseImport>
    {
        public void Configure(EntityTypeBuilder<TmpTrainingCourseImport> builder)
        {
            builder.ToTable("tmpTrainingCourseImports", "dbo");
            builder.HasKey(x => x.TmpTrainingCourseImportId).HasName("PK_tmpTrainingCourseImports").IsClustered();

            builder.Property(x => x.TmpTrainingCourseImportId).HasColumnName(@"tmpTrainingCourseImportID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpTrucks
    public class TmpTruckConfiguration : IEntityTypeConfiguration<TmpTruck>
    {
        public void Configure(EntityTypeBuilder<TmpTruck> builder)
        {
            builder.ToTable("tmpTrucks", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpTrucks").IsClustered();

            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.BaseLocation).HasColumnName(@"BaseLocation").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.YearOfProduction).HasColumnName(@"YearOfProduction").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ton).HasColumnName(@"Ton").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Frame).HasColumnName(@"Frame").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // tmpUpdateRODO
    public class TmpUpdateRodoConfiguration : IEntityTypeConfiguration<TmpUpdateRodo>
    {
        public void Configure(EntityTypeBuilder<TmpUpdateRodo> builder)
        {
            builder.ToTable("tmpUpdateRODO", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_tmpUpdateRODO").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.OldProductName).HasColumnName(@"OldProductName").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.OldProductNumber).HasColumnName(@"OldProductNumber").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.OldWeightPerPackage).HasColumnName(@"OldWeightPerPackage").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.Updated).HasColumnName(@"Updated").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OrderDetailId).HasColumnName(@"OrderDetailID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // Trainings
    public class TrainingConfiguration : IEntityTypeConfiguration<Training>
    {
        public void Configure(EntityTypeBuilder<Training> builder)
        {
            builder.ToTable("Trainings", "dbo");
            builder.HasKey(x => x.TrainingId).HasName("PK_Trainings");

            builder.Property(x => x.TrainingId).HasColumnName(@"TrainingID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TrainingDate).HasColumnName(@"TrainingDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TrainingLocation).HasColumnName(@"TrainingLocation").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TrainingDescription).HasColumnName(@"TrainingDescription").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.TrainingCost).HasColumnName(@"TrainingCost").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CurrencyUnit).HasColumnName(@"CurrencyUnit").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TrainingDuration).HasColumnName(@"TrainingDuration").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.TrainingConfirmedBy).HasColumnName(@"TrainingConfirmedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TrainingConfirm).HasColumnName(@"TrainingConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeFeedback).HasColumnName(@"EmployeeFeedback").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.CostCoverBy).HasColumnName(@"CostCoverBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DocumentFolder).HasColumnName(@"DocumentFolder").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TrainingDefinitionId).HasColumnName(@"TrainingDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TrainingExpiryDate).HasColumnName(@"TrainingExpiryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TrainingNumber).HasColumnName(@"TrainingNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);

            builder.HasIndex(x => x.TrainingExpiryDate).HasName("IX_Trainings_1");
            builder.HasIndex(x => x.TrainingDate).HasName("IX_Trainings_2");
        }
    }

    // TrainingDefinitions
    public class TrainingDefinitionConfiguration : IEntityTypeConfiguration<TrainingDefinition>
    {
        public void Configure(EntityTypeBuilder<TrainingDefinition> builder)
        {
            builder.ToTable("TrainingDefinitions", "dbo");
            builder.HasKey(x => x.TrainingDefinitionId).HasName("PK_TrainingDefinitions").IsClustered();

            builder.Property(x => x.TrainingDefinitionId).HasColumnName(@"TrainingDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TrainingName).HasColumnName(@"TrainingName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TrainingRemark).HasColumnName(@"TrainingRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.TrainingType).HasColumnName(@"TrainingType").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.StandardFrequence).HasColumnName(@"StandardFrequence").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.DefaultTrainingLocation).HasColumnName(@"DefaultTrainingLocation").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // TrainingDetails
    public class TrainingDetailConfiguration : IEntityTypeConfiguration<TrainingDetail>
    {
        public void Configure(EntityTypeBuilder<TrainingDetail> builder)
        {
            builder.ToTable("TrainingDetails", "dbo");
            builder.HasKey(x => x.TrainingDetailId).HasName("PK_TrainingDetails");

            builder.Property(x => x.TrainingDetailId).HasColumnName(@"TrainingDetailID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TrainingId).HasColumnName(@"TrainingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TrainingDetailCost).HasColumnName(@"TrainingDetailCost").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => new { x.TrainingId, x.EmployeeId }).HasName("IX_TrainingDetails");
        }
    }

    // Transaction
    public class TransactionConfiguration : IEntityTypeConfiguration<Transaction>
    {
        public void Configure(EntityTypeBuilder<Transaction> builder)
        {
            builder.ToTable("Transaction", "dbo");
            builder.HasKey(x => x.TransactionId).HasName("PK_Transaction").IsClustered();

            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TransactionType).HasColumnName(@"TransactionType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);

            builder.HasIndex(x => new { x.OrderNumber, x.CustomerNumber }).HasName("IX_Transaction");
        }
    }

    // Transporters
    public class TransporterConfiguration : IEntityTypeConfiguration<Transporter>
    {
        public void Configure(EntityTypeBuilder<Transporter> builder)
        {
            builder.ToTable("Transporters", "dbo");
            builder.HasKey(x => x.TransporterId).HasName("PK_Transporters").IsClustered();

            builder.Property(x => x.TransporterId).HasColumnName(@"TransporterID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TransporterCode).HasColumnName(@"TransporterCode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TransporterName).HasColumnName(@"TransporterName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Moblie).HasColumnName(@"Moblie").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Contract).HasColumnName(@"Contract").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
        }
    }

    // Trips
    public class TripConfiguration : IEntityTypeConfiguration<Trip>
    {
        public void Configure(EntityTypeBuilder<Trip> builder)
        {
            builder.ToTable("Trips", "dbo");
            builder.HasKey(x => x.TripId).HasName("PK_Trips");

            builder.Property(x => x.TripId).HasColumnName(@"TripID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TripNumber).HasColumnName(@"TripNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.TripDate).HasColumnName(@"TripDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TripConfirmedTime).HasColumnName(@"TripConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TripConfirmed).HasColumnName(@"TripConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TripRemark).HasColumnName(@"TripRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.SealNumber).HasColumnName(@"SealNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.StartWorkingTime).HasColumnName(@"StartWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndWorkingTime).HasColumnName(@"EndWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.InternalRemark).HasColumnName(@"InternalRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.DispatchingOrderProgress).HasColumnName(@"DispatchingOrderProgress").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsAttachment).HasColumnName(@"IsAttachment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.TimeSlotId).HasColumnName(@"TimeSlotID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DockDoorId).HasColumnName(@"DockDoorID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.RouteId).HasColumnName(@"RouteID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TransporterId).HasColumnName(@"TransporterID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TripStatusId).HasColumnName(@"TripStatusID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Routeno).HasColumnName(@"ROUTENO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.AtmShipmentId).HasColumnName(@"ATM_Shipment_ID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);

            builder.HasIndex(x => new { x.TripDate, x.TripId, x.CreatedTime, x.CustomerId, x.ServicesDefinitionId }).HasName("IX_Trips_1");
        }
    }

    // TripDetails
    public class TripDetailConfiguration : IEntityTypeConfiguration<TripDetail>
    {
        public void Configure(EntityTypeBuilder<TripDetail> builder)
        {
            builder.ToTable("TripDetails", "dbo");
            builder.HasKey(x => x.TripDetailId).HasName("PK_TripDetails");

            builder.Property(x => x.TripDetailId).HasColumnName(@"TripDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.TripDetailRemark).HasColumnName(@"TripDetailRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TotalPallets).HasColumnName(@"TotalPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TripStatus).HasColumnName(@"TripStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ExpectedDeliveryTime).HasColumnName(@"ExpectedDeliveryTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CashCollectionAmount).HasColumnName(@"CashCollectionAmount").HasColumnType("decimal(10,0)").IsRequired(false);
            builder.Property(x => x.IsRejected).HasColumnName(@"IsRejected").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.RejectedOrderNumber).HasColumnName(@"RejectedOrderNumber").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.RejectedRemark).HasColumnName(@"RejectedRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TripId).HasColumnName(@"TripID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DeliveredBy).HasColumnName(@"DeliveredBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeliveredTime).HasColumnName(@"DeliveredTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerComments).HasColumnName(@"CustomerComments").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.EarlyDeliveryDate).HasColumnName(@"EarlyDeliveryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.LateDeliveryDate).HasColumnName(@"LateDeliveryDate").HasColumnType("smalldatetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Trip).WithMany(b => b.TripDetails).HasForeignKey(c => c.TripId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TripDetails_Trips");

            builder.HasIndex(x => new { x.OrderNumber, x.TripId }).HasName("IX_TripDetails_1");
        }
    }

    // TripDetailCartons
    public class TripDetailCartonConfiguration : IEntityTypeConfiguration<TripDetailCarton>
    {
        public void Configure(EntityTypeBuilder<TripDetailCarton> builder)
        {
            builder.ToTable("TripDetailCartons", "dbo");
            builder.HasKey(x => x.TripDetailCartonId).HasName("PK_TripDetailCartons").IsClustered();

            builder.Property(x => x.TripDetailCartonId).HasColumnName(@"TripDetailCartonID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TripDetailCartonLocalId).HasColumnName(@"TripDetailCartonLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TripDetailCartonNumber).HasColumnName(@"TripDetailCartonNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.TripDetailId).HasColumnName(@"TripDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired(false);
        }
    }

    // TripDetailCartonUnits
    public class TripDetailCartonUnitConfiguration : IEntityTypeConfiguration<TripDetailCartonUnit>
    {
        public void Configure(EntityTypeBuilder<TripDetailCartonUnit> builder)
        {
            builder.ToTable("TripDetailCartonUnits", "dbo");
            builder.HasKey(x => x.TripDetailCartonUnitId).HasName("PK_TripDetailCartonUnits").IsClustered();

            builder.Property(x => x.TripDetailCartonUnitId).HasColumnName(@"TripDetailCartonUnitID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TripDetailCartonId).HasColumnName(@"TripDetailCartonID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);

            // Foreign keys
            builder.HasOne(a => a.TripDetailCarton).WithMany(b => b.TripDetailCartonUnits).HasForeignKey(c => c.TripDetailCartonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TripDetailCartonUnits_TripDetailCartons");
        }
    }

    // TripDetailStatus
    public class TripDetailStatuConfiguration : IEntityTypeConfiguration<TripDetailStatu>
    {
        public void Configure(EntityTypeBuilder<TripDetailStatu> builder)
        {
            builder.ToTable("TripDetailStatus", "dbo");
            builder.HasKey(x => x.TripStatus).HasName("PK_TripDetailStatus").IsClustered();

            builder.Property(x => x.TripStatus).HasColumnName(@"TripStatus").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TripStatusDescriptions).HasColumnName(@"TripStatusDescriptions").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
        }
    }

    // TripStatus
    public class TripStatuConfiguration : IEntityTypeConfiguration<TripStatu>
    {
        public void Configure(EntityTypeBuilder<TripStatu> builder)
        {
            builder.ToTable("TripStatus", "dbo");
            builder.HasKey(x => x.TripStatusId).HasName("PK_TripStatus").IsClustered();

            builder.Property(x => x.TripStatusId).HasColumnName(@"TripStatusID").HasColumnType("tinyint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TripStatusDescriptions).HasColumnName(@"TripStatusDescriptions").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Trucks
    public class TruckConfiguration : IEntityTypeConfiguration<Truck>
    {
        public void Configure(EntityTypeBuilder<Truck> builder)
        {
            builder.ToTable("Trucks", "dbo");
            builder.HasKey(x => x.TruckNumber);

            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.TruckTypeId).HasColumnName(@"TruckTypeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OwnerName).HasColumnName(@"OwnerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OwnerType).HasColumnName(@"OwnerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RegistrationNumber).HasColumnName(@"RegistrationNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RegistrationNumber2).HasColumnName(@"RegistrationNumber2").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CompartmentType).HasColumnName(@"CompartmentType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Engine).HasColumnName(@"Engine").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Frame).HasColumnName(@"Frame").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.YearOfProduction).HasColumnName(@"YearOfProduction").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OperationArea).HasColumnName(@"OperationArea").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OwnerShip).HasColumnName(@"OwnerShip").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BaseLocation).HasColumnName(@"BaseLocation").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DistributionFuelType).HasColumnName(@"DistributionFuelType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckLocationId).HasColumnName(@"TruckLocationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TruckRemark).HasColumnName(@"TruckRemark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Capacity).HasColumnName(@"Capacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TankCapacity).HasColumnName(@"TankCapacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Norms).HasColumnName(@"Norms").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.NormsWarning).HasColumnName(@"NormsWarning").HasColumnType("decimal(18,3)").IsRequired(false);

            builder.HasIndex(x => new { x.TruckNumber, x.TruckLocationId, x.TruckTypeId }).HasName("IX_Trucks").IsUnique();
            builder.HasIndex(x => x.TruckId).HasName("IX_Trucks_1");
        }
    }

    // TruckBasketDefinition
    public class TruckBasketDefinitionConfiguration : IEntityTypeConfiguration<TruckBasketDefinition>
    {
        public void Configure(EntityTypeBuilder<TruckBasketDefinition> builder)
        {
            builder.ToTable("TruckBasketDefinition", "dbo");
            builder.HasKey(x => x.TruckBasketId).HasName("PK__TruckBas__8B8B382A9D022B7E").IsClustered();

            builder.Property(x => x.TruckBasketId).HasColumnName(@"TruckBasketID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BasketId).HasColumnName(@"BasketID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Inner).HasColumnName(@"Inner").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Vertical).HasColumnName(@"Vertical").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Horizontal).HasColumnName(@"Horizontal").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // TruckDriverHistories
    public class TruckDriverHistoryConfiguration : IEntityTypeConfiguration<TruckDriverHistory>
    {
        public void Configure(EntityTypeBuilder<TruckDriverHistory> builder)
        {
            builder.ToTable("TruckDriverHistories", "dbo");
            builder.HasKey(x => x.TruckDriverHistoryId).HasName("PK_TruckDrivers");

            builder.Property(x => x.TruckDriverHistoryId).HasColumnName(@"TruckDriverHistoryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TruckDriverDate).HasColumnName(@"TruckDriverDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TruckDriverRemark).HasColumnName(@"TruckDriverRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.DriverId).HasColumnName(@"DriverID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);

            builder.HasIndex(x => new { x.DriverId, x.TruckDriverDate }).HasName("IX_TruckDriverHistories");
        }
    }

    // TruckDriverHistoryOrders
    public class TruckDriverHistoryOrderConfiguration : IEntityTypeConfiguration<TruckDriverHistoryOrder>
    {
        public void Configure(EntityTypeBuilder<TruckDriverHistoryOrder> builder)
        {
            builder.ToTable("TruckDriverHistoryOrders", "dbo");
            builder.HasKey(x => x.TruckDriverHistoryOrderId).HasName("PK_TruckDriverOrders");

            builder.Property(x => x.TruckDriverHistoryOrderId).HasColumnName(@"TruckDriverHistoryOrderID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.DocumentNumber).HasColumnName(@"DocumentNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckDriverHistoryId).HasColumnName(@"TruckDriverHistoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Quatity).HasColumnName(@"Quatity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ExpDate).HasColumnName(@"ExpDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Actual).HasColumnName(@"Actual").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.FillTime).HasColumnName(@"FillTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired(false);

            builder.HasIndex(x => new { x.TruckDriverHistoryId, x.OrderDate, x.DocumentNumber }).HasName("IX_TruckDriverHistoryOrders");
        }
    }

    // TruckLocations
    public class TruckLocationConfiguration : IEntityTypeConfiguration<TruckLocation>
    {
        public void Configure(EntityTypeBuilder<TruckLocation> builder)
        {
            builder.ToTable("TruckLocations", "dbo");
            builder.HasKey(x => x.TruckLocationId).HasName("PK_TruckLocations").IsClustered();

            builder.Property(x => x.TruckLocationId).HasColumnName(@"TruckLocationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckLocation_).HasColumnName(@"TruckLocation").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // TruckNorms
    public class TruckNormConfiguration : IEntityTypeConfiguration<TruckNorm>
    {
        public void Configure(EntityTypeBuilder<TruckNorm> builder)
        {
            builder.ToTable("TruckNorms", "dbo");
            builder.HasKey(x => x.TruckNormId).HasName("PK_TruckNorms").IsClustered();

            builder.Property(x => x.TruckNormId).HasColumnName(@"TruckNormID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FromMonth).HasColumnName(@"FromMonth").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ToMonth).HasColumnName(@"ToMonth").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Capacity).HasColumnName(@"Capacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.NormsWarning).HasColumnName(@"NormsWarning").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // Trucks_Import
    public class TrucksImportConfiguration : IEntityTypeConfiguration<TrucksImport>
    {
        public void Configure(EntityTypeBuilder<TrucksImport> builder)
        {
            builder.ToTable("Trucks_Import", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Trucks_Import").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NormsWarning).HasColumnName(@"NormsWarning").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Capacity).HasColumnName(@"Capacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TankCapacity).HasColumnName(@"TankCapacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Norms).HasColumnName(@"Norms").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CompartmentType).HasColumnName(@"CompartmentType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // TruckType
    public class TruckTypeConfiguration : IEntityTypeConfiguration<TruckType>
    {
        public void Configure(EntityTypeBuilder<TruckType> builder)
        {
            builder.ToTable("TruckType", "dbo");
            builder.HasKey(x => x.TruckTypeId).HasName("PK_TruckType").IsClustered();

            builder.Property(x => x.TruckTypeId).HasColumnName(@"TruckTypeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckTypeDescription).HasColumnName(@"TruckTypeDescription").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.WeightCapacity).HasColumnName(@"WeightCapacity").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.VolumeCapacity).HasColumnName(@"VolumeCapacity").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Reefer).HasColumnName(@"Reefer").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TemperatureRange).HasColumnName(@"TemperatureRange").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Norm).HasColumnName(@"Norm").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // UOM_MAPPING
    public class UomMappingConfiguration : IEntityTypeConfiguration<UomMapping>
    {
        public void Configure(EntityTypeBuilder<UomMapping> builder)
        {
            builder.ToTable("UOM_MAPPING", "dbo");
            builder.HasKey(x => new { x.Id, x.PrimaryUom }).HasName("PK__UOM_MAPP__B8B2BCF7A8ABC031").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PrimaryUom).HasColumnName(@"PRIMARY_UOM").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.PrimaryUomMapping).HasColumnName(@"PRIMARY_UOM_MAPPING").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // UserAccounts
    public class UserAccountConfiguration : IEntityTypeConfiguration<UserAccount>
    {
        public void Configure(EntityTypeBuilder<UserAccount> builder)
        {
            builder.ToTable("UserAccounts", "dbo");
            builder.HasKey(x => x.LoginName).HasName("PK_UserAccounts_1");

            builder.Property(x => x.LoginName).HasColumnName(@"LoginName").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LevelOfAuthorization).HasColumnName(@"LevelOfAuthorization").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("int").IsRequired();
            builder.Property(x => x.DefaultCustomer).HasColumnName(@"DefaultCustomer").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsAllowEdi).HasColumnName(@"IsAllowEDI").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UserActive).HasColumnName(@"UserActive").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.WarehouseId).HasColumnName(@"WarehouseID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsOnline).HasColumnName(@"IsOnline").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsAllowOutside).HasColumnName(@"IsAllowOutside").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsAllowChangeStore).HasColumnName(@"IsAllowChangeStore").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LastActivityDate).HasColumnName(@"LastActivityDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ApiCustomerServiceToken).HasColumnName(@"APICustomerServiceToken").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);

            builder.HasIndex(x => x.LoginName).HasName("PK_UserAccounts").IsUnique();
        }
    }

    // UserAccountDeviceMapping
    public class UserAccountDeviceMappingConfiguration : IEntityTypeConfiguration<UserAccountDeviceMapping>
    {
        public void Configure(EntityTypeBuilder<UserAccountDeviceMapping> builder)
        {
            builder.ToTable("UserAccountDeviceMapping", "dbo");
            builder.HasKey(x => x.DeviceNumberId).HasName("PK__UserAcco__2AB7E620AEB2949A").IsClustered();

            builder.Property(x => x.DeviceNumberId).HasColumnName(@"DeviceNumberID").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.DeviceNumberMapping).HasColumnName(@"DeviceNumberMapping").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // UserActionDefinitions
    public class UserActionDefinitionConfiguration : IEntityTypeConfiguration<UserActionDefinition>
    {
        public void Configure(EntityTypeBuilder<UserActionDefinition> builder)
        {
            builder.ToTable("UserActionDefinitions", "dbo");
            builder.HasKey(x => x.ActionId).HasName("PK_WMS_Actions").IsClustered();

            builder.Property(x => x.ActionId).HasColumnName(@"ActionId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ActionName).HasColumnName(@"ActionName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
        }
    }

    // UserApplications
    public class UserApplicationConfiguration : IEntityTypeConfiguration<UserApplication>
    {
        public void Configure(EntityTypeBuilder<UserApplication> builder)
        {
            builder.ToTable("UserApplications", "dbo");
            builder.HasKey(x => x.UserApplicationId).HasName("PK_WMS_UserApplications").IsClustered();

            builder.Property(x => x.UserApplicationId).HasColumnName(@"UserApplicationId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsLockedOut).HasColumnName(@"IsLockedOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastLoginDate).HasColumnName(@"LastLoginDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastPasswordChangedDate).HasColumnName(@"LastPasswordChangedDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastLockoutDate).HasColumnName(@"LastLockoutDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FailedPasswordAttemptCount).HasColumnName(@"FailedPasswordAttemptCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FailedPasswordAttemptWindowStart).HasColumnName(@"FailedPasswordAttemptWindowStart").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FailedPasswordAnswerAttemptCount).HasColumnName(@"FailedPasswordAnswerAttemptCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FailedPasswordAnswerAttemptWindowStart).HasColumnName(@"FailedPasswordAnswerAttemptWindowStart").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.UserApplicationDefinition).WithMany(b => b.UserApplications).HasForeignKey(c => c.ApplicationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WMS_UserApplications_WMS_Applications");
        }
    }

    // UserApplicationDefinitions
    public class UserApplicationDefinitionConfiguration : IEntityTypeConfiguration<UserApplicationDefinition>
    {
        public void Configure(EntityTypeBuilder<UserApplicationDefinition> builder)
        {
            builder.ToTable("UserApplicationDefinitions", "dbo");
            builder.HasKey(x => x.ApplicationId).HasName("PK_WMS_Applications").IsClustered();

            builder.Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplicationName).HasColumnName(@"ApplicationName").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);

            builder.HasIndex(x => x.ApplicationName).HasName("IX_UserApplicationDefinitions").IsUnique();
        }
    }

    // UserApplicationRoles
    public class UserApplicationRoleConfiguration : IEntityTypeConfiguration<UserApplicationRole>
    {
        public void Configure(EntityTypeBuilder<UserApplicationRole> builder)
        {
            builder.ToTable("UserApplicationRoles", "dbo");
            builder.HasKey(x => x.UserApplicationRoleId).HasName("PK_WMS_UsersInRoles").IsClustered();

            builder.Property(x => x.UserApplicationRoleId).HasColumnName(@"UserApplicationRoleId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserApplicationId).HasColumnName(@"UserApplicationId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.UserApplication).WithMany(b => b.UserApplicationRoles).HasForeignKey(c => c.UserApplicationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserApplicationRoles_UserApplications");
            builder.HasOne(a => a.UserRoleDefinition).WithMany(b => b.UserApplicationRoles).HasForeignKey(c => c.RoleId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WMS_UserApplicationRoles_WMS_Roles");
        }
    }

    // UserApplicationRoleGroups
    public class UserApplicationRoleGroupConfiguration : IEntityTypeConfiguration<UserApplicationRoleGroup>
    {
        public void Configure(EntityTypeBuilder<UserApplicationRoleGroup> builder)
        {
            builder.ToTable("UserApplicationRoleGroups", "dbo");
            builder.HasKey(x => x.UserApplicationRoleGroupId).HasName("PK_WMS_UserApplicationRoleGroups").IsClustered();

            builder.Property(x => x.UserApplicationRoleGroupId).HasColumnName(@"UserApplicationRoleGroupId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserApplicationRoleIdDelete).HasColumnName(@"UserApplicationRoleId_Delete").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.UserGroupDefinition).WithMany(b => b.UserApplicationRoleGroups).HasForeignKey(c => c.GroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserApplicationRoleGroups_UserGroupDefinitions");
            builder.HasOne(a => a.UserRoleDefinition).WithMany(b => b.UserApplicationRoleGroups).HasForeignKey(c => c.RoleId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserApplicationRoleGroups_UserRoleDefinitions");
        }
    }

    // UserApplicationRoleGroupFunctions
    public class UserApplicationRoleGroupFunctionConfiguration : IEntityTypeConfiguration<UserApplicationRoleGroupFunction>
    {
        public void Configure(EntityTypeBuilder<UserApplicationRoleGroupFunction> builder)
        {
            builder.ToTable("UserApplicationRoleGroupFunctions", "dbo");
            builder.HasKey(x => x.UserApplicationRoleGroupFunctionId).HasName("PK_WMS_UserApplicationRoleFunctions").IsClustered();

            builder.Property(x => x.UserApplicationRoleGroupFunctionId).HasColumnName(@"UserApplicationRoleGroupFunctionId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserApplicationRoleGroupId).HasColumnName(@"UserApplicationRoleGroupId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.FunctionId).HasColumnName(@"FunctionId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.UserApplicationRoleGroup).WithMany(b => b.UserApplicationRoleGroupFunctions).HasForeignKey(c => c.UserApplicationRoleGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserApplicationRoleGroupFunctions_UserApplicationRoleGroups");
            builder.HasOne(a => a.UserFunctionDefinition).WithMany(b => b.UserApplicationRoleGroupFunctions).HasForeignKey(c => c.FunctionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserApplicationRoleGroupFunctions_UserFunctionDefinitions");
        }
    }

    // UserApplicationRoleGroupFunctionActions
    public class UserApplicationRoleGroupFunctionActionConfiguration : IEntityTypeConfiguration<UserApplicationRoleGroupFunctionAction>
    {
        public void Configure(EntityTypeBuilder<UserApplicationRoleGroupFunctionAction> builder)
        {
            builder.ToTable("UserApplicationRoleGroupFunctionActions", "dbo");
            builder.HasKey(x => x.UserApplicationRoleGroupFunctionActionId).HasName("PK_WMS_UserApplicationRoleFunctionActions").IsClustered();

            builder.Property(x => x.UserApplicationRoleGroupFunctionActionId).HasColumnName(@"UserApplicationRoleGroupFunctionActionId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserApplicationRoleGroupFunctionId).HasColumnName(@"UserApplicationRoleGroupFunctionId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ActionId).HasColumnName(@"ActionId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.UserActionDefinition).WithMany(b => b.UserApplicationRoleGroupFunctionActions).HasForeignKey(c => c.ActionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserApplicationRoleGroupFunctionActions_UserActionDefinitions");
            builder.HasOne(a => a.UserApplicationRoleGroupFunction).WithMany(b => b.UserApplicationRoleGroupFunctionActions).HasForeignKey(c => c.UserApplicationRoleGroupFunctionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserApplicationRoleGroupFunctionActions_UserApplicationRoleGroupFunctions");
        }
    }

    // UserDepartmentDefinitions
    public class UserDepartmentDefinitionConfiguration : IEntityTypeConfiguration<UserDepartmentDefinition>
    {
        public void Configure(EntityTypeBuilder<UserDepartmentDefinition> builder)
        {
            builder.ToTable("UserDepartmentDefinitions", "dbo");
            builder.HasKey(x => x.UserDepartmentDefinitionId).HasName("PK_WMS_Departments").IsClustered();

            builder.Property(x => x.UserDepartmentDefinitionId).HasColumnName(@"UserDepartmentDefinitionID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UserDepartmentDefinitionName).HasColumnName(@"UserDepartmentDefinitionName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // UserFunctionDefinitions
    public class UserFunctionDefinitionConfiguration : IEntityTypeConfiguration<UserFunctionDefinition>
    {
        public void Configure(EntityTypeBuilder<UserFunctionDefinition> builder)
        {
            builder.ToTable("UserFunctionDefinitions", "dbo");
            builder.HasKey(x => x.FunctionId).HasName("PK_WMS_Functions").IsClustered();

            builder.Property(x => x.FunctionId).HasColumnName(@"FunctionId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FunctionName).HasColumnName(@"FunctionName").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.FunctionGroup).HasColumnName(@"FunctionGroup").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FormName).HasColumnName(@"FormName").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.FunctionDescription).HasColumnName(@"FunctionDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IsShowReport).HasColumnName(@"IsShowReport").HasColumnType("bit").IsRequired(false);
        }
    }

    // UserGroups
    public class UserGroupConfiguration : IEntityTypeConfiguration<UserGroup>
    {
        public void Configure(EntityTypeBuilder<UserGroup> builder)
        {
            builder.ToTable("UserGroups", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_UserGroups_1").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LoginName).HasColumnName(@"LoginName").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.UserGroupId).HasColumnName(@"UserGroupID").HasColumnType("tinyint").IsRequired();
        }
    }

    // UserGroupDefinitions
    public class UserGroupDefinitionConfiguration : IEntityTypeConfiguration<UserGroupDefinition>
    {
        public void Configure(EntityTypeBuilder<UserGroupDefinition> builder)
        {
            builder.ToTable("UserGroupDefinitions", "dbo");
            builder.HasKey(x => x.GroupId).HasName("PK_WMS_Groups").IsClustered();

            builder.Property(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.GroupName).HasColumnName(@"GroupName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.GroupDescription).HasColumnName(@"GroupDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // UserRoleDefinitions
    public class UserRoleDefinitionConfiguration : IEntityTypeConfiguration<UserRoleDefinition>
    {
        public void Configure(EntityTypeBuilder<UserRoleDefinition> builder)
        {
            builder.ToTable("UserRoleDefinitions", "dbo");
            builder.HasKey(x => x.RoleId).HasName("PK_WMS_Roles").IsClustered();

            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.UserDepartmentDefinitionId).HasColumnName(@"UserDepartmentDefinitionID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.UserDepartmentDefinition).WithMany(b => b.UserRoleDefinitions).HasForeignKey(c => c.UserDepartmentDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UserRoleDefinitions_UserDepartmentDefinitions");
        }
    }

    // VietnameseStringError
    public class VietnameseStringErrorConfiguration : IEntityTypeConfiguration<VietnameseStringError>
    {
        public void Configure(EntityTypeBuilder<VietnameseStringError> builder)
        {
            builder.ToTable("VietnameseStringError", "dbo");
            builder.HasKey(x => x.StringId).HasName("PK_ProcessingFontBreak").IsClustered();

            builder.Property(x => x.StringId).HasColumnName(@"StringID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.StringDescription).HasColumnName(@"StringDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
        }
    }

    // ViewAllCustomersInout
    public class ViewAllCustomersInoutConfiguration : IEntityTypeConfiguration<ViewAllCustomersInout>
    {
        public void Configure(EntityTypeBuilder<ViewAllCustomersInout> builder)
        {
            builder.ToView("ViewAllCustomersInout", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ctns).HasColumnName(@"Ctns").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Kgs).HasColumnName(@"Kgs").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.InternalRemark).HasColumnName(@"InternalRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // ViewAndroid_ContainerCheckingLast
    public class ViewAndroidContainerCheckingLastConfiguration : IEntityTypeConfiguration<ViewAndroidContainerCheckingLast>
    {
        public void Configure(EntityTypeBuilder<ViewAndroidContainerCheckingLast> builder)
        {
            builder.ToView("ViewAndroid_ContainerCheckingLast", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Time).HasColumnName(@"Time").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserCheck).HasColumnName(@"UserCheck").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // ViewAndroid_ContainerCheckingLatest
    public class ViewAndroidContainerCheckingLatestConfiguration : IEntityTypeConfiguration<ViewAndroidContainerCheckingLatest>
    {
        public void Configure(EntityTypeBuilder<ViewAndroidContainerCheckingLatest> builder)
        {
            builder.ToView("ViewAndroid_ContainerCheckingLatest", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ContInOutId).HasColumnName(@"ContInOutID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContainerCheckingId).HasColumnName(@"ContainerCheckingID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewAndroid_TruckCheckingLatest
    public class ViewAndroidTruckCheckingLatestConfiguration : IEntityTypeConfiguration<ViewAndroidTruckCheckingLatest>
    {
        public void Configure(EntityTypeBuilder<ViewAndroidTruckCheckingLatest> builder)
        {
            builder.ToView("ViewAndroid_TruckCheckingLatest", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.TruckInOutId).HasColumnName(@"TruckInOutID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContainerCheckingId).HasColumnName(@"ContainerCheckingID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewAnnualLeaveByEmployee
    public class ViewAnnualLeaveByEmployeeConfiguration : IEntityTypeConfiguration<ViewAnnualLeaveByEmployee>
    {
        public void Configure(EntityTypeBuilder<ViewAnnualLeaveByEmployee> builder)
        {
            builder.ToView("ViewAnnualLeaveByEmployee", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Lea).HasColumnName(@"LEA").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewAttachments
    public class ViewAttachmentConfiguration : IEntityTypeConfiguration<ViewAttachment>
    {
        public void Configure(EntityTypeBuilder<ViewAttachment> builder)
        {
            builder.ToView("ViewAttachments", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
        }
    }

    // ViewBarcodeScanDOnotDone
    public class ViewBarcodeScanDOnotDoneConfiguration : IEntityTypeConfiguration<ViewBarcodeScanDOnotDone>
    {
        public void Configure(EntityTypeBuilder<ViewBarcodeScanDOnotDone> builder)
        {
            builder.ToView("ViewBarcodeScanDOnotDone", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // ViewBarcodeScanWrong
    public class ViewBarcodeScanWrongConfiguration : IEntityTypeConfiguration<ViewBarcodeScanWrong>
    {
        public void Configure(EntityTypeBuilder<ViewBarcodeScanWrong> builder)
        {
            builder.ToView("ViewBarcodeScanWrong", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ScannedBy).HasColumnName(@"ScannedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Result).HasColumnName(@"Result").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.DataId).HasColumnName(@"Data_ID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.WorkingRemark).HasColumnName(@"WorkingRemark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // ViewBigC_DeliveryInvoiceQtyByStore
    public class ViewBigCDeliveryInvoiceQtyByStoreConfiguration : IEntityTypeConfiguration<ViewBigCDeliveryInvoiceQtyByStore>
    {
        public void Configure(EntityTypeBuilder<ViewBigCDeliveryInvoiceQtyByStore> builder)
        {
            builder.ToView("ViewBigC_DeliveryInvoiceQtyByStore", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeliveryOrderDate).HasColumnName(@"DeliveryOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.InvoiceQty).HasColumnName(@"InvoiceQty").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewBigC_DeliveryOrderID
    public class ViewBigCDeliveryOrderIdConfiguration : IEntityTypeConfiguration<ViewBigCDeliveryOrderId>
    {
        public void Configure(EntityTypeBuilder<ViewBigCDeliveryOrderId> builder)
        {
            builder.ToView("ViewBigC_DeliveryOrderID", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DeliveryOrderId).HasColumnName(@"DeliveryOrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DeliveryOrderDate).HasColumnName(@"DeliveryOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.OperationCategoryId).HasColumnName(@"OperationCategoryID").HasColumnType("tinyint").IsRequired(false);
        }
    }

    // ViewBigC_DeliveryOrderInvoiceQty
    public class ViewBigCDeliveryOrderInvoiceQtyConfiguration : IEntityTypeConfiguration<ViewBigCDeliveryOrderInvoiceQty>
    {
        public void Configure(EntityTypeBuilder<ViewBigCDeliveryOrderInvoiceQty> builder)
        {
            builder.ToView("ViewBigC_DeliveryOrderInvoiceQty", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DeliveryOrderId).HasColumnName(@"DeliveryOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.InvoiceQty).HasColumnName(@"InvoiceQty").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewBigC_DispatchingSummaryByClients
    public class ViewBigCDispatchingSummaryByClientConfiguration : IEntityTypeConfiguration<ViewBigCDispatchingSummaryByClient>
    {
        public void Configure(EntityTypeBuilder<ViewBigCDispatchingSummaryByClient> builder)
        {
            builder.ToView("ViewBigC_DispatchingSummaryByClients", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TotalPallets).HasColumnName(@"TotalPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewBigC_InvoicesTotalMoney
    public class ViewBigCInvoicesTotalMoneyConfiguration : IEntityTypeConfiguration<ViewBigCInvoicesTotalMoney>
    {
        public void Configure(EntityTypeBuilder<ViewBigCInvoicesTotalMoney> builder)
        {
            builder.ToView("ViewBigC_InvoicesTotalMoney", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TotalMoney).HasColumnName(@"TotalMoney").HasColumnType("decimal(18,1)").IsRequired(false);
        }
    }

    // ViewBigCOutToday
    public class ViewBigCOutTodayConfiguration : IEntityTypeConfiguration<ViewBigCOutToday>
    {
        public void Configure(EntityTypeBuilder<ViewBigCOutToday> builder)
        {
            builder.ToView("ViewBigCOutToday", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DeliveryOrderDate).HasColumnName(@"DeliveryOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.StoreName).HasColumnName(@"StoreName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StoreOrdinalNumber).HasColumnName(@"StoreOrdinalNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierNumber).HasColumnName(@"SupplierNumber").HasColumnType("nvarchar(7)").IsRequired(false).HasMaxLength(7);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BookingPackages).HasColumnName(@"BookingPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BookingWeight).HasColumnName(@"BookingWeight").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.ActualPackages).HasColumnName(@"ActualPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ActualWeight).HasColumnName(@"ActualWeight").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.VeterinaryInspectionRequired).HasColumnName(@"VeterinaryInspectionRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SupplierNameShort).HasColumnName(@"SupplierNameShort").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StructureCode).HasColumnName(@"StructureCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
        }
    }

    // ViewBookingViewAll
    public class ViewBookingViewAllConfiguration : IEntityTypeConfiguration<ViewBookingViewAll>
    {
        public void Configure(EntityTypeBuilder<ViewBookingViewAll> builder)
        {
            builder.ToView("ViewBookingViewAll", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.BookingDate).HasColumnName(@"BookingDate").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.NameDayOfWeek).HasColumnName(@"NameDayOfWeek").HasColumnType("nvarchar(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.BookingDateFull).HasColumnName(@"BookingDateFull").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(15,1)").IsRequired(false);
            builder.Property(x => x.WeightsRo).HasColumnName(@"Weights_RO").HasColumnType("decimal(15,1)").IsRequired(false);
            builder.Property(x => x.WeightsDo).HasColumnName(@"Weights_DO").HasColumnType("decimal(15,1)").IsRequired(false);
            builder.Property(x => x.Pallets).HasColumnName(@"Pallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletsRo).HasColumnName(@"Pallets_RO").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletsDo).HasColumnName(@"Pallets_DO").HasColumnType("int").IsRequired(false);
        }
    }

    // VIEW_CHECK_OVER_ORDER
    public class ViewCheckOverOrderConfiguration : IEntityTypeConfiguration<ViewCheckOverOrder>
    {
        public void Configure(EntityTypeBuilder<ViewCheckOverOrder> builder)
        {
            builder.ToView("VIEW_CHECK_OVER_ORDER", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WMiss).HasColumnName(@"WMiss").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.QtyMiss).HasColumnName(@"QtyMiss").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.NetQuantity).HasColumnName(@"NetQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.EdiOrderDetailId).HasColumnName(@"EDI_OrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ViewConfirmationAll
    public class ViewConfirmationAllConfiguration : IEntityTypeConfiguration<ViewConfirmationAll>
    {
        public void Configure(EntityTypeBuilder<ViewConfirmationAll> builder)
        {
            builder.ToView("ViewConfirmationAll", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Orderdate).HasColumnName(@"orderdate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Username).HasColumnName(@"username").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ordertype).HasColumnName(@"ordertype").HasColumnType("int").IsRequired();
            builder.Property(x => x.Typename).HasColumnName(@"typename").HasColumnType("varchar(17)").IsRequired().IsUnicode(false).HasMaxLength(17);
            builder.Property(x => x.Ordernumber).HasColumnName(@"ordernumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Statusname).HasColumnName(@"statusname").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Customerref).HasColumnName(@"customerref").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.DetailId).HasColumnName(@"detailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TransactionId).HasColumnName(@"transactionID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewConfirmationAllUnion
    public class ViewConfirmationAllUnionConfiguration : IEntityTypeConfiguration<ViewConfirmationAllUnion>
    {
        public void Configure(EntityTypeBuilder<ViewConfirmationAllUnion> builder)
        {
            builder.ToView("ViewConfirmationAllUnion", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Orderdate).HasColumnName(@"orderdate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Username).HasColumnName(@"username").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Ordertype).HasColumnName(@"ordertype").HasColumnType("int").IsRequired();
            builder.Property(x => x.Typename).HasColumnName(@"typename").HasColumnType("varchar(19)").IsRequired().IsUnicode(false).HasMaxLength(19);
            builder.Property(x => x.Ordernumber).HasColumnName(@"ordernumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Statusname).HasColumnName(@"statusname").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Customerref).HasColumnName(@"customerref").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DetailId).HasColumnName(@"detailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TransactionId).HasColumnName(@"transactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // ViewContractMailMerge
    public class ViewContractMailMergeConfiguration : IEntityTypeConfiguration<ViewContractMailMerge>
    {
        public void Configure(EntityTypeBuilder<ViewContractMailMerge> builder)
        {
            builder.ToView("ViewContractMailMerge", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerInvoiceName).HasColumnName(@"CustomerInvoiceName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerInvoiceAddress).HasColumnName(@"CustomerInvoiceAddress").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerInvoiceTaxCode).HasColumnName(@"CustomerInvoiceTaxCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.InsuranceUnit).HasColumnName(@"InsuranceUnit").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.InsuranceUnitValue).HasColumnName(@"InsuranceUnitValue").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.ProductMaxValue).HasColumnName(@"ProductMaxValue").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.AppendixNumber).HasColumnName(@"AppendixNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.AppendixDate).HasColumnName(@"AppendixDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerSignGender).HasColumnName(@"CustomerSignGender").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerSignRepresentative).HasColumnName(@"CustomerSignRepresentative").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerSignPositionEnglish).HasColumnName(@"CustomerSignPositionEnglish").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerSignPositionVietnam).HasColumnName(@"CustomerSignPositionVietnam").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerSignEmail).HasColumnName(@"CustomerSignEmail").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Phone1).HasColumnName(@"Phone1").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Phone2).HasColumnName(@"Phone2").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Fax2).HasColumnName(@"Fax2").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(3000)").IsRequired(false).IsUnicode(false).HasMaxLength(3000);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.StoreDescription).HasColumnName(@"StoreDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewContractsAllCustomers
    public class ViewContractsAllCustomerConfiguration : IEntityTypeConfiguration<ViewContractsAllCustomer>
    {
        public void Configure(EntityTypeBuilder<ViewContractsAllCustomer> builder)
        {
            builder.ToView("ViewContractsAllCustomers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDate).HasColumnName(@"ContractDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.ContractRemark).HasColumnName(@"ContractRemark").HasColumnType("nvarchar(1800)").IsRequired(false).HasMaxLength(1800);
            builder.Property(x => x.InsuranceUnit).HasColumnName(@"InsuranceUnit").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.InsuranceUnitValue).HasColumnName(@"InsuranceUnitValue").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BillingCycle).HasColumnName(@"BillingCycle").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractServicePrice).HasColumnName(@"ContractServicePrice").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ContractDetailRemark).HasColumnName(@"ContractDetailRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CurrencyUnit).HasColumnName(@"CurrencyUnit").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CheckingQuantity).HasColumnName(@"CheckingQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CheckingQuantity2).HasColumnName(@"CheckingQuantity2").HasColumnType("float").IsRequired(false);
        }
    }

    // ViewCustomerContractOTCount
    public class ViewCustomerContractOtCountConfiguration : IEntityTypeConfiguration<ViewCustomerContractOtCount>
    {
        public void Configure(EntityTypeBuilder<ViewCustomerContractOtCount> builder)
        {
            builder.ToView("ViewCustomerContractOTCount", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyOt).HasColumnName(@"QtyOT").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewCustomerSaleContract
    public class ViewCustomerSaleContractConfiguration : IEntityTypeConfiguration<ViewCustomerSaleContract>
    {
        public void Configure(EntityTypeBuilder<ViewCustomerSaleContract> builder)
        {
            builder.ToView("ViewCustomerSaleContract", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.BillToLocation).HasColumnName(@"BILL_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.SalesProductCode).HasColumnName(@"SalesProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SalesProductCode2).HasColumnName(@"SalesProductCode2").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SalesProductName).HasColumnName(@"SalesProductName").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
        }
    }

    // ViewCustomerSalesInvoices
    public class ViewCustomerSalesInvoiceConfiguration : IEntityTypeConfiguration<ViewCustomerSalesInvoice>
    {
        public void Configure(EntityTypeBuilder<ViewCustomerSalesInvoice> builder)
        {
            builder.ToView("ViewCustomerSalesInvoices", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerSalesInvoiceId).HasColumnName(@"CustomerSalesInvoiceID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerSalesInvoiceDate).HasColumnName(@"CustomerSalesInvoiceDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerSalesInvoiceRemark).HasColumnName(@"CustomerSalesInvoiceRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.TotalAmount).HasColumnName(@"TotalAmount").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DiscountAmount).HasColumnName(@"DiscountAmount").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CustomerSalesOrderNumber).HasColumnName(@"CustomerSalesOrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerSalesOrderDate).HasColumnName(@"CustomerSalesOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.InvoiceOfficialNumber).HasColumnName(@"InvoiceOfficialNumber").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.InvoiceOfficialSerieName).HasColumnName(@"InvoiceOfficialSerieName").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.OrderQuantity).HasColumnName(@"OrderQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchedQuantity).HasColumnName(@"DispatchedQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvoiceUnit).HasColumnName(@"InvoiceUnit").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.InvoicePrice).HasColumnName(@"InvoicePrice").HasColumnType("real").IsRequired();
            builder.Property(x => x.InvoiceQuantity).HasColumnName(@"InvoiceQuantity").HasColumnType("real").IsRequired();
            builder.Property(x => x.CustomerSalesInvoiceDetailRemark).HasColumnName(@"CustomerSalesInvoiceDetailRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerPurchasingOrderNumber).HasColumnName(@"CustomerPurchasingOrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductCategoryDescription).HasColumnName(@"ProductCategoryDescription").HasColumnType("char(50)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductNameVn).HasColumnName(@"ProductNameVN").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewCustomerSalesInvoices3PL
    public class ViewCustomerSalesInvoices3PlConfiguration : IEntityTypeConfiguration<ViewCustomerSalesInvoices3Pl>
    {
        public void Configure(EntityTypeBuilder<ViewCustomerSalesInvoices3Pl> builder)
        {
            builder.ToView("ViewCustomerSalesInvoices3PL", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.BatchNumber).HasColumnName(@"Batch Number").HasColumnType("int").IsRequired();
            builder.Property(x => x.EdiLineNumber).HasColumnName(@"EDI Line Number").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Reference40Vr0141).HasColumnName(@"Reference (VR01)").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Reference40Vr0241).HasColumnName(@"Reference (VR02)").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.LineNumber40Lnid41).HasColumnName(@"Line Number (LNID)").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ShipToNumber).HasColumnName(@"Ship To Number").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.OrderDate40Trdj).HasColumnName(@"Order Date (TRDJ").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.InvoiceDate40Ivd41).HasColumnName(@"Invoice Date (IVD)").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.C2NdItemNumber).HasColumnName(@"2nd Item Number").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.QuantityOrdered40Uorg41).HasColumnName(@"Quantity Ordered (UORG)").HasColumnType("real").IsRequired();
            builder.Property(x => x.Um40Uom41).HasColumnName(@"UM (UOM)").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.UnitPrice40Uprc41).HasColumnName(@"Unit Price (UPRC)").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ExtendedPrice).HasColumnName(@"Extended Price").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.DateUpdated).HasColumnName(@"Date Updated").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"User ID").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // ViewCustomerSalesInvoices3PL_Details
    public class ViewCustomerSalesInvoices3PlDetailConfiguration : IEntityTypeConfiguration<ViewCustomerSalesInvoices3PlDetail>
    {
        public void Configure(EntityTypeBuilder<ViewCustomerSalesInvoices3PlDetail> builder)
        {
            builder.ToView("ViewCustomerSalesInvoices3PL_Details", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.BatchNumber).HasColumnName(@"Batch Number").HasColumnType("int").IsRequired();
            builder.Property(x => x.EdiLineNumber).HasColumnName(@"EDI Line Number").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Reference40Vr0141).HasColumnName(@"Reference (VR01)").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Reference40Vr0241).HasColumnName(@"Reference (VR02)").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ShipToNumber).HasColumnName(@"Ship To Number").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderDate40Trdj).HasColumnName(@"Order Date (TRDJ").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.InvoiceDate40Ivd41).HasColumnName(@"Invoice Date (IVD)").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.C2NdItemNumber).HasColumnName(@"2nd Item Number").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.QuantityOrdered40Uorg41).HasColumnName(@"Quantity Ordered (UORG)").HasColumnType("real").IsRequired();
            builder.Property(x => x.Um40Uom41).HasColumnName(@"UM (UOM)").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.UnitPrice40Uprc41).HasColumnName(@"Unit Price (UPRC)").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ExtendedPrice).HasColumnName(@"Extended Price").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DateUpdated).HasColumnName(@"Date Updated").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"User ID").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // ViewDataMasan_01012021
    public class ViewDataMasan01012021Configuration : IEntityTypeConfiguration<ViewDataMasan01012021>
    {
        public void Configure(EntityTypeBuilder<ViewDataMasan01012021> builder)
        {
            builder.ToView("ViewDataMasan_01012021", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerLocalId).HasColumnName(@"CustomerLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewDataMasan_DO
    public class ViewDataMasanDoConfiguration : IEntityTypeConfiguration<ViewDataMasanDo>
    {
        public void Configure(EntityTypeBuilder<ViewDataMasanDo> builder)
        {
            builder.ToView("ViewDataMasan_DO", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // ViewDataPickShipEBS
    public class ViewDataPickShipEbConfiguration : IEntityTypeConfiguration<ViewDataPickShipEb>
    {
        public void Configure(EntityTypeBuilder<ViewDataPickShipEb> builder)
        {
            builder.ToView("ViewDataPickShipEBS", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerRef2).HasColumnName(@"CustomerRef2").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.AtmOrderReleaseId).HasColumnName(@"ATM_OrderReleaseID").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // ViewDispatchingMasan
    public class ViewDispatchingMasanConfiguration : IEntityTypeConfiguration<ViewDispatchingMasan>
    {
        public void Configure(EntityTypeBuilder<ViewDispatchingMasan> builder)
        {
            builder.ToView("ViewDispatchingMasan", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(38,5)").IsRequired(false);
        }
    }

    // ViewDispatchingOrderByCustomerRef2
    public class ViewDispatchingOrderByCustomerRef2Configuration : IEntityTypeConfiguration<ViewDispatchingOrderByCustomerRef2>
    {
        public void Configure(EntityTypeBuilder<ViewDispatchingOrderByCustomerRef2> builder)
        {
            builder.ToView("ViewDispatchingOrderByCustomerRef2", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.CustomerRef2).HasColumnName(@"CustomerRef2").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // ViewDispatchingOrderGroupByProduct
    public class ViewDispatchingOrderGroupByProductConfiguration : IEntityTypeConfiguration<ViewDispatchingOrderGroupByProduct>
    {
        public void Configure(EntityTypeBuilder<ViewDispatchingOrderGroupByProduct> builder)
        {
            builder.ToView("ViewDispatchingOrderGroupByProduct", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.Tolerance).HasColumnName(@"Tolerance").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.SoNumber).HasColumnName(@"SONumber").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // ViewDispatchingProduct
    public class ViewDispatchingProductConfiguration : IEntityTypeConfiguration<ViewDispatchingProduct>
    {
        public void Configure(EntityTypeBuilder<ViewDispatchingProduct> builder)
        {
            builder.ToView("ViewDispatchingProduct", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ViewDispatchingProductsDelete
    public class ViewDispatchingProductsDeleteConfiguration : IEntityTypeConfiguration<ViewDispatchingProductsDelete>
    {
        public void Configure(EntityTypeBuilder<ViewDispatchingProductsDelete> builder)
        {
            builder.ToView("ViewDispatchingProductsDelete", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.QuantityOfPackages).HasColumnName(@"QuantityOfPackages").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
        }
    }

    // ViewDispatchingQtyAverage30days
    public class ViewDispatchingQtyAverage30DaysConfiguration : IEntityTypeConfiguration<ViewDispatchingQtyAverage30Days>
    {
        public void Configure(EntityTypeBuilder<ViewDispatchingQtyAverage30Days> builder)
        {
            builder.ToView("ViewDispatchingQtyAverage30days", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.DDates).HasColumnName(@"DDates").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyTrans).HasColumnName(@"QtyTrans").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyCtns).HasColumnName(@"QtyCtns").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AvgDailyCtn).HasColumnName(@"AvgDailyCtn").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
        }
    }

    // ViewEDICheckStockStatus
    public class ViewEdiCheckStockStatuConfiguration : IEntityTypeConfiguration<ViewEdiCheckStockStatu>
    {
        public void Configure(EntityTypeBuilder<ViewEdiCheckStockStatu> builder)
        {
            builder.ToView("ViewEDICheckStockStatus", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TotalOrderQuantity).HasColumnName(@"TotalOrderQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalQty).HasColumnName(@"TotalQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Rate).HasColumnName(@"Rate").HasColumnType("decimal(10,2)").IsRequired(false);
            builder.Property(x => x.TotalQtyMissing).HasColumnName(@"TotalQtyMissing").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar(4)").IsRequired().IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.PackingPercentage).HasColumnName(@"PackingPercentage").HasColumnType("decimal(16,4)").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
        }
    }

    // ViewEmployees
    public class ViewEmployeeConfiguration : IEntityTypeConfiguration<ViewEmployee>
    {
        public void Configure(EntityTypeBuilder<ViewEmployee> builder)
        {
            builder.ToView("ViewEmployees", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // ViewEmployeeEventLast30days
    public class ViewEmployeeEventLast30DaysConfiguration : IEntityTypeConfiguration<ViewEmployeeEventLast30Days>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeEventLast30Days> builder)
        {
            builder.ToView("ViewEmployeeEventLast30days", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PayrollDetailId).HasColumnName(@"PayrollDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PayrollDate).HasColumnName(@"PayrollDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired();
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired();
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PayrollRemark).HasColumnName(@"PayrollRemark").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.User).HasColumnName(@"User").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TimeWork).HasColumnName(@"TimeWork").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SunHol).HasColumnName(@"SunHol").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Noodles).HasColumnName(@"Noodles").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Lunch).HasColumnName(@"Lunch").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Milk).HasColumnName(@"Milk").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.BenefitUser).HasColumnName(@"BenefitUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LunchCompensate).HasColumnName(@"LunchCompensate").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentNameShort).HasColumnName(@"DepartmentNameShort").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.SystemLeave).HasColumnName(@"SystemLeave").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.Shift).HasColumnName(@"Shift").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.ShiftGroup).HasColumnName(@"ShiftGroup").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.NightShift).HasColumnName(@"NightShift").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Contract).HasColumnName(@"Contract").HasColumnType("varchar(9)").IsRequired().IsUnicode(false).HasMaxLength(9);
            builder.Property(x => x.LunchPlace).HasColumnName(@"LunchPlace").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Otnn).HasColumnName(@"OTNN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Otsn).HasColumnName(@"OTSN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Othn).HasColumnName(@"OTHN").HasColumnType("real").IsRequired();
            builder.Property(x => x.Otnn43).HasColumnName(@"OTNN+").HasColumnType("real").IsRequired();
        }
    }

    // ViewEmployeeInOutRemain
    public class ViewEmployeeInOutRemainConfiguration : IEntityTypeConfiguration<ViewEmployeeInOutRemain>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeInOutRemain> builder)
        {
            builder.ToView("ViewEmployeeInOutRemain", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeInOutId).HasColumnName(@"EmployeeInOutID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CheckOut).HasColumnName(@"CheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BikeNumber).HasColumnName(@"BikeNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CheckBike).HasColumnName(@"CheckBike").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DateIn).HasColumnName(@"DateIn").HasColumnType("char(30)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.FromTime).HasColumnName(@"FromTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFinger).HasColumnName(@"EmployeeCodeFinger").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // ViewEmployeeTrainingManagement
    public class ViewEmployeeTrainingManagementConfiguration : IEntityTypeConfiguration<ViewEmployeeTrainingManagement>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeTrainingManagement> builder)
        {
            builder.ToView("ViewEmployeeTrainingManagement", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.TrainingId).HasColumnName(@"TrainingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TrainingDate).HasColumnName(@"TrainingDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TrainingLocation).HasColumnName(@"TrainingLocation").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TrainingDescription).HasColumnName(@"TrainingDescription").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.TrainingCost).HasColumnName(@"TrainingCost").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CurrencyUnit).HasColumnName(@"CurrencyUnit").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TrainingDuration).HasColumnName(@"TrainingDuration").HasColumnType("decimal(18,5)").IsRequired(false);
            builder.Property(x => x.TrainingConfirmedBy).HasColumnName(@"TrainingConfirmedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.TrainingConfirm).HasColumnName(@"TrainingConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeFeedback).HasColumnName(@"EmployeeFeedback").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.CostCoverBy).HasColumnName(@"CostCoverBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DocumentFolder).HasColumnName(@"DocumentFolder").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TrainingDefinitionId).HasColumnName(@"TrainingDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TrainingExpiryDate).HasColumnName(@"TrainingExpiryDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TrainingNumber).HasColumnName(@"TrainingNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TrainingName).HasColumnName(@"TrainingName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsRequired(false);
        }
    }

    // ViewEmployeeWorkings
    public class ViewEmployeeWorkingConfiguration : IEntityTypeConfiguration<ViewEmployeeWorking>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorking> builder)
        {
            builder.ToView("ViewEmployeeWorkings", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.TeamLeaderCode).HasColumnName(@"TeamLeaderCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TeamLeaderName).HasColumnName(@"TeamLeaderName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.OrderRemark).HasColumnName(@"OrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TimeWorking).HasColumnName(@"TimeWorking").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewEmployeeWorkingDOTotal
    public class ViewEmployeeWorkingDoTotalConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingDoTotal>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingDoTotal> builder)
        {
            builder.ToView("ViewEmployeeWorkingDOTotal", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.TotalPlts).HasColumnName(@"TotalPlts").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewEmPloyeeWorkingGoupByPrice
    public class ViewEmPloyeeWorkingGoupByPriceConfiguration : IEntityTypeConfiguration<ViewEmPloyeeWorkingGoupByPrice>
    {
        public void Configure(EntityTypeBuilder<ViewEmPloyeeWorkingGoupByPrice> builder)
        {
            builder.ToView("ViewEmPloyeeWorkingGoupByPrice", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductionQuantity1).HasColumnName(@"ProductionQuantity1").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description1).HasColumnName(@"Description1").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Money1).HasColumnName(@"Money1").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductionQuantity2).HasColumnName(@"ProductionQuantity2").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description2).HasColumnName(@"Description2").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Money2).HasColumnName(@"Money2").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductionQuantity3).HasColumnName(@"ProductionQuantity3").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description3).HasColumnName(@"Description3").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Money3).HasColumnName(@"Money3").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductionQuantity4).HasColumnName(@"ProductionQuantity4").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description4).HasColumnName(@"Description4").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Money4).HasColumnName(@"Money4").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductionQuantity5).HasColumnName(@"ProductionQuantity5").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description5).HasColumnName(@"Description5").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Money5).HasColumnName(@"Money5").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductionQuantity6).HasColumnName(@"ProductionQuantity6").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description6).HasColumnName(@"Description6").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Money6).HasColumnName(@"Money6").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductionQuantity7).HasColumnName(@"ProductionQuantity7").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description7).HasColumnName(@"Description7").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Money7).HasColumnName(@"Money7").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProductionQuantity9).HasColumnName(@"ProductionQuantity9").HasColumnType("numeric(38,6)").IsRequired(false);
            builder.Property(x => x.Description9).HasColumnName(@"Description9").HasColumnType("nvarchar(9)").IsRequired(false).HasMaxLength(9);
            builder.Property(x => x.Money9).HasColumnName(@"Money9").HasColumnType("varchar(1)").IsRequired(false).IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.Money).HasColumnName(@"Money").HasColumnType("float").IsRequired(false);
        }
    }

    // ViewEmployeeWorkingLast45days
    public class ViewEmployeeWorkingLast45DaysConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingLast45Days>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingLast45Days> builder)
        {
            builder.ToView("ViewEmployeeWorkingLast45days", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // ViewEmployeeWorkingNotTeam
    public class ViewEmployeeWorkingNotTeamConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingNotTeam>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingNotTeam> builder)
        {
            builder.ToView("ViewEmployeeWorkingNotTeam", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.OrderRemark).HasColumnName(@"OrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.EmployeeWorkingCreatedTime).HasColumnName(@"EmployeeWorkingCreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeWorking).HasColumnName(@"TimeWorking").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.IsProductivity).HasColumnName(@"isProductivity").HasColumnType("bit").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionVietnam).HasColumnName(@"PositionVietnam").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ViewEmployeeWorkingNotTeam_BK20200205
    public class ViewEmployeeWorkingNotTeamBk20200205Configuration : IEntityTypeConfiguration<ViewEmployeeWorkingNotTeamBk20200205>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingNotTeamBk20200205> builder)
        {
            builder.ToView("ViewEmployeeWorkingNotTeam_BK20200205", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EmployeeCode).HasColumnName(@"EmployeeCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.OrderRemark).HasColumnName(@"OrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.EmployeeWorkingCreatedTime).HasColumnName(@"EmployeeWorkingCreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeWorking).HasColumnName(@"TimeWorking").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeCodeFull).HasColumnName(@"EmployeeCodeFull").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.IsProductivity).HasColumnName(@"isProductivity").HasColumnType("bit").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionVietnam).HasColumnName(@"PositionVietnam").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ViewEmployeeWorkingROTotal
    public class ViewEmployeeWorkingRoTotalConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingRoTotal>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingRoTotal> builder)
        {
            builder.ToView("ViewEmployeeWorkingROTotal", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.TotalPlts).HasColumnName(@"TotalPlts").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewEmployeeWorkingSupervisor
    public class ViewEmployeeWorkingSupervisorConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingSupervisor>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingSupervisor> builder)
        {
            builder.ToView("ViewEmployeeWorkingSupervisor", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Supervisor).HasColumnName(@"Supervisor").HasColumnType("int").IsRequired();
        }
    }

    // ViewEmployeeWorkingTotal
    public class ViewEmployeeWorkingTotalConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingTotal>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingTotal> builder)
        {
            builder.ToView("ViewEmployeeWorkingTotal", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProductionQuantity).HasColumnName(@"ProductionQuantity").HasColumnType("float").IsRequired(false);
        }
    }

    // ViewEmployeeWorkingTotalPercentage
    public class ViewEmployeeWorkingTotalPercentageConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingTotalPercentage>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingTotalPercentage> builder)
        {
            builder.ToView("ViewEmployeeWorkingTotalPercentage", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TotalPercentage).HasColumnName(@"TotalPercentage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyOfEmployee).HasColumnName(@"QtyOfEmployee").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewEmployeeWorkingTotalWeightDO
    public class ViewEmployeeWorkingTotalWeightDoConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingTotalWeightDo>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingTotalWeightDo> builder)
        {
            builder.ToView("ViewEmployeeWorkingTotalWeightDO", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
        }
    }

    // ViewEmployeeWorkingTotalWeightRO
    public class ViewEmployeeWorkingTotalWeightRoConfiguration : IEntityTypeConfiguration<ViewEmployeeWorkingTotalWeightRo>
    {
        public void Configure(EntityTypeBuilder<ViewEmployeeWorkingTotalWeightRo> builder)
        {
            builder.ToView("ViewEmployeeWorkingTotalWeightRO", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
        }
    }

    // ViewFonterraBigCDispatchingDetailsUsedByDate
    public class ViewFonterraBigCDispatchingDetailsUsedByDateConfiguration : IEntityTypeConfiguration<ViewFonterraBigCDispatchingDetailsUsedByDate>
    {
        public void Configure(EntityTypeBuilder<ViewFonterraBigCDispatchingDetailsUsedByDate> builder)
        {
            builder.ToView("ViewFonterraBigCDispatchingDetailsUsedByDate", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Destination).HasColumnName(@"Destination").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewFonterraCustomerClients
    public class ViewFonterraCustomerClientConfiguration : IEntityTypeConfiguration<ViewFonterraCustomerClient>
    {
        public void Configure(EntityTypeBuilder<ViewFonterraCustomerClient> builder)
        {
            builder.ToView("ViewFonterraCustomerClients", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerClientMainId).HasColumnName(@"CustomerClientMainID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientCodeFbv).HasColumnName(@"CustomerClientCodeFBV").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MainClientName).HasColumnName(@"MainClientName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // ViewFonterraDispatchingOrdersToday
    public class ViewFonterraDispatchingOrdersTodayConfiguration : IEntityTypeConfiguration<ViewFonterraDispatchingOrdersToday>
    {
        public void Configure(EntityTypeBuilder<ViewFonterraDispatchingOrdersToday> builder)
        {
            builder.ToView("ViewFonterraDispatchingOrdersToday", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
        }
    }

    // ViewFonterraQA
    public class ViewFonterraQaConfiguration : IEntityTypeConfiguration<ViewFonterraQa>
    {
        public void Configure(EntityTypeBuilder<ViewFonterraQa> builder)
        {
            builder.ToView("ViewFonterraQA", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.QaReportId).HasColumnName(@"QAReportID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Original).HasColumnName(@"Original").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Supplier).HasColumnName(@"Supplier").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Manufactured).HasColumnName(@"Manufactured").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DocumentFileScan).HasColumnName(@"DocumentFileScan").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomNo).HasColumnName(@"CustomNo").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RecorderConfirmed).HasColumnName(@"RecorderConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.RecorderOccurTime).HasColumnName(@"RecorderOccurTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.RecorderTransporterRepresentative).HasColumnName(@"RecorderTransporterRepresentative").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.RecorderTransporter).HasColumnName(@"RecorderTransporter").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.RecorderTruckNo).HasColumnName(@"RecorderTruckNo").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.RecorderPhoneNo).HasColumnName(@"RecorderPhoneNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RecorderTemperature).HasColumnName(@"RecorderTemperature").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.RecorderDriver).HasColumnName(@"RecorderDriver").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RecorderCode).HasColumnName(@"RecorderCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RecorderProductBranch).HasColumnName(@"RecorderProductBranch").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.RecorderDescription).HasColumnName(@"RecorderDescription").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ContainerNo).HasColumnName(@"ContainerNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
        }
    }

    // ViewFonterraSales60days
    public class ViewFonterraSales60DaysConfiguration : IEntityTypeConfiguration<ViewFonterraSales60Days>
    {
        public void Configure(EntityTypeBuilder<ViewFonterraSales60Days> builder)
        {
            builder.ToView("ViewFonterraSales60days", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerSalesInvoiceId).HasColumnName(@"CustomerSalesInvoiceID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerSalesInvoiceDate).HasColumnName(@"CustomerSalesInvoiceDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerClientMainId).HasColumnName(@"CustomerClientMainID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientCodeFbv).HasColumnName(@"CustomerClientCodeFBV").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.OrderQuantity).HasColumnName(@"OrderQuantity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OrderUnitQuanity).HasColumnName(@"OrderUnitQuanity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchedQuantity).HasColumnName(@"DispatchedQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvoiceQuantity).HasColumnName(@"InvoiceQuantity").HasColumnType("real").IsRequired();
            builder.Property(x => x.ConfirmedTime).HasColumnName(@"ConfirmedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerSalesInvoiceConfirmed).HasColumnName(@"CustomerSalesInvoiceConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerClientMain).HasColumnName(@"CustomerClientMain").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerSalesInvoiceDetailId).HasColumnName(@"CustomerSalesInvoiceDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("int").IsRequired();
            builder.Property(x => x.MainClientName).HasColumnName(@"MainClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewFonterraSalesContractDetails
    public class ViewFonterraSalesContractDetailConfiguration : IEntityTypeConfiguration<ViewFonterraSalesContractDetail>
    {
        public void Configure(EntityTypeBuilder<ViewFonterraSalesContractDetail> builder)
        {
            builder.ToView("ViewFonterraSalesContractDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerClientMain).HasColumnName(@"CustomerClientMain").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerClientCodeFbv).HasColumnName(@"CustomerClientCodeFBV").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerSalesContractNumber).HasColumnName(@"CustomerSalesContractNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.SalesContractToDate).HasColumnName(@"SalesContractToDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SalesProductCode).HasColumnName(@"SalesProductCode").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SalesProductCode2).HasColumnName(@"SalesProductCode2").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.SalesProductName).HasColumnName(@"SalesProductName").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.SalesPrice).HasColumnName(@"SalesPrice").HasColumnType("real").IsRequired();
            builder.Property(x => x.SalesUnit).HasColumnName(@"SalesUnit").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.SalesUnitPerPackage).HasColumnName(@"SalesUnitPerPackage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SalesContractDate).HasColumnName(@"SalesContractDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DiscountPercentage).HasColumnName(@"DiscountPercentage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.SalesContractRemark).HasColumnName(@"SalesContractRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CustomerSalesContractConfirmed).HasColumnName(@"CustomerSalesContractConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerClientMainId).HasColumnName(@"CustomerClientMainID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerSalesContractDetailId).HasColumnName(@"CustomerSalesContractDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerSalesContractId).HasColumnName(@"CustomerSalesContractID").HasColumnType("int").IsRequired();
        }
    }

    // ViewFonterraStockOnHandOnHold
    public class ViewFonterraStockOnHandOnHoldConfiguration : IEntityTypeConfiguration<ViewFonterraStockOnHandOnHold>
    {
        public void Configure(EntityTypeBuilder<ViewFonterraStockOnHandOnHold> builder)
        {
            builder.ToView("ViewFonterraStockOnHandOnHold", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PalletStatusDescription).HasColumnName(@"PalletStatusDescription").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
        }
    }

    // ViewFreeLocations
    public class ViewFreeLocationConfiguration : IEntityTypeConfiguration<ViewFreeLocation>
    {
        public void Configure(EntityTypeBuilder<ViewFreeLocation> builder)
        {
            builder.ToView("ViewFreeLocations", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.X).HasColumnName(@"X").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Pairs).HasColumnName(@"Pairs").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.High).HasColumnName(@"High").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Top).HasColumnName(@"Top").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Low).HasColumnName(@"Low").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewFreeLocationsFloor
    public class ViewFreeLocationsFloorConfiguration : IEntityTypeConfiguration<ViewFreeLocationsFloor>
    {
        public void Configure(EntityTypeBuilder<ViewFreeLocationsFloor> builder)
        {
            builder.ToView("ViewFreeLocationsFloor", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.High).HasColumnName(@"High").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Used).HasColumnName(@"Used").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Top).HasColumnName(@"Top").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Low).HasColumnName(@"Low").HasColumnType("bit").IsRequired();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewfrmFreeLocations
    public class ViewfrmFreeLocationConfiguration : IEntityTypeConfiguration<ViewfrmFreeLocation>
    {
        public void Configure(EntityTypeBuilder<ViewfrmFreeLocation> builder)
        {
            builder.ToView("ViewfrmFreeLocations", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.QtyLocation).HasColumnName(@"QtyLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyLow).HasColumnName(@"QtyLow").HasColumnType("int").IsRequired();
            builder.Property(x => x.QtyHigh).HasColumnName(@"QtyHigh").HasColumnType("int").IsRequired();
            builder.Property(x => x.QtyOfFree).HasColumnName(@"QtyOfFree").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QtyFreeAfterDp).HasColumnName(@"QtyFreeAfterDP").HasColumnType("int").IsRequired();
        }
    }

    // ViewGate_WorkerLaborSafetyTraining
    public class ViewGateWorkerLaborSafetyTrainingConfiguration : IEntityTypeConfiguration<ViewGateWorkerLaborSafetyTraining>
    {
        public void Configure(EntityTypeBuilder<ViewGateWorkerLaborSafetyTraining> builder)
        {
            builder.ToView("ViewGate_WorkerLaborSafetyTraining", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LaborSafetyTrainDate).HasColumnName(@"LaborSafetyTrainDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.WorkerId).HasColumnName(@"WorkerID").HasColumnType("int").IsRequired();
        }
    }

    // ViewHaiNamProductList
    public class ViewHaiNamProductListConfiguration : IEntityTypeConfiguration<ViewHaiNamProductList>
    {
        public void Configure(EntityTypeBuilder<ViewHaiNamProductList> builder)
        {
            builder.ToView("ViewHaiNamProductList", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNumberShort).HasColumnName(@"ProductNumberShort").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.GrossWeightPerPackage).HasColumnName(@"GrossWeightPerPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
        }
    }

    // ViewHandlingOvertimeCheck
    public class ViewHandlingOvertimeCheckConfiguration : IEntityTypeConfiguration<ViewHandlingOvertimeCheck>
    {
        public void Configure(EntityTypeBuilder<ViewHandlingOvertimeCheck> builder)
        {
            builder.ToView("ViewHandlingOvertimeCheck", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.HandlingOvertimeCategoryId).HasColumnName(@"HandlingOvertimeCategoryID").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.VehicleInOutId).HasColumnName(@"VehicleInOutID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.TimeIn).HasColumnName(@"TimeIn").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.TimeOut).HasColumnName(@"TimeOut").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.UserOut).HasColumnName(@"UserOut").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserCheckOut).HasColumnName(@"UserCheckOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.VehicleType).HasColumnName(@"VehicleType").HasColumnType("varchar(5)").IsRequired().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.R).HasColumnName(@"R").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DockNumber).HasColumnName(@"DockNumber").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractDetailRemark).HasColumnName(@"ContractDetailRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
        }
    }

    // ViewHomeLocationByRoom
    public class ViewHomeLocationByRoomConfiguration : IEntityTypeConfiguration<ViewHomeLocationByRoom>
    {
        public void Configure(EntityTypeBuilder<ViewHomeLocationByRoom> builder)
        {
            builder.ToView("ViewHomeLocationByRoom", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("nvarchar(2)").IsRequired().HasMaxLength(2);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
        }
    }

    // ViewInOutViewByCartons
    public class ViewInOutViewByCartonConfiguration : IEntityTypeConfiguration<ViewInOutViewByCarton>
    {
        public void Configure(EntityTypeBuilder<ViewInOutViewByCarton> builder)
        {
            builder.ToView("ViewInOutViewByCartons", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.OrderTypeDescription).HasColumnName(@"OrderTypeDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CartonWeight).HasColumnName(@"CartonWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Unit1).HasColumnName(@"Unit1").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CartonUnits).HasColumnName(@"CartonUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Unit2).HasColumnName(@"Unit2").HasColumnType("varchar(7)").IsRequired().IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PalletStatusDescription).HasColumnName(@"PalletStatusDescription").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.IsHold).HasColumnName(@"IsHold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.OrderRemark).HasColumnName(@"OrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewInternalAudit
    public class ViewInternalAuditConfiguration : IEntityTypeConfiguration<ViewInternalAudit>
    {
        public void Configure(EntityTypeBuilder<ViewInternalAudit> builder)
        {
            builder.ToView("ViewInternalAudit", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.TotalLost).HasColumnName(@"TotalLost").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ProblemCategoryDescription).HasColumnName(@"ProblemCategoryDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.InternalAuditId).HasColumnName(@"InternalAuditID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DepartmentNameShort).HasColumnName(@"DepartmentNameShort").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.ProblemDescription).HasColumnName(@"ProblemDescription").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.InternalAuditDate).HasColumnName(@"InternalAuditDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.InternalAuditConfirmed).HasColumnName(@"InternalAuditConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Complained).HasColumnName(@"Complained").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Severity).HasColumnName(@"Severity").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Likehood).HasColumnName(@"Likehood").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // ViewLabelPalletList
    public class ViewLabelPalletListConfiguration : IEntityTypeConfiguration<ViewLabelPalletList>
    {
        public void Configure(EntityTypeBuilder<ViewLabelPalletList> builder)
        {
            builder.ToView("ViewLabelPalletList", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletIdBarcode).HasColumnName(@"PalletID_Barcode").HasColumnType("varchar(8000)").IsRequired(false).IsUnicode(false).HasMaxLength(8000);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(26)").IsRequired(false).HasMaxLength(26);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.RPallet).HasColumnName(@"R_Pallet").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OriginalQuantityPcs).HasColumnName(@"OriginalQuantityPcs").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.RRo).HasColumnName(@"R_RO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(132)").IsRequired(false).HasMaxLength(132);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.SumQuantity).HasColumnName(@"SumQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Label1).HasColumnName(@"Label1").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OldLabel).HasColumnName(@"OldLabel").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.GrossWeight).HasColumnName(@"GrossWeight").HasColumnType("decimal(26,5)").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationType).HasColumnName(@"LocationType").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.RemarkCombine).HasColumnName(@"RemarkCombine").HasColumnType("nvarchar(1102)").IsRequired().HasMaxLength(1102);
            builder.Property(x => x.CustomerRefCombine).HasColumnName(@"CustomerRefCombine").HasColumnType("nvarchar(1102)").IsRequired().HasMaxLength(1102);
            builder.Property(x => x.LocationHq).HasColumnName(@"LocationHQ").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // ViewLocationBarcode
    public class ViewLocationBarcodeConfiguration : IEntityTypeConfiguration<ViewLocationBarcode>
    {
        public void Configure(EntityTypeBuilder<ViewLocationBarcode> builder)
        {
            builder.ToView("ViewLocationBarcode", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LocationBarcode).HasColumnName(@"LocationBarcode").HasColumnType("nvarchar(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.LocationNumberShort).HasColumnName(@"LocationNumberShort").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // view_location_mapping_status
    public class ViewLocationMappingStatusConfiguration : IEntityTypeConfiguration<ViewLocationMappingStatus>
    {
        public void Configure(EntityTypeBuilder<ViewLocationMappingStatus> builder)
        {
            builder.ToView("view_location_mapping_status", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.Wms).HasColumnName(@"wms").HasColumnType("nvarchar(51)").IsRequired(false).HasMaxLength(51);
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.LocationHq).HasColumnName(@"LocationHQ").HasColumnType("varchar(60)").IsRequired(false).IsUnicode(false).HasMaxLength(60);
        }
    }

    // ViewLotProductNumberOnHold
    public class ViewLotProductNumberOnHoldConfiguration : IEntityTypeConfiguration<ViewLotProductNumberOnHold>
    {
        public void Configure(EntityTypeBuilder<ViewLotProductNumberOnHold> builder)
        {
            builder.ToView("ViewLotProductNumberOnHold", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalQty).HasColumnName(@"TotalQty").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewMappingLocationWMS_OTM
    public class ViewMappingLocationWmsOtmConfiguration : IEntityTypeConfiguration<ViewMappingLocationWmsOtm>
    {
        public void Configure(EntityTypeBuilder<ViewMappingLocationWmsOtm> builder)
        {
            builder.ToView("ViewMappingLocationWMS_OTM", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationOtm).HasColumnName(@"LOCATION_OTM").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.LocationWms).HasColumnName(@"LOCATION_WMS").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.ItemKey).HasColumnName(@"item_key").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64);
        }
    }

    // ViewMappingLocatorWithMasan
    public class ViewMappingLocatorWithMasanConfiguration : IEntityTypeConfiguration<ViewMappingLocatorWithMasan>
    {
        public void Configure(EntityTypeBuilder<ViewMappingLocatorWithMasan> builder)
        {
            builder.ToView("ViewMappingLocatorWithMasan", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.WareHouse).HasColumnName(@"WareHouse").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.Locator).HasColumnName(@"Locator").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
        }
    }

    // ViewMappingSizeTruckAndCartonByCustomer
    public class ViewMappingSizeTruckAndCartonByCustomerConfiguration : IEntityTypeConfiguration<ViewMappingSizeTruckAndCartonByCustomer>
    {
        public void Configure(EntityTypeBuilder<ViewMappingSizeTruckAndCartonByCustomer> builder)
        {
            builder.ToView("ViewMappingSizeTruckAndCartonByCustomer", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Frame).HasColumnName(@"Frame").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CbmBasket).HasColumnName(@"CBM_Basket").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.MaxQtyInTruck).HasColumnName(@"MaxQtyInTruck").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaxQtyLenght).HasColumnName(@"MaxQtyLenght").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Lenght).HasColumnName(@"Lenght").HasColumnType("decimal(10,3)").IsRequired(false);
            builder.Property(x => x.MaxQtyWidth).HasColumnName(@"MaxQtyWidth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Width).HasColumnName(@"Width").HasColumnType("decimal(10,3)").IsRequired(false);
            builder.Property(x => x.MaxQtyHight).HasColumnName(@"MaxQtyHight").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Hight).HasColumnName(@"Hight").HasColumnType("decimal(10,3)").IsRequired(false);
        }
    }

    // ViewMappingSubWithMasan
    public class ViewMappingSubWithMasanConfiguration : IEntityTypeConfiguration<ViewMappingSubWithMasan>
    {
        public void Configure(EntityTypeBuilder<ViewMappingSubWithMasan> builder)
        {
            builder.ToView("ViewMappingSubWithMasan", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.WareHouse).HasColumnName(@"WareHouse").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.SubVentory).HasColumnName(@"SubVentory").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
        }
    }

    // ViewMETPalletConsolidationOtherCustomers
    public class ViewMetPalletConsolidationOtherCustomerConfiguration : IEntityTypeConfiguration<ViewMetPalletConsolidationOtherCustomer>
    {
        public void Configure(EntityTypeBuilder<ViewMetPalletConsolidationOtherCustomer> builder)
        {
            builder.ToView("ViewMETPalletConsolidationOtherCustomers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TotalQtyAtLocation).HasColumnName(@"TotalQtyAtLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
        }
    }

    // ViewMETROCalculateWeightAnnimalControl
    public class ViewMetroCalculateWeightAnnimalControlConfiguration : IEntityTypeConfiguration<ViewMetroCalculateWeightAnnimalControl>
    {
        public void Configure(EntityTypeBuilder<ViewMetroCalculateWeightAnnimalControl> builder)
        {
            builder.ToView("ViewMETROCalculateWeightAnnimalControl", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TripId).HasColumnName(@"TripID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TripRemarks).HasColumnName(@"TripRemarks").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ProductGroupDescription).HasColumnName(@"ProductGroupDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.MainGroup).HasColumnName(@"MainGroup").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SubGroup).HasColumnName(@"SubGroup").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Original).HasColumnName(@"Original").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TotalCtns).HasColumnName(@"TotalCtns").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.GroupOriginal).HasColumnName(@"GroupOriginal").HasColumnType("nvarchar(303)").IsRequired(false).HasMaxLength(303);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Supplier).HasColumnName(@"Supplier").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Manufactured).HasColumnName(@"Manufactured").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DocumentFileScan).HasColumnName(@"DocumentFileScan").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomNo).HasColumnName(@"CustomNo").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
        }
    }

    // ViewMETRODispatchingCartons
    public class ViewMetroDispatchingCartonConfiguration : IEntityTypeConfiguration<ViewMetroDispatchingCarton>
    {
        public void Configure(EntityTypeBuilder<ViewMetroDispatchingCarton> builder)
        {
            builder.ToView("ViewMETRODispatchingCartons", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingCartonId).HasColumnName(@"DispatchingCartonID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CartonWeight).HasColumnName(@"CartonWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight1).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.QuantityOfPackages).HasColumnName(@"QuantityOfPackages").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.PalletUnitQty).HasColumnName(@"Pallet_UnitQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"Pallet_Weight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingRemark).HasColumnName(@"DispatchingRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingTotalWeight).HasColumnName(@"Dispatching_TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.DispatchingTotalUnits).HasColumnName(@"Dispatching_TotalUnits").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewMETROLabelDispatchingOrders
    public class ViewMetroLabelDispatchingOrderConfiguration : IEntityTypeConfiguration<ViewMetroLabelDispatchingOrder>
    {
        public void Configure(EntityTypeBuilder<ViewMetroLabelDispatchingOrder> builder)
        {
            builder.ToView("ViewMETROLabelDispatchingOrders", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TotalCtns).HasColumnName(@"TotalCtns").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerClientCode).HasColumnName(@"CustomerClientCode").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
        }
    }

    // ViewMETROOrderConfirmTime
    public class ViewMetroOrderConfirmTimeConfiguration : IEntityTypeConfiguration<ViewMetroOrderConfirmTime>
    {
        public void Configure(EntityTypeBuilder<ViewMetroOrderConfirmTime> builder)
        {
            builder.ToView("ViewMETROOrderConfirmTime", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Orderdate).HasColumnName(@"orderdate").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // ViewMETROPalletConsolidation
    public class ViewMetroPalletConsolidationConfiguration : IEntityTypeConfiguration<ViewMetroPalletConsolidation>
    {
        public void Configure(EntityTypeBuilder<ViewMetroPalletConsolidation> builder)
        {
            builder.ToView("ViewMETROPalletConsolidation", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.TotalQty).HasColumnName(@"TotalQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // ViewMETROPalletConsolidationOtherCustomers
    public class ViewMetroPalletConsolidationOtherCustomerConfiguration : IEntityTypeConfiguration<ViewMetroPalletConsolidationOtherCustomer>
    {
        public void Configure(EntityTypeBuilder<ViewMetroPalletConsolidationOtherCustomer> builder)
        {
            builder.ToView("ViewMETROPalletConsolidationOtherCustomers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TotalQtyAtLocation).HasColumnName(@"TotalQtyAtLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
        }
    }

    // ViewMETROPalletOnHandDaily
    public class ViewMetroPalletOnHandDailyConfiguration : IEntityTypeConfiguration<ViewMetroPalletOnHandDaily>
    {
        public void Configure(EntityTypeBuilder<ViewMetroPalletOnHandDaily> builder)
        {
            builder.ToView("ViewMETROPalletOnHandDaily", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DateId).HasColumnName(@"DateID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CountCustomerId).HasColumnName(@"CountCustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FirstPalletId).HasColumnName(@"FirstPalletID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewMETROPalletOnHandDailyBilling
    public class ViewMetroPalletOnHandDailyBillingConfiguration : IEntityTypeConfiguration<ViewMetroPalletOnHandDailyBilling>
    {
        public void Configure(EntityTypeBuilder<ViewMetroPalletOnHandDailyBilling> builder)
        {
            builder.ToView("ViewMETROPalletOnHandDailyBilling", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DateId).HasColumnName(@"DateID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.QtyCtns).HasColumnName(@"QtyCtns").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Numb).HasColumnName(@"Numb").HasColumnType("bigint").IsRequired(false);
        }
    }

    // ViewMetroStockByLocationOnHand
    public class ViewMetroStockByLocationOnHandConfiguration : IEntityTypeConfiguration<ViewMetroStockByLocationOnHand>
    {
        public void Configure(EntityTypeBuilder<ViewMetroStockByLocationOnHand> builder)
        {
            builder.ToView("ViewMetroStockByLocationOnHand", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // ViewMETROStockOnHandForQA
    public class ViewMetroStockOnHandForQaConfiguration : IEntityTypeConfiguration<ViewMetroStockOnHandForQa>
    {
        public void Configure(EntityTypeBuilder<ViewMetroStockOnHandForQa> builder)
        {
            builder.ToView("ViewMETROStockOnHandForQA", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductGroupDescription).HasColumnName(@"ProductGroupDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.MainGroup).HasColumnName(@"MainGroup").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SubGroup).HasColumnName(@"SubGroup").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Original).HasColumnName(@"Original").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.GroupOriginal).HasColumnName(@"GroupOriginal").HasColumnType("nvarchar(303)").IsRequired(false).HasMaxLength(303);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Supplier).HasColumnName(@"Supplier").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Manufactured).HasColumnName(@"Manufactured").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DocumentFileScan).HasColumnName(@"DocumentFileScan").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomNo).HasColumnName(@"CustomNo").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.QtyCtns).HasColumnName(@"QtyCtns").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.RoStatus).HasColumnName(@"ROStatus").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.QtyRemainCtns).HasColumnName(@"QtyRemainCtns").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewOrderIsLock
    public class ViewOrderIsLockConfiguration : IEntityTypeConfiguration<ViewOrderIsLock>
    {
        public void Configure(EntityTypeBuilder<ViewOrderIsLock> builder)
        {
            builder.ToView("ViewOrderIsLock", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("varchar(2)").IsRequired().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
        }
    }

    // ViewOutsourcedJob60days
    public class ViewOutsourcedJob60DaysConfiguration : IEntityTypeConfiguration<ViewOutsourcedJob60Days>
    {
        public void Configure(EntityTypeBuilder<ViewOutsourcedJob60Days> builder)
        {
            builder.ToView("ViewOutsourcedJob60days", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.MhlWorkDate).HasColumnName(@"MHLWorkDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.MhlWorkId).HasColumnName(@"MHLWorkID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Received).HasColumnName(@"Received").HasColumnType("int").IsRequired();
            builder.Property(x => x.Damaged).HasColumnName(@"Damaged").HasColumnType("int").IsRequired();
            builder.Property(x => x.MhlWorkConfirm).HasColumnName(@"MHLWorkConfirm").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.MhlWorkDefinitionId).HasColumnName(@"MHLWorkDefinitionID").HasColumnType("int").IsRequired();
            builder.Property(x => x.JobName).HasColumnName(@"JobName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.MhlWorkDefinitionNumber).HasColumnName(@"MHLWorkDefinitionNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.OtherServiceDetailId).HasColumnName(@"OtherServiceDetailID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FromTime).HasColumnName(@"FromTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToTime).HasColumnName(@"ToTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Accepted).HasColumnName(@"Accepted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AcceptedBy).HasColumnName(@"AcceptedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Rejected).HasColumnName(@"Rejected").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RejectedBy).HasColumnName(@"RejectedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.WorkNumber).HasColumnName(@"WorkNumber").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("real").IsRequired();
            builder.Property(x => x.DetailRemark).HasColumnName(@"DetailRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewPackingStatus
    public class ViewPackingStatuConfiguration : IEntityTypeConfiguration<ViewPackingStatu>
    {
        public void Configure(EntityTypeBuilder<ViewPackingStatu> builder)
        {
            builder.ToView("ViewPackingStatus", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RouteCode).HasColumnName(@"RouteCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.NetQuantity).HasColumnName(@"NetQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.So).HasColumnName(@"SO").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(522)").IsRequired(false).HasMaxLength(522);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.XdocPickingListId).HasColumnName(@"XdocPickingListID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TripNumber).HasColumnName(@"TripNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.VehicleNo).HasColumnName(@"VehicleNo").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.IsDispatch).HasColumnName(@"IsDispatch").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.WareHouseCustomerInterface).HasColumnName(@"WareHouseCustomerInterface").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.StatusProcess).HasColumnName(@"StatusProcess").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewPalletAllocationFree
    public class ViewPalletAllocationFreeConfiguration : IEntityTypeConfiguration<ViewPalletAllocationFree>
    {
        public void Configure(EntityTypeBuilder<ViewPalletAllocationFree> builder)
        {
            builder.ToView("ViewPalletAllocationFree", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.X).HasColumnName(@"X").HasColumnType("nvarchar(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.Low).HasColumnName(@"Low").HasColumnType("bit").IsRequired();
        }
    }

    // ViewPallet_DoulicateTest
    public class ViewPalletDoulicateTestConfiguration : IEntityTypeConfiguration<ViewPalletDoulicateTest>
    {
        public void Configure(EntityTypeBuilder<ViewPalletDoulicateTest> builder)
        {
            builder.ToView("ViewPallet_DoulicateTest", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
        }
    }

    // ViewPalletMovementHistory
    public class ViewPalletMovementHistoryConfiguration : IEntityTypeConfiguration<ViewPalletMovementHistory>
    {
        public void Configure(EntityTypeBuilder<ViewPalletMovementHistory> builder)
        {
            builder.ToView("ViewPalletMovementHistory", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.StockMovementId).HasColumnName(@"StockMovementID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.SourceLocation).HasColumnName(@"SourceLocation").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DestinationLocation).HasColumnName(@"DestinationLocation").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DateMovement).HasColumnName(@"DateMovement").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Automatic).HasColumnName(@"Automatic").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReasonMovement).HasColumnName(@"ReasonMovement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.AuthorisedBy).HasColumnName(@"AuthorisedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FromLocation).HasColumnName(@"FromLocation").HasColumnType("nvarchar(15)").IsRequired().HasMaxLength(15);
            builder.Property(x => x.ToLocation).HasColumnName(@"ToLocation").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewPalletRemainWeightInners
    public class ViewPalletRemainWeightInnerConfiguration : IEntityTypeConfiguration<ViewPalletRemainWeightInner>
    {
        public void Configure(EntityTypeBuilder<ViewPalletRemainWeightInner> builder)
        {
            builder.ToView("ViewPalletRemainWeightInners", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.RemainUnits).HasColumnName(@"RemainUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RemainWeight).HasColumnName(@"RemainWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
        }
    }

    // ViewPalletsOnHold
    public class ViewPalletsOnHoldConfiguration : IEntityTypeConfiguration<ViewPalletsOnHold>
    {
        public void Configure(EntityTypeBuilder<ViewPalletsOnHold> builder)
        {
            builder.ToView("ViewPalletsOnHold", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.PalletStatusDescription).HasColumnName(@"PalletStatusDescription").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.PalletStatusDescriptionVietnam).HasColumnName(@"PalletStatusDescriptionVietnam").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PalletHoldingOnHold).HasColumnName(@"PalletHoldingOnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"status").HasColumnType("varchar(7)").IsRequired(false).IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.PalletHoldingBy).HasColumnName(@"PalletHoldingBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // ViewPalletUnHold
    public class ViewPalletUnHoldConfiguration : IEntityTypeConfiguration<ViewPalletUnHold>
    {
        public void Configure(EntityTypeBuilder<ViewPalletUnHold> builder)
        {
            builder.ToView("ViewPalletUnHold", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.PalletStatusDescription).HasColumnName(@"PalletStatusDescription").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.PalletStatusDescriptionVietnam).HasColumnName(@"PalletStatusDescriptionVietnam").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PalletHoldingOnHold).HasColumnName(@"PalletHoldingOnHold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"status").HasColumnType("varchar(7)").IsRequired(false).IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.PalletHoldingBy).HasColumnName(@"PalletHoldingBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // ViewPayrollMonthlyDetails
    public class ViewPayrollMonthlyDetailConfiguration : IEntityTypeConfiguration<ViewPayrollMonthlyDetail>
    {
        public void Configure(EntityTypeBuilder<ViewPayrollMonthlyDetail> builder)
        {
            builder.ToView("ViewPayrollMonthlyDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PayRollMonth).HasColumnName(@"PayRollMonth").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VietnamPosition).HasColumnName(@"VietnamPosition").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LunchPlace).HasColumnName(@"LunchPlace").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WorkingDays).HasColumnName(@"WorkingDays").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.WorkingDayNightShift).HasColumnName(@"WorkingDayNightShift").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Performance).HasColumnName(@"Performance").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformancePercent).HasColumnName(@"PerformancePercent").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PerformanceAverage).HasColumnName(@"PerformanceAverage").HasColumnType("real").IsRequired();
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PayRollMonthlyRemark).HasColumnName(@"PayRollMonthlyRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentNameShort).HasColumnName(@"DepartmentNameShort").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
        }
    }

    // ViewPayrollMonthlyReview
    public class ViewPayrollMonthlyReviewConfiguration : IEntityTypeConfiguration<ViewPayrollMonthlyReview>
    {
        public void Configure(EntityTypeBuilder<ViewPayrollMonthlyReview> builder)
        {
            builder.ToView("ViewPayrollMonthlyReview", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.VietnamName).HasColumnName(@"VietnamName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ContractPermanent).HasColumnName(@"ContractPermanent").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.WorkingDays).HasColumnName(@"WorkingDays").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Ots).HasColumnName(@"OTS").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Otn).HasColumnName(@"OTN").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Oth).HasColumnName(@"OTH").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Sick).HasColumnName(@"Sick").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Leave).HasColumnName(@"Leave").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Haft).HasColumnName(@"Haft").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Off).HasColumnName(@"Off").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.User).HasColumnName(@"User").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Abc).HasColumnName(@"ABC").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Performance).HasColumnName(@"Performance").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformanceAverage).HasColumnName(@"PerformanceAverage").HasColumnType("real").IsRequired();
            builder.Property(x => x.PerformancePercent).HasColumnName(@"PerformancePercent").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PerformanceStatus).HasColumnName(@"PerformanceStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PositionId).HasColumnName(@"PositionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ShiftId).HasColumnName(@"ShiftID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PayRollMonthlyRemark).HasColumnName(@"PayRollMonthlyRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PersonnelCheck).HasColumnName(@"PersonnelCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SafetyCheck).HasColumnName(@"SafetyCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ManagerCheck).HasColumnName(@"ManagerCheck").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DepartmentNameShort).HasColumnName(@"DepartmentNameShort").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.PayRollMonthlyId).HasColumnName(@"PayRollMonthlyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AbCtemp).HasColumnName(@"ABCtemp").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PositionVietnam).HasColumnName(@"PositionVietnam").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupervisorUser).HasColumnName(@"SupervisorUser").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.SupervisorRemark).HasColumnName(@"SupervisorRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.PersonnelRemark).HasColumnName(@"PersonnelRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SafetyRemark).HasColumnName(@"SafetyRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ManagerRemark).HasColumnName(@"ManagerRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Tt).HasColumnName(@"TT").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.EvaluationSafety).HasColumnName(@"EvaluationSafety").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationPerformance).HasColumnName(@"EvaluationPerformance").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationTime).HasColumnName(@"EvaluationTime").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.EvaluationAttitude).HasColumnName(@"EvaluationAttitude").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.WorkingDayNightShift).HasColumnName(@"WorkingDayNightShift").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PayRollMonth).HasColumnName(@"PayRollMonth").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
        }
    }

    // ViewPickPackShip_Month
    public class ViewPickPackShipMonthConfiguration : IEntityTypeConfiguration<ViewPickPackShipMonth>
    {
        public void Configure(EntityTypeBuilder<ViewPickPackShipMonth> builder)
        {
            builder.ToView("ViewPickPackShip_Month", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("varchar(32)").IsRequired(false).IsUnicode(false).HasMaxLength(32);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.CustomerLocalId).HasColumnName(@"CustomerLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.StatusProcess).HasColumnName(@"StatusProcess").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.TransporterId).HasColumnName(@"TransporterID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TripDate).HasColumnName(@"TripDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.TripNumber).HasColumnName(@"TripNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.AtmOrderReleaseId).HasColumnName(@"ATM_OrderReleaseID").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // ViewProductionQtyMasan
    public class ViewProductionQtyMasanConfiguration : IEntityTypeConfiguration<ViewProductionQtyMasan>
    {
        public void Configure(EntityTypeBuilder<ViewProductionQtyMasan> builder)
        {
            builder.ToView("ViewProductionQtyMasan", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.Chanel).HasColumnName(@"Chanel").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ChanelName).HasColumnName(@"ChanelName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar(13)").IsRequired().HasMaxLength(13);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
        }
    }

    // ViewProductMain
    public class ViewProductMainConfiguration : IEntityTypeConfiguration<ViewProductMain>
    {
        public void Configure(EntityTypeBuilder<ViewProductMain> builder)
        {
            builder.ToView("ViewProductMain", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumberMain).HasColumnName(@"ProductNumberMain").HasColumnType("nvarchar(26)").IsRequired(false).HasMaxLength(26);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
        }
    }

    // ViewProductMainGroup
    public class ViewProductMainGroupConfiguration : IEntityTypeConfiguration<ViewProductMainGroup>
    {
        public void Configure(EntityTypeBuilder<ViewProductMainGroup> builder)
        {
            builder.ToView("ViewProductMainGroup", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNumberMain).HasColumnName(@"ProductNumberMain").HasColumnType("nvarchar(26)").IsRequired(false).HasMaxLength(26);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired(false);
        }
    }

    // ViewProductNameMain_MSN
    public class ViewProductNameMainMsnConfiguration : IEntityTypeConfiguration<ViewProductNameMainMsn>
    {
        public void Configure(EntityTypeBuilder<ViewProductNameMainMsn> builder)
        {
            builder.ToView("ViewProductNameMain_MSN", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNameMain).HasColumnName(@"ProductNameMain").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumberMain).HasColumnName(@"ProductNumberMain").HasColumnType("nvarchar(26)").IsRequired(false).HasMaxLength(26);
            builder.Property(x => x.ProductNumberSub).HasColumnName(@"ProductNumberSub").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductNameSub).HasColumnName(@"ProductNameSub").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // ViewPropertyMovements
    public class ViewPropertyMovementConfiguration : IEntityTypeConfiguration<ViewPropertyMovement>
    {
        public void Configure(EntityTypeBuilder<ViewPropertyMovement> builder)
        {
            builder.ToView("ViewPropertyMovements", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PropertyName).HasColumnName(@"PropertyName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.AuthorizedBy).HasColumnName(@"AuthorizedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Gate).HasColumnName(@"Gate").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("float").IsRequired();
            builder.Property(x => x.PropertyMovementDate).HasColumnName(@"PropertyMovementDate").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // ViewQAChecking
    public class ViewQaCheckingConfiguration : IEntityTypeConfiguration<ViewQaChecking>
    {
        public void Configure(EntityTypeBuilder<ViewQaChecking> builder)
        {
            builder.ToView("ViewQAChecking", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(38,5)").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Original).HasColumnName(@"Original").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Supplier).HasColumnName(@"Supplier").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Manufactured).HasColumnName(@"Manufactured").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DocumentFileScan).HasColumnName(@"DocumentFileScan").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CustomNo).HasColumnName(@"CustomNo").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ContainerNo).HasColumnName(@"ContainerNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewQHSELatestComment
    public class ViewQhseLatestCommentConfiguration : IEntityTypeConfiguration<ViewQhseLatestComment>
    {
        public void Configure(EntityTypeBuilder<ViewQhseLatestComment> builder)
        {
            builder.ToView("ViewQHSELatestComment", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.Qhseid).HasColumnName(@"QHSEID").HasColumnType("int").IsRequired();
            builder.Property(x => x.LatestCommentBy).HasColumnName(@"LatestCommentBy").HasColumnType("nvarchar(83)").IsRequired(false).HasMaxLength(83);
            builder.Property(x => x.LatestComment).HasColumnName(@"LatestComment").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.CommentQty).HasColumnName(@"CommentQty").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewqryComboCustomerID
    public class ViewqryComboCustomerIdConfiguration : IEntityTypeConfiguration<ViewqryComboCustomerId>
    {
        public void Configure(EntityTypeBuilder<ViewqryComboCustomerId> builder)
        {
            builder.ToView("ViewqryComboCustomerID", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerType).HasColumnName(@"CustomerType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerDiscontinued).HasColumnName(@"CustomerDiscontinued").HasColumnType("bit").IsRequired();
        }
    }

    // ViewRandomWeightPallets
    public class ViewRandomWeightPalletConfiguration : IEntityTypeConfiguration<ViewRandomWeightPallet>
    {
        public void Configure(EntityTypeBuilder<ViewRandomWeightPallet> builder)
        {
            builder.ToView("ViewRandomWeightPallets", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
        }
    }

    // ViewReceivingMasan
    public class ViewReceivingMasanConfiguration : IEntityTypeConfiguration<ViewReceivingMasan>
    {
        public void Configure(EntityTypeBuilder<ViewReceivingMasan> builder)
        {
            builder.ToView("ViewReceivingMasan", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(38,5)").IsRequired(false);
        }
    }

    // ViewRoutingDayBefor
    public class ViewRoutingDayBeforConfiguration : IEntityTypeConfiguration<ViewRoutingDayBefor>
    {
        public void Configure(EntityTypeBuilder<ViewRoutingDayBefor> builder)
        {
            builder.ToView("ViewRoutingDayBefor", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RouteCode).HasColumnName(@"RouteCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.ShipTo).HasColumnName(@"ShipTo").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // ViewSafetyStockReason
    public class ViewSafetyStockReasonConfiguration : IEntityTypeConfiguration<ViewSafetyStockReason>
    {
        public void Configure(EntityTypeBuilder<ViewSafetyStockReason> builder)
        {
            builder.ToView("ViewSafetyStockReason", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductId6).HasColumnName(@"ProductID6").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.ReasonTime).HasColumnName(@"ReasonTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Owner).HasColumnName(@"Owner").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductId6Stock).HasColumnName(@"ProductID6_Stock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductIdPackStock).HasColumnName(@"ProductIDPack_Stock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId2Stock).HasColumnName(@"ProductID2_Stock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SafetyStockReasonId).HasColumnName(@"SafetyStockReasonID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IsCurrent).HasColumnName(@"IsCurrent").HasColumnType("bit").IsRequired(false);
        }
    }

    // ViewScanCheckStockByLot
    public class ViewScanCheckStockByLotConfiguration : IEntityTypeConfiguration<ViewScanCheckStockByLot>
    {
        public void Configure(EntityTypeBuilder<ViewScanCheckStockByLot> builder)
        {
            builder.ToView("ViewScanCheckStockByLot", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StockAfterScan).HasColumnName(@"StockAfterScan").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WeightAfterScan).HasColumnName(@"WeightAfterScan").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ViewStockDispatchByLot
    public class ViewStockDispatchByLotConfiguration : IEntityTypeConfiguration<ViewStockDispatchByLot>
    {
        public void Configure(EntityTypeBuilder<ViewStockDispatchByLot> builder)
        {
            builder.ToView("ViewStockDispatchByLot", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.SendStatus).HasColumnName(@"SendStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SoNumber).HasColumnName(@"SONumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ShipToLocation).HasColumnName(@"SHIP_TO_LOCATION").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.ItemNumber).HasColumnName(@"ItemNumber").HasColumnType("nvarchar(26)").IsRequired().HasMaxLength(26);
            builder.Property(x => x.Uom1).HasColumnName(@"Uom1").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ShipQty1).HasColumnName(@"ShipQty1").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.Uom2).HasColumnName(@"Uom2").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.ShipQty2).HasColumnName(@"ShipQty2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.StartWorkingTime).HasColumnName(@"StartWorkingTime").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.EndWorkingTime).HasColumnName(@"EndWorkingTime").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.DriverMobile).HasColumnName(@"DriverMobile").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Transporter).HasColumnName(@"Transporter").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.TripDate).HasColumnName(@"TripDate").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.TripConfirmedTime).HasColumnName(@"TripConfirmedTime").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.TripNumber).HasColumnName(@"TripNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DetailId).HasColumnName(@"DetailID").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.Sub).HasColumnName(@"Sub").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("varchar(4)").IsRequired().IsUnicode(false).HasMaxLength(4);
        }
    }

    // ViewStockDispatchByLotSumary
    public class ViewStockDispatchByLotSumaryConfiguration : IEntityTypeConfiguration<ViewStockDispatchByLotSumary>
    {
        public void Configure(EntityTypeBuilder<ViewStockDispatchByLotSumary> builder)
        {
            builder.ToView("ViewStockDispatchByLotSumary", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.ItemNumber).HasColumnName(@"ItemNumber").HasColumnType("nvarchar(26)").IsRequired().HasMaxLength(26);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ShipQty1).HasColumnName(@"ShipQty1").HasColumnType("decimal(38,3)").IsRequired(false);
            builder.Property(x => x.ShipQty2).HasColumnName(@"ShipQty2").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("varchar(4)").IsRequired().IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // ViewStockMovement
    public class ViewStockMovementConfiguration : IEntityTypeConfiguration<ViewStockMovement>
    {
        public void Configure(EntityTypeBuilder<ViewStockMovement> builder)
        {
            builder.ToView("ViewStockMovement", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletIdBarcode).HasColumnName(@"PalletID_Barcode").HasColumnType("varchar(8000)").IsRequired(false).IsUnicode(false).HasMaxLength(8000);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.OldLabel).HasColumnName(@"OldLabel").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Total).HasColumnName(@"Total").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.RPallet).HasColumnName(@"R_Pallet").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.RRo).HasColumnName(@"R_RO").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.GrossWeight).HasColumnName(@"GrossWeight").HasColumnType("decimal(26,5)").IsRequired(false);
            builder.Property(x => x.Label1).HasColumnName(@"Label1").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.ReceivingOrderRemark).HasColumnName(@"ReceivingOrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SumQuantity).HasColumnName(@"SumQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationType).HasColumnName(@"LocationType").HasColumnType("varchar(3)").IsRequired().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RemarkCombine).HasColumnName(@"RemarkCombine").HasColumnType("nvarchar(1102)").IsRequired().HasMaxLength(1102);
            builder.Property(x => x.StockMovementMassId).HasColumnName(@"StockMovementMassID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StockMovementMassNumber).HasColumnName(@"StockMovementMassNumber").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.PalletWeights).HasColumnName(@"PalletWeights").HasColumnType("decimal(21,5)").IsRequired(false);
        }
    }

    // ViewStockOnHandByLotAllCustomers
    public class ViewStockOnHandByLotAllCustomerConfiguration : IEntityTypeConfiguration<ViewStockOnHandByLotAllCustomer>
    {
        public void Configure(EntityTypeBuilder<ViewStockOnHandByLotAllCustomer> builder)
        {
            builder.ToView("ViewStockOnHandByLotAllCustomers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OriginalQty).HasColumnName(@"OriginalQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CurrentQty).HasColumnName(@"CurrentQty").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewStockOnHandByWarehouse
    public class ViewStockOnHandByWarehouseConfiguration : IEntityTypeConfiguration<ViewStockOnHandByWarehouse>
    {
        public void Configure(EntityTypeBuilder<ViewStockOnHandByWarehouse> builder)
        {
            builder.ToView("ViewStockOnHandByWarehouse", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.WarehouseDescription).HasColumnName(@"WarehouseDescription").HasColumnType("char(50)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Qty).HasColumnName(@"Qty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("float").IsRequired(false);
        }
    }

    // ViewStockOnHandDailyRoomB
    public class ViewStockOnHandDailyRoomBConfiguration : IEntityTypeConfiguration<ViewStockOnHandDailyRoomB>
    {
        public void Configure(EntityTypeBuilder<ViewStockOnHandDailyRoomB> builder)
        {
            builder.ToView("ViewStockOnHandDailyRoomB", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.TotalPallets).HasColumnName(@"TotalPallets").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Occupancy).HasColumnName(@"Occupancy").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.QuantityOfPallets).HasColumnName(@"QuantityOfPallets").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewStockOnHandInPalletUnitWeight
    public class ViewStockOnHandInPalletUnitWeightConfiguration : IEntityTypeConfiguration<ViewStockOnHandInPalletUnitWeight>
    {
        public void Configure(EntityTypeBuilder<ViewStockOnHandInPalletUnitWeight> builder)
        {
            builder.ToView("ViewStockOnHandInPalletUnitWeight", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.RemainUnits).HasColumnName(@"RemainUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RemainWeight).HasColumnName(@"RemainWeight").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
        }
    }

    // ViewStockTakeByRequestData
    public class ViewStockTakeByRequestDataConfiguration : IEntityTypeConfiguration<ViewStockTakeByRequestData>
    {
        public void Configure(EntityTypeBuilder<ViewStockTakeByRequestData> builder)
        {
            builder.ToView("ViewStockTakeByRequestData", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.RoDetailRemark).HasColumnName(@"RODetailRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("char(1)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.High).HasColumnName(@"High").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PalletRemark).HasColumnName(@"PalletRemark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewStocProductByCustomer
    public class ViewStocProductByCustomerConfiguration : IEntityTypeConfiguration<ViewStocProductByCustomer>
    {
        public void Configure(EntityTypeBuilder<ViewStocProductByCustomer> builder)
        {
            builder.ToView("ViewStocProductByCustomer", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerLocalId).HasColumnName(@"CustomerLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(38,5)").IsRequired(false);
        }
    }

    // ViewSuppliers
    public class ViewSupplierConfiguration : IEntityTypeConfiguration<ViewSupplier>
    {
        public void Configure(EntityTypeBuilder<ViewSupplier> builder)
        {
            builder.ToView("ViewSuppliers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.SupplierAddress).HasColumnName(@"SupplierAddress").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SupplierContactName).HasColumnName(@"SupplierContactName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierTitle).HasColumnName(@"SupplierTitle").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierPhone).HasColumnName(@"SupplierPhone").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierFax).HasColumnName(@"SupplierFax").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierEmail).HasColumnName(@"SupplierEmail").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.SupplierRemark).HasColumnName(@"SupplierRemark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.SupplierFullName).HasColumnName(@"SupplierFullName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.StrategicSupplier).HasColumnName(@"StrategicSupplier").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.SupplierTaxCode).HasColumnName(@"SupplierTaxCode").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.SupplierBankAccountNumber).HasColumnName(@"SupplierBankAccountNumber").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.SupplierBankAccountName).HasColumnName(@"SupplierBankAccountName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SupplierOldId).HasColumnName(@"SupplierOldID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupplierMobile).HasColumnName(@"SupplierMobile").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SupplierWebsite).HasColumnName(@"SupplierWebsite").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
        }
    }

    // ViewTotalByLocation
    public class ViewTotalByLocationConfiguration : IEntityTypeConfiguration<ViewTotalByLocation>
    {
        public void Configure(EntityTypeBuilder<ViewTotalByLocation> builder)
        {
            builder.ToView("ViewTotalByLocation", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Total).HasColumnName(@"Total").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.TotalCurrentQuantity).HasColumnName(@"TotalCurrentQuantity").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewTotalDispatchingCartons
    public class ViewTotalDispatchingCartonConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingCarton>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingCarton> builder)
        {
            builder.ToView("ViewTotalDispatchingCartons", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingCartonId).HasColumnName(@"DispatchingCartonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CartonWeight).HasColumnName(@"CartonWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingRemark).HasColumnName(@"DispatchingRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.PalletCartonId).HasColumnName(@"PalletCartonID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CartonUnit).HasColumnName(@"CartonUnit").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewTotalDispatchingLocations
    public class ViewTotalDispatchingLocationConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingLocation>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingLocation> builder)
        {
            builder.ToView("ViewTotalDispatchingLocations", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingLocationId).HasColumnName(@"DispatchingLocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("int").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.QuantityOfPackages).HasColumnName(@"QuantityOfPackages").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.DispatchingLocationRemark).HasColumnName(@"DispatchingLocationRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.DispatchingLocationStatus).HasColumnName(@"DispatchingLocationStatus").HasColumnType("bit").IsRequired();
        }
    }

    // ViewTotalDispatchingOrders
    public class ViewTotalDispatchingOrderConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingOrder>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingOrder> builder)
        {
            builder.ToView("ViewTotalDispatchingOrders", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderDate).HasColumnName(@"DispatchingOrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingOrderRemark).HasColumnName(@"DispatchingOrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // ViewTotalDispatchingOrderDetails
    public class ViewTotalDispatchingOrderDetailConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingOrderDetail> builder)
        {
            builder.ToView("ViewTotalDispatchingOrderDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackageQuantity).HasColumnName(@"PackageQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailRemark).HasColumnName(@"DispatchingOrderDetailRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CheckBreak).HasColumnName(@"CheckBreak").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingScannedBy).HasColumnName(@"DispatchingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingScannedTime).HasColumnName(@"DispatchingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PickingScannedBy).HasColumnName(@"PickingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PickingScannedTime).HasColumnName(@"PickingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ViewTotalDispatchingOrderDetailsConfirmed
    public class ViewTotalDispatchingOrderDetailsConfirmedConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingOrderDetailsConfirmed>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingOrderDetailsConfirmed> builder)
        {
            builder.ToView("ViewTotalDispatchingOrderDetailsConfirmed", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackageQuantity).HasColumnName(@"PackageQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailRemark).HasColumnName(@"DispatchingOrderDetailRemark").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Checked).HasColumnName(@"Checked").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CheckBreak).HasColumnName(@"CheckBreak").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingScannedBy).HasColumnName(@"DispatchingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DispatchingScannedTime).HasColumnName(@"DispatchingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PickingScannedBy).HasColumnName(@"PickingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PickingScannedTime).HasColumnName(@"PickingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ViewTotalDispatchingProducts
    public class ViewTotalDispatchingProductConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingProduct>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingProduct> builder)
        {
            builder.ToView("ViewTotalDispatchingProducts", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingProductId).HasColumnName(@"DispatchingProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewTotalDispatchingProductCartons
    public class ViewTotalDispatchingProductCartonConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingProductCarton>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingProductCarton> builder)
        {
            builder.ToView("ViewTotalDispatchingProductCartons", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CartonDescription).HasColumnName(@"CartonDescription").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,3)").IsRequired(false);
            builder.Property(x => x.PackageType).HasColumnName(@"PackageType").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Completed).HasColumnName(@"Completed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.DispatchingProductCartonDate).HasColumnName(@"DispatchingProductCartonDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.IsDispatch).HasColumnName(@"IsDispatch").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.UserDispatch).HasColumnName(@"UserDispatch").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DeviceNumberDispatch).HasColumnName(@"DeviceNumberDispatch").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DispatchTime).HasColumnName(@"DispatchTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InnerQty).HasColumnName(@"InnerQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // ViewTotalDispatchingProductPacks
    public class ViewTotalDispatchingProductPackConfiguration : IEntityTypeConfiguration<ViewTotalDispatchingProductPack>
    {
        public void Configure(EntityTypeBuilder<ViewTotalDispatchingProductPack> builder)
        {
            builder.ToView("ViewTotalDispatchingProductPacks", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DispatchingProductPackId).HasColumnName(@"DispatchingProductPackID").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.DispatchingProductCartonId).HasColumnName(@"DispatchingProductCartonID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DispatchingOrderDetailId).HasColumnName(@"DispatchingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StoreDescription).HasColumnName(@"StoreDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.ProductCategoryDescription).HasColumnName(@"ProductCategoryDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // ViewTotalPallets
    public class ViewTotalPalletConfiguration : IEntityTypeConfiguration<ViewTotalPallet>
    {
        public void Configure(EntityTypeBuilder<ViewTotalPallet> builder)
        {
            builder.ToView("ViewTotalPallets", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.AfterDpQuantity).HasColumnName(@"AfterDPQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CanMove).HasColumnName(@"CanMove").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(800)").IsRequired(false).HasMaxLength(800);
            builder.Property(x => x.CanNotAdd).HasColumnName(@"CanNotAdd").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UnitQuantity).HasColumnName(@"UnitQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PalletWeight).HasColumnName(@"PalletWeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PalletStatus).HasColumnName(@"PalletStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReceivingScannedBy).HasColumnName(@"ReceivingScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReceivingScannedTime).HasColumnName(@"ReceivingScannedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.PutAwayScannedBy).HasColumnName(@"PutAwayScannedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PutAwayScannedTime).HasColumnName(@"PutAwayScannedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // ViewTotalReceivingOrders
    public class ViewTotalReceivingOrderConfiguration : IEntityTypeConfiguration<ViewTotalReceivingOrder>
    {
        public void Configure(EntityTypeBuilder<ViewTotalReceivingOrder> builder)
        {
            builder.ToView("ViewTotalReceivingOrders", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.ReceivingOrderRemark).HasColumnName(@"ReceivingOrderRemark").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
        }
    }

    // ViewTotalReceivingOrderDetails
    public class ViewTotalReceivingOrderDetailConfiguration : IEntityTypeConfiguration<ViewTotalReceivingOrderDetail>
    {
        public void Configure(EntityTypeBuilder<ViewTotalReceivingOrderDetail> builder)
        {
            builder.ToView("ViewTotalReceivingOrderDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ReceivingOrderId).HasColumnName(@"ReceivingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("real").IsRequired();
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.PalletHeight).HasColumnName(@"PalletHeight").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Plts).HasColumnName(@"Plts").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.PackingListQuantity).HasColumnName(@"PackingListQuantity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.UnitPerPackage).HasColumnName(@"UnitPerPackage").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(25)").IsRequired(false).HasMaxLength(25);
            builder.Property(x => x.RejectPercentage).HasColumnName(@"RejectPercentage").HasColumnType("decimal(10,4)").IsRequired(false);
            builder.Property(x => x.PackagingWeight).HasColumnName(@"PackagingWeight").HasColumnType("decimal(10,4)").IsRequired(false);
        }
    }

    // ViewTotalStockRemain
    public class ViewTotalStockRemainConfiguration : IEntityTypeConfiguration<ViewTotalStockRemain>
    {
        public void Configure(EntityTypeBuilder<ViewTotalStockRemain> builder)
        {
            builder.ToView("ViewTotalStockRemain", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.GrossWeightPerPackage).HasColumnName(@"GrossWeightPerPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.ReceivingOrderNumber).HasColumnName(@"ReceivingOrderNumber").HasColumnType("nvarchar(16)").IsRequired(false).HasMaxLength(16);
            builder.Property(x => x.ReceivingOrderDate).HasColumnName(@"ReceivingOrderDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.SpecialRequirement).HasColumnName(@"SpecialRequirement").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.OriginalQuantity).HasColumnName(@"OriginalQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CurrentQuantity).HasColumnName(@"CurrentQuantity").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.UseByDate).HasColumnName(@"UseByDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.OnHold).HasColumnName(@"OnHold").HasColumnType("bit").IsRequired();
        }
    }

    // ViewTotalUnit_Out
    public class ViewTotalUnitOutConfiguration : IEntityTypeConfiguration<ViewTotalUnitOut>
    {
        public void Configure(EntityTypeBuilder<ViewTotalUnitOut> builder)
        {
            builder.ToView("ViewTotalUnit_Out", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OutUnit).HasColumnName(@"Out_Unit").HasColumnType("int").IsRequired(false);
        }
    }

    // ViewTripDispatchingPlan
    public class ViewTripDispatchingPlanConfiguration : IEntityTypeConfiguration<ViewTripDispatchingPlan>
    {
        public void Configure(EntityTypeBuilder<ViewTripDispatchingPlan> builder)
        {
            builder.ToView("ViewTripDispatchingPlan", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.TripNumber).HasColumnName(@"TripNumber").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.TripDate).HasColumnName(@"TripDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.TripTotalCtns).HasColumnName(@"TripTotalCtns").HasColumnType("int").IsRequired(false);
        }
    }

    // Warehouses
    public class WarehouseConfiguration : IEntityTypeConfiguration<Warehouse>
    {
        public void Configure(EntityTypeBuilder<Warehouse> builder)
        {
            builder.ToTable("Warehouses", "dbo");
            builder.HasKey(x => x.WarehouseId).HasName("PK_Warehouse").IsClustered();

            builder.Property(x => x.WarehouseId).HasColumnName(@"WarehouseID").HasColumnType("tinyint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.WarehouseDescription).HasColumnName(@"WarehouseDescription").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
        }
    }

    // Warnings
    public class WarningConfiguration : IEntityTypeConfiguration<Warning>
    {
        public void Configure(EntityTypeBuilder<Warning> builder)
        {
            builder.ToTable("Warnings", "dbo");
            builder.HasKey(x => x.WarningId).HasName("PK_Warnings").IsClustered();

            builder.Property(x => x.WarningId).HasColumnName(@"WarningID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.WarningDate).HasColumnName(@"WarningDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Department).HasColumnName(@"Department").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WrongDoingDescription).HasColumnName(@"WrongDoingDescription").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.OccuringTime).HasColumnName(@"OccuringTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OccurringLocation).HasColumnName(@"OccurringLocation").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.EmployeeFeedback).HasColumnName(@"EmployeeFeedback").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ConfirmedBy).HasColumnName(@"ConfirmedBy").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.ConfirmTime).HasColumnName(@"ConfirmTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Official).HasColumnName(@"Official").HasColumnType("bit").IsRequired();
            builder.Property(x => x.WarningNumber).HasColumnName(@"WarningNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.EmployeeKpiDefinitionId).HasColumnName(@"EmployeeKPIDefinitionID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // WavePickings
    public class WavePickingConfiguration : IEntityTypeConfiguration<WavePicking>
    {
        public void Configure(EntityTypeBuilder<WavePicking> builder)
        {
            builder.ToTable("WavePickings", "dbo");
            builder.HasKey(x => x.WavePickingId).HasName("PK_WavePickings_1");

            builder.Property(x => x.WavePickingNumber).HasColumnName(@"WavePickingNumber").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.WavePickingDate).HasColumnName(@"WavePickingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.WavePickingRemark).HasColumnName(@"WavePickingRemark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.WaveConfirmed).HasColumnName(@"WaveConfirmed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.StartWorkingTime).HasColumnName(@"StartWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.EndWorkingTime).HasColumnName(@"EndWorkingTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WavePickingId).HasColumnName(@"WavePickingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.WavePickingLocalId).HasColumnName(@"WavePickingLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.VehicleNumber).HasColumnName(@"VehicleNumber").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.DockDoorId).HasColumnName(@"DockDoorID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WavePickingType).HasColumnName(@"WavePickingType").HasColumnType("tinyint").IsRequired(false);
        }
    }

    // WavePickingDetails
    public class WavePickingDetailConfiguration : IEntityTypeConfiguration<WavePickingDetail>
    {
        public void Configure(EntityTypeBuilder<WavePickingDetail> builder)
        {
            builder.ToTable("WavePickingDetails", "dbo");
            builder.HasKey(x => x.WavePickingDetailId).HasName("PK_WavePickingDetails_1");

            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(16)").IsRequired().IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.TotalPackages).HasColumnName(@"TotalPackages").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalPallets).HasColumnName(@"TotalPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TotalUnits).HasColumnName(@"TotalUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WavePickingDetailId).HasColumnName(@"WavePickingDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WavePickingId).HasColumnName(@"WavePickingID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // WebBillingDetailBreakdown
    public class WebBillingDetailBreakdownConfiguration : IEntityTypeConfiguration<WebBillingDetailBreakdown>
    {
        public void Configure(EntityTypeBuilder<WebBillingDetailBreakdown> builder)
        {
            builder.ToView("WebBillingDetailBreakdown", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BillingDate).HasColumnName(@"BillingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingFromDate).HasColumnName(@"BillingFromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingToDate).HasColumnName(@"BillingToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.ReportDate).HasColumnName(@"ReportDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.BeginW).HasColumnName(@"BeginW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.InW).HasColumnName(@"InW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.OutW).HasColumnName(@"OutW").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CloseW).HasColumnName(@"CloseW").HasColumnType("real").IsRequired(false);
        }
    }

    // WebBillingOneCustomers
    public class WebBillingOneCustomerConfiguration : IEntityTypeConfiguration<WebBillingOneCustomer>
    {
        public void Configure(EntityTypeBuilder<WebBillingOneCustomer> builder)
        {
            builder.ToView("WebBillingOneCustomers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BillingDate).HasColumnName(@"BillingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingFromDate).HasColumnName(@"BillingFromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingToDate).HasColumnName(@"BillingToDate").HasColumnType("smalldatetime").IsRequired();
        }
    }

    // WebBillingReportDetails
    public class WebBillingReportDetailConfiguration : IEntityTypeConfiguration<WebBillingReportDetail>
    {
        public void Configure(EntityTypeBuilder<WebBillingReportDetail> builder)
        {
            builder.ToView("WebBillingReportDetails", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ServiceNumber).HasColumnName(@"ServiceNumber").HasColumnType("nvarchar(14)").IsRequired(false).HasMaxLength(14);
            builder.Property(x => x.ServiceName).HasColumnName(@"ServiceName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Measure).HasColumnName(@"Measure").HasColumnType("nvarchar(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.ServiceQuantity).HasColumnName(@"ServiceQuantity").HasColumnType("decimal(13,3)").IsRequired(false);
            builder.Property(x => x.BillingId).HasColumnName(@"BillingID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BillingDate).HasColumnName(@"BillingDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingFromDate).HasColumnName(@"BillingFromDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.BillingToDate).HasColumnName(@"BillingToDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
        }
    }

    // WebEDIOrderReview
    public class WebEdiOrderReviewConfiguration : IEntityTypeConfiguration<WebEdiOrderReview>
    {
        public void Configure(EntityTypeBuilder<WebEdiOrderReview> builder)
        {
            builder.ToView("WebEDIOrderReview", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CustomerOrderNumber).HasColumnName(@"CustomerOrderNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CustomerReference).HasColumnName(@"CustomerReference").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.ProcessingTime).HasColumnName(@"ProcessingTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ProcessingStatus).HasColumnName(@"ProcessingStatus").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType("int").IsRequired();
            builder.Property(x => x.ProcessingOrderNumber).HasColumnName(@"ProcessingOrderNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProcessedBy).HasColumnName(@"ProcessedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FileUploaded).HasColumnName(@"FileUploaded").HasColumnType("bit").IsRequired();
            builder.Property(x => x.FileUploadedCode).HasColumnName(@"FileUploadedCode").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TotalQuantity).HasColumnName(@"TotalQuantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("int").IsRequired();
        }
    }

    // WebUsers
    public class WebUserConfiguration : IEntityTypeConfiguration<WebUser>
    {
        public void Configure(EntityTypeBuilder<WebUser> builder)
        {
            builder.ToTable("WebUsers", "dbo");
            builder.HasKey(x => x.UserName).HasName("PK_WebUsers").IsClustered();

            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.AllowEdi).HasColumnName(@"AllowEDI").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LastAccessed).HasColumnName(@"LastAccessed").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerStore).HasColumnName(@"CustomerStore").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // WMSDB_Customers
    public class WmsdbCustomerConfiguration : IEntityTypeConfiguration<WmsdbCustomer>
    {
        public void Configure(EntityTypeBuilder<WmsdbCustomer> builder)
        {
            builder.ToView("WMSDB_Customers", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerLocalId).HasColumnName(@"CustomerLocalID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.CustomerFullName).HasColumnName(@"CustomerFullName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Initial).HasColumnName(@"Initial").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerType).HasColumnName(@"CustomerType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.PrimaryContact).HasColumnName(@"PrimaryContact").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Phone1).HasColumnName(@"Phone1").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Phone2).HasColumnName(@"Phone2").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(3000)").IsRequired(false).IsUnicode(false).HasMaxLength(3000);
            builder.Property(x => x.OtherContacts).HasColumnName(@"OtherContacts").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.MarketingInfor).HasColumnName(@"MarketingInfor").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.CustomerInvoiceName).HasColumnName(@"CustomerInvoiceName").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerInvoiceAddress).HasColumnName(@"CustomerInvoiceAddress").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CustomerInvoiceTaxCode).HasColumnName(@"CustomerInvoiceTaxCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.CustomerDiscontinued).HasColumnName(@"CustomerDiscontinued").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CustomerCategory).HasColumnName(@"CustomerCategory").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CustomerGroup).HasColumnName(@"CustomerGroup").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SendNote).HasColumnName(@"SendNote").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerSubId).HasColumnName(@"CustomerSubID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Hold).HasColumnName(@"Hold").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HoldMessage).HasColumnName(@"HoldMessage").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.HoldLimitWeight).HasColumnName(@"HoldLimitWeight").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.HomeLocationChange).HasColumnName(@"HomeLocationChange").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DispatchingByClient).HasColumnName(@"DispatchingByClient").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerPalletType).HasColumnName(@"CustomerPalletType").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.Website).HasColumnName(@"Website").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.EmailBilling).HasColumnName(@"EmailBilling").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.CustomerDispatchType).HasColumnName(@"CustomerDispatchType").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsAllowEdi).HasColumnName(@"IsAllowEDI").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerTaxGroup).HasColumnName(@"CustomerTaxGroup").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.BarcodeScanRequire).HasColumnName(@"BarcodeScanRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PrintLabelRemainRequire).HasColumnName(@"PrintLabelRemainRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.DefaultProcessTime).HasColumnName(@"DefaultProcessTime").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerPotentialCategoryId).HasColumnName(@"CustomerPotentialCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsAllowOnlineReport).HasColumnName(@"IsAllowOnlineReport").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.HomeLocation1).HasColumnName(@"HomeLocation1").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.HomeLocation2).HasColumnName(@"HomeLocation2").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustId).HasColumnName(@"CustId").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerStatus).HasColumnName(@"CustomerStatus").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OpportunityType).HasColumnName(@"OpportunityType").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.OpportunityProbability).HasColumnName(@"OpportunityProbability").HasColumnType("decimal(18,1)").IsRequired(false);
            builder.Property(x => x.OpportunityAssignedToUser).HasColumnName(@"OpportunityAssignedToUser").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerNumberAccounting).HasColumnName(@"CustomerNumberAccounting").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.IsCustomerTest).HasColumnName(@"IsCustomerTest").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CustomerAssignedTo).HasColumnName(@"CustomerAssignedTo").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerAssignedTo0).HasColumnName(@"CustomerAssignedTo0").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsCheckOutRequire).HasColumnName(@"IsCheckOutRequire").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TemperatureFrom).HasColumnName(@"TemperatureFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TemperatureTo).HasColumnName(@"TemperatureTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityFrom).HasColumnName(@"HumidityFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityTo).HasColumnName(@"HumidityTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.CustomerNumberErp).HasColumnName(@"CustomerNumberERP").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // WMSDB_Locations
    public class WmsdbLocationConfiguration : IEntityTypeConfiguration<WmsdbLocation>
    {
        public void Configure(EntityTypeBuilder<WmsdbLocation> builder)
        {
            builder.ToView("WMSDB_Locations", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LocationId).HasColumnName(@"LocationID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.LocationNumber).HasColumnName(@"LocationNumber").HasColumnType("nvarchar(12)").IsRequired().HasMaxLength(12);
            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Aisle).HasColumnName(@"Aisle").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Bay).HasColumnName(@"Bay").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.High).HasColumnName(@"High").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Deep).HasColumnName(@"Deep").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Used).HasColumnName(@"Used").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Top).HasColumnName(@"Top").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Low).HasColumnName(@"Low").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LocationNumberShort).HasColumnName(@"LocationNumberShort").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.IsBusy).HasColumnName(@"isBusy").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ProductQuantity).HasColumnName(@"ProductQuantity").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PalletQuantity).HasColumnName(@"PalletQuantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.VeryLowHigh).HasColumnName(@"VeryLowHigh").HasColumnType("bit").IsRequired();
            builder.Property(x => x.MaxWeight).HasColumnName(@"MaxWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // WMSDB_Products
    public class WmsdbProductConfiguration : IEntityTypeConfiguration<WmsdbProduct>
    {
        public void Configure(EntityTypeBuilder<WmsdbProduct> builder)
        {
            builder.ToView("WMSDB_Products", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.Discontinue).HasColumnName(@"Discontinue").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TemperatureRequire).HasColumnName(@"TemperatureRequire").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.PackagesPerPallet).HasColumnName(@"PackagesPerPallet").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PackagesPerPallet2).HasColumnName(@"PackagesPerPallet2").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(125)").IsRequired(false).HasMaxLength(125);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.PickingLocation).HasColumnName(@"PickingLocation").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.PickingMethod).HasColumnName(@"PickingMethod").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ProductCategory).HasColumnName(@"ProductCategory").HasColumnType("int").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.WarehouseNo).HasColumnName(@"WAREHOUSE_NO").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.GrossWeightPerPackage).HasColumnName(@"GrossWeightPerPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNameVn).HasColumnName(@"ProductNameVN").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.WarningDaysBeforeExpiry).HasColumnName(@"WarningDaysBeforeExpiry").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.IsWeightingRequire).HasColumnName(@"IsWeightingRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsAllowLocationChange).HasColumnName(@"IsAllowLocationChange").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Origin).HasColumnName(@"Origin").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.SafetyStock).HasColumnName(@"SafetyStock").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Pcs).HasColumnName(@"Pcs").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.HomeRoom1).HasColumnName(@"HomeRoom1").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.HomeRoom2).HasColumnName(@"HomeRoom2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.HomeLocation1).HasColumnName(@"HomeLocation1").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.HomeLocation2).HasColumnName(@"HomeLocation2").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ProductMainId).HasColumnName(@"ProductMainID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Packages2).HasColumnName(@"Packages2").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.Shelfdate).HasColumnName(@"Shelfdate").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.InvtId).HasColumnName(@"InvtID").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.MainProductId).HasColumnName(@"MainProductID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerProductGroupId).HasColumnName(@"CustomerProductGroupID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.IsExpDateRequire).HasColumnName(@"IsExpDateRequire").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsProDateRequire).HasColumnName(@"IsProDateRequire").HasColumnType("bit").IsRequired(false);
        }
    }

    // WMSDB_Rooms
    public class WmsdbRoomConfiguration : IEntityTypeConfiguration<WmsdbRoom>
    {
        public void Configure(EntityTypeBuilder<WmsdbRoom> builder)
        {
            builder.ToView("WMSDB_Rooms", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.RoomId).HasColumnName(@"RoomID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.RoomNumber).HasColumnName(@"RoomNumber").HasColumnType("char(2)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("real").IsRequired();
            builder.Property(x => x.DateRoom).HasColumnName(@"DateRoom").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Warehouse).HasColumnName(@"Warehouse").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.RoomDescription).HasColumnName(@"RoomDescription").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.RoomArea).HasColumnName(@"RoomArea").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuantityOfPallets).HasColumnName(@"QuantityOfPallets").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomVolume).HasColumnName(@"RoomVolume").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RoomProductStorage).HasColumnName(@"RoomProductStorage").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.TemperatureFrom).HasColumnName(@"TemperatureFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TemperatureTo).HasColumnName(@"TemperatureTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityFrom).HasColumnName(@"HumidityFrom").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.HumidityTo).HasColumnName(@"HumidityTo").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.LostProductLocationId).HasColumnName(@"LostProductLocationID").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // WMSVersions
    public class WmsVersionConfiguration : IEntityTypeConfiguration<WmsVersion>
    {
        public void Configure(EntityTypeBuilder<WmsVersion> builder)
        {
            builder.ToTable("WMSVersions", "dbo");
            builder.HasKey(x => x.VersionId).HasName("PK_WMSVersions").IsClustered();

            builder.Property(x => x.VersionId).HasColumnName(@"VersionID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.VersionDescription).HasColumnName(@"VersionDescription").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VersionDate).HasColumnName(@"VersionDate").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.VersionRemark).HasColumnName(@"VersionRemark").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.VersionUpdateBy).HasColumnName(@"VersionUpdateBy").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Application).HasColumnName(@"Application").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
        }
    }

    // Works
    public class WorkConfiguration : IEntityTypeConfiguration<Work>
    {
        public void Configure(EntityTypeBuilder<Work> builder)
        {
            builder.ToTable("Works", "dbo");
            builder.HasKey(x => x.WorkId).HasName("PK_MHLWorks").IsClustered();

            builder.Property(x => x.WorkId).HasColumnName(@"WorkID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PayRollMonthId).HasColumnName(@"PayRollMonthID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkDate).HasColumnName(@"WorkDate").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.Received).HasColumnName(@"Received").HasColumnType("int").IsRequired();
            builder.Property(x => x.Damaged).HasColumnName(@"Damaged").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkConfirmed).HasColumnName(@"WorkConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.FromTime).HasColumnName(@"FromTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ToTime).HasColumnName(@"ToTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.Accepted).HasColumnName(@"Accepted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AcceptedBy).HasColumnName(@"AcceptedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Rejected).HasColumnName(@"Rejected").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RejectedBy).HasColumnName(@"RejectedBy").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ManagerFeedback).HasColumnName(@"ManagerFeedback").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.WorkNumber).HasColumnName(@"WorkNumber").HasColumnType("nvarchar(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired();
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OtherServiceDetailId).HasColumnName(@"OtherServiceDetailID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);

            builder.HasIndex(x => x.PayRollMonthId).HasName("IX_MHLWorks_1");
            builder.HasIndex(x => x.WorkDate).HasName("IX_MHLWorks_2");
        }
    }

    // WorkDefinitions
    public class WorkDefinitionConfiguration : IEntityTypeConfiguration<WorkDefinition>
    {
        public void Configure(EntityTypeBuilder<WorkDefinition> builder)
        {
            builder.ToTable("WorkDefinitions", "dbo");
            builder.HasKey(x => x.WorkDefinitionId).HasName("PK_MHLWorkDefinitions").IsClustered();

            builder.Property(x => x.JobName).HasColumnName(@"JobName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Discontinued).HasColumnName(@"Discontinued").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.WorkDefinitionNumber).HasColumnName(@"WorkDefinitionNumber").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.CustomerMainId).HasColumnName(@"CustomerMainID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ServicesDefinitionId).HasColumnName(@"ServicesDefinitionID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.WorkDefinitionId).HasColumnName(@"WorkDefinitionID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
        }
    }

    // WorkDetails
    public class WorkDetailConfiguration : IEntityTypeConfiguration<WorkDetail>
    {
        public void Configure(EntityTypeBuilder<WorkDetail> builder)
        {
            builder.ToTable("WorkDetails", "dbo");
            builder.HasKey(x => x.WorkDetailId).HasName("PK_MHLWorkDetails").IsClustered();

            builder.Property(x => x.WorkDetailId).HasColumnName(@"WorkDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WorkId).HasColumnName(@"WorkID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("real").IsRequired();
            builder.Property(x => x.DetailRemark).HasColumnName(@"DetailRemark").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CheckDelete).HasColumnName(@"CheckDelete").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
        }
    }

    // XDoc_PickingList
    public class XDocPickingListConfiguration : IEntityTypeConfiguration<XDocPickingList>
    {
        public void Configure(EntityTypeBuilder<XDocPickingList> builder)
        {
            builder.ToTable("XDoc_PickingList", "dbo");
            builder.HasKey(x => x.XdocPickingListId).HasName("PK__XDoc_Pic__9245E8105DEC5AC2").IsClustered();

            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.StoreNumber).HasColumnName(@"StoreNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerNumber).HasColumnName(@"CustomerNumber").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CustomerRef2).HasColumnName(@"CustomerRef2").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerRef).HasColumnName(@"CustomerRef").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CustomerClientName).HasColumnName(@"CustomerClientName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.DispatchingOrderNumber).HasColumnName(@"DispatchingOrderNumber").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Weights).HasColumnName(@"Weights").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.RouteCode).HasColumnName(@"RouteCode").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.NetQty).HasColumnName(@"NetQty").HasColumnType("int").IsRequired();
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Complete).HasColumnName(@"Complete").HasColumnType("int").IsRequired();
            builder.Property(x => x.XdocPickingListId).HasColumnName(@"XdocPickingListID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerClientId).HasColumnName(@"CustomerClientID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PalletNumber).HasColumnName(@"PalletNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.DispatchingOrderId).HasColumnName(@"DispatchingOrderID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Confirm).HasColumnName(@"Confirm").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.XdocPickingListCartonId).HasColumnName(@"XdocPickingListCartonID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.EdiOrderId).HasColumnName(@"EDI_OrderID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CustomerRefDetailId).HasColumnName(@"CustomerRef_DetailID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Lot).HasColumnName(@"Lot").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.SortingQty).HasColumnName(@"SortingQty").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceivingOrderDetailId).HasColumnName(@"ReceivingOrderDetailID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.XDocPickingLists).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerID");
            builder.HasOne(a => a.CustomerClient).WithMany(b => b.XDocPickingLists).HasForeignKey(c => c.CustomerClientId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustomerClientID");
            builder.HasOne(a => a.DispatchingOrder).WithMany(b => b.XDocPickingLists).HasForeignKey(c => c.DispatchingOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DispatchingOrderID");
            builder.HasOne(a => a.Product).WithMany(b => b.XDocPickingLists).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Products");

            builder.HasIndex(x => new { x.OrderDate, x.ProductNumber, x.StoreNumber }).HasName("indext_Xdoc_pickinglist_main");
        }
    }

    // XDoc_PickingListCarton
    public class XDocPickingListCartonConfiguration : IEntityTypeConfiguration<XDocPickingListCarton>
    {
        public void Configure(EntityTypeBuilder<XDocPickingListCarton> builder)
        {
            builder.ToTable("XDoc_PickingListCarton", "dbo");
            builder.HasKey(x => x.XDocPickingListCartonId).HasName("PK__XDoc_Pic__500CD57B0B671F45").IsClustered();

            builder.Property(x => x.XDocPickingListCartonId).HasColumnName(@"XDoc_PickingListCartonID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PackageType).HasColumnName(@"PackageType").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.BarcodeString).HasColumnName(@"BarcodeString").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.XDocPickingListId).HasColumnName(@"XDoc_PickingListID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CartonNumber).HasColumnName(@"CartonNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsComplete).HasColumnName(@"IsComplete").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.XDocPickingList).WithMany(b => b.XDocPickingListCartons).HasForeignKey(c => c.XDocPickingListId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_XDoc_PickingListID");
        }
    }

    // XDoc_PickingListDetails
    public class XDocPickingListDetailConfiguration : IEntityTypeConfiguration<XDocPickingListDetail>
    {
        public void Configure(EntityTypeBuilder<XDocPickingListDetail> builder)
        {
            builder.ToTable("XDoc_PickingListDetails", "dbo");
            builder.HasKey(x => x.XDocPickingListDetailId).HasName("PK__XDoc_Pic__2A8EC7F56C90C25E").IsClustered();

            builder.Property(x => x.XDocPickingListDetailId).HasColumnName(@"XDoc_PickingListDetailID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.XdocPickingListId).HasColumnName(@"XdocPickingListID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("smalldatetime").IsRequired(false);
            builder.Property(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NetWeight).HasColumnName(@"NetWeight").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.ProductionDate).HasColumnName(@"ProductionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LotNumber).HasColumnName(@"LotNumber").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.DeviceNumber).HasColumnName(@"DeviceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PackNumber).HasColumnName(@"PackNumber").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.XdocPickingListCartonId).HasColumnName(@"XdocPickingListCartonID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PalletId).HasColumnName(@"PalletID").HasColumnType("uniqueidentifier").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.XDocPickingList).WithMany(b => b.XDocPickingListDetails).HasForeignKey(c => c.XdocPickingListId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_XdocPcikingList");

            builder.HasIndex(x => new { x.XdocPickingListId, x.ProductNumber }).HasName("index_Xdoc_pickingListDetail");
        }
    }

    // xxx_OrderNumber_Unlock
    public class XxxOrderNumberUnlockConfiguration : IEntityTypeConfiguration<XxxOrderNumberUnlock>
    {
        public void Configure(EntityTypeBuilder<XxxOrderNumberUnlock> builder)
        {
            builder.ToTable("xxx_OrderNumber_Unlock", "dbo");
            builder.HasKey(x => x.OrderNumber).HasName("PK_xxx_OrderNumber_Unlock").IsClustered();

            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
        }
    }

    // XXX_Products_LaCusina
    public class XxxProductsLaCusinaConfiguration : IEntityTypeConfiguration<XxxProductsLaCusina>
    {
        public void Configure(EntityTypeBuilder<XxxProductsLaCusina> builder)
        {
            builder.ToTable("XXX_Products_LaCusina", "dbo");
            builder.HasKey(x => x.ProductNumber).HasName("PK_XXXProducts_LaCusina").IsClustered();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.Inners).HasColumnName(@"Inners").HasColumnType("smallint").IsRequired();
        }
    }

    // XXX_Products_SIMBA
    public class XxxProductsSimbaConfiguration : IEntityTypeConfiguration<XxxProductsSimba>
    {
        public void Configure(EntityTypeBuilder<XxxProductsSimba> builder)
        {
            builder.ToTable("XXX_Products_SIMBA", "dbo");
            builder.HasKey(x => x.ProductNumber).HasName("PK_XXX_Products_SIMBA").IsClustered();

            builder.Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.WeightPerPackageSimba).HasColumnName(@"WeightPerPackage_SIMBA").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.GrossWeightPerPackageSimba).HasColumnName(@"GrossWeightPerPackage_SIMBA").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.WeightPerPackage).HasColumnName(@"WeightPerPackage").HasColumnType("decimal(15,5)").IsRequired();
            builder.Property(x => x.GrossWeightPerPackage).HasColumnName(@"GrossWeightPerPackage").HasColumnType("decimal(15,5)").IsRequired(false);
            builder.Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar(125)").IsRequired(false).HasMaxLength(125);
            builder.Property(x => x.Packages).HasColumnName(@"Packages").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
        }
    }

    // ZNSRatings
    public class ZnsRatingConfiguration : IEntityTypeConfiguration<ZnsRating>
    {
        public void Configure(EntityTypeBuilder<ZnsRating> builder)
        {
            builder.ToTable("ZNSRatings", "dbo");
            builder.HasKey(x => x.ZnsRatingId).HasName("PK_ZNSRatings");

            builder.Property(x => x.ZnsRatingId).HasColumnName(@"ZNSRatingID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ZnsRatingValue).HasColumnName(@"ZNSRatingValue").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.ZnsRatingSetOfCriteria).HasColumnName(@"ZNSRatingSetOfCriteria").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ZnsRatingComment).HasColumnName(@"ZNSRatingComment").HasColumnType("nvarchar(300)").IsRequired(false).HasMaxLength(300);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DriverCode).HasColumnName(@"DriverCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DriverName).HasColumnName(@"DriverName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ZnsRatingDate).HasColumnName(@"ZNSRatingDate").HasColumnType("datetime").IsRequired(false);
        }
    }


    #endregion

}
// </auto-generated>
