// Licence file C:\Users\hoang.phan\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace JourneyControl.Infrastructure.Persistence.Entities.TripPlanning
{
    #region POCO classes

    // Bookings
    public class Booking
    {
        public Guid BookingId { get; set; } // BookingID (Primary key)
        public DateTime BookingDate { get; set; } // BookingDate
        public DateTime DeliveryDate { get; set; } // DeliveryDate
        public string LocationCode { get; set; } // LocationCode (length: 30)
        public string ShipToCode { get; set; } // ShipToCode (length: 255)
        public Guid CustomerId { get; set; } // CustomerID
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdateBy { get; set; } // UpdateBy (length: 30)
        public DateTime UpdateeTime { get; set; } // UpdateeTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime? RemovedTime { get; set; } // RemovedTime
        public decimal TotalWeight { get; set; } // TotalWeight
        public int TotalPackage { get; set; } // TotalPackage
        public Guid PackageId { get; set; } // PackageID (Primary key)
        public Guid ItemId { get; set; } // ItemID (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [Bookings].([CustomerId]) (FK_Booking_CustomerID)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_Booking_CustomerID

        /// <summary>
        /// Parent Item pointed by [Bookings].([ItemId]) (FK_Booking_Item)
        /// </summary>
        public virtual Item Item { get; set; } // FK_Booking_Item

        /// <summary>
        /// Parent Location pointed by [Bookings].([LocationCode], [ShipToCode]) (FK_Booking_Location)
        /// </summary>
        public virtual Location Location { get; set; } // FK_Booking_Location

        /// <summary>
        /// Parent Package pointed by [Bookings].([PackageId]) (FK_Booking_Packages)
        /// </summary>
        public virtual Package Package { get; set; } // FK_Booking_Packages

        public Booking()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // Customers
    public class Customer
    {
        public Guid CustomerId { get; set; } // CustomerID (Primary key)
        public string CustomerCode { get; set; } // CustomerCode (length: 255)
        public string CustomerName { get; set; } // CustomerName (length: 255)
        public int SiteId { get; set; } // SiteID
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public string CreatedTime { get; set; } // CreatedTime (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child Bookings where [Bookings].[CustomerID] point to this entity (FK_Booking_CustomerID)
        /// </summary>
        public virtual ICollection<Booking> Bookings { get; set; } // Bookings.FK_Booking_CustomerID

        /// <summary>
        /// Child Items where [Items].[CustomerID] point to this entity (FK_Item_Customers)
        /// </summary>
        public virtual ICollection<Item> Items { get; set; } // Items.FK_Item_Customers

        /// <summary>
        /// Child Locations where [Locations].[CustomerID] point to this entity (FK_Location_Customer)
        /// </summary>
        public virtual ICollection<Location> Locations { get; set; } // Locations.FK_Location_Customer

        /// <summary>
        /// Child LocationOptimizeWaypoints where [LocationOptimizeWaypoints].[CustomerID] point to this entity (FK_LocationOptimizeWayPoints_Customer)
        /// </summary>
        public virtual ICollection<LocationOptimizeWaypoint> LocationOptimizeWaypoints { get; set; } // LocationOptimizeWaypoints.FK_LocationOptimizeWayPoints_Customer

        /// <summary>
        /// Child MItems where [M_item].[CustomerID] point to this entity (FK_m_item_customers)
        /// </summary>
        public virtual ICollection<MItem> MItems { get; set; } // M_item.FK_m_item_customers

        /// <summary>
        /// Child Packages where [Packages].[CustomerID] point to this entity (FK_Package_Customers)
        /// </summary>
        public virtual ICollection<Package> Packages { get; set; } // Packages.FK_Package_Customers

        // Foreign keys

        /// <summary>
        /// Parent Site pointed by [Customers].([SiteId]) (FK_Customer_Site)
        /// </summary>
        public virtual Site Site { get; set; } // FK_Customer_Site

        public Customer()
        {
            CustomerId = Guid.NewGuid();
            CreatedTime = "getdate()";
            Bookings = new List<Booking>();
            Items = new List<Item>();
            LocationOptimizeWaypoints = new List<LocationOptimizeWaypoint>();
            Locations = new List<Location>();
            MItems = new List<MItem>();
            Packages = new List<Package>();
        }
    }

    // DeliveryHistory
    public class DeliveryHistory
    {
        public string LocationCode { get; set; } // LocationCode (Primary key) (length: 30)
        public string ShipToCode { get; set; } // ShipToCode (Primary key) (length: 255)
        public DateTime DeliveryDate { get; set; } // DeliveryDate (Primary key)
        public Guid? HubLocationId { get; set; } // HubLocationID
        public Guid? ZoneId { get; set; } // ZoneID
        public int PaletNumber { get; set; } // PaletNumber (Primary key)
        public DateTime? ShippedTime { get; set; } // ShippedTime

        // Foreign keys

        /// <summary>
        /// Parent HubLocation pointed by [DeliveryHistory].([HubLocationId]) (FK_Delivery_HubLocation)
        /// </summary>
        public virtual HubLocation HubLocation { get; set; } // FK_Delivery_HubLocation

        /// <summary>
        /// Parent Location pointed by [DeliveryHistory].([LocationCode], [ShipToCode]) (FK_Delivery_Location)
        /// </summary>
        public virtual Location Location { get; set; } // FK_Delivery_Location

        /// <summary>
        /// Parent Zone pointed by [DeliveryHistory].([ZoneId]) (FK_Delivery_Zones)
        /// </summary>
        public virtual Zone Zone { get; set; } // FK_Delivery_Zones

        public DeliveryHistory()
        {
            PaletNumber = 0;
        }
    }

    // HubLocations
    public class HubLocation
    {
        public Guid HubLocationId { get; set; } // HubLocationID (Primary key)
        public string HubName { get; set; } // HubName (length: 255)
        public string Lat { get; set; } // Lat (length: 30)
        public string Long { get; set; } // Long (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime? RemovedTime { get; set; } // RemovedTime

        // Reverse navigation

        /// <summary>
        /// Child DeliveryHistories where [DeliveryHistory].[HubLocationID] point to this entity (FK_Delivery_HubLocation)
        /// </summary>
        public virtual ICollection<DeliveryHistory> DeliveryHistories { get; set; } // DeliveryHistory.FK_Delivery_HubLocation

        /// <summary>
        /// Child LocationInHubs where [LocationInHub].[HubLocationID] point to this entity (FK_to_Hub)
        /// </summary>
        public virtual ICollection<LocationInHub> LocationInHubs { get; set; } // LocationInHub.FK_to_Hub

        /// <summary>
        /// Child LocationOptimizeWaypoints where [LocationOptimizeWaypoints].[HubLocationNearest] point to this entity (FK_LocationOptimizeWayPoints_Hub)
        /// </summary>
        public virtual ICollection<LocationOptimizeWaypoint> LocationOptimizeWaypoints { get; set; } // LocationOptimizeWaypoints.FK_LocationOptimizeWayPoints_Hub

        public HubLocation()
        {
            CreatedTime = DateTime.Now;
            DeliveryHistories = new List<DeliveryHistory>();
            LocationInHubs = new List<LocationInHub>();
            LocationOptimizeWaypoints = new List<LocationOptimizeWaypoint>();
        }
    }

    // Role
    public class Identity_Role
    {
        public string Id { get; set; } // Id (Primary key) (length: 450)
        public string Name { get; set; } // Name (length: 256)
        public string NormalizedName { get; set; } // NormalizedName (length: 256)
        public string ConcurrencyStamp { get; set; } // ConcurrencyStamp

        // Reverse navigation

        /// <summary>
        /// Child Identity_RoleClaims where [RoleClaims].[RoleId] point to this entity (FK_RoleClaims_Role_RoleId)
        /// </summary>
        public virtual ICollection<Identity_RoleClaim> Identity_RoleClaims { get; set; } // RoleClaims.FK_RoleClaims_Role_RoleId

        /// <summary>
        /// Child Identity_UserRoles where [UserRoles].[RoleId] point to this entity (FK_UserRoles_Role_RoleId)
        /// </summary>
        public virtual ICollection<Identity_UserRole> Identity_UserRoles { get; set; } // UserRoles.FK_UserRoles_Role_RoleId

        public Identity_Role()
        {
            Identity_RoleClaims = new List<Identity_RoleClaim>();
            Identity_UserRoles = new List<Identity_UserRole>();
        }
    }

    // RoleClaims
    public class Identity_RoleClaim
    {
        public int Id { get; set; } // Id (Primary key)
        public string RoleId { get; set; } // RoleId (length: 450)
        public string ClaimType { get; set; } // ClaimType
        public string ClaimValue { get; set; } // ClaimValue

        // Foreign keys

        /// <summary>
        /// Parent Identity_Role pointed by [RoleClaims].([RoleId]) (FK_RoleClaims_Role_RoleId)
        /// </summary>
        public virtual Identity_Role Identity_Role { get; set; } // FK_RoleClaims_Role_RoleId
    }

    // User
    public class Identity_User
    {
        public string Id { get; set; } // Id (Primary key) (length: 450)
        public string UserName { get; set; } // UserName (length: 256)
        public string NormalizedUserName { get; set; } // NormalizedUserName (length: 256)
        public string Email { get; set; } // Email (length: 256)
        public string NormalizedEmail { get; set; } // NormalizedEmail (length: 256)
        public bool EmailConfirmed { get; set; } // EmailConfirmed
        public string PasswordHash { get; set; } // PasswordHash
        public string SecurityStamp { get; set; } // SecurityStamp
        public string ConcurrencyStamp { get; set; } // ConcurrencyStamp
        public string PhoneNumber { get; set; } // PhoneNumber
        public bool PhoneNumberConfirmed { get; set; } // PhoneNumberConfirmed
        public bool TwoFactorEnabled { get; set; } // TwoFactorEnabled
        public DateTimeOffset? LockoutEnd { get; set; } // LockoutEnd
        public bool LockoutEnabled { get; set; } // LockoutEnabled
        public int AccessFailedCount { get; set; } // AccessFailedCount
        public string FirstName { get; set; } // FirstName
        public string LastName { get; set; } // LastName

        // Reverse navigation

        /// <summary>
        /// Child Identity_UserClaims where [UserClaims].[UserId] point to this entity (FK_UserClaims_User_UserId)
        /// </summary>
        public virtual ICollection<Identity_UserClaim> Identity_UserClaims { get; set; } // UserClaims.FK_UserClaims_User_UserId

        /// <summary>
        /// Child Identity_UserLogins where [UserLogins].[UserId] point to this entity (FK_UserLogins_User_UserId)
        /// </summary>
        public virtual ICollection<Identity_UserLogin> Identity_UserLogins { get; set; } // UserLogins.FK_UserLogins_User_UserId

        /// <summary>
        /// Child Identity_UserRoles where [UserRoles].[UserId] point to this entity (FK_UserRoles_User_UserId)
        /// </summary>
        public virtual ICollection<Identity_UserRole> Identity_UserRoles { get; set; } // UserRoles.FK_UserRoles_User_UserId

        /// <summary>
        /// Child Identity_UserTokens where [UserTokens].[UserId] point to this entity (FK_UserTokens_User_UserId)
        /// </summary>
        public virtual ICollection<Identity_UserToken> Identity_UserTokens { get; set; } // UserTokens.FK_UserTokens_User_UserId

        public Identity_User()
        {
            Identity_UserClaims = new List<Identity_UserClaim>();
            Identity_UserLogins = new List<Identity_UserLogin>();
            Identity_UserRoles = new List<Identity_UserRole>();
            Identity_UserTokens = new List<Identity_UserToken>();
        }
    }

    // UserClaims
    public class Identity_UserClaim
    {
        public int Id { get; set; } // Id (Primary key)
        public string UserId { get; set; } // UserId (length: 450)
        public string ClaimType { get; set; } // ClaimType
        public string ClaimValue { get; set; } // ClaimValue

        // Foreign keys

        /// <summary>
        /// Parent Identity_User pointed by [UserClaims].([UserId]) (FK_UserClaims_User_UserId)
        /// </summary>
        public virtual Identity_User Identity_User { get; set; } // FK_UserClaims_User_UserId
    }

    // UserLogins
    public class Identity_UserLogin
    {
        public string LoginProvider { get; set; } // LoginProvider (Primary key) (length: 450)
        public string ProviderKey { get; set; } // ProviderKey (Primary key) (length: 450)
        public string ProviderDisplayName { get; set; } // ProviderDisplayName
        public string UserId { get; set; } // UserId (length: 450)

        // Foreign keys

        /// <summary>
        /// Parent Identity_User pointed by [UserLogins].([UserId]) (FK_UserLogins_User_UserId)
        /// </summary>
        public virtual Identity_User Identity_User { get; set; } // FK_UserLogins_User_UserId
    }

    // UserRoles
    public class Identity_UserRole
    {
        public string UserId { get; set; } // UserId (Primary key) (length: 450)
        public string RoleId { get; set; } // RoleId (Primary key) (length: 450)

        // Foreign keys

        /// <summary>
        /// Parent Identity_Role pointed by [UserRoles].([RoleId]) (FK_UserRoles_Role_RoleId)
        /// </summary>
        public virtual Identity_Role Identity_Role { get; set; } // FK_UserRoles_Role_RoleId

        /// <summary>
        /// Parent Identity_User pointed by [UserRoles].([UserId]) (FK_UserRoles_User_UserId)
        /// </summary>
        public virtual Identity_User Identity_User { get; set; } // FK_UserRoles_User_UserId
    }

    // UserTokens
    public class Identity_UserToken
    {
        public string UserId { get; set; } // UserId (Primary key) (length: 450)
        public string LoginProvider { get; set; } // LoginProvider (Primary key) (length: 450)
        public string Name { get; set; } // Name (Primary key) (length: 450)
        public string Value { get; set; } // Value

        // Foreign keys

        /// <summary>
        /// Parent Identity_User pointed by [UserTokens].([UserId]) (FK_UserTokens_User_UserId)
        /// </summary>
        public virtual Identity_User Identity_User { get; set; } // FK_UserTokens_User_UserId
    }

    // Items
    public class Item
    {
        public Guid ItemId { get; set; } // ItemID (Primary key)
        public string ItemCode { get; set; } // ItemCode (length: 30)
        public string ItemName { get; set; } // ItemName (length: 255)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime? RemovedTime { get; set; } // RemovedTime
        public Guid CustomerId { get; set; } // CustomerID
        public Guid PackageId { get; set; } // PackageID

        // Reverse navigation

        /// <summary>
        /// Child Bookings where [Bookings].[ItemID] point to this entity (FK_Booking_Item)
        /// </summary>
        public virtual ICollection<Booking> Bookings { get; set; } // Bookings.FK_Booking_Item

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [Items].([CustomerId]) (FK_Item_Customers)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_Item_Customers

        /// <summary>
        /// Parent Package pointed by [Items].([PackageId]) (FK_Item_Package)
        /// </summary>
        public virtual Package Package { get; set; } // FK_Item_Package

        public Item()
        {
            ItemId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            UpdatedTime = DateTime.Now;
            Bookings = new List<Booking>();
        }
    }

    // Locations
    public class Location
    {
        public string LocationCode { get; set; } // LocationCode (Primary key) (length: 30)
        public string ShipToCode { get; set; } // ShipToCode (Primary key) (length: 255)
        public string ShipToName { get; set; } // ShipToName (length: 255)
        public string LocationCodeMain { get; set; } // LocationCodeMain (length: 255)
        public Guid CustomerId { get; set; } // CustomerID
        public string Lat { get; set; } // Lat (length: 30)
        public string Long { get; set; } // Long (length: 30)
        public string Address { get; set; } // Address (length: 255)
        public bool IsMain { get; set; } // IsMain
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public Guid? ZoneId { get; set; } // ZoneID

        /// <summary>
        /// Điểm giao gần nhất
        /// </summary>
        public Guid? LocatioNearest { get; set; } // LocatioNearest

        /// <summary>
        /// RowID duy nhất, dùng để xác định location key
        /// </summary>
        public Guid LocationKey { get; set; } // LocationKey
        public DateTime? OpenTime { get; set; } // OpenTime
        public int PriorityId { get; set; } // PriorityID

        // Reverse navigation

        /// <summary>
        /// Child Bookings where [Bookings].([LocationCode], [ShipToCode]) point to this entity (FK_Booking_Location)
        /// </summary>
        public virtual ICollection<Booking> Bookings { get; set; } // Bookings.FK_Booking_Location

        /// <summary>
        /// Child DeliveryHistories where [DeliveryHistory].([LocationCode], [ShipToCode]) point to this entity (FK_Delivery_Location)
        /// </summary>
        public virtual ICollection<DeliveryHistory> DeliveryHistories { get; set; } // DeliveryHistory.FK_Delivery_Location

        /// <summary>
        /// Child LocationInHubs where [LocationInHub].([LocationCode], [ShipToCode]) point to this entity (FK_to_Location)
        /// </summary>
        public virtual ICollection<LocationInHub> LocationInHubs { get; set; } // LocationInHub.FK_to_Location

        /// <summary>
        /// Child LocationOptimizeWaypoints where [LocationOptimizeWaypoints].([LocationCode], [ShipToCode]) point to this entity (FK_LocationOptimizeWayPoints_Location)
        /// </summary>
        public virtual ICollection<LocationOptimizeWaypoint> LocationOptimizeWaypoints { get; set; } // LocationOptimizeWaypoints.FK_LocationOptimizeWayPoints_Location

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [Locations].([CustomerId]) (FK_Location_Customer)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_Location_Customer

        /// <summary>
        /// Parent Priority pointed by [Locations].([PriorityId]) (FK_Location)Priority)
        /// </summary>
        public virtual Priority Priority { get; set; } // FK_Location)Priority

        /// <summary>
        /// Parent Zone pointed by [Locations].([ZoneId]) (FK_Location_Zone)
        /// </summary>
        public virtual Zone Zone { get; set; } // FK_Location_Zone

        public Location()
        {
            IsMain = false;
            CreatedTime = DateTime.Now;
            LocationKey = Guid.NewGuid();
            PriorityId = 0;
            Bookings = new List<Booking>();
            DeliveryHistories = new List<DeliveryHistory>();
            LocationInHubs = new List<LocationInHub>();
            LocationOptimizeWaypoints = new List<LocationOptimizeWaypoint>();
        }
    }

    // LocationInHub
    public class LocationInHub
    {
        public string LocationCode { get; set; } // LocationCode (Primary key) (length: 30)
        public string ShipToCode { get; set; } // ShipToCode (Primary key) (length: 255)
        public Guid HubLocationId { get; set; } // HubLocationID (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime RemovedTime { get; set; } // RemovedTime
        public DateTime HubDate { get; set; } // HubDate (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent HubLocation pointed by [LocationInHub].([HubLocationId]) (FK_to_Hub)
        /// </summary>
        public virtual HubLocation HubLocation { get; set; } // FK_to_Hub

        /// <summary>
        /// Parent Location pointed by [LocationInHub].([LocationCode], [ShipToCode]) (FK_to_Location)
        /// </summary>
        public virtual Location Location { get; set; } // FK_to_Location

        public LocationInHub()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // LocationOptimizeWaypoints
    public class LocationOptimizeWaypoint
    {
        public DateTime OrderDate { get; set; } // OrderDate (Primary key)
        public Guid CustomerId { get; set; } // CustomerID (Primary key)
        public string ShipToCode { get; set; } // ShipToCode (Primary key) (length: 255)
        public string LocationCode { get; set; } // LocationCode (Primary key) (length: 30)
        public int RouteIndex { get; set; } // RouteIndex
        public Guid? HubLocationNearest { get; set; } // HubLocationNearest
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 30)
        public DateTime? RemovedTime { get; set; } // RemovedTime

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [LocationOptimizeWaypoints].([CustomerId]) (FK_LocationOptimizeWayPoints_Customer)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_LocationOptimizeWayPoints_Customer

        /// <summary>
        /// Parent HubLocation pointed by [LocationOptimizeWaypoints].([HubLocationNearest]) (FK_LocationOptimizeWayPoints_Hub)
        /// </summary>
        public virtual HubLocation HubLocation { get; set; } // FK_LocationOptimizeWayPoints_Hub

        /// <summary>
        /// Parent Location pointed by [LocationOptimizeWaypoints].([LocationCode], [ShipToCode]) (FK_LocationOptimizeWayPoints_Location)
        /// </summary>
        public virtual Location Location { get; set; } // FK_LocationOptimizeWayPoints_Location

        public LocationOptimizeWaypoint()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // M_item
    public class MItem
    {
        public string ItemKey { get; set; } // item_key (Primary key) (length: 64)
        public string ItemLabel { get; set; } // item_label (length: 64)
        public int Editable { get; set; } // editable
        public string Remark { get; set; } // remark (length: 150)
        public Guid CustomerId { get; set; } // CustomerID

        // Reverse navigation

        /// <summary>
        /// Child MItemValues where [M_item_value].[item_key] point to this entity (fk_app_m_item_value_1)
        /// </summary>
        public virtual ICollection<MItemValue> MItemValues { get; set; } // M_item_value.fk_app_m_item_value_1

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [M_item].([CustomerId]) (FK_m_item_customers)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_m_item_customers

        public MItem()
        {
            Editable = 0;
            Remark = "";
            MItemValues = new List<MItemValue>();
        }
    }

    // M_item_value
    public class MItemValue
    {
        public string ItemKey { get; set; } // item_key (Primary key) (length: 64)
        public string Code { get; set; } // code (Primary key) (length: 100)
        public string Name { get; set; } // name (length: 150)
        public string Remark { get; set; } // remark (length: 150)
        public bool? IsKey { get; set; } // is_key

        // Foreign keys

        /// <summary>
        /// Parent MItem pointed by [M_item_value].([ItemKey]) (fk_app_m_item_value_1)
        /// </summary>
        public virtual MItem MItem { get; set; } // fk_app_m_item_value_1
    }

    // Packages
    public class Package
    {
        public Guid PackageId { get; set; } // PackageID (Primary key)
        public string PackageCode { get; set; } // PackageCode (length: 30)
        public string PackageName { get; set; } // PackageName (length: 255)
        public int Inner { get; set; } // Inner
        public decimal Weight { get; set; } // Weight
        public Guid CustomerId { get; set; } // CustomerID
        public decimal Cm3 { get; set; } // Cm3
        public decimal Hight { get; set; } // Hight
        public decimal Width { get; set; } // Width
        public decimal Lenght { get; set; } // Lenght
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime? RemovedTime { get; set; } // RemovedTime
        public decimal WeightOfPackage { get; set; } // WeightOfPackage

        // Reverse navigation

        /// <summary>
        /// Child Bookings where [Bookings].[PackageID] point to this entity (FK_Booking_Packages)
        /// </summary>
        public virtual ICollection<Booking> Bookings { get; set; } // Bookings.FK_Booking_Packages

        /// <summary>
        /// Child Items where [Items].[PackageID] point to this entity (FK_Item_Package)
        /// </summary>
        public virtual ICollection<Item> Items { get; set; } // Items.FK_Item_Package

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [Packages].([CustomerId]) (FK_Package_Customers)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK_Package_Customers

        public Package()
        {
            PackageId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            UpdatedTime = DateTime.Now;
            WeightOfPackage = 0.0m;
            Bookings = new List<Booking>();
            Items = new List<Item>();
        }
    }

    // Priority
    public class Priority
    {
        public int PriorityId { get; set; } // PriorityID (Primary key)
        public string PriorityName { get; set; } // PriorityName (length: 255)

        /// <summary>
        /// 1: Ưu tiên cao nhất, 2: Ưu tiên, 3: Đảm bảo đúng giờ
        /// </summary>
        public int? PriorityType { get; set; } // PriorityType

        // Reverse navigation

        /// <summary>
        /// Child Locations where [Locations].[PriorityID] point to this entity (FK_Location)Priority)
        /// </summary>
        public virtual ICollection<Location> Locations { get; set; } // Locations.FK_Location)Priority

        public Priority()
        {
            Locations = new List<Location>();
        }
    }

    // Sites
    public class Site
    {
        public int SiteId { get; set; } // SiteID (Primary key)
        public string SiteName { get; set; } // SiteName (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child Customers where [Customers].[SiteID] point to this entity (FK_Customer_Site)
        /// </summary>
        public virtual ICollection<Customer> Customers { get; set; } // Customers.FK_Customer_Site

        /// <summary>
        /// Child TruckLocations where [TruckLocations].[SiteID] point to this entity (FK_TruckLocation_site)
        /// </summary>
        public virtual ICollection<TruckLocation> TruckLocations { get; set; } // TruckLocations.FK_TruckLocation_site

        /// <summary>
        /// Child Zones where [Zones].[SiteID] point to this entity (FK_Zone_Site)
        /// </summary>
        public virtual ICollection<Zone> Zones { get; set; } // Zones.FK_Zone_Site

        public Site()
        {
            Customers = new List<Customer>();
            TruckLocations = new List<TruckLocation>();
            Zones = new List<Zone>();
        }
    }

    // Trucks
    public class Truck
    {
        public int TruckId { get; set; } // TruckID (Primary key)
        public string TruckNumber { get; set; } // TruckNumber (Primary key) (length: 20)
        public int? TruckTypeId { get; set; } // TruckTypeID
        public string OwnerName { get; set; } // OwnerName (length: 50)
        public string OwnerType { get; set; } // OwnerType (length: 50)
        public string ProductCode { get; set; } // ProductCode (length: 50)
        public string RegistrationNumber { get; set; } // RegistrationNumber (length: 50)
        public string RegistrationNumber2 { get; set; } // RegistrationNumber2 (length: 50)
        public string CompartmentType { get; set; } // CompartmentType (length: 50)
        public string Engine { get; set; } // Engine (length: 50)
        public string Frame { get; set; } // Frame (length: 50)
        public string Cbm { get; set; } // CBM (length: 50)
        public string YearOfProduction { get; set; } // YearOfProduction (length: 50)
        public string OperationArea { get; set; } // OperationArea (length: 50)

        /// <summary>
        /// Dedicated or Outsourcing
        /// </summary>
        public string OwnerShip { get; set; } // OwnerShip (length: 50)
        public string BaseLocation { get; set; } // BaseLocation (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string DistributionFuelType { get; set; } // DistributionFuelType (length: 50)
        public int? TruckLocationId { get; set; } // TruckLocationID
        public string TruckRemark { get; set; } // TruckRemark (length: 100)
        public byte[] Ts { get; set; } // ts
        public float? Capacity { get; set; } // Capacity
        public float? TankCapacity { get; set; } // TankCapacity
        public float? Norms { get; set; } // Norms
        public decimal? NormsWarning { get; set; } // NormsWarning

        // Foreign keys

        /// <summary>
        /// Parent TruckLocation pointed by [Trucks].([TruckLocationId]) (FK_Truck_Truck_Location)
        /// </summary>
        public virtual TruckLocation TruckLocation { get; set; } // FK_Truck_Truck_Location

        public Truck()
        {
            CreatedTime = DateTime.Now;
            TruckLocationId = 1;
        }
    }

    // TruckLocations
    public class TruckLocation
    {
        public int TruckLocationId { get; set; } // TruckLocationID (Primary key)
        public string TruckLocation_ { get; set; } // TruckLocation (length: 100)
        public int? SiteId { get; set; } // SiteID

        // Reverse navigation

        /// <summary>
        /// Child Trucks where [Trucks].[TruckLocationID] point to this entity (FK_Truck_Truck_Location)
        /// </summary>
        public virtual ICollection<Truck> Trucks { get; set; } // Trucks.FK_Truck_Truck_Location

        // Foreign keys

        /// <summary>
        /// Parent Site pointed by [TruckLocations].([SiteId]) (FK_TruckLocation_site)
        /// </summary>
        public virtual Site Site { get; set; } // FK_TruckLocation_site

        public TruckLocation()
        {
            Trucks = new List<Truck>();
        }
    }

    // Zones
    public class Zone
    {
        public Guid ZoneId { get; set; } // ZoneID (Primary key)
        public string ZoneName { get; set; } // ZoneName (length: 255)
        public int SiteId { get; set; } // SiteID
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdateBy { get; set; } // UpdateBy (length: 30)
        public DateTime UpdateeTime { get; set; } // UpdateeTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime? RemovedTime { get; set; } // RemovedTime

        // Reverse navigation

        /// <summary>
        /// Child DeliveryHistories where [DeliveryHistory].[ZoneID] point to this entity (FK_Delivery_Zones)
        /// </summary>
        public virtual ICollection<DeliveryHistory> DeliveryHistories { get; set; } // DeliveryHistory.FK_Delivery_Zones

        /// <summary>
        /// Child Locations where [Locations].[ZoneID] point to this entity (FK_Location_Zone)
        /// </summary>
        public virtual ICollection<Location> Locations { get; set; } // Locations.FK_Location_Zone

        // Foreign keys

        /// <summary>
        /// Parent Site pointed by [Zones].([SiteId]) (FK_Zone_Site)
        /// </summary>
        public virtual Site Site { get; set; } // FK_Zone_Site

        public Zone()
        {
            ZoneId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            DeliveryHistories = new List<DeliveryHistory>();
            Locations = new List<Location>();
        }
    }


    #endregion

    #region POCO Configuration

    // Bookings
    public class BookingConfiguration : IEntityTypeConfiguration<Booking>
    {
        public void Configure(EntityTypeBuilder<Booking> builder)
        {
            builder.ToTable("Bookings", "dbo");
            builder.HasKey(x => new { x.BookingId, x.ItemId, x.PackageId }).HasName("PK__Bookings__1F40D1E675518B5D").IsClustered();

            builder.Property(x => x.BookingId).HasColumnName(@"BookingID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BookingDate).HasColumnName(@"BookingDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdateBy).HasColumnName(@"UpdateBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdateeTime).HasColumnName(@"UpdateeTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.TotalPackage).HasColumnName(@"TotalPackage").HasColumnType("int").IsRequired();
            builder.Property(x => x.PackageId).HasColumnName(@"PackageID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ItemId).HasColumnName(@"ItemID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.Bookings).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Booking_CustomerID");
            builder.HasOne(a => a.Item).WithMany(b => b.Bookings).HasForeignKey(c => c.ItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Booking_Item");
            builder.HasOne(a => a.Location).WithMany(b => b.Bookings).HasForeignKey(c => new { c.LocationCode, c.ShipToCode }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Booking_Location");
            builder.HasOne(a => a.Package).WithMany(b => b.Bookings).HasForeignKey(c => c.PackageId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Booking_Packages");
        }
    }

    // Customers
    public class CustomerConfiguration : IEntityTypeConfiguration<Customer>
    {
        public void Configure(EntityTypeBuilder<Customer> builder)
        {
            builder.ToTable("Customers", "dbo");
            builder.HasKey(x => x.CustomerId).HasName("PK__Customer__A4AE64B8C8057A6C").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerCode).HasColumnName(@"CustomerCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);

            // Foreign keys
            builder.HasOne(a => a.Site).WithMany(b => b.Customers).HasForeignKey(c => c.SiteId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Customer_Site");
        }
    }

    // DeliveryHistory
    public class DeliveryHistoryConfiguration : IEntityTypeConfiguration<DeliveryHistory>
    {
        public void Configure(EntityTypeBuilder<DeliveryHistory> builder)
        {
            builder.ToTable("DeliveryHistory", "dbo");
            builder.HasKey(x => new { x.LocationCode, x.ShipToCode, x.DeliveryDate, x.PaletNumber });

            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.DeliveryDate).HasColumnName(@"DeliveryDate").HasColumnType("date").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.HubLocationId).HasColumnName(@"HubLocationID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.ZoneId).HasColumnName(@"ZoneID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.PaletNumber).HasColumnName(@"PaletNumber").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ShippedTime).HasColumnName(@"ShippedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.HubLocation).WithMany(b => b.DeliveryHistories).HasForeignKey(c => c.HubLocationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Delivery_HubLocation");
            builder.HasOne(a => a.Location).WithMany(b => b.DeliveryHistories).HasForeignKey(c => new { c.LocationCode, c.ShipToCode }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Delivery_Location");
            builder.HasOne(a => a.Zone).WithMany(b => b.DeliveryHistories).HasForeignKey(c => c.ZoneId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Delivery_Zones");
        }
    }

    // HubLocations
    public class HubLocationConfiguration : IEntityTypeConfiguration<HubLocation>
    {
        public void Configure(EntityTypeBuilder<HubLocation> builder)
        {
            builder.ToTable("HubLocations", "dbo");
            builder.HasKey(x => x.HubLocationId).HasName("PK__HubLocat__8153DFB5A31E4D02").IsClustered();

            builder.Property(x => x.HubLocationId).HasColumnName(@"HubLocationID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.HubName).HasColumnName(@"HubName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Lat).HasColumnName(@"Lat").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Long).HasColumnName(@"Long").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);
        }
    }

    // Role
    public class Identity_RoleConfiguration : IEntityTypeConfiguration<Identity_Role>
    {
        public void Configure(EntityTypeBuilder<Identity_Role> builder)
        {
            builder.ToTable("Role", "Identity");
            builder.HasKey(x => x.Id).HasName("PK_Role").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.NormalizedName).HasColumnName(@"NormalizedName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType("nvarchar(max)").IsRequired(false);

            builder.HasIndex(x => x.NormalizedName).HasName("RoleNameIndex").IsUnique();
        }
    }

    // RoleClaims
    public class Identity_RoleClaimConfiguration : IEntityTypeConfiguration<Identity_RoleClaim>
    {
        public void Configure(EntityTypeBuilder<Identity_RoleClaim> builder)
        {
            builder.ToTable("RoleClaims", "Identity");
            builder.HasKey(x => x.Id).HasName("PK_RoleClaims").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450);
            builder.Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Identity_Role).WithMany(b => b.Identity_RoleClaims).HasForeignKey(c => c.RoleId).HasConstraintName("FK_RoleClaims_Role_RoleId");

            builder.HasIndex(x => x.RoleId).HasName("IX_RoleClaims_RoleId");
        }
    }

    // User
    public class Identity_UserConfiguration : IEntityTypeConfiguration<Identity_User>
    {
        public void Configure(EntityTypeBuilder<Identity_User> builder)
        {
            builder.ToTable("User", "Identity");
            builder.HasKey(x => x.Id).HasName("PK_User").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.NormalizedUserName).HasColumnName(@"NormalizedUserName").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.NormalizedEmail).HasColumnName(@"NormalizedEmail").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LockoutEnd).HasColumnName(@"LockoutEnd").HasColumnType("datetimeoffset").IsRequired(false);
            builder.Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired();
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsRequired(false);

            builder.HasIndex(x => x.NormalizedEmail).HasName("EmailIndex");
            builder.HasIndex(x => x.NormalizedUserName).HasName("UserNameIndex").IsUnique();
        }
    }

    // UserClaims
    public class Identity_UserClaimConfiguration : IEntityTypeConfiguration<Identity_UserClaim>
    {
        public void Configure(EntityTypeBuilder<Identity_UserClaim> builder)
        {
            builder.ToTable("UserClaims", "Identity");
            builder.HasKey(x => x.Id).HasName("PK_UserClaims").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450);
            builder.Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Identity_User).WithMany(b => b.Identity_UserClaims).HasForeignKey(c => c.UserId).HasConstraintName("FK_UserClaims_User_UserId");

            builder.HasIndex(x => x.UserId).HasName("IX_UserClaims_UserId");
        }
    }

    // UserLogins
    public class Identity_UserLoginConfiguration : IEntityTypeConfiguration<Identity_UserLogin>
    {
        public void Configure(EntityTypeBuilder<Identity_UserLogin> builder)
        {
            builder.ToTable("UserLogins", "Identity");
            builder.HasKey(x => new { x.LoginProvider, x.ProviderKey }).HasName("PK_UserLogins").IsClustered();

            builder.Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.ProviderKey).HasColumnName(@"ProviderKey").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.ProviderDisplayName).HasColumnName(@"ProviderDisplayName").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450);

            // Foreign keys
            builder.HasOne(a => a.Identity_User).WithMany(b => b.Identity_UserLogins).HasForeignKey(c => c.UserId).HasConstraintName("FK_UserLogins_User_UserId");

            builder.HasIndex(x => x.UserId).HasName("IX_UserLogins_UserId");
        }
    }

    // UserRoles
    public class Identity_UserRoleConfiguration : IEntityTypeConfiguration<Identity_UserRole>
    {
        public void Configure(EntityTypeBuilder<Identity_UserRole> builder)
        {
            builder.ToTable("UserRoles", "Identity");
            builder.HasKey(x => new { x.UserId, x.RoleId }).HasName("PK_UserRoles").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.Identity_Role).WithMany(b => b.Identity_UserRoles).HasForeignKey(c => c.RoleId).HasConstraintName("FK_UserRoles_Role_RoleId");
            builder.HasOne(a => a.Identity_User).WithMany(b => b.Identity_UserRoles).HasForeignKey(c => c.UserId).HasConstraintName("FK_UserRoles_User_UserId");

            builder.HasIndex(x => x.RoleId).HasName("IX_UserRoles_RoleId");
        }
    }

    // UserTokens
    public class Identity_UserTokenConfiguration : IEntityTypeConfiguration<Identity_UserToken>
    {
        public void Configure(EntityTypeBuilder<Identity_UserToken> builder)
        {
            builder.ToTable("UserTokens", "Identity");
            builder.HasKey(x => new { x.UserId, x.LoginProvider, x.Name }).HasName("PK_UserTokens").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(450)").IsRequired().HasMaxLength(450).ValueGeneratedNever();
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Identity_User).WithMany(b => b.Identity_UserTokens).HasForeignKey(c => c.UserId).HasConstraintName("FK_UserTokens_User_UserId");
        }
    }

    // Items
    public class ItemConfiguration : IEntityTypeConfiguration<Item>
    {
        public void Configure(EntityTypeBuilder<Item> builder)
        {
            builder.ToTable("Items", "dbo");
            builder.HasKey(x => x.ItemId).HasName("PK__Items__727E83EB2693FEE0").IsClustered();

            builder.Property(x => x.ItemId).HasColumnName(@"ItemID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ItemCode).HasColumnName(@"ItemCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ItemName).HasColumnName(@"ItemName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.PackageId).HasColumnName(@"PackageID").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.Items).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Item_Customers");
            builder.HasOne(a => a.Package).WithMany(b => b.Items).HasForeignKey(c => c.PackageId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Item_Package");
        }
    }

    // Locations
    public class LocationConfiguration : IEntityTypeConfiguration<Location>
    {
        public void Configure(EntityTypeBuilder<Location> builder)
        {
            builder.ToTable("Locations", "dbo");
            builder.HasKey(x => new { x.LocationCode, x.ShipToCode }).HasName("PK__Location__6F143104466FF3D1").IsClustered();

            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.ShipToName).HasColumnName(@"ShipToName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.LocationCodeMain).HasColumnName(@"LocationCodeMain").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Lat).HasColumnName(@"Lat").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Long).HasColumnName(@"Long").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.IsMain).HasColumnName(@"IsMain").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ZoneId).HasColumnName(@"ZoneID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.LocatioNearest).HasColumnName(@"LocatioNearest").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.LocationKey).HasColumnName(@"LocationKey").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OpenTime).HasColumnName(@"OpenTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PriorityId).HasColumnName(@"PriorityID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.Locations).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Location_Customer");
            builder.HasOne(a => a.Priority).WithMany(b => b.Locations).HasForeignKey(c => c.PriorityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Location)Priority");
            builder.HasOne(a => a.Zone).WithMany(b => b.Locations).HasForeignKey(c => c.ZoneId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Location_Zone");
        }
    }

    // LocationInHub
    public class LocationInHubConfiguration : IEntityTypeConfiguration<LocationInHub>
    {
        public void Configure(EntityTypeBuilder<LocationInHub> builder)
        {
            builder.ToTable("LocationInHub", "dbo");
            builder.HasKey(x => new { x.LocationCode, x.ShipToCode, x.HubLocationId, x.HubDate }).HasName("PK__Location__DB9562DB3B17AD2C").IsClustered();

            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.HubLocationId).HasColumnName(@"HubLocationID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.HubDate).HasColumnName(@"HubDate").HasColumnType("date").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.HubLocation).WithMany(b => b.LocationInHubs).HasForeignKey(c => c.HubLocationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_to_Hub");
            builder.HasOne(a => a.Location).WithMany(b => b.LocationInHubs).HasForeignKey(c => new { c.LocationCode, c.ShipToCode }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_to_Location");
        }
    }

    // LocationOptimizeWaypoints
    public class LocationOptimizeWaypointConfiguration : IEntityTypeConfiguration<LocationOptimizeWaypoint>
    {
        public void Configure(EntityTypeBuilder<LocationOptimizeWaypoint> builder)
        {
            builder.ToTable("LocationOptimizeWaypoints", "dbo");
            builder.HasKey(x => new { x.OrderDate, x.CustomerId, x.ShipToCode, x.LocationCode }).HasName("PK__Location__AABD68481E910076").IsClustered();

            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("date").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.RouteIndex).HasColumnName(@"RouteIndex").HasColumnType("int").IsRequired();
            builder.Property(x => x.HubLocationNearest).HasColumnName(@"HubLocationNearest").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.LocationOptimizeWaypoints).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_LocationOptimizeWayPoints_Customer");
            builder.HasOne(a => a.HubLocation).WithMany(b => b.LocationOptimizeWaypoints).HasForeignKey(c => c.HubLocationNearest).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_LocationOptimizeWayPoints_Hub");
            builder.HasOne(a => a.Location).WithMany(b => b.LocationOptimizeWaypoints).HasForeignKey(c => new { c.LocationCode, c.ShipToCode }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_LocationOptimizeWayPoints_Location");
        }
    }

    // M_item
    public class MItemConfiguration : IEntityTypeConfiguration<MItem>
    {
        public void Configure(EntityTypeBuilder<MItem> builder)
        {
            builder.ToTable("M_item", "dbo");
            builder.HasKey(x => x.ItemKey).HasName("PK__m_item__37A71F7E539EBCCC").IsClustered();

            builder.Property(x => x.ItemKey).HasColumnName(@"item_key").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64).ValueGeneratedNever();
            builder.Property(x => x.ItemLabel).HasColumnName(@"item_label").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.Editable).HasColumnName(@"editable").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"remark").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.MItems).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_m_item_customers");
        }
    }

    // M_item_value
    public class MItemValueConfiguration : IEntityTypeConfiguration<MItemValue>
    {
        public void Configure(EntityTypeBuilder<MItemValue> builder)
        {
            builder.ToTable("M_item_value", "dbo");
            builder.HasKey(x => new { x.ItemKey, x.Code }).HasName("PK__M_item_v__A4F0CBB1F126230F").IsClustered();

            builder.Property(x => x.ItemKey).HasColumnName(@"item_key").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64).ValueGeneratedNever();
            builder.Property(x => x.Code).HasColumnName(@"code").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Remark).HasColumnName(@"remark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.IsKey).HasColumnName(@"is_key").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.MItem).WithMany(b => b.MItemValues).HasForeignKey(c => c.ItemKey).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_app_m_item_value_1");
        }
    }

    // Packages
    public class PackageConfiguration : IEntityTypeConfiguration<Package>
    {
        public void Configure(EntityTypeBuilder<Package> builder)
        {
            builder.ToTable("Packages", "dbo");
            builder.HasKey(x => x.PackageId).HasName("PK__Packages__322035ECC8279BEA").IsClustered();

            builder.Property(x => x.PackageId).HasColumnName(@"PackageID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PackageCode).HasColumnName(@"PackageCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.PackageName).HasColumnName(@"PackageName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Inner).HasColumnName(@"Inner").HasColumnType("int").IsRequired();
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Cm3).HasColumnName(@"Cm3").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Hight).HasColumnName(@"Hight").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Width).HasColumnName(@"Width").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Lenght).HasColumnName(@"Lenght").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(10,3)").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.Packages).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Package_Customers");
        }
    }

    // Priority
    public class PriorityConfiguration : IEntityTypeConfiguration<Priority>
    {
        public void Configure(EntityTypeBuilder<Priority> builder)
        {
            builder.ToTable("Priority", "dbo");
            builder.HasKey(x => x.PriorityId).HasName("PK__Priority__D0A3D0DEB93A4E6B").IsClustered();

            builder.Property(x => x.PriorityId).HasColumnName(@"PriorityID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PriorityName).HasColumnName(@"PriorityName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.PriorityType).HasColumnName(@"PriorityType").HasColumnType("int").IsRequired(false);
        }
    }

    // Sites
    public class SiteConfiguration : IEntityTypeConfiguration<Site>
    {
        public void Configure(EntityTypeBuilder<Site> builder)
        {
            builder.ToTable("Sites", "dbo");
            builder.HasKey(x => x.SiteId).HasName("PK__Sites__B9DCB9039BB07716").IsClustered();

            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
        }
    }

    // Trucks
    public class TruckConfiguration : IEntityTypeConfiguration<Truck>
    {
        public void Configure(EntityTypeBuilder<Truck> builder)
        {
            builder.ToTable("Trucks", "dbo");
            builder.HasKey(x => new { x.TruckId, x.TruckNumber });

            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.TruckTypeId).HasColumnName(@"TruckTypeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OwnerName).HasColumnName(@"OwnerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OwnerType).HasColumnName(@"OwnerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RegistrationNumber).HasColumnName(@"RegistrationNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RegistrationNumber2).HasColumnName(@"RegistrationNumber2").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CompartmentType).HasColumnName(@"CompartmentType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Engine).HasColumnName(@"Engine").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Frame).HasColumnName(@"Frame").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.YearOfProduction).HasColumnName(@"YearOfProduction").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OperationArea).HasColumnName(@"OperationArea").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OwnerShip).HasColumnName(@"OwnerShip").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BaseLocation).HasColumnName(@"BaseLocation").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DistributionFuelType).HasColumnName(@"DistributionFuelType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckLocationId).HasColumnName(@"TruckLocationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TruckRemark).HasColumnName(@"TruckRemark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Capacity).HasColumnName(@"Capacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TankCapacity).HasColumnName(@"TankCapacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Norms).HasColumnName(@"Norms").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.NormsWarning).HasColumnName(@"NormsWarning").HasColumnType("decimal(18,3)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.TruckLocation).WithMany(b => b.Trucks).HasForeignKey(c => c.TruckLocationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Truck_Truck_Location");
        }
    }

    // TruckLocations
    public class TruckLocationConfiguration : IEntityTypeConfiguration<TruckLocation>
    {
        public void Configure(EntityTypeBuilder<TruckLocation> builder)
        {
            builder.ToTable("TruckLocations", "dbo");
            builder.HasKey(x => x.TruckLocationId).HasName("PK_TruckLocations").IsClustered();

            builder.Property(x => x.TruckLocationId).HasColumnName(@"TruckLocationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckLocation_).HasColumnName(@"TruckLocation").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Site).WithMany(b => b.TruckLocations).HasForeignKey(c => c.SiteId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TruckLocation_site");
        }
    }

    // Zones
    public class ZoneConfiguration : IEntityTypeConfiguration<Zone>
    {
        public void Configure(EntityTypeBuilder<Zone> builder)
        {
            builder.ToTable("Zones", "dbo");
            builder.HasKey(x => x.ZoneId).HasName("PK__Zones__6016679544FAEF91").IsClustered();

            builder.Property(x => x.ZoneId).HasColumnName(@"ZoneID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ZoneName).HasColumnName(@"ZoneName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdateBy).HasColumnName(@"UpdateBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdateeTime).HasColumnName(@"UpdateeTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Site).WithMany(b => b.Zones).HasForeignKey(c => c.SiteId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Zone_Site");
        }
    }


    #endregion

    #region Stored procedure return models

    public class StGetAllLocationReturnModel
    {
        public string LocationCode { get; set; }
        public string ShipToCode { get; set; }
        public string ShipToName { get; set; }
        public string LocationCodeMain { get; set; }
        public Guid CustomerID { get; set; }
        public string Lat { get; set; }
        public string Long { get; set; }
        public string Address { get; set; }
        public bool IsMain { get; set; }
        public string CreatedBy { get; set; }
        public DateTime CreatedTime { get; set; }
        public Guid? ZoneID { get; set; }
        public Guid? LocatioNearest { get; set; }
        public Guid LocationKey { get; set; }
        public DateTime? OpenTime { get; set; }
        public int PriorityID { get; set; }
    }


    #endregion

}
// </auto-generated>
