// Licence file C:\Users\hoang.phan\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace JourneyControl.Domain.Entities
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Location> Locations { get; set; } // Locations
        DbSet<LocationOptimizeWaypoint> LocationOptimizeWaypoints { get; set; } // LocationOptimizeWaypoints
        DbSet<MItem> MItems { get; set; } // M_item
        DbSet<MItemValue> MItemValues { get; set; } // M_item_value
        DbSet<Package> Packages { get; set; } // Packages
        DbSet<Priority> Priorities { get; set; } // Priority
        DbSet<Site> Sites { get; set; } // Sites
        DbSet<Truck> Trucks { get; set; } // Trucks
        DbSet<TruckLocation> TruckLocations { get; set; } // TruckLocations
        DbSet<Zone> Zones { get; set; } // Zones

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Location> Locations { get; set; } // Locations
        public DbSet<LocationOptimizeWaypoint> LocationOptimizeWaypoints { get; set; } // LocationOptimizeWaypoints
        public DbSet<MItem> MItems { get; set; } // M_item
        public DbSet<MItemValue> MItemValues { get; set; } // M_item_value
        public DbSet<Package> Packages { get; set; } // Packages
        public DbSet<Priority> Priorities { get; set; } // Priority
        public DbSet<Site> Sites { get; set; } // Sites
        public DbSet<Truck> Trucks { get; set; } // Trucks
        public DbSet<TruckLocation> TruckLocations { get; set; } // TruckLocations
        public DbSet<Zone> Zones { get; set; } // Zones

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=101.99.33.96,1488;Initial Catalog=TripPlanningDB;User ID=hai;Password=Hai@1234");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new LocationConfiguration());
            modelBuilder.ApplyConfiguration(new LocationOptimizeWaypointConfiguration());
            modelBuilder.ApplyConfiguration(new MItemConfiguration());
            modelBuilder.ApplyConfiguration(new MItemValueConfiguration());
            modelBuilder.ApplyConfiguration(new PackageConfiguration());
            modelBuilder.ApplyConfiguration(new PriorityConfiguration());
            modelBuilder.ApplyConfiguration(new SiteConfiguration());
            modelBuilder.ApplyConfiguration(new TruckConfiguration());
            modelBuilder.ApplyConfiguration(new TruckLocationConfiguration());
            modelBuilder.ApplyConfiguration(new ZoneConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Location> Locations { get; set; } // Locations
        public DbSet<LocationOptimizeWaypoint> LocationOptimizeWaypoints { get; set; } // LocationOptimizeWaypoints
        public DbSet<MItem> MItems { get; set; } // M_item
        public DbSet<MItemValue> MItemValues { get; set; } // M_item_value
        public DbSet<Package> Packages { get; set; } // Packages
        public DbSet<Priority> Priorities { get; set; } // Priority
        public DbSet<Site> Sites { get; set; } // Sites
        public DbSet<Truck> Trucks { get; set; } // Trucks
        public DbSet<TruckLocation> TruckLocations { get; set; } // TruckLocations
        public DbSet<Zone> Zones { get; set; } // Zones

        public FakeMyDbContext()
        {
            _database = null;

            Locations = new FakeDbSet<Location>("LocationCode", "ShipToCode");
            LocationOptimizeWaypoints = new FakeDbSet<LocationOptimizeWaypoint>("OrderDate", "CustomerId", "ShipToCode", "LocationCode");
            MItems = new FakeDbSet<MItem>("ItemKey");
            MItemValues = new FakeDbSet<MItemValue>("ItemKey", "Code");
            Packages = new FakeDbSet<Package>("PackageId");
            Priorities = new FakeDbSet<Priority>("PriorityId");
            Sites = new FakeDbSet<Site>("SiteId");
            Trucks = new FakeDbSet<Truck>("TruckId", "TruckNumber");
            TruckLocations = new FakeDbSet<TruckLocation>("TruckLocationId");
            Zones = new FakeDbSet<Zone>("ZoneId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Locations
    public class Location
    {
        public string LocationCode { get; set; } // LocationCode (Primary key) (length: 30)
        public string ShipToCode { get; set; } // ShipToCode (Primary key) (length: 255)
        public string ShipToName { get; set; } // ShipToName (length: 255)
        public string LocationCodeMain { get; set; } // LocationCodeMain (length: 255)
        public Guid CustomerId { get; set; } // CustomerID
        public string Lat { get; set; } // Lat (length: 30)
        public string Long { get; set; } // Long (length: 30)
        public string Address { get; set; } // Address (length: 255)
        public bool IsMain { get; set; } // IsMain
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public Guid? ZoneId { get; set; } // ZoneID

        /// <summary>
        /// Điểm giao gần nhất
        /// </summary>
        public Guid? LocatioNearest { get; set; } // LocatioNearest

        /// <summary>
        /// RowID duy nhất, dùng để xác định location key
        /// </summary>
        public Guid LocationKey { get; set; } // LocationKey
        public DateTime? OpenTime { get; set; } // OpenTime
        public int PriorityId { get; set; } // PriorityID

        // Reverse navigation

        /// <summary>
        /// Child LocationOptimizeWaypoints where [LocationOptimizeWaypoints].([LocationCode], [ShipToCode]) point to this entity (FK_LocationOptimizeWayPoints_Location)
        /// </summary>
        public virtual ICollection<LocationOptimizeWaypoint> LocationOptimizeWaypoints { get; set; } // LocationOptimizeWaypoints.FK_LocationOptimizeWayPoints_Location

        // Foreign keys

        /// <summary>
        /// Parent Priority pointed by [Locations].([PriorityId]) (FK_Location)Priority)
        /// </summary>
        public virtual Priority Priority { get; set; } // FK_Location)Priority

        /// <summary>
        /// Parent Zone pointed by [Locations].([ZoneId]) (FK_Location_Zone)
        /// </summary>
        public virtual Zone Zone { get; set; } // FK_Location_Zone

        public Location()
        {
            IsMain = false;
            CreatedTime = DateTime.Now;
            LocationKey = Guid.NewGuid();
            PriorityId = 0;
            LocationOptimizeWaypoints = new List<LocationOptimizeWaypoint>();
        }
    }

    // LocationOptimizeWaypoints
    public class LocationOptimizeWaypoint
    {
        public DateTime OrderDate { get; set; } // OrderDate (Primary key)
        public Guid CustomerId { get; set; } // CustomerID (Primary key)
        public string ShipToCode { get; set; } // ShipToCode (Primary key) (length: 255)
        public string LocationCode { get; set; } // LocationCode (Primary key) (length: 30)
        public int RouteIndex { get; set; } // RouteIndex
        public Guid? HubLocationNearest { get; set; } // HubLocationNearest
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 30)
        public DateTime? RemovedTime { get; set; } // RemovedTime

        // Foreign keys

        /// <summary>
        /// Parent Location pointed by [LocationOptimizeWaypoints].([LocationCode], [ShipToCode]) (FK_LocationOptimizeWayPoints_Location)
        /// </summary>
        public virtual Location Location { get; set; } // FK_LocationOptimizeWayPoints_Location

        public LocationOptimizeWaypoint()
        {
            CreatedTime = DateTime.Now;
        }
    }

    // M_item
    public class MItem
    {
        public string ItemKey { get; set; } // item_key (Primary key) (length: 64)
        public string ItemLabel { get; set; } // item_label (length: 64)
        public int Editable { get; set; } // editable
        public string Remark { get; set; } // remark (length: 150)
        public Guid CustomerId { get; set; } // CustomerID

        // Reverse navigation

        /// <summary>
        /// Child MItemValues where [M_item_value].[item_key] point to this entity (fk_app_m_item_value_1)
        /// </summary>
        public virtual ICollection<MItemValue> MItemValues { get; set; } // M_item_value.fk_app_m_item_value_1

        public MItem()
        {
            Editable = 0;
            Remark = "";
            MItemValues = new List<MItemValue>();
        }
    }

    // M_item_value
    public class MItemValue
    {
        public string ItemKey { get; set; } // item_key (Primary key) (length: 64)
        public string Code { get; set; } // code (Primary key) (length: 100)
        public string Name { get; set; } // name (length: 150)
        public string Remark { get; set; } // remark (length: 150)
        public bool? IsKey { get; set; } // is_key

        // Foreign keys

        /// <summary>
        /// Parent MItem pointed by [M_item_value].([ItemKey]) (fk_app_m_item_value_1)
        /// </summary>
        public virtual MItem MItem { get; set; } // fk_app_m_item_value_1
    }

    // Packages
    public class Package
    {
        public Guid PackageId { get; set; } // PackageID (Primary key)
        public string PackageCode { get; set; } // PackageCode (length: 30)
        public string PackageName { get; set; } // PackageName (length: 255)
        public int Inner { get; set; } // Inner
        public decimal Weight { get; set; } // Weight
        public Guid CustomerId { get; set; } // CustomerID
        public decimal Cm3 { get; set; } // Cm3
        public decimal Hight { get; set; } // Hight
        public decimal Width { get; set; } // Width
        public decimal Lenght { get; set; } // Lenght
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdatedBy { get; set; } // UpdatedBy (length: 30)
        public DateTime UpdatedTime { get; set; } // UpdatedTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime? RemovedTime { get; set; } // RemovedTime
        public decimal WeightOfPackage { get; set; } // WeightOfPackage

        public Package()
        {
            PackageId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            UpdatedTime = DateTime.Now;
            WeightOfPackage = 0.0m;
        }
    }

    // Priority
    public class Priority
    {
        public int PriorityId { get; set; } // PriorityID (Primary key)
        public string PriorityName { get; set; } // PriorityName (length: 255)

        /// <summary>
        /// 1: Ưu tiên cao nhất, 2: Ưu tiên, 3: Đảm bảo đúng giờ
        /// </summary>
        public int? PriorityType { get; set; } // PriorityType

        // Reverse navigation

        /// <summary>
        /// Child Locations where [Locations].[PriorityID] point to this entity (FK_Location)Priority)
        /// </summary>
        public virtual ICollection<Location> Locations { get; set; } // Locations.FK_Location)Priority

        public Priority()
        {
            Locations = new List<Location>();
        }
    }

    // Sites
    public class Site
    {
        public int SiteId { get; set; } // SiteID (Primary key)
        public string SiteName { get; set; } // SiteName (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child TruckLocations where [TruckLocations].[SiteID] point to this entity (FK_TruckLocation_site)
        /// </summary>
        public virtual ICollection<TruckLocation> TruckLocations { get; set; } // TruckLocations.FK_TruckLocation_site

        /// <summary>
        /// Child Zones where [Zones].[SiteID] point to this entity (FK_Zone_Site)
        /// </summary>
        public virtual ICollection<Zone> Zones { get; set; } // Zones.FK_Zone_Site

        public Site()
        {
            TruckLocations = new List<TruckLocation>();
            Zones = new List<Zone>();
        }
    }

    // Trucks
    public class Truck
    {
        public int TruckId { get; set; } // TruckID (Primary key)
        public string TruckNumber { get; set; } // TruckNumber (Primary key) (length: 20)
        public int? TruckTypeId { get; set; } // TruckTypeID
        public string OwnerName { get; set; } // OwnerName (length: 50)
        public string OwnerType { get; set; } // OwnerType (length: 50)
        public string ProductCode { get; set; } // ProductCode (length: 50)
        public string RegistrationNumber { get; set; } // RegistrationNumber (length: 50)
        public string RegistrationNumber2 { get; set; } // RegistrationNumber2 (length: 50)
        public string CompartmentType { get; set; } // CompartmentType (length: 50)
        public string Engine { get; set; } // Engine (length: 50)
        public string Frame { get; set; } // Frame (length: 50)
        public string Cbm { get; set; } // CBM (length: 50)
        public string YearOfProduction { get; set; } // YearOfProduction (length: 50)
        public string OperationArea { get; set; } // OperationArea (length: 50)

        /// <summary>
        /// Dedicated or Outsourcing
        /// </summary>
        public string OwnerShip { get; set; } // OwnerShip (length: 50)
        public string BaseLocation { get; set; } // BaseLocation (length: 50)
        public string CreatedBy { get; set; } // CreatedBy (length: 30)
        public DateTime? CreatedTime { get; set; } // CreatedTime
        public string DistributionFuelType { get; set; } // DistributionFuelType (length: 50)
        public int? TruckLocationId { get; set; } // TruckLocationID
        public string TruckRemark { get; set; } // TruckRemark (length: 100)
        public byte[] Ts { get; set; } // ts
        public float? Capacity { get; set; } // Capacity
        public float? TankCapacity { get; set; } // TankCapacity
        public float? Norms { get; set; } // Norms
        public decimal? NormsWarning { get; set; } // NormsWarning

        // Foreign keys

        /// <summary>
        /// Parent TruckLocation pointed by [Trucks].([TruckLocationId]) (FK_Truck_Truck_Location)
        /// </summary>
        public virtual TruckLocation TruckLocation { get; set; } // FK_Truck_Truck_Location

        public Truck()
        {
            CreatedTime = DateTime.Now;
            TruckLocationId = 1;
        }
    }

    // TruckLocations
    public class TruckLocation
    {
        public int TruckLocationId { get; set; } // TruckLocationID (Primary key)
        public string TruckLocation_ { get; set; } // TruckLocation (length: 100)
        public int? SiteId { get; set; } // SiteID

        // Reverse navigation

        /// <summary>
        /// Child Trucks where [Trucks].[TruckLocationID] point to this entity (FK_Truck_Truck_Location)
        /// </summary>
        public virtual ICollection<Truck> Trucks { get; set; } // Trucks.FK_Truck_Truck_Location

        // Foreign keys

        /// <summary>
        /// Parent Site pointed by [TruckLocations].([SiteId]) (FK_TruckLocation_site)
        /// </summary>
        public virtual Site Site { get; set; } // FK_TruckLocation_site

        public TruckLocation()
        {
            Trucks = new List<Truck>();
        }
    }

    // Zones
    public class Zone
    {
        public Guid ZoneId { get; set; } // ZoneID (Primary key)
        public string ZoneName { get; set; } // ZoneName (length: 255)
        public int SiteId { get; set; } // SiteID
        public string CreatedBy { get; set; } // CreatedBy (length: 255)
        public DateTime CreatedTime { get; set; } // CreatedTime
        public string UpdateBy { get; set; } // UpdateBy (length: 30)
        public DateTime UpdateeTime { get; set; } // UpdateeTime
        public string RemovedBy { get; set; } // RemovedBy (length: 255)
        public DateTime? RemovedTime { get; set; } // RemovedTime

        // Reverse navigation

        /// <summary>
        /// Child Locations where [Locations].[ZoneID] point to this entity (FK_Location_Zone)
        /// </summary>
        public virtual ICollection<Location> Locations { get; set; } // Locations.FK_Location_Zone

        // Foreign keys

        /// <summary>
        /// Parent Site pointed by [Zones].([SiteId]) (FK_Zone_Site)
        /// </summary>
        public virtual Site Site { get; set; } // FK_Zone_Site

        public Zone()
        {
            ZoneId = Guid.NewGuid();
            CreatedTime = DateTime.Now;
            Locations = new List<Location>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Locations
    public class LocationConfiguration : IEntityTypeConfiguration<Location>
    {
        public void Configure(EntityTypeBuilder<Location> builder)
        {
            builder.ToTable("Locations", "dbo");
            builder.HasKey(x => new { x.LocationCode, x.ShipToCode }).HasName("PK__Location__6F143104466FF3D1").IsClustered();

            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.ShipToName).HasColumnName(@"ShipToName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.LocationCodeMain).HasColumnName(@"LocationCodeMain").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Lat).HasColumnName(@"Lat").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Long).HasColumnName(@"Long").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.IsMain).HasColumnName(@"IsMain").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ZoneId).HasColumnName(@"ZoneID").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.LocatioNearest).HasColumnName(@"LocatioNearest").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.LocationKey).HasColumnName(@"LocationKey").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OpenTime).HasColumnName(@"OpenTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PriorityId).HasColumnName(@"PriorityID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Priority).WithMany(b => b.Locations).HasForeignKey(c => c.PriorityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Location)Priority");
            builder.HasOne(a => a.Zone).WithMany(b => b.Locations).HasForeignKey(c => c.ZoneId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Location_Zone");
        }
    }

    // LocationOptimizeWaypoints
    public class LocationOptimizeWaypointConfiguration : IEntityTypeConfiguration<LocationOptimizeWaypoint>
    {
        public void Configure(EntityTypeBuilder<LocationOptimizeWaypoint> builder)
        {
            builder.ToTable("LocationOptimizeWaypoints", "dbo");
            builder.HasKey(x => new { x.OrderDate, x.CustomerId, x.ShipToCode, x.LocationCode }).HasName("PK__Location__AABD68481E910076").IsClustered();

            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("date").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ShipToCode).HasColumnName(@"ShipToCode").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255).ValueGeneratedNever();
            builder.Property(x => x.LocationCode).HasColumnName(@"LocationCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30).ValueGeneratedNever();
            builder.Property(x => x.RouteIndex).HasColumnName(@"RouteIndex").HasColumnType("int").IsRequired();
            builder.Property(x => x.HubLocationNearest).HasColumnName(@"HubLocationNearest").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Location).WithMany(b => b.LocationOptimizeWaypoints).HasForeignKey(c => new { c.LocationCode, c.ShipToCode }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_LocationOptimizeWayPoints_Location");
        }
    }

    // M_item
    public class MItemConfiguration : IEntityTypeConfiguration<MItem>
    {
        public void Configure(EntityTypeBuilder<MItem> builder)
        {
            builder.ToTable("M_item", "dbo");
            builder.HasKey(x => x.ItemKey).HasName("PK__m_item__37A71F7E539EBCCC").IsClustered();

            builder.Property(x => x.ItemKey).HasColumnName(@"item_key").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64).ValueGeneratedNever();
            builder.Property(x => x.ItemLabel).HasColumnName(@"item_label").HasColumnType("nvarchar(64)").IsRequired().HasMaxLength(64);
            builder.Property(x => x.Editable).HasColumnName(@"editable").HasColumnType("int").IsRequired();
            builder.Property(x => x.Remark).HasColumnName(@"remark").HasColumnType("varchar(150)").IsRequired(false).IsUnicode(false).HasMaxLength(150);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // M_item_value
    public class MItemValueConfiguration : IEntityTypeConfiguration<MItemValue>
    {
        public void Configure(EntityTypeBuilder<MItemValue> builder)
        {
            builder.ToTable("M_item_value", "dbo");
            builder.HasKey(x => new { x.ItemKey, x.Code }).HasName("PK__M_item_v__A4F0CBB1F126230F").IsClustered();

            builder.Property(x => x.ItemKey).HasColumnName(@"item_key").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64).ValueGeneratedNever();
            builder.Property(x => x.Code).HasColumnName(@"code").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Remark).HasColumnName(@"remark").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.IsKey).HasColumnName(@"is_key").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.MItem).WithMany(b => b.MItemValues).HasForeignKey(c => c.ItemKey).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_app_m_item_value_1");
        }
    }

    // Packages
    public class PackageConfiguration : IEntityTypeConfiguration<Package>
    {
        public void Configure(EntityTypeBuilder<Package> builder)
        {
            builder.ToTable("Packages", "dbo");
            builder.HasKey(x => x.PackageId).HasName("PK__Packages__322035ECC8279BEA").IsClustered();

            builder.Property(x => x.PackageId).HasColumnName(@"PackageID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PackageCode).HasColumnName(@"PackageCode").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.PackageName).HasColumnName(@"PackageName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.Inner).HasColumnName(@"Inner").HasColumnType("int").IsRequired();
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Cm3).HasColumnName(@"Cm3").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Hight).HasColumnName(@"Hight").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Width).HasColumnName(@"Width").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.Lenght).HasColumnName(@"Lenght").HasColumnType("decimal(10,3)").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdatedTime).HasColumnName(@"UpdatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.WeightOfPackage).HasColumnName(@"WeightOfPackage").HasColumnType("decimal(10,3)").IsRequired();
        }
    }

    // Priority
    public class PriorityConfiguration : IEntityTypeConfiguration<Priority>
    {
        public void Configure(EntityTypeBuilder<Priority> builder)
        {
            builder.ToTable("Priority", "dbo");
            builder.HasKey(x => x.PriorityId).HasName("PK__Priority__D0A3D0DEB93A4E6B").IsClustered();

            builder.Property(x => x.PriorityId).HasColumnName(@"PriorityID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PriorityName).HasColumnName(@"PriorityName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.PriorityType).HasColumnName(@"PriorityType").HasColumnType("int").IsRequired(false);
        }
    }

    // Sites
    public class SiteConfiguration : IEntityTypeConfiguration<Site>
    {
        public void Configure(EntityTypeBuilder<Site> builder)
        {
            builder.ToTable("Sites", "dbo");
            builder.HasKey(x => x.SiteId).HasName("PK__Sites__B9DCB9039BB07716").IsClustered();

            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SiteName).HasColumnName(@"SiteName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
        }
    }

    // Trucks
    public class TruckConfiguration : IEntityTypeConfiguration<Truck>
    {
        public void Configure(EntityTypeBuilder<Truck> builder)
        {
            builder.ToTable("Trucks", "dbo");
            builder.HasKey(x => new { x.TruckId, x.TruckNumber });

            builder.Property(x => x.TruckId).HasColumnName(@"TruckID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckNumber).HasColumnName(@"TruckNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.TruckTypeId).HasColumnName(@"TruckTypeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OwnerName).HasColumnName(@"OwnerName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OwnerType).HasColumnName(@"OwnerType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RegistrationNumber).HasColumnName(@"RegistrationNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RegistrationNumber2).HasColumnName(@"RegistrationNumber2").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CompartmentType).HasColumnName(@"CompartmentType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Engine).HasColumnName(@"Engine").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Frame).HasColumnName(@"Frame").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Cbm).HasColumnName(@"CBM").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.YearOfProduction).HasColumnName(@"YearOfProduction").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OperationArea).HasColumnName(@"OperationArea").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.OwnerShip).HasColumnName(@"OwnerShip").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BaseLocation).HasColumnName(@"BaseLocation").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DistributionFuelType).HasColumnName(@"DistributionFuelType").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TruckLocationId).HasColumnName(@"TruckLocationID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TruckRemark).HasColumnName(@"TruckRemark").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Ts).HasColumnName(@"ts").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Capacity).HasColumnName(@"Capacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.TankCapacity).HasColumnName(@"TankCapacity").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Norms).HasColumnName(@"Norms").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.NormsWarning).HasColumnName(@"NormsWarning").HasColumnType("decimal(18,3)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.TruckLocation).WithMany(b => b.Trucks).HasForeignKey(c => c.TruckLocationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Truck_Truck_Location");
        }
    }

    // TruckLocations
    public class TruckLocationConfiguration : IEntityTypeConfiguration<TruckLocation>
    {
        public void Configure(EntityTypeBuilder<TruckLocation> builder)
        {
            builder.ToTable("TruckLocations", "dbo");
            builder.HasKey(x => x.TruckLocationId).HasName("PK_TruckLocations").IsClustered();

            builder.Property(x => x.TruckLocationId).HasColumnName(@"TruckLocationID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TruckLocation_).HasColumnName(@"TruckLocation").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Site).WithMany(b => b.TruckLocations).HasForeignKey(c => c.SiteId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TruckLocation_site");
        }
    }

    // Zones
    public class ZoneConfiguration : IEntityTypeConfiguration<Zone>
    {
        public void Configure(EntityTypeBuilder<Zone> builder)
        {
            builder.ToTable("Zones", "dbo");
            builder.HasKey(x => x.ZoneId).HasName("PK__Zones__6016679544FAEF91").IsClustered();

            builder.Property(x => x.ZoneId).HasColumnName(@"ZoneID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ZoneName).HasColumnName(@"ZoneName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
            builder.Property(x => x.SiteId).HasColumnName(@"SiteID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.CreatedTime).HasColumnName(@"CreatedTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.UpdateBy).HasColumnName(@"UpdateBy").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.UpdateeTime).HasColumnName(@"UpdateeTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.RemovedBy).HasColumnName(@"RemovedBy").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.RemovedTime).HasColumnName(@"RemovedTime").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Site).WithMany(b => b.Zones).HasForeignKey(c => c.SiteId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Zone_Site");
        }
    }


    #endregion

}
// </auto-generated>
